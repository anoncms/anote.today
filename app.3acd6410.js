// modules are defined as an array
// [ module function, map of requires ]
//
// map of requires is short require name -> numeric require
//
// anything defined in a previous bundle is accessed via the
// orig method which is the require for previous bundles
parcelRequire = (function (modules, cache, entry, globalName) {
  // Save the require from previous bundle to this closure if any
  var previousRequire = typeof parcelRequire === 'function' && parcelRequire;
  var nodeRequire = typeof require === 'function' && require;

  function newRequire(name, jumped) {
    if (!cache[name]) {
      if (!modules[name]) {
        // if we cannot find the module within our internal map or
        // cache jump to the current global require ie. the last bundle
        // that was added to the page.
        var currentRequire = typeof parcelRequire === 'function' && parcelRequire;
        if (!jumped && currentRequire) {
          return currentRequire(name, true);
        }

        // If there are other bundles on this page the require from the
        // previous one is saved to 'previousRequire'. Repeat this as
        // many times as there are bundles until the module is found or
        // we exhaust the require chain.
        if (previousRequire) {
          return previousRequire(name, true);
        }

        // Try the node require function if it exists.
        if (nodeRequire && typeof name === 'string') {
          return nodeRequire(name);
        }

        var err = new Error('Cannot find module \'' + name + '\'');
        err.code = 'MODULE_NOT_FOUND';
        throw err;
      }

      localRequire.resolve = resolve;
      localRequire.cache = {};

      var module = cache[name] = new newRequire.Module(name);

      modules[name][0].call(module.exports, localRequire, module, module.exports, this);
    }

    return cache[name].exports;

    function localRequire(x){
      return newRequire(localRequire.resolve(x));
    }

    function resolve(x){
      return modules[name][1][x] || x;
    }
  }

  function Module(moduleName) {
    this.id = moduleName;
    this.bundle = newRequire;
    this.exports = {};
  }

  newRequire.isParcelRequire = true;
  newRequire.Module = Module;
  newRequire.modules = modules;
  newRequire.cache = cache;
  newRequire.parent = previousRequire;
  newRequire.register = function (id, exports) {
    modules[id] = [function (require, module) {
      module.exports = exports;
    }, {}];
  };

  var error;
  for (var i = 0; i < entry.length; i++) {
    try {
      newRequire(entry[i]);
    } catch (e) {
      // Save first error but execute all entries
      if (!error) {
        error = e;
      }
    }
  }

  if (entry.length) {
    // Expose entry point to Node, AMD or browser globals
    // Based on https://github.com/ForbesLindesay/umd/blob/master/template.js
    var mainExports = newRequire(entry[entry.length - 1]);

    // CommonJS
    if (typeof exports === "object" && typeof module !== "undefined") {
      module.exports = mainExports;

    // RequireJS
    } else if (typeof define === "function" && define.amd) {
     define(function () {
       return mainExports;
     });

    // <script>
    } else if (globalName) {
      this[globalName] = mainExports;
    }
  }

  // Override the current require with this new one
  parcelRequire = newRequire;

  if (error) {
    // throw error from earlier, _after updating parcelRequire_
    throw error;
  }

  return newRequire;
})({"vpK4":[function(require,module,exports) {

},{}],"vCxL":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.__assign = void 0;
exports.__asyncDelegator = __asyncDelegator;
exports.__asyncGenerator = __asyncGenerator;
exports.__asyncValues = __asyncValues;
exports.__await = __await;
exports.__awaiter = __awaiter;
exports.__classPrivateFieldGet = __classPrivateFieldGet;
exports.__classPrivateFieldSet = __classPrivateFieldSet;
exports.__createBinding = __createBinding;
exports.__decorate = __decorate;
exports.__exportStar = __exportStar;
exports.__extends = __extends;
exports.__generator = __generator;
exports.__importDefault = __importDefault;
exports.__importStar = __importStar;
exports.__makeTemplateObject = __makeTemplateObject;
exports.__metadata = __metadata;
exports.__param = __param;
exports.__read = __read;
exports.__rest = __rest;
exports.__spread = __spread;
exports.__spreadArrays = __spreadArrays;
exports.__values = __values;

/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */

/* global Reflect, Promise */
var extendStatics = function (d, b) {
  extendStatics = Object.setPrototypeOf || {
    __proto__: []
  } instanceof Array && function (d, b) {
    d.__proto__ = b;
  } || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
  };

  return extendStatics(d, b);
};

function __extends(d, b) {
  extendStatics(d, b);

  function __() {
    this.constructor = d;
  }

  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}

var __assign = function () {
  exports.__assign = __assign = Object.assign || function __assign(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];

      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
    }

    return t;
  };

  return __assign.apply(this, arguments);
};

exports.__assign = __assign;

function __rest(s, e) {
  var t = {};

  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];

  if (s != null && typeof Object.getOwnPropertySymbols === "function") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
  }
  return t;
}

function __decorate(decorators, target, key, desc) {
  var c = arguments.length,
      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
      d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
}

function __param(paramIndex, decorator) {
  return function (target, key) {
    decorator(target, key, paramIndex);
  };
}

function __metadata(metadataKey, metadataValue) {
  if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(metadataKey, metadataValue);
}

function __awaiter(thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function (resolve) {
      resolve(value);
    });
  }

  return new (P || (P = Promise))(function (resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }

    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }

    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }

    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
}

function __generator(thisArg, body) {
  var _ = {
    label: 0,
    sent: function () {
      if (t[0] & 1) throw t[1];
      return t[1];
    },
    trys: [],
    ops: []
  },
      f,
      y,
      t,
      g;
  return g = {
    next: verb(0),
    "throw": verb(1),
    "return": verb(2)
  }, typeof Symbol === "function" && (g[Symbol.iterator] = function () {
    return this;
  }), g;

  function verb(n) {
    return function (v) {
      return step([n, v]);
    };
  }

  function step(op) {
    if (f) throw new TypeError("Generator is already executing.");

    while (_) try {
      if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
      if (y = 0, t) op = [op[0] & 2, t.value];

      switch (op[0]) {
        case 0:
        case 1:
          t = op;
          break;

        case 4:
          _.label++;
          return {
            value: op[1],
            done: false
          };

        case 5:
          _.label++;
          y = op[1];
          op = [0];
          continue;

        case 7:
          op = _.ops.pop();

          _.trys.pop();

          continue;

        default:
          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
            _ = 0;
            continue;
          }

          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
            _.label = op[1];
            break;
          }

          if (op[0] === 6 && _.label < t[1]) {
            _.label = t[1];
            t = op;
            break;
          }

          if (t && _.label < t[2]) {
            _.label = t[2];

            _.ops.push(op);

            break;
          }

          if (t[2]) _.ops.pop();

          _.trys.pop();

          continue;
      }

      op = body.call(thisArg, _);
    } catch (e) {
      op = [6, e];
      y = 0;
    } finally {
      f = t = 0;
    }

    if (op[0] & 5) throw op[1];
    return {
      value: op[0] ? op[1] : void 0,
      done: true
    };
  }
}

function __createBinding(o, m, k, k2) {
  if (k2 === undefined) k2 = k;
  o[k2] = m[k];
}

function __exportStar(m, exports) {
  for (var p in m) if (p !== "default" && !exports.hasOwnProperty(p)) exports[p] = m[p];
}

function __values(o) {
  var s = typeof Symbol === "function" && Symbol.iterator,
      m = s && o[s],
      i = 0;
  if (m) return m.call(o);
  if (o && typeof o.length === "number") return {
    next: function () {
      if (o && i >= o.length) o = void 0;
      return {
        value: o && o[i++],
        done: !o
      };
    }
  };
  throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
}

function __read(o, n) {
  var m = typeof Symbol === "function" && o[Symbol.iterator];
  if (!m) return o;
  var i = m.call(o),
      r,
      ar = [],
      e;

  try {
    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
  } catch (error) {
    e = {
      error: error
    };
  } finally {
    try {
      if (r && !r.done && (m = i["return"])) m.call(i);
    } finally {
      if (e) throw e.error;
    }
  }

  return ar;
}

function __spread() {
  for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));

  return ar;
}

function __spreadArrays() {
  for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;

  for (var r = Array(s), k = 0, i = 0; i < il; i++) for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++) r[k] = a[j];

  return r;
}

;

function __await(v) {
  return this instanceof __await ? (this.v = v, this) : new __await(v);
}

function __asyncGenerator(thisArg, _arguments, generator) {
  if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
  var g = generator.apply(thisArg, _arguments || []),
      i,
      q = [];
  return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () {
    return this;
  }, i;

  function verb(n) {
    if (g[n]) i[n] = function (v) {
      return new Promise(function (a, b) {
        q.push([n, v, a, b]) > 1 || resume(n, v);
      });
    };
  }

  function resume(n, v) {
    try {
      step(g[n](v));
    } catch (e) {
      settle(q[0][3], e);
    }
  }

  function step(r) {
    r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);
  }

  function fulfill(value) {
    resume("next", value);
  }

  function reject(value) {
    resume("throw", value);
  }

  function settle(f, v) {
    if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]);
  }
}

function __asyncDelegator(o) {
  var i, p;
  return i = {}, verb("next"), verb("throw", function (e) {
    throw e;
  }), verb("return"), i[Symbol.iterator] = function () {
    return this;
  }, i;

  function verb(n, f) {
    i[n] = o[n] ? function (v) {
      return (p = !p) ? {
        value: __await(o[n](v)),
        done: n === "return"
      } : f ? f(v) : v;
    } : f;
  }
}

function __asyncValues(o) {
  if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
  var m = o[Symbol.asyncIterator],
      i;
  return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () {
    return this;
  }, i);

  function verb(n) {
    i[n] = o[n] && function (v) {
      return new Promise(function (resolve, reject) {
        v = o[n](v), settle(resolve, reject, v.done, v.value);
      });
    };
  }

  function settle(resolve, reject, d, v) {
    Promise.resolve(v).then(function (v) {
      resolve({
        value: v,
        done: d
      });
    }, reject);
  }
}

function __makeTemplateObject(cooked, raw) {
  if (Object.defineProperty) {
    Object.defineProperty(cooked, "raw", {
      value: raw
    });
  } else {
    cooked.raw = raw;
  }

  return cooked;
}

;

function __importStar(mod) {
  if (mod && mod.__esModule) return mod;
  var result = {};
  if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
  result.default = mod;
  return result;
}

function __importDefault(mod) {
  return mod && mod.__esModule ? mod : {
    default: mod
  };
}

function __classPrivateFieldGet(receiver, privateMap) {
  if (!privateMap.has(receiver)) {
    throw new TypeError("attempted to get private field on non-instance");
  }

  return privateMap.get(receiver);
}

function __classPrivateFieldSet(receiver, privateMap, value) {
  if (!privateMap.has(receiver)) {
    throw new TypeError("attempted to set private field on non-instance");
  }

  privateMap.set(receiver, value);
  return value;
}
},{}],"nfKU":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.SMART_ASSET_EXTRA_FEE = exports.MAX_ALIAS_LENGTH = exports.DEFAULT_OPTIONS = exports.DEFAULT_BROADCAST_OPTIONS = void 0;
var DEFAULT_OPTIONS = {
  NODE_URL: 'https://nodes.wavesnodes.com',
  LOG_LEVEL: 'production'
};
exports.DEFAULT_OPTIONS = DEFAULT_OPTIONS;
var DEFAULT_BROADCAST_OPTIONS = {
  chain: false,
  confirmations: -1
};
exports.DEFAULT_BROADCAST_OPTIONS = DEFAULT_BROADCAST_OPTIONS;
var MAX_ALIAS_LENGTH = 30;
exports.MAX_ALIAS_LENGTH = MAX_ALIAS_LENGTH;
var SMART_ASSET_EXTRA_FEE = 0.004 * Math.pow(10, 8);
exports.SMART_ASSET_EXTRA_FEE = SMART_ASSET_EXTRA_FEE;
},{}],"wnK3":[function(require,module,exports) {
var define;
!function(e,n){"object"==typeof exports&&"object"==typeof module?module.exports=n():"function"==typeof define&&define.amd?define([],n):"object"==typeof exports?exports.clientLogs=n():e.clientLogs=n()}(this,(function(){return function(e){var n={};function t(r){if(n[r])return n[r].exports;var o=n[r]={i:r,l:!1,exports:{}};return e[r].call(o.exports,o,o.exports,t),o.l=!0,o.exports}return t.m=e,t.c=n,t.d=function(e,n,r){t.o(e,n)||Object.defineProperty(e,n,{enumerable:!0,get:r})},t.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},t.t=function(e,n){if(1&n&&(e=t(e)),8&n)return e;if(4&n&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(t.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&n&&"string"!=typeof e)for(var o in e)t.d(r,o,function(n){return e[n]}.bind(null,o));return r},t.n=function(e){var n=e&&e.__esModule?function(){return e.default}:function(){return e};return t.d(n,"a",n),n},t.o=function(e,n){return Object.prototype.hasOwnProperty.call(e,n)},t.p="",t(t.s=0)}([function(e,n,t){"use strict";t.r(n);var r=["info","log","warn","error"],o={keepMessageCount:100,keepMessageTypes:["error"],logMessageTypes:["error"],namespace:void 0},s=function(e){return e.reduce((function(e,n){return e[n]=!0,e}),Object.create(null))},u=function(){function e(e){this._messages=[],this._maxLength=e}return e.prototype.push=function(e){this._messages.push(e),this._messages.length>this._maxLength&&this._messages.splice(0,this._messages.length-this._maxLength)},e.prototype.getMessages=function(e){var n,t,o=s(null!=(t=null===(n=e)||void 0===n?void 0:n.messageTypes)?t:r);return this._messages.filter((function(e){return o[e.type]}))},e}();function a(e){return e}t.d(n,"makeConsole",(function(){return p})),t.d(n,"version",(function(){return f})),t.d(n,"makeOptions",(function(){return l}));var i=function(){return(i=Object.assign||function(e){for(var n,t=1,r=arguments.length;t<r;t++)for(var o in n=arguments[t])Object.prototype.hasOwnProperty.call(n,o)&&(e[o]=n[o]);return e}).apply(this,arguments)},c=function(){for(var e=0,n=0,t=arguments.length;n<t;n++)e+=arguments[n].length;var r=Array(e),o=0;for(n=0;n<t;n++)for(var s=arguments[n],u=0,a=s.length;u<a;u++,o++)r[o]=s[u];return r},p=function(e){var n=i(i({},o),null!=e?e:{}),t=new u(n.keepMessageCount),p=s(n.logMessageTypes),f=s(n.keepMessageTypes);return r.reduce((function(e,r){var o=null!=n.namespace?function(e){return c([n.namespace],e)}:a,s=p[r]?console[r]:a,u=f[r]?function(e){return t.push({type:r,args:e})}:a;return e[r]=function(){for(var e=[],n=0;n<arguments.length;n++)e[n]=arguments[n];var t=o(e);s.apply(void 0,t),u(t)},e}),{getMessages:function(e){return t.getMessages(e)}})},f="1.0.0";function l(e,n){switch(e){case"production":return i(i({},o),{keepMessageTypes:["error"],logMessageTypes:[],namespace:n});case"error":return i(i({},o),{keepMessageTypes:["warn","error"],logMessageTypes:["error"],namespace:n});case"verbose":return i(i({},o),{keepMessageTypes:[],logMessageTypes:r.slice(),namespace:n})}}n.default=p}])}));
},{}],"nMtR":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
function default_1(path, base) {
    return new URL(path, base).toString();
}
exports.default = default_1;

},{}],"VMBr":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var reg = new RegExp('((?!\\\\)"\\w+"):\\s*(-?[\\d|\\.]{14,})', 'g');
function default_1(json) {
    return JSON.parse(json.replace(reg, "$1:\"$2\""));
}
exports.default = default_1;

},{}],"KBaF":[function(require,module,exports) {

"use strict"; // ref: https://github.com/tc39/proposal-global

var getGlobal = function () {
  // the only reliable means to get the global object is
  // `Function('return this')()`
  // However, this causes CSP violations in Chrome apps.
  if (typeof self !== 'undefined') {
    return self;
  }

  if (typeof window !== 'undefined') {
    return window;
  }

  if (typeof global !== 'undefined') {
    return global;
  }

  throw new Error('unable to locate global object');
};

var global = getGlobal();
module.exports = exports = global.fetch; // Needed for TypeScript and Webpack.

if (global.fetch) {
  exports.default = global.fetch.bind(global);
}

exports.Headers = global.Headers;
exports.Request = global.Request;
exports.Response = global.Response;
},{}],"q2VP":[function(require,module,exports) {
"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.parseResponse = void 0;
var resolve_1 = __importDefault(require("./resolve"));
var parse_1 = __importDefault(require("./parse"));
var request = typeof fetch === 'function' ? fetch : require('node-fetch');
function default_1(params) {
    return request(resolve_1.default(params.url, params.base), updateHeaders(params.options))
        .then(parseResponse);
}
exports.default = default_1;
function parseResponse(r) {
    return r.text().then(function (message) { return r.ok ? parse_1.default(message) : Promise.reject(tryParse(message)); });
}
exports.parseResponse = parseResponse;
function tryParse(message) {
    try {
        return JSON.parse(message);
    }
    catch (e) {
        return message;
    }
}
function updateHeaders(options) {
    if (options === void 0) { options = Object.create(null); }
    return __assign({ credentials: 'include' }, options);
}

},{"./resolve":"nMtR","./parse":"VMBr","node-fetch":"KBaF"}],"ZcJV":[function(require,module,exports) {

"use strict";
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.pipe = exports.switchTransactionByType = exports.uniq = exports.indexBy = exports.filter = exports.map = exports.deepAssign = exports.assign = exports.values = exports.entries = exports.keys = exports.prop = exports.wait = exports.head = exports.toArray = exports.isObject = void 0;
function isObject(obj) {
    if (typeof obj === "object" && obj !== null) {
        if (typeof Object.getPrototypeOf === "function") {
            var prototype = Object.getPrototypeOf(obj);
            return prototype === Object.prototype || prototype === null;
        }
        return Object.prototype.toString.call(obj) === "[object Object]";
    }
    return false;
}
exports.isObject = isObject;
function toArray(data) {
    return Array.isArray(data) ? data : [data];
}
exports.toArray = toArray;
function head(data) {
    return data[0];
}
exports.head = head;
function wait(time) {
    return new Promise(function (resolve) {
        setTimeout(resolve, time);
    });
}
exports.wait = wait;
function prop(key) {
    return function (data) { return data[key]; };
}
exports.prop = prop;
exports.keys = function (obj) {
    return Object.keys(obj);
};
exports.entries = function (obj) {
    return exports.keys(obj).map(function (name) { return [name, obj[name]]; });
};
exports.values = function (obj) {
    return exports.keys(obj).map(function (key) { return obj[key]; });
};
exports.assign = function (target, merge) {
    return exports.entries(merge).reduce(function (acc, _a) {
        var _b = __read(_a, 2), key = _b[0], value = _b[1];
        target[key] = value;
        return target;
    }, target);
};
exports.deepAssign = function () {
    var objects = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        objects[_i] = arguments[_i];
    }
    return objects.reduce(function (target, merge) {
        exports.keys(merge).forEach(function (key) {
            if (Array.isArray(target[key]) && Array.isArray(merge[key])) {
                target[key] = Array.from(new Set(target[key].concat(merge[key])));
            }
            else if (isObject(target[key]) && isObject(merge[key])) {
                target[key] = exports.deepAssign(target[key], merge[key]);
            }
            else {
                target[key] = merge[key];
            }
        });
        return target;
    }, objects[0] || {});
};
function map(process) {
    return function (list) { return list.map(process); };
}
exports.map = map;
function filter(process) {
    return function (list) { return list.filter(process); };
}
exports.filter = filter;
function indexBy(process, data) {
    return data.reduce(function (acc, item) {
        acc[process(item)] = item;
        return acc;
    }, {});
}
exports.indexBy = indexBy;
exports.uniq = function (list) {
    return exports.keys(list.reduce(function (acc, item) {
        if (item != null)
            acc[item] = item;
        return acc;
    }, Object.create(null)));
};
function switchTransactionByType(choices) {
    return function (tx) { return choices[tx.type] && typeof choices[tx.type] === 'function' ? choices[tx.type](tx) : undefined; };
}
exports.switchTransactionByType = switchTransactionByType;
exports.pipe = function () {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    return function (data) { return args.reduce(function (acc, item) { return item(acc); }, data); };
};

},{}],"sZco":[function(require,module,exports) {
"use strict";
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
Object.defineProperty(exports, "__esModule", { value: true });
var utils_1 = require("./utils");
function default_1(params, evolver) {
    if (evolver === void 0) { evolver = Object.create(null); }
    var query = Object.keys(params)
        .map(function (key) { return [key, params[key]]; })
        .map(function (_a) {
        var _b = __read(_a, 2), key = _b[0], value = _b[1];
        return [key, Object.prototype.hasOwnProperty.call(evolver, key) ? evolver[key](value) : value];
    })
        .filter(function (_a) {
        var _b = __read(_a, 2), key = _b[0], value = _b[1];
        return value != null;
    })
        .map(function (_a) {
        var _b = __read(_a, 2), key = _b[0], value = _b[1];
        return utils_1.toArray(value).map(function (v) { return key + "=" + v; }).join('&');
    })
        .join('&');
    return query.length ? "?" + query : '';
}
exports.default = default_1;
;

},{"./utils":"ZcJV"}],"lmIF":[function(require,module,exports) {
"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.fetchAddresses = exports.fetchPublicKey = exports.fetchSeed = exports.fetchSeq = exports.fetchEffectiveBalance = exports.fetchEffectiveBalanceConfirmations = exports.deleteAddressFromWallet = exports.fetchMultipleBalance = exports.fetchBalance = exports.fetchValidate = exports.data = exports.fetchScriptInfo = exports.fetchBalanceConfirmations = exports.fetchBalanceDetails = exports.fetchScriptInfoMeta = exports.fetchDataKey = void 0;
var request_1 = __importStar(require("../../tools/request"));
var query_1 = __importDefault(require("../../tools/query"));
function fetchDataKey(base, address, key, options) {
    if (options === void 0) { options = Object.create(null); }
    return request_1.default({
        base: base,
        url: "/addresses/data/" + address + "/" + encodeURIComponent(key),
        options: options
    });
}
exports.fetchDataKey = fetchDataKey;
function fetchScriptInfoMeta(base, address) {
    return request_1.default({
        base: base,
        url: "/addresses/scriptInfo/" + address + "/meta"
    });
}
exports.fetchScriptInfoMeta = fetchScriptInfoMeta;
function fetchBalanceDetails(base, address, options) {
    if (options === void 0) { options = Object.create(null); }
    return request_1.default({
        base: base,
        url: "/addresses/balance/details/" + address,
        options: options
    });
}
exports.fetchBalanceDetails = fetchBalanceDetails;
function fetchBalanceConfirmations(base, address, confirmations, options) {
    if (options === void 0) { options = Object.create(null); }
    return request_1.default({
        base: base,
        url: "/addresses/balance/" + address + "/" + confirmations,
        options: options
    });
}
exports.fetchBalanceConfirmations = fetchBalanceConfirmations;
function fetchScriptInfo(base, address, options) {
    if (options === void 0) { options = Object.create(null); }
    return request_1.default({
        base: base,
        url: "/addresses/scriptInfo/" + address,
        options: options
    });
}
exports.fetchScriptInfo = fetchScriptInfo;
function data(base, address, params, options) {
    if (params === void 0) { params = Object.create(null); }
    if (options === void 0) { options = Object.create(null); }
    return request_1.default({
        base: base,
        url: "/addresses/data/" + address + query_1.default(params),
        options: options
    });
}
exports.data = data;
function fetchValidate(base, address) {
    return request_1.default({
        base: base,
        url: "/addresses/validate/" + address
    });
}
exports.fetchValidate = fetchValidate;
function fetchBalance(base, address, options) {
    if (options === void 0) { options = Object.create(null); }
    return request_1.default({
        base: base,
        url: "/addresses/balance/" + address,
        options: options
    });
}
exports.fetchBalance = fetchBalance;
function fetchMultipleBalance(base, addresses, options) {
    if (options === void 0) { options = Object.create(null); }
    return fetch(base + "/addresses/balance", {
        method: "POST",
        body: JSON.stringify({ addresses: addresses }),
        headers: {
            "Content-Type": "application/json"
        }
    }).then(request_1.parseResponse);
}
exports.fetchMultipleBalance = fetchMultipleBalance;
function deleteAddressFromWallet(base, address, options) {
    if (options === void 0) { options = Object.create(null); }
    return request_1.default({
        base: base,
        url: "/addresses/" + address,
        options: __assign(__assign({}, options), { method: 'DELETE' })
    });
}
exports.deleteAddressFromWallet = deleteAddressFromWallet;
function fetchEffectiveBalanceConfirmations(base, address, confirmations, options) {
    if (options === void 0) { options = Object.create(null); }
    return request_1.default({
        base: base,
        url: "/addresses/effectiveBalance/" + address + "/" + confirmations,
        options: options
    });
}
exports.fetchEffectiveBalanceConfirmations = fetchEffectiveBalanceConfirmations;
function fetchEffectiveBalance(base, address, options) {
    if (options === void 0) { options = Object.create(null); }
    return request_1.default({
        base: base,
        url: "/addresses/effectiveBalance/" + address,
        options: options
    });
}
exports.fetchEffectiveBalance = fetchEffectiveBalance;
function fetchSeq(base, from, to) {
    return request_1.default({
        base: base,
        url: "/addresses/seq/" + from + "/" + to
    });
}
exports.fetchSeq = fetchSeq;
function fetchSeed(base, address) {
    return request_1.default({
        base: base,
        url: "/addresses/seed/" + address
    });
}
exports.fetchSeed = fetchSeed;
function fetchPublicKey(base, publicKey) {
    return request_1.default({
        base: base,
        url: "/addresses/publicKey/" + publicKey
    });
}
exports.fetchPublicKey = fetchPublicKey;
function fetchAddresses(base) {
    return request_1.default({
        base: base,
        url: '/addresses'
    });
}
exports.fetchAddresses = fetchAddresses;

},{"../../tools/request":"q2VP","../../tools/query":"sZco"}],"ck6C":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var src_1 = require("../src");

},{"../src":"UGFq"}],"oHUA":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });

},{}],"UGFq":[function(require,module,exports) {
"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !exports.hasOwnProperty(p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.DATA_FIELD_TYPE = exports.TRANSACTION_TYPE = exports.BINARY_DATA_TYPE = exports.STRING_DATA_TYPE = exports.BOOLEAN_DATA_TYPE = exports.INTEGER_DATA_TYPE = exports.ETHEREUM = exports.UPDATE_ASSET_INFO_TYPE = exports.INVOKE_SCRIPT_TYPE = exports.SET_ASSET_SCRIPT_TYPE = exports.SPONSORSHIP_TYPE = exports.SET_SCRIPT_TYPE = exports.DATA_TYPE = exports.MASS_TRANSFER_TYPE = exports.ALIAS_TYPE = exports.CANCEL_LEASE_TYPE = exports.LEASE_TYPE = exports.EXCHANGE_TYPE = exports.BURN_TYPE = exports.REISSUE_TYPE = exports.TRANSFER_TYPE = exports.ISSUE_TYPE = exports.PAYMENT_TYPE = exports.GENESIS_TYPE = void 0;
__exportStar(require("../transactions"), exports);
__exportStar(require("./parts"), exports);
exports.GENESIS_TYPE = 1;
exports.PAYMENT_TYPE = 2;
exports.ISSUE_TYPE = 3;
exports.TRANSFER_TYPE = 4;
exports.REISSUE_TYPE = 5;
exports.BURN_TYPE = 6;
exports.EXCHANGE_TYPE = 7;
exports.LEASE_TYPE = 8;
exports.CANCEL_LEASE_TYPE = 9;
exports.ALIAS_TYPE = 10;
exports.MASS_TRANSFER_TYPE = 11;
exports.DATA_TYPE = 12;
exports.SET_SCRIPT_TYPE = 13;
exports.SPONSORSHIP_TYPE = 14;
exports.SET_ASSET_SCRIPT_TYPE = 15;
exports.INVOKE_SCRIPT_TYPE = 16;
exports.UPDATE_ASSET_INFO_TYPE = 17;
exports.ETHEREUM = 18;
exports.INTEGER_DATA_TYPE = 'integer';
exports.BOOLEAN_DATA_TYPE = 'boolean';
exports.STRING_DATA_TYPE = 'string';
exports.BINARY_DATA_TYPE = 'binary';
exports.TRANSACTION_TYPE = {
    GENESIS: exports.GENESIS_TYPE,
    PAYMENT: exports.PAYMENT_TYPE,
    ISSUE: exports.ISSUE_TYPE,
    TRANSFER: exports.TRANSFER_TYPE,
    REISSUE: exports.REISSUE_TYPE,
    BURN: exports.BURN_TYPE,
    EXCHANGE: exports.EXCHANGE_TYPE,
    LEASE: exports.LEASE_TYPE,
    CANCEL_LEASE: exports.CANCEL_LEASE_TYPE,
    ALIAS: exports.ALIAS_TYPE,
    MASS_TRANSFER: exports.MASS_TRANSFER_TYPE,
    DATA: exports.DATA_TYPE,
    SET_SCRIPT: exports.SET_SCRIPT_TYPE,
    SPONSORSHIP: exports.SPONSORSHIP_TYPE,
    SET_ASSET_SCRIPT: exports.SET_ASSET_SCRIPT_TYPE,
    INVOKE_SCRIPT: exports.INVOKE_SCRIPT_TYPE,
    UPDATE_ASSET_INFO: exports.UPDATE_ASSET_INFO_TYPE,
    ETHEREUM: exports.ETHEREUM,
};
exports.DATA_FIELD_TYPE = {
    INTEGER: exports.INTEGER_DATA_TYPE,
    BOOLEAN: exports.BOOLEAN_DATA_TYPE,
    STRING: exports.STRING_DATA_TYPE,
    BINARY: exports.BINARY_DATA_TYPE,
};

},{"../transactions":"ck6C","./parts":"oHUA"}],"ZNem":[function(require,module,exports) {
"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.convertEthAssetId = exports.fetchBalanceAddressAssetId = exports.fetchAssetsBalance = exports.fetchAssetsNft = exports.fetchAssetsAddressLimit = exports.fetchAssetDistribution = exports.fetchAssetsDetails = exports.fetchDetails = void 0;
var ts_types_1 = require("@waves/ts-types");
var request_1 = __importDefault(require("../../tools/request"));
var utils_1 = require("../../tools/utils");
var query_1 = __importDefault(require("../../tools/query"));
function fetchDetails(base, assetId, options) {
    if (options === void 0) { options = Object.create(null); }
    var isOnce = !Array.isArray(assetId);
    return Promise.all(utils_1.toArray(assetId).map(function (id) { return request_1.default({
        base: base,
        url: "/assets/details/" + id,
        options: options
    }); }))
        .then(function (list) { return isOnce ? list[0] : list; });
}
exports.fetchDetails = fetchDetails;
/**
 * POST /assets/details
 * Provides detailed information about the given assets
 */
function fetchAssetsDetails(base, assetIds, options) {
    if (options === void 0) { options = Object.create(null); }
    var body = JSON.stringify({ ids: assetIds });
    var _options = __assign(__assign({}, options), { body: body, headers: {
            'content-type': 'application/json'
        }, method: 'POST' });
    return request_1.default({ base: base, url: "/assets/details", options: _options });
}
exports.fetchAssetsDetails = fetchAssetsDetails;
function fetchAssetDistribution(base, assetId, height, limit, options) {
    if (options === void 0) { options = Object.create(null); }
    return request_1.default({ base: base, url: "/assets/" + assetId + "/distribution/" + height + "/limit/" + limit, options: options });
}
exports.fetchAssetDistribution = fetchAssetDistribution;
/**
 * TODO
 * GET /assets/{assetId}/distribution
 * Asset balance distribution
 */
function fetchAssetsAddressLimit(base, address, limit, options) {
    if (options === void 0) { options = Object.create(null); }
    return request_1.default({ base: base, url: "assets/nft/" + address + "/limit/" + limit, options: options });
}
exports.fetchAssetsAddressLimit = fetchAssetsAddressLimit;
function fetchAssetsNft(base, _a, options) {
    var address = _a.address, limit = _a.limit, after = _a.after;
    if (options === void 0) { options = Object.create(null); }
    var url = new URL("assets/nft/" + address + "/limit/" + limit, base);
    if (after) {
        url.searchParams.append('after', after);
    }
    return request_1.default({ base: base, url: "" + url.pathname + url.search, options: options });
}
exports.fetchAssetsNft = fetchAssetsNft;
function fetchAssetsBalance(base, address, options) {
    if (options === void 0) { options = Object.create(null); }
    return __awaiter(this, void 0, void 0, function () {
        var balancesResponse, assetsWithoutIssueTransaction, detailsIds, assetsDetailsResponse;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, request_1.default({ base: base, url: "/assets/balance/" + address, options: options })];
                case 1:
                    balancesResponse = _a.sent();
                    assetsWithoutIssueTransaction = balancesResponse.balances.reduce(function (acc, balance, index) {
                        if (!balance.issueTransaction) {
                            acc[balance.assetId] = index;
                        }
                        return acc;
                    }, {});
                    detailsIds = Object.keys(assetsWithoutIssueTransaction);
                    if (!detailsIds.length) return [3 /*break*/, 3];
                    return [4 /*yield*/, fetchAssetsDetails(base, detailsIds, options)];
                case 2:
                    assetsDetailsResponse = _a.sent();
                    assetsDetailsResponse.forEach(function (assetDetails) {
                        if ('error' in assetDetails) {
                            return;
                        }
                        var assetIndex = assetsWithoutIssueTransaction[assetDetails.assetId];
                        var assetBalance = balancesResponse.balances[assetIndex];
                        if (!assetBalance) {
                            return;
                        }
                        assetBalance.issueTransaction = {
                            id: assetDetails.originTransactionId,
                            name: assetDetails.name,
                            decimals: assetDetails.decimals,
                            description: assetDetails.description,
                            quantity: assetDetails.quantity,
                            reissuable: assetDetails.reissuable,
                            sender: assetDetails.issuer,
                            senderPublicKey: assetDetails.issuerPublicKey,
                            timestamp: assetDetails.issueTimestamp,
                            height: assetDetails.issueHeight,
                            script: assetDetails.scripted ? '-' : null,
                            proofs: [],
                            fee: Math.pow(10, 8),
                            feeAssetId: null,
                            version: 3,
                            type: ts_types_1.TRANSACTION_TYPE.ISSUE,
                            chainId: 0
                        };
                    });
                    _a.label = 3;
                case 3: return [2 /*return*/, balancesResponse];
            }
        });
    });
}
exports.fetchAssetsBalance = fetchAssetsBalance;
function fetchBalanceAddressAssetId(base, address, assetId, options) {
    if (options === void 0) { options = Object.create(null); }
    return request_1.default({ base: base, url: "/assets/balance/" + address + "/" + assetId, options: options });
}
exports.fetchBalanceAddressAssetId = fetchBalanceAddressAssetId;
function convertEthAssetId(base, assetId) {
    return request_1.default({ base: base, url: "/eth/assets" + query_1.default({ id: assetId }) }).then(function (assets) { return assets[0].assetId; });
}
exports.convertEthAssetId = convertEthAssetId;

},{"@waves/ts-types":"UGFq","../../tools/request":"q2VP","../../tools/utils":"ZcJV","../../tools/query":"sZco"}],"KhOZ":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.TRANSACTION_STATUSES = exports.NAME_MAP = exports.TYPE_MAP = void 0;
exports.TYPE_MAP = {
    3: 'issue',
    4: 'transfer',
    5: 'reissue',
    6: 'burn',
    7: 'exchange',
    8: 'lease',
    9: 'cancelLease',
    10: 'alias',
    11: 'massTransfer',
    12: 'data',
    13: 'setScript',
    14: 'sponsorship',
    15: 'setAssetScript',
    16: 'invoke',
    17: 'updateAsset'
};
exports.NAME_MAP = {
    'issue': 3,
    'transfer': 4,
    'reissue': 5,
    'burn': 6,
    'exchange': 7,
    'lease': 8,
    'cancelLease': 9,
    'alias': 10,
    'massTransfer': 11,
    'data': 12,
    'setScript': 13,
    'sponsorship': 14,
    'setAssetScript': 15,
    'invoke': 16,
    'updateAsset': 17
};
exports.TRANSACTION_STATUSES = {
    IN_BLOCKCHAIN: 'in_blockchain',
    UNCONFIRMED: 'unconfirmed',
    NOT_FOUND: 'not_found'
};

},{}],"KJKX":[function(require,module,exports) {
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.fetchHeightByTimestamp = exports.fetchHeight = exports.fetchDelay = exports.fetchLast = exports.fetchBlocksByAddress = exports.fetchFirst = exports.fetchBlockById = exports.fetchSeq = exports.fetchBlockAt = exports.fetchHeadersById = exports.fetchHeadersAt = exports.fetchHeightById = exports.fetchHeadersLast = exports.fetchHeadersSeq = void 0;
var request_1 = __importDefault(require("../../tools/request"));
/**
 * GET /blocks/headers/seq/{from}/{to}
 * Get block headers at specified heights
 * @param base
 * @param from
 * @param to
 */
function fetchHeadersSeq(base, from, to, options) {
    if (options === void 0) { options = Object.create(null); }
    return request_1.default({
        base: base,
        url: "/blocks/headers/seq/" + from + "/" + to,
        options: options
    });
}
exports.fetchHeadersSeq = fetchHeadersSeq;
/**
 * GET /blocks/headers/last
 * Last block header
 * @param base
 */
function fetchHeadersLast(base, options) {
    if (options === void 0) { options = Object.create(null); }
    return request_1.default({
        base: base,
        url: "/blocks/headers/last",
        options: options
    });
}
exports.fetchHeadersLast = fetchHeadersLast;
/**
 * GET /blocks/height/{id}
 * Height of a block by its id
 * @param base
 * @param id
 */
function fetchHeightById(base, id) {
    return request_1.default({
        base: base,
        url: "/blocks/height/" + id
    });
}
exports.fetchHeightById = fetchHeightById;
/**
 * GET /blocks/headers/at/{height}
 * Block header at height
 * @param base
 * @param height
 */
function fetchHeadersAt(base, height, options) {
    if (options === void 0) { options = Object.create(null); }
    return request_1.default({
        base: base,
        url: "/blocks/headers/at/" + height,
        options: options
    });
}
exports.fetchHeadersAt = fetchHeadersAt;
/**
 * GET /blocks/headers/{id}
 * Get block at specified height
 * @param base
 * @param height
 */
function fetchHeadersById(base, id, options) {
    if (options === void 0) { options = Object.create(null); }
    return request_1.default({
        base: base,
        url: "/blocks/headers/" + id,
        options: options
    });
}
exports.fetchHeadersById = fetchHeadersById;
/**
 * GET /blocks/at/{height}
 * Get block at specified height
 * @param base
 * @param height
 */
function fetchBlockAt(base, height, options) {
    if (options === void 0) { options = Object.create(null); }
    return request_1.default({
        base: base,
        url: "/blocks/at/" + height,
        options: options
    });
}
exports.fetchBlockAt = fetchBlockAt;
/**
 * GET /blocks/seq/{from}/{to}
 * Block range
 * @param base
 * @param from
 * @param to
 */
function fetchSeq(base, from, to, options) {
    if (options === void 0) { options = Object.create(null); }
    return request_1.default({
        base: base,
        url: "/blocks/seq/" + from + "/" + to,
        options: options
    });
}
exports.fetchSeq = fetchSeq;
/**
 * GET /blocks/{id}
 * Get block by its id
 * @param base
 * @param id
 */
function fetchBlockById(base, id, options) {
    if (options === void 0) { options = Object.create(null); }
    return request_1.default({
        base: base,
        url: "/blocks/" + id,
        options: options
    });
}
exports.fetchBlockById = fetchBlockById;
/**
 * GET /blocks/first
 * Get genesis block
 * @param base
 */
function fetchFirst(base, options) {
    if (options === void 0) { options = Object.create(null); }
    return request_1.default({
        base: base,
        url: "/blocks/first",
        options: options
    });
}
exports.fetchFirst = fetchFirst;
/**
 * /blocks/address/{address}/{from}/{to}
 * Get list of blocks generated by specified address
 * @param base
 * @param address
 * @param from
 * @param to
 */
function fetchBlocksByAddress(base, address, from, to, options) {
    if (options === void 0) { options = Object.create(null); }
    return request_1.default({
        base: base,
        url: "/blocks/address/" + address + "/" + from + "/" + to,
        options: options
    });
}
exports.fetchBlocksByAddress = fetchBlocksByAddress;
/**
 * GET /blocks/last
 * Last block
 * @param base
 */
function fetchLast(base, options) {
    if (options === void 0) { options = Object.create(null); }
    return request_1.default({
        base: base,
        url: '/blocks/last',
        options: options
    });
}
exports.fetchLast = fetchLast;
/**
 * GET /blocks/delay/{id}/{blockNum}
 * Average delay in milliseconds between last blockNum blocks starting from block with id
 * @param base
 * @param id
 * @param blockNum
 */
function fetchDelay(base, id, blockNum) {
    return request_1.default({
        base: base,
        url: "/blocks/delay/" + id + "/" + blockNum
    });
}
exports.fetchDelay = fetchDelay;
/**
 * GET /blocks/height
 * @param base
 */
function fetchHeight(base) {
    return request_1.default({
        base: base,
        url: '/blocks/height'
    });
}
exports.fetchHeight = fetchHeight;
/**
 * GET /blocks/heightByTimestamp
 * @param base
 */
function fetchHeightByTimestamp(base, timestamp, options) {
    if (options === void 0) { options = Object.create(null); }
    return request_1.default({
        base: base,
        url: "/blocks/heightByTimestamp/" + timestamp,
        options: options
    });
}
exports.fetchHeightByTimestamp = fetchHeightByTimestamp;

},{"../../tools/request":"q2VP"}],"uYAP":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var FIELDS = ['amount', 'matcherFee', 'price', 'minSponsoredAssetFee', 'fee', 'quantity', 'sellMatcherFee', 'buyMatcherFee'];
function default_1(data) {
    return JSON.stringify(data, function (key, value) {
        if (FIELDS.includes(key) && value) {
            return "!" + value + "!";
        }
        else if (key === 'value' && this['type'] === 'integer') {
            return "!" + value + "!";
        }
        else if (key === 'minSponsoredAssetFee' && value == null) {
            return null;
        }
        else {
            return value;
        }
    }, 0).replace(/"\!(-?\d+)\!"/g, '$1');
}
exports.default = default_1;

},{}],"okTM":[function(require,module,exports) {
"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.broadcast = exports.fetchStatus = exports.fetchMultipleInfo = exports.fetchInfo = exports.fetchUnconfirmedInfo = exports.fetchTransactions = exports.fetchUnconfirmed = exports.fetchCalculateFee = exports.fetchUnconfirmedSize = void 0;
var constants_1 = require("../../constants");
var blocks_1 = require("../blocks");
var request_1 = __importDefault(require("../../tools/request"));
var query_1 = __importDefault(require("../../tools/query"));
var utils_1 = require("../../tools/utils");
var stringify_1 = __importDefault(require("../../tools/stringify"));
/**
 * GET /transactions/unconfirmed/size
 * Number of unconfirmed transactions
 */
function fetchUnconfirmedSize(base) {
    return request_1.default({
        base: base,
        url: '/transactions/unconfirmed/size'
    });
}
exports.fetchUnconfirmedSize = fetchUnconfirmedSize;
// @TODO: when correct API key is received
/**
 * POST /transactions/sign/{signerAddress}
 * Sign a transaction with a non-default private key
 */
/**
 * POST /transactions/calculateFee
 * Calculate transaction fee
 */
function fetchCalculateFee(base, tx, options) {
    if (options === void 0) { options = Object.create(null); }
    return request_1.default({
        base: base,
        url: '/transactions/calculateFee',
        options: utils_1.deepAssign(__assign({}, options), {
            method: 'POST',
            body: stringify_1.default(tx),
            headers: {
                'Content-Type': 'application/json'
            }
        })
    });
}
exports.fetchCalculateFee = fetchCalculateFee;
/**
 * GET /transactions/unconfirmed
 * Unconfirmed transactions
 */
function fetchUnconfirmed(base, options) {
    if (options === void 0) { options = Object.create(null); }
    return request_1.default({
        base: base,
        url: '/transactions/unconfirmed',
        options: options
    });
}
exports.fetchUnconfirmed = fetchUnconfirmed;
/**
 * Список транзакций по адресу
 * @param address
 * @param limit      максимальное количество транзакций в результате
 * @param after      искать транзакции после ID указанного в after
 * @param retry      количество попыток на выполнение запроса
 */
function fetchTransactions(base, address, limit, after, retry, options) {
    if (options === void 0) { options = Object.create(null); }
    return request_1.default({
        base: base,
        url: "/transactions/address/" + address + "/limit/" + limit + query_1.default({ after: after }),
        options: options
    }).then(function (_a) {
        var _b = __read(_a, 1), list = _b[0];
        return list;
    });
}
exports.fetchTransactions = fetchTransactions;
/**
 * GET /transactions/unconfirmed/info/{id}
 * Unconfirmed transaction info
 */
function fetchUnconfirmedInfo(base, id, options) {
    if (options === void 0) { options = Object.create(null); }
    return request_1.default({
        base: base,
        url: "/transactions/unconfirmed/info/" + id,
        options: options
    });
}
exports.fetchUnconfirmedInfo = fetchUnconfirmedInfo;
// @TODO when correct API key is received
/**
 * POST /transactions/sign
 * Sign a transaction
 */
/**
 * GET /transactions/info/{id}
 * Transaction info
 */
function fetchInfo(base, id, options) {
    if (options === void 0) { options = Object.create(null); }
    return request_1.default({
        base: base,
        url: "/transactions/info/" + id,
        options: options
    });
}
exports.fetchInfo = fetchInfo;
/**
 * GET /transactions/info/
 * Get transactions by IDs
 */
function fetchMultipleInfo(base, ids, options) {
    if (options === void 0) { options = Object.create(null); }
    return request_1.default({
        base: base,
        url: "/transactions/info" + query_1.default({ id: ids }),
        options: options
    });
}
exports.fetchMultipleInfo = fetchMultipleInfo;
function fetchStatus(base, list) {
    var DEFAULT_STATUS = {
        id: '',
        confirmations: -1,
        height: -1,
        inUTX: false,
        status: constants_1.TRANSACTION_STATUSES.NOT_FOUND
    };
    var loadAllTxInfo = list.map(function (id) {
        return fetchUnconfirmedInfo(base, id)
            .then(function () { return (__assign(__assign({}, DEFAULT_STATUS), { id: id, status: constants_1.TRANSACTION_STATUSES.UNCONFIRMED, inUTX: true })); })
            .catch(function () { return fetchInfo(base, id)
            .then(function (tx) { return (__assign(__assign({}, DEFAULT_STATUS), { id: id, status: constants_1.TRANSACTION_STATUSES.IN_BLOCKCHAIN, height: tx.height, applicationStatus: tx.applicationStatus })); }); })
            .catch(function () { return (__assign(__assign({}, DEFAULT_STATUS), { id: id })); });
    });
    return Promise.all([
        blocks_1.fetchHeight(base),
        Promise.all(loadAllTxInfo)
    ]).then(function (_a) {
        var _b = __read(_a, 2), height = _b[0].height, statuses = _b[1];
        return ({
            height: height,
            statuses: statuses.map(function (item) { return (__assign(__assign({}, item), { confirmations: item.status === constants_1.TRANSACTION_STATUSES.IN_BLOCKCHAIN ? height - item.height : item.confirmations })); })
        });
    });
}
exports.fetchStatus = fetchStatus;
function broadcast(base, tx, options) {
    if (options === void 0) { options = Object.create(null); }
    return request_1.default({
        base: base,
        url: '/transactions/broadcast',
        options: utils_1.deepAssign(__assign({}, options), {
            method: 'POST',
            body: stringify_1.default(tx),
            headers: {
                'Content-Type': 'application/json'
            }
        })
    });
}
exports.broadcast = broadcast;

},{"../../constants":"KhOZ","../blocks":"KJKX","../../tools/request":"q2VP","../../tools/query":"sZco","../../tools/utils":"ZcJV","../../tools/stringify":"uYAP"}],"XisK":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var utils_1 = require("../utils");
var transactions_1 = require("../../api-node/transactions");
var constants_1 = require("../../constants");
function default_1(base, tx, options) {
    var isOnce = !Array.isArray(tx);
    var start = Date.now();
    var confirmed = [];
    var confirmations = options && options.confirmations || 0;
    var maxWaitTime = options && options.maxWaitTime || 0;
    var requestInterval = options && options.requestInterval || 250;
    var waitTx = function (list) {
        return transactions_1.fetchStatus(base, list.map(utils_1.prop('id')))
            .then(function (status) {
            var hash = utils_1.indexBy(utils_1.prop('id'), status.statuses);
            var hasError = list.some(function (tx) { return hash[tx.id].status === constants_1.TRANSACTION_STATUSES.NOT_FOUND; });
            if (hasError) {
                throw new Error('One transaction is not in blockchain!');
            }
            var toRequest = list.filter(function (tx) {
                if (hash[tx.id].confirmations >= confirmations) {
                    confirmed.push(tx);
                    return false;
                }
                else {
                    return true;
                }
            });
            if (!toRequest.length) {
                return void 0;
            }
            if (maxWaitTime && Date.now() - start > maxWaitTime) {
                return Promise.reject('Timeout error!');
            }
            return utils_1.wait(requestInterval).then(function () { return waitTx(toRequest); });
        });
    };
    return waitTx(utils_1.toArray(tx)).then(function () { return isOnce ? utils_1.head(confirmed) : confirmed; });
}
exports.default = default_1;

},{"../utils":"ZcJV","../../api-node/transactions":"okTM","../../constants":"KhOZ"}],"NFk5":[function(require,module,exports) {
"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var transactions_1 = require("../../api-node/transactions");
var utils_1 = require("../utils");
var wait_1 = __importDefault(require("./wait"));
var DEFAULT_BROADCAST_OPTIONS = {
    chain: false,
    confirmations: -1,
    maxWaitTime: 0,
    requestInterval: 0
};
function default_1(base, list, options) {
    var opt = __assign(__assign({}, DEFAULT_BROADCAST_OPTIONS), (options || {}));
    var isOnce = !Array.isArray(list);
    var confirmations = opt.confirmations > 0 ? 1 : 0;
    return (opt.chain
        ? chainBroadcast(base, utils_1.toArray(list), __assign(__assign({}, opt), { confirmations: confirmations }))
        : simpleBroadcast(base, utils_1.toArray(list)))
        .then(function (list) { return opt.confirmations <= 0 ? list : wait_1.default(base, list, opt); })
        .then(function (list) { return isOnce ? utils_1.head(list) : list; });
}
exports.default = default_1;
function simpleBroadcast(base, list) {
    return Promise.all(list.map(function (tx) { return transactions_1.broadcast(base, tx); }));
}
function chainBroadcast(base, list, options) {
    return new Promise(function (resolve, reject) {
        var toBroadcast = list.slice().reverse();
        var result = [];
        var loop = function () {
            if (!toBroadcast.length) {
                resolve(result);
                return null;
            }
            var tx = toBroadcast.pop();
            transactions_1.broadcast(base, tx)
                .then(function (tx) { return wait_1.default(base, tx, options); })
                .then(function (tx) {
                result.push(tx);
                loop();
            }, reject);
        };
        loop();
    });
}

},{"../../api-node/transactions":"okTM","../utils":"ZcJV","./wait":"XisK"}],"ezNl":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var blocks_1 = require("../../api-node/blocks");
function default_1(base) {
    return blocks_1.fetchHeadersLast(base).then(function (header) { return base58Decode(header.generator)[1]; });
}
exports.default = default_1;
var ALPHABET = '123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz';
var ALPHABET_MAP = {};
for (var i = 0; i < ALPHABET.length; i++) {
    ALPHABET_MAP[ALPHABET.charAt(i)] = i;
}
function base58Decode(string) {
    var bytes, c, carry, j, i;
    if (string.length === 0) {
        return new Uint8Array(0);
    }
    i = void 0;
    j = void 0;
    bytes = [0];
    i = 0;
    while (i < string.length) {
        c = string[i];
        if (!(c in ALPHABET_MAP)) {
            throw 'Base58.decode received unacceptable input. Character \'' + c + '\' is not in the Base58 alphabet.';
        }
        j = 0;
        while (j < bytes.length) {
            bytes[j] *= 58;
            j++;
        }
        bytes[0] += ALPHABET_MAP[c];
        carry = 0;
        j = 0;
        while (j < bytes.length) {
            bytes[j] += carry;
            carry = bytes[j] >> 8;
            bytes[j] &= 0xff;
            ++j;
        }
        while (carry) {
            bytes.push(carry & 0xff);
            carry >>= 8;
        }
        i++;
    }
    i = 0;
    while (string[i] === '1' && i < string.length - 1) {
        bytes.push(0);
        i++;
    }
    return new Uint8Array(bytes.reverse());
}

},{"../../api-node/blocks":"KJKX"}],"ItkZ":[function(require,module,exports) {
function _isPlaceholder(a) {
  return a != null && typeof a === 'object' && a['@@functional/placeholder'] === true;
}

module.exports = _isPlaceholder;
},{}],"FU8z":[function(require,module,exports) {
var _isPlaceholder =
/*#__PURE__*/
require("./_isPlaceholder");
/**
 * Optimized internal one-arity curry function.
 *
 * @private
 * @category Function
 * @param {Function} fn The function to curry.
 * @return {Function} The curried function.
 */


function _curry1(fn) {
  return function f1(a) {
    if (arguments.length === 0 || _isPlaceholder(a)) {
      return f1;
    } else {
      return fn.apply(this, arguments);
    }
  };
}

module.exports = _curry1;
},{"./_isPlaceholder":"ItkZ"}],"QWLz":[function(require,module,exports) {
var _curry1 =
/*#__PURE__*/
require("./_curry1");

var _isPlaceholder =
/*#__PURE__*/
require("./_isPlaceholder");
/**
 * Optimized internal two-arity curry function.
 *
 * @private
 * @category Function
 * @param {Function} fn The function to curry.
 * @return {Function} The curried function.
 */


function _curry2(fn) {
  return function f2(a, b) {
    switch (arguments.length) {
      case 0:
        return f2;

      case 1:
        return _isPlaceholder(a) ? f2 : _curry1(function (_b) {
          return fn(a, _b);
        });

      default:
        return _isPlaceholder(a) && _isPlaceholder(b) ? f2 : _isPlaceholder(a) ? _curry1(function (_a) {
          return fn(_a, b);
        }) : _isPlaceholder(b) ? _curry1(function (_b) {
          return fn(a, _b);
        }) : fn(a, b);
    }
  };
}

module.exports = _curry2;
},{"./_curry1":"FU8z","./_isPlaceholder":"ItkZ"}],"eODk":[function(require,module,exports) {
var _curry2 =
/*#__PURE__*/
require("./internal/_curry2");
/**
 * Returns the second argument if it is not `null`, `undefined` or `NaN`;
 * otherwise the first argument is returned.
 *
 * @func
 * @memberOf R
 * @since v0.10.0
 * @category Logic
 * @sig a -> b -> a | b
 * @param {a} default The default value.
 * @param {b} val `val` will be returned instead of `default` unless `val` is `null`, `undefined` or `NaN`.
 * @return {*} The second value if it is not `null`, `undefined` or `NaN`, otherwise the default value
 * @example
 *
 *      const defaultTo42 = R.defaultTo(42);
 *
 *      defaultTo42(null);  //=> 42
 *      defaultTo42(undefined);  //=> 42
 *      defaultTo42(false);  //=> false
 *      defaultTo42('Ramda');  //=> 'Ramda'
 *      // parseInt('string') results in NaN
 *      defaultTo42(parseInt('string')); //=> 42
 */


var defaultTo =
/*#__PURE__*/
_curry2(function defaultTo(d, v) {
  return v == null || v !== v ? d : v;
});

module.exports = defaultTo;
},{"./internal/_curry2":"QWLz"}],"tIvq":[function(require,module,exports) {
/**
 * Determine if the passed argument is an integer.
 *
 * @private
 * @param {*} n
 * @category Type
 * @return {Boolean}
 */
module.exports = Number.isInteger || function _isInteger(n) {
  return n << 0 === n;
};
},{}],"RCKN":[function(require,module,exports) {
function _isString(x) {
  return Object.prototype.toString.call(x) === '[object String]';
}

module.exports = _isString;
},{}],"Kvbu":[function(require,module,exports) {
var _curry2 =
/*#__PURE__*/
require("./internal/_curry2");

var _isString =
/*#__PURE__*/
require("./internal/_isString");
/**
 * Returns the nth element of the given list or string. If n is negative the
 * element at index length + n is returned.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category List
 * @sig Number -> [a] -> a | Undefined
 * @sig Number -> String -> String
 * @param {Number} offset
 * @param {*} list
 * @return {*}
 * @example
 *
 *      const list = ['foo', 'bar', 'baz', 'quux'];
 *      R.nth(1, list); //=> 'bar'
 *      R.nth(-1, list); //=> 'quux'
 *      R.nth(-99, list); //=> undefined
 *
 *      R.nth(2, 'abc'); //=> 'c'
 *      R.nth(3, 'abc'); //=> ''
 * @symb R.nth(-1, [a, b, c]) = c
 * @symb R.nth(0, [a, b, c]) = a
 * @symb R.nth(1, [a, b, c]) = b
 */


var nth =
/*#__PURE__*/
_curry2(function nth(offset, list) {
  var idx = offset < 0 ? list.length + offset : offset;
  return _isString(list) ? list.charAt(idx) : list[idx];
});

module.exports = nth;
},{"./internal/_curry2":"QWLz","./internal/_isString":"RCKN"}],"Xxk9":[function(require,module,exports) {
var _curry2 =
/*#__PURE__*/
require("./internal/_curry2");

var _isInteger =
/*#__PURE__*/
require("./internal/_isInteger");

var nth =
/*#__PURE__*/
require("./nth");
/**
 * Retrieves the values at given paths of an object.
 *
 * @func
 * @memberOf R
 * @since v0.27.1
 * @category Object
 * @typedefn Idx = [String | Int]
 * @sig [Idx] -> {a} -> [a | Undefined]
 * @param {Array} pathsArray The array of paths to be fetched.
 * @param {Object} obj The object to retrieve the nested properties from.
 * @return {Array} A list consisting of values at paths specified by "pathsArray".
 * @see R.path
 * @example
 *
 *      R.paths([['a', 'b'], ['p', 0, 'q']], {a: {b: 2}, p: [{q: 3}]}); //=> [2, 3]
 *      R.paths([['a', 'b'], ['p', 'r']], {a: {b: 2}, p: [{q: 3}]}); //=> [2, undefined]
 */


var paths =
/*#__PURE__*/
_curry2(function paths(pathsArray, obj) {
  return pathsArray.map(function (paths) {
    var val = obj;
    var idx = 0;
    var p;

    while (idx < paths.length) {
      if (val == null) {
        return;
      }

      p = paths[idx];
      val = _isInteger(p) ? nth(p, val) : val[p];
      idx += 1;
    }

    return val;
  });
});

module.exports = paths;
},{"./internal/_curry2":"QWLz","./internal/_isInteger":"tIvq","./nth":"Kvbu"}],"zfKG":[function(require,module,exports) {
var _curry2 =
/*#__PURE__*/
require("./internal/_curry2");

var paths =
/*#__PURE__*/
require("./paths");
/**
 * Retrieve the value at a given path.
 *
 * @func
 * @memberOf R
 * @since v0.2.0
 * @category Object
 * @typedefn Idx = String | Int
 * @sig [Idx] -> {a} -> a | Undefined
 * @param {Array} path The path to use.
 * @param {Object} obj The object to retrieve the nested property from.
 * @return {*} The data at `path`.
 * @see R.prop, R.nth
 * @example
 *
 *      R.path(['a', 'b'], {a: {b: 2}}); //=> 2
 *      R.path(['a', 'b'], {c: {b: 2}}); //=> undefined
 *      R.path(['a', 'b', 0], {a: {b: [1, 2, 3]}}); //=> 1
 *      R.path(['a', 'b', -2], {a: {b: [1, 2, 3]}}); //=> 2
 */


var path =
/*#__PURE__*/
_curry2(function path(pathAr, obj) {
  return paths([pathAr], obj)[0];
});

module.exports = path;
},{"./internal/_curry2":"QWLz","./paths":"Xxk9"}],"E9RQ":[function(require,module,exports) {
var _curry2 =
/*#__PURE__*/
require("./internal/_curry2");

var path =
/*#__PURE__*/
require("./path");
/**
 * Returns a function that when supplied an object returns the indicated
 * property of that object, if it exists.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category Object
 * @typedefn Idx = String | Int
 * @sig Idx -> {s: a} -> a | Undefined
 * @param {String|Number} p The property name or array index
 * @param {Object} obj The object to query
 * @return {*} The value at `obj.p`.
 * @see R.path, R.nth
 * @example
 *
 *      R.prop('x', {x: 100}); //=> 100
 *      R.prop('x', {}); //=> undefined
 *      R.prop(0, [100]); //=> 100
 *      R.compose(R.inc, R.prop('x'))({ x: 3 }) //=> 4
 */


var prop =
/*#__PURE__*/
_curry2(function prop(p, obj) {
  return path([p], obj);
});

module.exports = prop;
},{"./internal/_curry2":"QWLz","./path":"zfKG"}],"rnvv":[function(require,module,exports) {
var _curry1 =
/*#__PURE__*/
require("./_curry1");

var _curry2 =
/*#__PURE__*/
require("./_curry2");

var _isPlaceholder =
/*#__PURE__*/
require("./_isPlaceholder");
/**
 * Optimized internal three-arity curry function.
 *
 * @private
 * @category Function
 * @param {Function} fn The function to curry.
 * @return {Function} The curried function.
 */


function _curry3(fn) {
  return function f3(a, b, c) {
    switch (arguments.length) {
      case 0:
        return f3;

      case 1:
        return _isPlaceholder(a) ? f3 : _curry2(function (_b, _c) {
          return fn(a, _b, _c);
        });

      case 2:
        return _isPlaceholder(a) && _isPlaceholder(b) ? f3 : _isPlaceholder(a) ? _curry2(function (_a, _c) {
          return fn(_a, b, _c);
        }) : _isPlaceholder(b) ? _curry2(function (_b, _c) {
          return fn(a, _b, _c);
        }) : _curry1(function (_c) {
          return fn(a, b, _c);
        });

      default:
        return _isPlaceholder(a) && _isPlaceholder(b) && _isPlaceholder(c) ? f3 : _isPlaceholder(a) && _isPlaceholder(b) ? _curry2(function (_a, _b) {
          return fn(_a, _b, c);
        }) : _isPlaceholder(a) && _isPlaceholder(c) ? _curry2(function (_a, _c) {
          return fn(_a, b, _c);
        }) : _isPlaceholder(b) && _isPlaceholder(c) ? _curry2(function (_b, _c) {
          return fn(a, _b, _c);
        }) : _isPlaceholder(a) ? _curry1(function (_a) {
          return fn(_a, b, c);
        }) : _isPlaceholder(b) ? _curry1(function (_b) {
          return fn(a, _b, c);
        }) : _isPlaceholder(c) ? _curry1(function (_c) {
          return fn(a, b, _c);
        }) : fn(a, b, c);
    }
  };
}

module.exports = _curry3;
},{"./_curry1":"FU8z","./_curry2":"QWLz","./_isPlaceholder":"ItkZ"}],"Jo9I":[function(require,module,exports) {
function _arity(n, fn) {
  /* eslint-disable no-unused-vars */
  switch (n) {
    case 0:
      return function () {
        return fn.apply(this, arguments);
      };

    case 1:
      return function (a0) {
        return fn.apply(this, arguments);
      };

    case 2:
      return function (a0, a1) {
        return fn.apply(this, arguments);
      };

    case 3:
      return function (a0, a1, a2) {
        return fn.apply(this, arguments);
      };

    case 4:
      return function (a0, a1, a2, a3) {
        return fn.apply(this, arguments);
      };

    case 5:
      return function (a0, a1, a2, a3, a4) {
        return fn.apply(this, arguments);
      };

    case 6:
      return function (a0, a1, a2, a3, a4, a5) {
        return fn.apply(this, arguments);
      };

    case 7:
      return function (a0, a1, a2, a3, a4, a5, a6) {
        return fn.apply(this, arguments);
      };

    case 8:
      return function (a0, a1, a2, a3, a4, a5, a6, a7) {
        return fn.apply(this, arguments);
      };

    case 9:
      return function (a0, a1, a2, a3, a4, a5, a6, a7, a8) {
        return fn.apply(this, arguments);
      };

    case 10:
      return function (a0, a1, a2, a3, a4, a5, a6, a7, a8, a9) {
        return fn.apply(this, arguments);
      };

    default:
      throw new Error('First argument to _arity must be a non-negative integer no greater than ten');
  }
}

module.exports = _arity;
},{}],"Tyqr":[function(require,module,exports) {
var _arity =
/*#__PURE__*/
require("./_arity");

var _isPlaceholder =
/*#__PURE__*/
require("./_isPlaceholder");
/**
 * Internal curryN function.
 *
 * @private
 * @category Function
 * @param {Number} length The arity of the curried function.
 * @param {Array} received An array of arguments received thus far.
 * @param {Function} fn The function to curry.
 * @return {Function} The curried function.
 */


function _curryN(length, received, fn) {
  return function () {
    var combined = [];
    var argsIdx = 0;
    var left = length;
    var combinedIdx = 0;

    while (combinedIdx < received.length || argsIdx < arguments.length) {
      var result;

      if (combinedIdx < received.length && (!_isPlaceholder(received[combinedIdx]) || argsIdx >= arguments.length)) {
        result = received[combinedIdx];
      } else {
        result = arguments[argsIdx];
        argsIdx += 1;
      }

      combined[combinedIdx] = result;

      if (!_isPlaceholder(result)) {
        left -= 1;
      }

      combinedIdx += 1;
    }

    return left <= 0 ? fn.apply(this, combined) : _arity(left, _curryN(length, combined, fn));
  };
}

module.exports = _curryN;
},{"./_arity":"Jo9I","./_isPlaceholder":"ItkZ"}],"LB9S":[function(require,module,exports) {
var _arity =
/*#__PURE__*/
require("./internal/_arity");

var _curry1 =
/*#__PURE__*/
require("./internal/_curry1");

var _curry2 =
/*#__PURE__*/
require("./internal/_curry2");

var _curryN =
/*#__PURE__*/
require("./internal/_curryN");
/**
 * Returns a curried equivalent of the provided function, with the specified
 * arity. The curried function has two unusual capabilities. First, its
 * arguments needn't be provided one at a time. If `g` is `R.curryN(3, f)`, the
 * following are equivalent:
 *
 *   - `g(1)(2)(3)`
 *   - `g(1)(2, 3)`
 *   - `g(1, 2)(3)`
 *   - `g(1, 2, 3)`
 *
 * Secondly, the special placeholder value [`R.__`](#__) may be used to specify
 * "gaps", allowing partial application of any combination of arguments,
 * regardless of their positions. If `g` is as above and `_` is [`R.__`](#__),
 * the following are equivalent:
 *
 *   - `g(1, 2, 3)`
 *   - `g(_, 2, 3)(1)`
 *   - `g(_, _, 3)(1)(2)`
 *   - `g(_, _, 3)(1, 2)`
 *   - `g(_, 2)(1)(3)`
 *   - `g(_, 2)(1, 3)`
 *   - `g(_, 2)(_, 3)(1)`
 *
 * @func
 * @memberOf R
 * @since v0.5.0
 * @category Function
 * @sig Number -> (* -> a) -> (* -> a)
 * @param {Number} length The arity for the returned function.
 * @param {Function} fn The function to curry.
 * @return {Function} A new, curried function.
 * @see R.curry
 * @example
 *
 *      const sumArgs = (...args) => R.sum(args);
 *
 *      const curriedAddFourNumbers = R.curryN(4, sumArgs);
 *      const f = curriedAddFourNumbers(1, 2);
 *      const g = f(3);
 *      g(4); //=> 10
 */


var curryN =
/*#__PURE__*/
_curry2(function curryN(length, fn) {
  if (length === 1) {
    return _curry1(fn);
  }

  return _arity(length, _curryN(length, [], fn));
});

module.exports = curryN;
},{"./internal/_arity":"Jo9I","./internal/_curry1":"FU8z","./internal/_curry2":"QWLz","./internal/_curryN":"Tyqr"}],"xarn":[function(require,module,exports) {
var _curry3 =
/*#__PURE__*/
require("./internal/_curry3");

var curryN =
/*#__PURE__*/
require("./curryN");
/**
 * Creates a function that will process either the `onTrue` or the `onFalse`
 * function depending upon the result of the `condition` predicate.
 *
 * @func
 * @memberOf R
 * @since v0.8.0
 * @category Logic
 * @sig (*... -> Boolean) -> (*... -> *) -> (*... -> *) -> (*... -> *)
 * @param {Function} condition A predicate function
 * @param {Function} onTrue A function to invoke when the `condition` evaluates to a truthy value.
 * @param {Function} onFalse A function to invoke when the `condition` evaluates to a falsy value.
 * @return {Function} A new function that will process either the `onTrue` or the `onFalse`
 *                    function depending upon the result of the `condition` predicate.
 * @see R.unless, R.when, R.cond
 * @example
 *
 *      const incCount = R.ifElse(
 *        R.has('count'),
 *        R.over(R.lensProp('count'), R.inc),
 *        R.assoc('count', 1)
 *      );
 *      incCount({});           //=> { count: 1 }
 *      incCount({ count: 1 }); //=> { count: 2 }
 */


var ifElse =
/*#__PURE__*/
_curry3(function ifElse(condition, onTrue, onFalse) {
  return curryN(Math.max(condition.length, onTrue.length, onFalse.length), function _ifElse() {
    return condition.apply(this, arguments) ? onTrue.apply(this, arguments) : onFalse.apply(this, arguments);
  });
});

module.exports = ifElse;
},{"./internal/_curry3":"rnvv","./curryN":"LB9S"}],"dXY9":[function(require,module,exports) {
function _pipe(f, g) {
  return function () {
    return g.call(this, f.apply(this, arguments));
  };
}

module.exports = _pipe;
},{}],"iRKO":[function(require,module,exports) {
/**
 * Tests whether or not an object is an array.
 *
 * @private
 * @param {*} val The object to test.
 * @return {Boolean} `true` if `val` is an array, `false` otherwise.
 * @example
 *
 *      _isArray([]); //=> true
 *      _isArray(null); //=> false
 *      _isArray({}); //=> false
 */
module.exports = Array.isArray || function _isArray(val) {
  return val != null && val.length >= 0 && Object.prototype.toString.call(val) === '[object Array]';
};
},{}],"BKIT":[function(require,module,exports) {
var _curry1 =
/*#__PURE__*/
require("./_curry1");

var _isArray =
/*#__PURE__*/
require("./_isArray");

var _isString =
/*#__PURE__*/
require("./_isString");
/**
 * Tests whether or not an object is similar to an array.
 *
 * @private
 * @category Type
 * @category List
 * @sig * -> Boolean
 * @param {*} x The object to test.
 * @return {Boolean} `true` if `x` has a numeric length property and extreme indices defined; `false` otherwise.
 * @example
 *
 *      _isArrayLike([]); //=> true
 *      _isArrayLike(true); //=> false
 *      _isArrayLike({}); //=> false
 *      _isArrayLike({length: 10}); //=> false
 *      _isArrayLike({0: 'zero', 9: 'nine', length: 10}); //=> true
 */


var _isArrayLike =
/*#__PURE__*/
_curry1(function isArrayLike(x) {
  if (_isArray(x)) {
    return true;
  }

  if (!x) {
    return false;
  }

  if (typeof x !== 'object') {
    return false;
  }

  if (_isString(x)) {
    return false;
  }

  if (x.nodeType === 1) {
    return !!x.length;
  }

  if (x.length === 0) {
    return true;
  }

  if (x.length > 0) {
    return x.hasOwnProperty(0) && x.hasOwnProperty(x.length - 1);
  }

  return false;
});

module.exports = _isArrayLike;
},{"./_curry1":"FU8z","./_isArray":"iRKO","./_isString":"RCKN"}],"EYWD":[function(require,module,exports) {
var XWrap =
/*#__PURE__*/
function () {
  function XWrap(fn) {
    this.f = fn;
  }

  XWrap.prototype['@@transducer/init'] = function () {
    throw new Error('init not implemented on XWrap');
  };

  XWrap.prototype['@@transducer/result'] = function (acc) {
    return acc;
  };

  XWrap.prototype['@@transducer/step'] = function (acc, x) {
    return this.f(acc, x);
  };

  return XWrap;
}();

function _xwrap(fn) {
  return new XWrap(fn);
}

module.exports = _xwrap;
},{}],"np0g":[function(require,module,exports) {
var _arity =
/*#__PURE__*/
require("./internal/_arity");

var _curry2 =
/*#__PURE__*/
require("./internal/_curry2");
/**
 * Creates a function that is bound to a context.
 * Note: `R.bind` does not provide the additional argument-binding capabilities of
 * [Function.prototype.bind](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/bind).
 *
 * @func
 * @memberOf R
 * @since v0.6.0
 * @category Function
 * @category Object
 * @sig (* -> *) -> {*} -> (* -> *)
 * @param {Function} fn The function to bind to context
 * @param {Object} thisObj The context to bind `fn` to
 * @return {Function} A function that will execute in the context of `thisObj`.
 * @see R.partial
 * @example
 *
 *      const log = R.bind(console.log, console);
 *      R.pipe(R.assoc('a', 2), R.tap(log), R.assoc('a', 3))({a: 1}); //=> {a: 3}
 *      // logs {a: 2}
 * @symb R.bind(f, o)(a, b) = f.call(o, a, b)
 */


var bind =
/*#__PURE__*/
_curry2(function bind(fn, thisObj) {
  return _arity(fn.length, function () {
    return fn.apply(thisObj, arguments);
  });
});

module.exports = bind;
},{"./internal/_arity":"Jo9I","./internal/_curry2":"QWLz"}],"lPKC":[function(require,module,exports) {
var _isArrayLike =
/*#__PURE__*/
require("./_isArrayLike");

var _xwrap =
/*#__PURE__*/
require("./_xwrap");

var bind =
/*#__PURE__*/
require("../bind");

function _arrayReduce(xf, acc, list) {
  var idx = 0;
  var len = list.length;

  while (idx < len) {
    acc = xf['@@transducer/step'](acc, list[idx]);

    if (acc && acc['@@transducer/reduced']) {
      acc = acc['@@transducer/value'];
      break;
    }

    idx += 1;
  }

  return xf['@@transducer/result'](acc);
}

function _iterableReduce(xf, acc, iter) {
  var step = iter.next();

  while (!step.done) {
    acc = xf['@@transducer/step'](acc, step.value);

    if (acc && acc['@@transducer/reduced']) {
      acc = acc['@@transducer/value'];
      break;
    }

    step = iter.next();
  }

  return xf['@@transducer/result'](acc);
}

function _methodReduce(xf, acc, obj, methodName) {
  return xf['@@transducer/result'](obj[methodName](bind(xf['@@transducer/step'], xf), acc));
}

var symIterator = typeof Symbol !== 'undefined' ? Symbol.iterator : '@@iterator';

function _reduce(fn, acc, list) {
  if (typeof fn === 'function') {
    fn = _xwrap(fn);
  }

  if (_isArrayLike(list)) {
    return _arrayReduce(fn, acc, list);
  }

  if (typeof list['fantasy-land/reduce'] === 'function') {
    return _methodReduce(fn, acc, list, 'fantasy-land/reduce');
  }

  if (list[symIterator] != null) {
    return _iterableReduce(fn, acc, list[symIterator]());
  }

  if (typeof list.next === 'function') {
    return _iterableReduce(fn, acc, list);
  }

  if (typeof list.reduce === 'function') {
    return _methodReduce(fn, acc, list, 'reduce');
  }

  throw new TypeError('reduce: list must be array or iterable');
}

module.exports = _reduce;
},{"./_isArrayLike":"BKIT","./_xwrap":"EYWD","../bind":"np0g"}],"x1X6":[function(require,module,exports) {
var _curry3 =
/*#__PURE__*/
require("./internal/_curry3");

var _reduce =
/*#__PURE__*/
require("./internal/_reduce");
/**
 * Returns a single item by iterating through the list, successively calling
 * the iterator function and passing it an accumulator value and the current
 * value from the array, and then passing the result to the next call.
 *
 * The iterator function receives two values: *(acc, value)*. It may use
 * [`R.reduced`](#reduced) to shortcut the iteration.
 *
 * The arguments' order of [`reduceRight`](#reduceRight)'s iterator function
 * is *(value, acc)*.
 *
 * Note: `R.reduce` does not skip deleted or unassigned indices (sparse
 * arrays), unlike the native `Array.prototype.reduce` method. For more details
 * on this behavior, see:
 * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce#Description
 *
 * Dispatches to the `reduce` method of the third argument, if present. When
 * doing so, it is up to the user to handle the [`R.reduced`](#reduced)
 * shortcuting, as this is not implemented by `reduce`.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category List
 * @sig ((a, b) -> a) -> a -> [b] -> a
 * @param {Function} fn The iterator function. Receives two values, the accumulator and the
 *        current element from the array.
 * @param {*} acc The accumulator value.
 * @param {Array} list The list to iterate over.
 * @return {*} The final, accumulated value.
 * @see R.reduced, R.addIndex, R.reduceRight
 * @example
 *
 *      R.reduce(R.subtract, 0, [1, 2, 3, 4]) // => ((((0 - 1) - 2) - 3) - 4) = -10
 *      //          -               -10
 *      //         / \              / \
 *      //        -   4           -6   4
 *      //       / \              / \
 *      //      -   3   ==>     -3   3
 *      //     / \              / \
 *      //    -   2           -1   2
 *      //   / \              / \
 *      //  0   1            0   1
 *
 * @symb R.reduce(f, a, [b, c, d]) = f(f(f(a, b), c), d)
 */


var reduce =
/*#__PURE__*/
_curry3(_reduce);

module.exports = reduce;
},{"./internal/_curry3":"rnvv","./internal/_reduce":"lPKC"}],"sRqd":[function(require,module,exports) {
var _isArray =
/*#__PURE__*/
require("./_isArray");
/**
 * This checks whether a function has a [methodname] function. If it isn't an
 * array it will execute that function otherwise it will default to the ramda
 * implementation.
 *
 * @private
 * @param {Function} fn ramda implemtation
 * @param {String} methodname property to check for a custom implementation
 * @return {Object} Whatever the return value of the method is.
 */


function _checkForMethod(methodname, fn) {
  return function () {
    var length = arguments.length;

    if (length === 0) {
      return fn();
    }

    var obj = arguments[length - 1];
    return _isArray(obj) || typeof obj[methodname] !== 'function' ? fn.apply(this, arguments) : obj[methodname].apply(obj, Array.prototype.slice.call(arguments, 0, length - 1));
  };
}

module.exports = _checkForMethod;
},{"./_isArray":"iRKO"}],"Dao5":[function(require,module,exports) {
var _checkForMethod =
/*#__PURE__*/
require("./internal/_checkForMethod");

var _curry3 =
/*#__PURE__*/
require("./internal/_curry3");
/**
 * Returns the elements of the given list or string (or object with a `slice`
 * method) from `fromIndex` (inclusive) to `toIndex` (exclusive).
 *
 * Dispatches to the `slice` method of the third argument, if present.
 *
 * @func
 * @memberOf R
 * @since v0.1.4
 * @category List
 * @sig Number -> Number -> [a] -> [a]
 * @sig Number -> Number -> String -> String
 * @param {Number} fromIndex The start index (inclusive).
 * @param {Number} toIndex The end index (exclusive).
 * @param {*} list
 * @return {*}
 * @example
 *
 *      R.slice(1, 3, ['a', 'b', 'c', 'd']);        //=> ['b', 'c']
 *      R.slice(1, Infinity, ['a', 'b', 'c', 'd']); //=> ['b', 'c', 'd']
 *      R.slice(0, -1, ['a', 'b', 'c', 'd']);       //=> ['a', 'b', 'c']
 *      R.slice(-3, -1, ['a', 'b', 'c', 'd']);      //=> ['b', 'c']
 *      R.slice(0, 3, 'ramda');                     //=> 'ram'
 */


var slice =
/*#__PURE__*/
_curry3(
/*#__PURE__*/
_checkForMethod('slice', function slice(fromIndex, toIndex, list) {
  return Array.prototype.slice.call(list, fromIndex, toIndex);
}));

module.exports = slice;
},{"./internal/_checkForMethod":"sRqd","./internal/_curry3":"rnvv"}],"a2Wm":[function(require,module,exports) {
var _checkForMethod =
/*#__PURE__*/
require("./internal/_checkForMethod");

var _curry1 =
/*#__PURE__*/
require("./internal/_curry1");

var slice =
/*#__PURE__*/
require("./slice");
/**
 * Returns all but the first element of the given list or string (or object
 * with a `tail` method).
 *
 * Dispatches to the `slice` method of the first argument, if present.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category List
 * @sig [a] -> [a]
 * @sig String -> String
 * @param {*} list
 * @return {*}
 * @see R.head, R.init, R.last
 * @example
 *
 *      R.tail([1, 2, 3]);  //=> [2, 3]
 *      R.tail([1, 2]);     //=> [2]
 *      R.tail([1]);        //=> []
 *      R.tail([]);         //=> []
 *
 *      R.tail('abc');  //=> 'bc'
 *      R.tail('ab');   //=> 'b'
 *      R.tail('a');    //=> ''
 *      R.tail('');     //=> ''
 */


var tail =
/*#__PURE__*/
_curry1(
/*#__PURE__*/
_checkForMethod('tail',
/*#__PURE__*/
slice(1, Infinity)));

module.exports = tail;
},{"./internal/_checkForMethod":"sRqd","./internal/_curry1":"FU8z","./slice":"Dao5"}],"bdiw":[function(require,module,exports) {
var _arity =
/*#__PURE__*/
require("./internal/_arity");

var _pipe =
/*#__PURE__*/
require("./internal/_pipe");

var reduce =
/*#__PURE__*/
require("./reduce");

var tail =
/*#__PURE__*/
require("./tail");
/**
 * Performs left-to-right function composition. The first argument may have
 * any arity; the remaining arguments must be unary.
 *
 * In some libraries this function is named `sequence`.
 *
 * **Note:** The result of pipe is not automatically curried.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category Function
 * @sig (((a, b, ..., n) -> o), (o -> p), ..., (x -> y), (y -> z)) -> ((a, b, ..., n) -> z)
 * @param {...Function} functions
 * @return {Function}
 * @see R.compose
 * @example
 *
 *      const f = R.pipe(Math.pow, R.negate, R.inc);
 *
 *      f(3, 4); // -(3^4) + 1
 * @symb R.pipe(f, g, h)(a, b) = h(g(f(a, b)))
 */


function pipe() {
  if (arguments.length === 0) {
    throw new Error('pipe requires at least one argument');
  }

  return _arity(arguments[0].length, reduce(_pipe, arguments[0], tail(arguments)));
}

module.exports = pipe;
},{"./internal/_arity":"Jo9I","./internal/_pipe":"dXY9","./reduce":"x1X6","./tail":"a2Wm"}],"qJJY":[function(require,module,exports) {
function _arrayFromIterator(iter) {
  var list = [];
  var next;

  while (!(next = iter.next()).done) {
    list.push(next.value);
  }

  return list;
}

module.exports = _arrayFromIterator;
},{}],"aW4s":[function(require,module,exports) {
function _includesWith(pred, x, list) {
  var idx = 0;
  var len = list.length;

  while (idx < len) {
    if (pred(x, list[idx])) {
      return true;
    }

    idx += 1;
  }

  return false;
}

module.exports = _includesWith;
},{}],"gA9o":[function(require,module,exports) {
function _functionName(f) {
  // String(x => x) evaluates to "x => x", so the pattern may not match.
  var match = String(f).match(/^function (\w*)/);
  return match == null ? '' : match[1];
}

module.exports = _functionName;
},{}],"iFCz":[function(require,module,exports) {
function _has(prop, obj) {
  return Object.prototype.hasOwnProperty.call(obj, prop);
}

module.exports = _has;
},{}],"ioPz":[function(require,module,exports) {
// Based on https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is
function _objectIs(a, b) {
  // SameValue algorithm
  if (a === b) {
    // Steps 1-5, 7-10
    // Steps 6.b-6.e: +0 != -0
    return a !== 0 || 1 / a === 1 / b;
  } else {
    // Step 6.a: NaN == NaN
    return a !== a && b !== b;
  }
}

module.exports = typeof Object.is === 'function' ? Object.is : _objectIs;
},{}],"VfBr":[function(require,module,exports) {
var _has =
/*#__PURE__*/
require("./_has");

var toString = Object.prototype.toString;

var _isArguments =
/*#__PURE__*/
function () {
  return toString.call(arguments) === '[object Arguments]' ? function _isArguments(x) {
    return toString.call(x) === '[object Arguments]';
  } : function _isArguments(x) {
    return _has('callee', x);
  };
}();

module.exports = _isArguments;
},{"./_has":"iFCz"}],"cDyD":[function(require,module,exports) {
var _curry1 =
/*#__PURE__*/
require("./internal/_curry1");

var _has =
/*#__PURE__*/
require("./internal/_has");

var _isArguments =
/*#__PURE__*/
require("./internal/_isArguments"); // cover IE < 9 keys issues


var hasEnumBug = !
/*#__PURE__*/
{
  toString: null
}.propertyIsEnumerable('toString');
var nonEnumerableProps = ['constructor', 'valueOf', 'isPrototypeOf', 'toString', 'propertyIsEnumerable', 'hasOwnProperty', 'toLocaleString']; // Safari bug

var hasArgsEnumBug =
/*#__PURE__*/
function () {
  'use strict';

  return arguments.propertyIsEnumerable('length');
}();

var contains = function contains(list, item) {
  var idx = 0;

  while (idx < list.length) {
    if (list[idx] === item) {
      return true;
    }

    idx += 1;
  }

  return false;
};
/**
 * Returns a list containing the names of all the enumerable own properties of
 * the supplied object.
 * Note that the order of the output array is not guaranteed to be consistent
 * across different JS platforms.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category Object
 * @sig {k: v} -> [k]
 * @param {Object} obj The object to extract properties from
 * @return {Array} An array of the object's own properties.
 * @see R.keysIn, R.values
 * @example
 *
 *      R.keys({a: 1, b: 2, c: 3}); //=> ['a', 'b', 'c']
 */


var keys = typeof Object.keys === 'function' && !hasArgsEnumBug ?
/*#__PURE__*/
_curry1(function keys(obj) {
  return Object(obj) !== obj ? [] : Object.keys(obj);
}) :
/*#__PURE__*/
_curry1(function keys(obj) {
  if (Object(obj) !== obj) {
    return [];
  }

  var prop, nIdx;
  var ks = [];

  var checkArgsLength = hasArgsEnumBug && _isArguments(obj);

  for (prop in obj) {
    if (_has(prop, obj) && (!checkArgsLength || prop !== 'length')) {
      ks[ks.length] = prop;
    }
  }

  if (hasEnumBug) {
    nIdx = nonEnumerableProps.length - 1;

    while (nIdx >= 0) {
      prop = nonEnumerableProps[nIdx];

      if (_has(prop, obj) && !contains(ks, prop)) {
        ks[ks.length] = prop;
      }

      nIdx -= 1;
    }
  }

  return ks;
});
module.exports = keys;
},{"./internal/_curry1":"FU8z","./internal/_has":"iFCz","./internal/_isArguments":"VfBr"}],"GR1y":[function(require,module,exports) {
var _curry1 =
/*#__PURE__*/
require("./internal/_curry1");
/**
 * Gives a single-word string description of the (native) type of a value,
 * returning such answers as 'Object', 'Number', 'Array', or 'Null'. Does not
 * attempt to distinguish user Object types any further, reporting them all as
 * 'Object'.
 *
 * @func
 * @memberOf R
 * @since v0.8.0
 * @category Type
 * @sig (* -> {*}) -> String
 * @param {*} val The value to test
 * @return {String}
 * @example
 *
 *      R.type({}); //=> "Object"
 *      R.type(1); //=> "Number"
 *      R.type(false); //=> "Boolean"
 *      R.type('s'); //=> "String"
 *      R.type(null); //=> "Null"
 *      R.type([]); //=> "Array"
 *      R.type(/[A-z]/); //=> "RegExp"
 *      R.type(() => {}); //=> "Function"
 *      R.type(undefined); //=> "Undefined"
 */


var type =
/*#__PURE__*/
_curry1(function type(val) {
  return val === null ? 'Null' : val === undefined ? 'Undefined' : Object.prototype.toString.call(val).slice(8, -1);
});

module.exports = type;
},{"./internal/_curry1":"FU8z"}],"kUR3":[function(require,module,exports) {
var _arrayFromIterator =
/*#__PURE__*/
require("./_arrayFromIterator");

var _includesWith =
/*#__PURE__*/
require("./_includesWith");

var _functionName =
/*#__PURE__*/
require("./_functionName");

var _has =
/*#__PURE__*/
require("./_has");

var _objectIs =
/*#__PURE__*/
require("./_objectIs");

var keys =
/*#__PURE__*/
require("../keys");

var type =
/*#__PURE__*/
require("../type");
/**
 * private _uniqContentEquals function.
 * That function is checking equality of 2 iterator contents with 2 assumptions
 * - iterators lengths are the same
 * - iterators values are unique
 *
 * false-positive result will be returned for comparision of, e.g.
 * - [1,2,3] and [1,2,3,4]
 * - [1,1,1] and [1,2,3]
 * */


function _uniqContentEquals(aIterator, bIterator, stackA, stackB) {
  var a = _arrayFromIterator(aIterator);

  var b = _arrayFromIterator(bIterator);

  function eq(_a, _b) {
    return _equals(_a, _b, stackA.slice(), stackB.slice());
  } // if *a* array contains any element that is not included in *b*


  return !_includesWith(function (b, aItem) {
    return !_includesWith(eq, aItem, b);
  }, b, a);
}

function _equals(a, b, stackA, stackB) {
  if (_objectIs(a, b)) {
    return true;
  }

  var typeA = type(a);

  if (typeA !== type(b)) {
    return false;
  }

  if (a == null || b == null) {
    return false;
  }

  if (typeof a['fantasy-land/equals'] === 'function' || typeof b['fantasy-land/equals'] === 'function') {
    return typeof a['fantasy-land/equals'] === 'function' && a['fantasy-land/equals'](b) && typeof b['fantasy-land/equals'] === 'function' && b['fantasy-land/equals'](a);
  }

  if (typeof a.equals === 'function' || typeof b.equals === 'function') {
    return typeof a.equals === 'function' && a.equals(b) && typeof b.equals === 'function' && b.equals(a);
  }

  switch (typeA) {
    case 'Arguments':
    case 'Array':
    case 'Object':
      if (typeof a.constructor === 'function' && _functionName(a.constructor) === 'Promise') {
        return a === b;
      }

      break;

    case 'Boolean':
    case 'Number':
    case 'String':
      if (!(typeof a === typeof b && _objectIs(a.valueOf(), b.valueOf()))) {
        return false;
      }

      break;

    case 'Date':
      if (!_objectIs(a.valueOf(), b.valueOf())) {
        return false;
      }

      break;

    case 'Error':
      return a.name === b.name && a.message === b.message;

    case 'RegExp':
      if (!(a.source === b.source && a.global === b.global && a.ignoreCase === b.ignoreCase && a.multiline === b.multiline && a.sticky === b.sticky && a.unicode === b.unicode)) {
        return false;
      }

      break;
  }

  var idx = stackA.length - 1;

  while (idx >= 0) {
    if (stackA[idx] === a) {
      return stackB[idx] === b;
    }

    idx -= 1;
  }

  switch (typeA) {
    case 'Map':
      if (a.size !== b.size) {
        return false;
      }

      return _uniqContentEquals(a.entries(), b.entries(), stackA.concat([a]), stackB.concat([b]));

    case 'Set':
      if (a.size !== b.size) {
        return false;
      }

      return _uniqContentEquals(a.values(), b.values(), stackA.concat([a]), stackB.concat([b]));

    case 'Arguments':
    case 'Array':
    case 'Object':
    case 'Boolean':
    case 'Number':
    case 'String':
    case 'Date':
    case 'Error':
    case 'RegExp':
    case 'Int8Array':
    case 'Uint8Array':
    case 'Uint8ClampedArray':
    case 'Int16Array':
    case 'Uint16Array':
    case 'Int32Array':
    case 'Uint32Array':
    case 'Float32Array':
    case 'Float64Array':
    case 'ArrayBuffer':
      break;

    default:
      // Values of other types are only equal if identical.
      return false;
  }

  var keysA = keys(a);

  if (keysA.length !== keys(b).length) {
    return false;
  }

  var extendedStackA = stackA.concat([a]);
  var extendedStackB = stackB.concat([b]);
  idx = keysA.length - 1;

  while (idx >= 0) {
    var key = keysA[idx];

    if (!(_has(key, b) && _equals(b[key], a[key], extendedStackA, extendedStackB))) {
      return false;
    }

    idx -= 1;
  }

  return true;
}

module.exports = _equals;
},{"./_arrayFromIterator":"qJJY","./_includesWith":"aW4s","./_functionName":"gA9o","./_has":"iFCz","./_objectIs":"ioPz","../keys":"cDyD","../type":"GR1y"}],"rAKI":[function(require,module,exports) {
var _curry2 =
/*#__PURE__*/
require("./internal/_curry2");

var _equals =
/*#__PURE__*/
require("./internal/_equals");
/**
 * Returns `true` if its arguments are equivalent, `false` otherwise. Handles
 * cyclical data structures.
 *
 * Dispatches symmetrically to the `equals` methods of both arguments, if
 * present.
 *
 * @func
 * @memberOf R
 * @since v0.15.0
 * @category Relation
 * @sig a -> b -> Boolean
 * @param {*} a
 * @param {*} b
 * @return {Boolean}
 * @example
 *
 *      R.equals(1, 1); //=> true
 *      R.equals(1, '1'); //=> false
 *      R.equals([1, 2, 3], [1, 2, 3]); //=> true
 *
 *      const a = {}; a.v = a;
 *      const b = {}; b.v = b;
 *      R.equals(a, b); //=> true
 */


var equals =
/*#__PURE__*/
_curry2(function equals(a, b) {
  return _equals(a, b, [], []);
});

module.exports = equals;
},{"./internal/_curry2":"QWLz","./internal/_equals":"kUR3"}],"PGcC":[function(require,module,exports) {
var _curry2 =
/*#__PURE__*/
require("./internal/_curry2");
/**
 * Returns `true` if the first argument is less than or equal to the second;
 * `false` otherwise.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category Relation
 * @sig Ord a => a -> a -> Boolean
 * @param {Number} a
 * @param {Number} b
 * @return {Boolean}
 * @see R.gte
 * @example
 *
 *      R.lte(2, 1); //=> false
 *      R.lte(2, 2); //=> true
 *      R.lte(2, 3); //=> true
 *      R.lte('a', 'z'); //=> true
 *      R.lte('z', 'a'); //=> false
 */


var lte =
/*#__PURE__*/
_curry2(function lte(a, b) {
  return a <= b;
});

module.exports = lte;
},{"./internal/_curry2":"QWLz"}],"FbuY":[function(require,module,exports) {
var _curry1 =
/*#__PURE__*/
require("./internal/_curry1");
/**
 * A function that returns the `!` of its argument. It will return `true` when
 * passed false-y value, and `false` when passed a truth-y one.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category Logic
 * @sig * -> Boolean
 * @param {*} a any value
 * @return {Boolean} the logical inverse of passed argument.
 * @see R.complement
 * @example
 *
 *      R.not(true); //=> false
 *      R.not(false); //=> true
 *      R.not(0); //=> true
 *      R.not(1); //=> false
 */


var not =
/*#__PURE__*/
_curry1(function not(a) {
  return !a;
});

module.exports = not;
},{"./internal/_curry1":"FU8z"}],"LGUI":[function(require,module,exports) {
var _curry2 =
/*#__PURE__*/
require("./internal/_curry2");
/**
 * Returns `true` if the first argument is greater than or equal to the second;
 * `false` otherwise.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category Relation
 * @sig Ord a => a -> a -> Boolean
 * @param {Number} a
 * @param {Number} b
 * @return {Boolean}
 * @see R.lte
 * @example
 *
 *      R.gte(2, 1); //=> true
 *      R.gte(2, 2); //=> true
 *      R.gte(2, 3); //=> false
 *      R.gte('a', 'z'); //=> false
 *      R.gte('z', 'a'); //=> true
 */


var gte =
/*#__PURE__*/
_curry2(function gte(a, b) {
  return a >= b;
});

module.exports = gte;
},{"./internal/_curry2":"QWLz"}],"oxkS":[function(require,module,exports) {
function _isTransformer(obj) {
  return obj != null && typeof obj['@@transducer/step'] === 'function';
}

module.exports = _isTransformer;
},{}],"Ss23":[function(require,module,exports) {
var _isArray =
/*#__PURE__*/
require("./_isArray");

var _isTransformer =
/*#__PURE__*/
require("./_isTransformer");
/**
 * Returns a function that dispatches with different strategies based on the
 * object in list position (last argument). If it is an array, executes [fn].
 * Otherwise, if it has a function with one of the given method names, it will
 * execute that function (functor case). Otherwise, if it is a transformer,
 * uses transducer [xf] to return a new transformer (transducer case).
 * Otherwise, it will default to executing [fn].
 *
 * @private
 * @param {Array} methodNames properties to check for a custom implementation
 * @param {Function} xf transducer to initialize if object is transformer
 * @param {Function} fn default ramda implementation
 * @return {Function} A function that dispatches on object in list position
 */


function _dispatchable(methodNames, xf, fn) {
  return function () {
    if (arguments.length === 0) {
      return fn();
    }

    var args = Array.prototype.slice.call(arguments, 0);
    var obj = args.pop();

    if (!_isArray(obj)) {
      var idx = 0;

      while (idx < methodNames.length) {
        if (typeof obj[methodNames[idx]] === 'function') {
          return obj[methodNames[idx]].apply(obj, args);
        }

        idx += 1;
      }

      if (_isTransformer(obj)) {
        var transducer = xf.apply(null, args);
        return transducer(obj);
      }
    }

    return fn.apply(this, arguments);
  };
}

module.exports = _dispatchable;
},{"./_isArray":"iRKO","./_isTransformer":"oxkS"}],"usEO":[function(require,module,exports) {
function _reduced(x) {
  return x && x['@@transducer/reduced'] ? x : {
    '@@transducer/value': x,
    '@@transducer/reduced': true
  };
}

module.exports = _reduced;
},{}],"mXB2":[function(require,module,exports) {
module.exports = {
  init: function () {
    return this.xf['@@transducer/init']();
  },
  result: function (result) {
    return this.xf['@@transducer/result'](result);
  }
};
},{}],"a2sE":[function(require,module,exports) {
var _curry2 =
/*#__PURE__*/
require("./_curry2");

var _reduced =
/*#__PURE__*/
require("./_reduced");

var _xfBase =
/*#__PURE__*/
require("./_xfBase");

var XTake =
/*#__PURE__*/
function () {
  function XTake(n, xf) {
    this.xf = xf;
    this.n = n;
    this.i = 0;
  }

  XTake.prototype['@@transducer/init'] = _xfBase.init;
  XTake.prototype['@@transducer/result'] = _xfBase.result;

  XTake.prototype['@@transducer/step'] = function (result, input) {
    this.i += 1;
    var ret = this.n === 0 ? result : this.xf['@@transducer/step'](result, input);
    return this.n >= 0 && this.i >= this.n ? _reduced(ret) : ret;
  };

  return XTake;
}();

var _xtake =
/*#__PURE__*/
_curry2(function _xtake(n, xf) {
  return new XTake(n, xf);
});

module.exports = _xtake;
},{"./_curry2":"QWLz","./_reduced":"usEO","./_xfBase":"mXB2"}],"pafp":[function(require,module,exports) {
var _curry2 =
/*#__PURE__*/
require("./internal/_curry2");

var _dispatchable =
/*#__PURE__*/
require("./internal/_dispatchable");

var _xtake =
/*#__PURE__*/
require("./internal/_xtake");

var slice =
/*#__PURE__*/
require("./slice");
/**
 * Returns the first `n` elements of the given list, string, or
 * transducer/transformer (or object with a `take` method).
 *
 * Dispatches to the `take` method of the second argument, if present.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category List
 * @sig Number -> [a] -> [a]
 * @sig Number -> String -> String
 * @param {Number} n
 * @param {*} list
 * @return {*}
 * @see R.drop
 * @example
 *
 *      R.take(1, ['foo', 'bar', 'baz']); //=> ['foo']
 *      R.take(2, ['foo', 'bar', 'baz']); //=> ['foo', 'bar']
 *      R.take(3, ['foo', 'bar', 'baz']); //=> ['foo', 'bar', 'baz']
 *      R.take(4, ['foo', 'bar', 'baz']); //=> ['foo', 'bar', 'baz']
 *      R.take(3, 'ramda');               //=> 'ram'
 *
 *      const personnel = [
 *        'Dave Brubeck',
 *        'Paul Desmond',
 *        'Eugene Wright',
 *        'Joe Morello',
 *        'Gerry Mulligan',
 *        'Bob Bates',
 *        'Joe Dodge',
 *        'Ron Crotty'
 *      ];
 *
 *      const takeFive = R.take(5);
 *      takeFive(personnel);
 *      //=> ['Dave Brubeck', 'Paul Desmond', 'Eugene Wright', 'Joe Morello', 'Gerry Mulligan']
 * @symb R.take(-1, [a, b]) = [a, b]
 * @symb R.take(0, [a, b]) = []
 * @symb R.take(1, [a, b]) = [a]
 * @symb R.take(2, [a, b]) = [a, b]
 */


var take =
/*#__PURE__*/
_curry2(
/*#__PURE__*/
_dispatchable(['take'], _xtake, function take(n, xs) {
  return slice(0, n < 0 ? Infinity : n, xs);
}));

module.exports = take;
},{"./internal/_curry2":"QWLz","./internal/_dispatchable":"Ss23","./internal/_xtake":"a2sE","./slice":"Dao5"}],"hkxe":[function(require,module,exports) {
var _curry2 =
/*#__PURE__*/
require("./internal/_curry2");

var equals =
/*#__PURE__*/
require("./equals");

var take =
/*#__PURE__*/
require("./take");
/**
 * Checks if a list starts with the provided sublist.
 *
 * Similarly, checks if a string starts with the provided substring.
 *
 * @func
 * @memberOf R
 * @since v0.24.0
 * @category List
 * @sig [a] -> [a] -> Boolean
 * @sig String -> String -> Boolean
 * @param {*} prefix
 * @param {*} list
 * @return {Boolean}
 * @see R.endsWith
 * @example
 *
 *      R.startsWith('a', 'abc')                //=> true
 *      R.startsWith('b', 'abc')                //=> false
 *      R.startsWith(['a'], ['a', 'b', 'c'])    //=> true
 *      R.startsWith(['b'], ['a', 'b', 'c'])    //=> false
 */


var startsWith =
/*#__PURE__*/
_curry2(function (prefix, list) {
  return equals(take(prefix.length, list), prefix);
});

module.exports = startsWith;
},{"./internal/_curry2":"QWLz","./equals":"rAKI","./take":"pafp"}],"sGrY":[function(require,module,exports) {
var _curry1 =
/*#__PURE__*/
require("./internal/_curry1");
/**
 * Checks if the input value is `null` or `undefined`.
 *
 * @func
 * @memberOf R
 * @since v0.9.0
 * @category Type
 * @sig * -> Boolean
 * @param {*} x The value to test.
 * @return {Boolean} `true` if `x` is `undefined` or `null`, otherwise `false`.
 * @example
 *
 *      R.isNil(null); //=> true
 *      R.isNil(undefined); //=> true
 *      R.isNil(0); //=> false
 *      R.isNil([]); //=> false
 */


var isNil =
/*#__PURE__*/
_curry1(function isNil(x) {
  return x == null;
});

module.exports = isNil;
},{"./internal/_curry1":"FU8z"}],"RZOy":[function(require,module,exports) {
var equals =
/*#__PURE__*/
require("../equals");

function _indexOf(list, a, idx) {
  var inf, item; // Array.prototype.indexOf doesn't exist below IE9

  if (typeof list.indexOf === 'function') {
    switch (typeof a) {
      case 'number':
        if (a === 0) {
          // manually crawl the list to distinguish between +0 and -0
          inf = 1 / a;

          while (idx < list.length) {
            item = list[idx];

            if (item === 0 && 1 / item === inf) {
              return idx;
            }

            idx += 1;
          }

          return -1;
        } else if (a !== a) {
          // NaN
          while (idx < list.length) {
            item = list[idx];

            if (typeof item === 'number' && item !== item) {
              return idx;
            }

            idx += 1;
          }

          return -1;
        } // non-zero numbers can utilise Set


        return list.indexOf(a, idx);
      // all these types can utilise Set

      case 'string':
      case 'boolean':
      case 'function':
      case 'undefined':
        return list.indexOf(a, idx);

      case 'object':
        if (a === null) {
          // null can utilise Set
          return list.indexOf(a, idx);
        }

    }
  } // anything else not covered above, defer to R.equals


  while (idx < list.length) {
    if (equals(list[idx], a)) {
      return idx;
    }

    idx += 1;
  }

  return -1;
}

module.exports = _indexOf;
},{"../equals":"rAKI"}],"rSV6":[function(require,module,exports) {
var _indexOf =
/*#__PURE__*/
require("./_indexOf");

function _includes(a, list) {
  return _indexOf(list, a, 0) >= 0;
}

module.exports = _includes;
},{"./_indexOf":"RZOy"}],"hROA":[function(require,module,exports) {
var _includes =
/*#__PURE__*/
require("./internal/_includes");

var _curry2 =
/*#__PURE__*/
require("./internal/_curry2");
/**
 * Returns `true` if the specified value is equal, in [`R.equals`](#equals)
 * terms, to at least one element of the given list; `false` otherwise.
 * Works also with strings.
 *
 * @func
 * @memberOf R
 * @since v0.26.0
 * @category List
 * @sig a -> [a] -> Boolean
 * @param {Object} a The item to compare against.
 * @param {Array} list The array to consider.
 * @return {Boolean} `true` if an equivalent item is in the list, `false` otherwise.
 * @see R.any
 * @example
 *
 *      R.includes(3, [1, 2, 3]); //=> true
 *      R.includes(4, [1, 2, 3]); //=> false
 *      R.includes({ name: 'Fred' }, [{ name: 'Fred' }]); //=> true
 *      R.includes([42], [[42]]); //=> true
 *      R.includes('ba', 'banana'); //=>true
 */


var includes =
/*#__PURE__*/
_curry2(_includes);

module.exports = includes;
},{"./internal/_includes":"rSV6","./internal/_curry2":"QWLz"}],"v93W":[function(require,module,exports) {
var _curry1 =
/*#__PURE__*/
require("./internal/_curry1");

var curryN =
/*#__PURE__*/
require("./curryN");
/**
 * Returns a new function much like the supplied one, except that the first two
 * arguments' order is reversed.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category Function
 * @sig ((a, b, c, ...) -> z) -> (b -> a -> c -> ... -> z)
 * @param {Function} fn The function to invoke with its first two parameters reversed.
 * @return {*} The result of invoking `fn` with its first two parameters' order reversed.
 * @example
 *
 *      const mergeThree = (a, b, c) => [].concat(a, b, c);
 *
 *      mergeThree(1, 2, 3); //=> [1, 2, 3]
 *
 *      R.flip(mergeThree)(1, 2, 3); //=> [2, 1, 3]
 * @symb R.flip(f)(a, b, c) = f(b, a, c)
 */


var flip =
/*#__PURE__*/
_curry1(function flip(fn) {
  return curryN(fn.length, function (a, b) {
    var args = Array.prototype.slice.call(arguments, 0);
    args[0] = b;
    args[1] = a;
    return fn.apply(this, args);
  });
});

module.exports = flip;
},{"./internal/_curry1":"FU8z","./curryN":"LB9S"}],"bNzb":[function(require,module,exports) {
var _curry1 =
/*#__PURE__*/
require("./internal/_curry1");
/**
 * Returns a function that always returns the given value. Note that for
 * non-primitives the value returned is a reference to the original value.
 *
 * This function is known as `const`, `constant`, or `K` (for K combinator) in
 * other languages and libraries.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category Function
 * @sig a -> (* -> a)
 * @param {*} val The value to wrap in a function
 * @return {Function} A Function :: * -> val.
 * @example
 *
 *      const t = R.always('Tee');
 *      t(); //=> 'Tee'
 */


var always =
/*#__PURE__*/
_curry1(function always(val) {
  return function () {
    return val;
  };
});

module.exports = always;
},{"./internal/_curry1":"FU8z"}],"Vu8k":[function(require,module,exports) {
/**
 * Private `concat` function to merge two array-like objects.
 *
 * @private
 * @param {Array|Arguments} [set1=[]] An array-like object.
 * @param {Array|Arguments} [set2=[]] An array-like object.
 * @return {Array} A new, merged array.
 * @example
 *
 *      _concat([4, 5, 6], [1, 2, 3]); //=> [4, 5, 6, 1, 2, 3]
 */
function _concat(set1, set2) {
  set1 = set1 || [];
  set2 = set2 || [];
  var idx;
  var len1 = set1.length;
  var len2 = set2.length;
  var result = [];
  idx = 0;

  while (idx < len1) {
    result[result.length] = set1[idx];
    idx += 1;
  }

  idx = 0;

  while (idx < len2) {
    result[result.length] = set2[idx];
    idx += 1;
  }

  return result;
}

module.exports = _concat;
},{}],"EvWP":[function(require,module,exports) {
var _arity =
/*#__PURE__*/
require("./internal/_arity");

var _concat =
/*#__PURE__*/
require("./internal/_concat");

var _curry2 =
/*#__PURE__*/
require("./internal/_curry2");
/**
 * `tryCatch` takes two functions, a `tryer` and a `catcher`. The returned
 * function evaluates the `tryer`; if it does not throw, it simply returns the
 * result. If the `tryer` *does* throw, the returned function evaluates the
 * `catcher` function and returns its result. Note that for effective
 * composition with this function, both the `tryer` and `catcher` functions
 * must return the same type of results.
 *
 * @func
 * @memberOf R
 * @since v0.20.0
 * @category Function
 * @sig (...x -> a) -> ((e, ...x) -> a) -> (...x -> a)
 * @param {Function} tryer The function that may throw.
 * @param {Function} catcher The function that will be evaluated if `tryer` throws.
 * @return {Function} A new function that will catch exceptions and send then to the catcher.
 * @example
 *
 *      R.tryCatch(R.prop('x'), R.F)({x: true}); //=> true
 *      R.tryCatch(() => { throw 'foo'}, R.always('catched'))('bar') // => 'catched'
 *      R.tryCatch(R.times(R.identity), R.always([]))('s') // => []
 *      R.tryCatch(() => { throw 'this is not a valid value'}, (err, value)=>({error : err,  value }))('bar') // => {'error': 'this is not a valid value', 'value': 'bar'}
 */


var tryCatch =
/*#__PURE__*/
_curry2(function _tryCatch(tryer, catcher) {
  return _arity(tryer.length, function () {
    try {
      return tryer.apply(this, arguments);
    } catch (e) {
      return catcher.apply(this, _concat([e], arguments));
    }
  });
});

module.exports = tryCatch;
},{"./internal/_arity":"Jo9I","./internal/_concat":"Vu8k","./internal/_curry2":"QWLz"}],"o20S":[function(require,module,exports) {
/**
 * Node.js module for Forge.
 *
 * @author Dave Longley
 *
 * Copyright 2011-2016 Digital Bazaar, Inc.
 */
module.exports = {
  // default options
  options: {
    usePureJavaScript: false
  }
};
},{}],"JEMJ":[function(require,module,exports) {
var Buffer = require("buffer").Buffer;
/**
 * Base-N/Base-X encoding/decoding functions.
 *
 * Original implementation from base-x:
 * https://github.com/cryptocoinjs/base-x
 *
 * Which is MIT licensed:
 *
 * The MIT License (MIT)
 *
 * Copyright base-x contributors (c) 2016
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 */
var api = {};
module.exports = api; // baseN alphabet indexes

var _reverseAlphabets = {};
/**
 * BaseN-encodes a Uint8Array using the given alphabet.
 *
 * @param input the Uint8Array to encode.
 * @param maxline the maximum number of encoded characters per line to use,
 *          defaults to none.
 *
 * @return the baseN-encoded output string.
 */

api.encode = function (input, alphabet, maxline) {
  if (typeof alphabet !== 'string') {
    throw new TypeError('"alphabet" must be a string.');
  }

  if (maxline !== undefined && typeof maxline !== 'number') {
    throw new TypeError('"maxline" must be a number.');
  }

  var output = '';

  if (!(input instanceof Uint8Array)) {
    // assume forge byte buffer
    output = _encodeWithByteBuffer(input, alphabet);
  } else {
    var i = 0;
    var base = alphabet.length;
    var first = alphabet.charAt(0);
    var digits = [0];

    for (i = 0; i < input.length; ++i) {
      for (var j = 0, carry = input[i]; j < digits.length; ++j) {
        carry += digits[j] << 8;
        digits[j] = carry % base;
        carry = carry / base | 0;
      }

      while (carry > 0) {
        digits.push(carry % base);
        carry = carry / base | 0;
      }
    } // deal with leading zeros


    for (i = 0; input[i] === 0 && i < input.length - 1; ++i) {
      output += first;
    } // convert digits to a string


    for (i = digits.length - 1; i >= 0; --i) {
      output += alphabet[digits[i]];
    }
  }

  if (maxline) {
    var regex = new RegExp('.{1,' + maxline + '}', 'g');
    output = output.match(regex).join('\r\n');
  }

  return output;
};
/**
 * Decodes a baseN-encoded (using the given alphabet) string to a
 * Uint8Array.
 *
 * @param input the baseN-encoded input string.
 *
 * @return the Uint8Array.
 */


api.decode = function (input, alphabet) {
  if (typeof input !== 'string') {
    throw new TypeError('"input" must be a string.');
  }

  if (typeof alphabet !== 'string') {
    throw new TypeError('"alphabet" must be a string.');
  }

  var table = _reverseAlphabets[alphabet];

  if (!table) {
    // compute reverse alphabet
    table = _reverseAlphabets[alphabet] = [];

    for (var i = 0; i < alphabet.length; ++i) {
      table[alphabet.charCodeAt(i)] = i;
    }
  } // remove whitespace characters


  input = input.replace(/\s/g, '');
  var base = alphabet.length;
  var first = alphabet.charAt(0);
  var bytes = [0];

  for (var i = 0; i < input.length; i++) {
    var value = table[input.charCodeAt(i)];

    if (value === undefined) {
      return;
    }

    for (var j = 0, carry = value; j < bytes.length; ++j) {
      carry += bytes[j] * base;
      bytes[j] = carry & 0xff;
      carry >>= 8;
    }

    while (carry > 0) {
      bytes.push(carry & 0xff);
      carry >>= 8;
    }
  } // deal with leading zeros


  for (var k = 0; input[k] === first && k < input.length - 1; ++k) {
    bytes.push(0);
  }

  if (typeof Buffer !== 'undefined') {
    return Buffer.from(bytes.reverse());
  }

  return new Uint8Array(bytes.reverse());
};

function _encodeWithByteBuffer(input, alphabet) {
  var i = 0;
  var base = alphabet.length;
  var first = alphabet.charAt(0);
  var digits = [0];

  for (i = 0; i < input.length(); ++i) {
    for (var j = 0, carry = input.at(i); j < digits.length; ++j) {
      carry += digits[j] << 8;
      digits[j] = carry % base;
      carry = carry / base | 0;
    }

    while (carry > 0) {
      digits.push(carry % base);
      carry = carry / base | 0;
    }
  }

  var output = ''; // deal with leading zeros

  for (i = 0; input.at(i) === 0 && i < input.length() - 1; ++i) {
    output += first;
  } // convert digits to a string


  for (i = digits.length - 1; i >= 0; --i) {
    output += alphabet[digits[i]];
  }

  return output;
}
},{"buffer":"vpK4"}],"lWyh":[function(require,module,exports) {
var process = require("process");
var global = arguments[3];
var Buffer = require("buffer").Buffer;
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

/**
 * Utility functions for web applications.
 *
 * @author Dave Longley
 *
 * Copyright (c) 2010-2018 Digital Bazaar, Inc.
 */
var forge = require('./forge');

var baseN = require('./baseN');
/* Utilities API */


var util = module.exports = forge.util = forge.util || {}; // define setImmediate and nextTick

(function () {
  // use native nextTick (unless we're in webpack)
  // webpack (or better node-libs-browser polyfill) sets process.browser.
  // this way we can detect webpack properly
  if (typeof process !== 'undefined' && process.nextTick && !true) {
    util.nextTick = process.nextTick;

    if (typeof setImmediate === 'function') {
      util.setImmediate = setImmediate;
    } else {
      // polyfill setImmediate with nextTick, older versions of node
      // (those w/o setImmediate) won't totally starve IO
      util.setImmediate = util.nextTick;
    }

    return;
  } // polyfill nextTick with native setImmediate


  if (typeof setImmediate === 'function') {
    util.setImmediate = function () {
      return setImmediate.apply(undefined, arguments);
    };

    util.nextTick = function (callback) {
      return setImmediate(callback);
    };

    return;
  }
  /* Note: A polyfill upgrade pattern is used here to allow combining
  polyfills. For example, MutationObserver is fast, but blocks UI updates,
  so it needs to allow UI updates periodically, so it falls back on
  postMessage or setTimeout. */
  // polyfill with setTimeout


  util.setImmediate = function (callback) {
    setTimeout(callback, 0);
  }; // upgrade polyfill to use postMessage


  if (typeof window !== 'undefined' && typeof window.postMessage === 'function') {
    let handler = function (event) {
      if (event.source === window && event.data === msg) {
        event.stopPropagation();
        var copy = callbacks.slice();
        callbacks.length = 0;
        copy.forEach(function (callback) {
          callback();
        });
      }
    };

    var msg = 'forge.setImmediate';
    var callbacks = [];

    util.setImmediate = function (callback) {
      callbacks.push(callback); // only send message when one hasn't been sent in
      // the current turn of the event loop

      if (callbacks.length === 1) {
        window.postMessage(msg, '*');
      }
    };

    window.addEventListener('message', handler, true);
  } // upgrade polyfill to use MutationObserver


  if (typeof MutationObserver !== 'undefined') {
    // polyfill with MutationObserver
    var now = Date.now();
    var attr = true;
    var div = document.createElement('div');
    var callbacks = [];
    new MutationObserver(function () {
      var copy = callbacks.slice();
      callbacks.length = 0;
      copy.forEach(function (callback) {
        callback();
      });
    }).observe(div, {
      attributes: true
    });
    var oldSetImmediate = util.setImmediate;

    util.setImmediate = function (callback) {
      if (Date.now() - now > 15) {
        now = Date.now();
        oldSetImmediate(callback);
      } else {
        callbacks.push(callback); // only trigger observer when it hasn't been triggered in
        // the current turn of the event loop

        if (callbacks.length === 1) {
          div.setAttribute('a', attr = !attr);
        }
      }
    };
  }

  util.nextTick = util.setImmediate;
})(); // check if running under Node.js


util.isNodejs = typeof process !== 'undefined' && process.versions && process.versions.node; // 'self' will also work in Web Workers (instance of WorkerGlobalScope) while
// it will point to `window` in the main thread.
// To remain compatible with older browsers, we fall back to 'window' if 'self'
// is not available.

util.globalScope = function () {
  if (util.isNodejs) {
    return global;
  }

  return typeof self === 'undefined' ? window : self;
}(); // define isArray


util.isArray = Array.isArray || function (x) {
  return Object.prototype.toString.call(x) === '[object Array]';
}; // define isArrayBuffer


util.isArrayBuffer = function (x) {
  return typeof ArrayBuffer !== 'undefined' && x instanceof ArrayBuffer;
}; // define isArrayBufferView


util.isArrayBufferView = function (x) {
  return x && util.isArrayBuffer(x.buffer) && x.byteLength !== undefined;
};
/**
 * Ensure a bits param is 8, 16, 24, or 32. Used to validate input for
 * algorithms where bit manipulation, JavaScript limitations, and/or algorithm
 * design only allow for byte operations of a limited size.
 *
 * @param n number of bits.
 *
 * Throw Error if n invalid.
 */


function _checkBitsParam(n) {
  if (!(n === 8 || n === 16 || n === 24 || n === 32)) {
    throw new Error('Only 8, 16, 24, or 32 bits supported: ' + n);
  }
} // TODO: set ByteBuffer to best available backing


util.ByteBuffer = ByteStringBuffer;
/** Buffer w/BinaryString backing */

/**
 * Constructor for a binary string backed byte buffer.
 *
 * @param [b] the bytes to wrap (either encoded as string, one byte per
 *          character, or as an ArrayBuffer or Typed Array).
 */

function ByteStringBuffer(b) {
  // TODO: update to match DataBuffer API
  // the data in this buffer
  this.data = ''; // the pointer for reading from this buffer

  this.read = 0;

  if (typeof b === 'string') {
    this.data = b;
  } else if (util.isArrayBuffer(b) || util.isArrayBufferView(b)) {
    if (typeof Buffer !== 'undefined' && b instanceof Buffer) {
      this.data = b.toString('binary');
    } else {
      // convert native buffer to forge buffer
      // FIXME: support native buffers internally instead
      var arr = new Uint8Array(b);

      try {
        this.data = String.fromCharCode.apply(null, arr);
      } catch (e) {
        for (var i = 0; i < arr.length; ++i) {
          this.putByte(arr[i]);
        }
      }
    }
  } else if (b instanceof ByteStringBuffer || _typeof(b) === 'object' && typeof b.data === 'string' && typeof b.read === 'number') {
    // copy existing buffer
    this.data = b.data;
    this.read = b.read;
  } // used for v8 optimization


  this._constructedStringLength = 0;
}

util.ByteStringBuffer = ByteStringBuffer;
/* Note: This is an optimization for V8-based browsers. When V8 concatenates
  a string, the strings are only joined logically using a "cons string" or
  "constructed/concatenated string". These containers keep references to one
  another and can result in very large memory usage. For example, if a 2MB
  string is constructed by concatenating 4 bytes together at a time, the
  memory usage will be ~44MB; so ~22x increase. The strings are only joined
  together when an operation requiring their joining takes place, such as
  substr(). This function is called when adding data to this buffer to ensure
  these types of strings are periodically joined to reduce the memory
  footprint. */

var _MAX_CONSTRUCTED_STRING_LENGTH = 4096;

util.ByteStringBuffer.prototype._optimizeConstructedString = function (x) {
  this._constructedStringLength += x;

  if (this._constructedStringLength > _MAX_CONSTRUCTED_STRING_LENGTH) {
    // this substr() should cause the constructed string to join
    this.data.substr(0, 1);
    this._constructedStringLength = 0;
  }
};
/**
 * Gets the number of bytes in this buffer.
 *
 * @return the number of bytes in this buffer.
 */


util.ByteStringBuffer.prototype.length = function () {
  return this.data.length - this.read;
};
/**
 * Gets whether or not this buffer is empty.
 *
 * @return true if this buffer is empty, false if not.
 */


util.ByteStringBuffer.prototype.isEmpty = function () {
  return this.length() <= 0;
};
/**
 * Puts a byte in this buffer.
 *
 * @param b the byte to put.
 *
 * @return this buffer.
 */


util.ByteStringBuffer.prototype.putByte = function (b) {
  return this.putBytes(String.fromCharCode(b));
};
/**
 * Puts a byte in this buffer N times.
 *
 * @param b the byte to put.
 * @param n the number of bytes of value b to put.
 *
 * @return this buffer.
 */


util.ByteStringBuffer.prototype.fillWithByte = function (b, n) {
  b = String.fromCharCode(b);
  var d = this.data;

  while (n > 0) {
    if (n & 1) {
      d += b;
    }

    n >>>= 1;

    if (n > 0) {
      b += b;
    }
  }

  this.data = d;

  this._optimizeConstructedString(n);

  return this;
};
/**
 * Puts bytes in this buffer.
 *
 * @param bytes the bytes (as a UTF-8 encoded string) to put.
 *
 * @return this buffer.
 */


util.ByteStringBuffer.prototype.putBytes = function (bytes) {
  this.data += bytes;

  this._optimizeConstructedString(bytes.length);

  return this;
};
/**
 * Puts a UTF-16 encoded string into this buffer.
 *
 * @param str the string to put.
 *
 * @return this buffer.
 */


util.ByteStringBuffer.prototype.putString = function (str) {
  return this.putBytes(util.encodeUtf8(str));
};
/**
 * Puts a 16-bit integer in this buffer in big-endian order.
 *
 * @param i the 16-bit integer.
 *
 * @return this buffer.
 */


util.ByteStringBuffer.prototype.putInt16 = function (i) {
  return this.putBytes(String.fromCharCode(i >> 8 & 0xFF) + String.fromCharCode(i & 0xFF));
};
/**
 * Puts a 24-bit integer in this buffer in big-endian order.
 *
 * @param i the 24-bit integer.
 *
 * @return this buffer.
 */


util.ByteStringBuffer.prototype.putInt24 = function (i) {
  return this.putBytes(String.fromCharCode(i >> 16 & 0xFF) + String.fromCharCode(i >> 8 & 0xFF) + String.fromCharCode(i & 0xFF));
};
/**
 * Puts a 32-bit integer in this buffer in big-endian order.
 *
 * @param i the 32-bit integer.
 *
 * @return this buffer.
 */


util.ByteStringBuffer.prototype.putInt32 = function (i) {
  return this.putBytes(String.fromCharCode(i >> 24 & 0xFF) + String.fromCharCode(i >> 16 & 0xFF) + String.fromCharCode(i >> 8 & 0xFF) + String.fromCharCode(i & 0xFF));
};
/**
 * Puts a 16-bit integer in this buffer in little-endian order.
 *
 * @param i the 16-bit integer.
 *
 * @return this buffer.
 */


util.ByteStringBuffer.prototype.putInt16Le = function (i) {
  return this.putBytes(String.fromCharCode(i & 0xFF) + String.fromCharCode(i >> 8 & 0xFF));
};
/**
 * Puts a 24-bit integer in this buffer in little-endian order.
 *
 * @param i the 24-bit integer.
 *
 * @return this buffer.
 */


util.ByteStringBuffer.prototype.putInt24Le = function (i) {
  return this.putBytes(String.fromCharCode(i & 0xFF) + String.fromCharCode(i >> 8 & 0xFF) + String.fromCharCode(i >> 16 & 0xFF));
};
/**
 * Puts a 32-bit integer in this buffer in little-endian order.
 *
 * @param i the 32-bit integer.
 *
 * @return this buffer.
 */


util.ByteStringBuffer.prototype.putInt32Le = function (i) {
  return this.putBytes(String.fromCharCode(i & 0xFF) + String.fromCharCode(i >> 8 & 0xFF) + String.fromCharCode(i >> 16 & 0xFF) + String.fromCharCode(i >> 24 & 0xFF));
};
/**
 * Puts an n-bit integer in this buffer in big-endian order.
 *
 * @param i the n-bit integer.
 * @param n the number of bits in the integer (8, 16, 24, or 32).
 *
 * @return this buffer.
 */


util.ByteStringBuffer.prototype.putInt = function (i, n) {
  _checkBitsParam(n);

  var bytes = '';

  do {
    n -= 8;
    bytes += String.fromCharCode(i >> n & 0xFF);
  } while (n > 0);

  return this.putBytes(bytes);
};
/**
 * Puts a signed n-bit integer in this buffer in big-endian order. Two's
 * complement representation is used.
 *
 * @param i the n-bit integer.
 * @param n the number of bits in the integer (8, 16, 24, or 32).
 *
 * @return this buffer.
 */


util.ByteStringBuffer.prototype.putSignedInt = function (i, n) {
  // putInt checks n
  if (i < 0) {
    i += 2 << n - 1;
  }

  return this.putInt(i, n);
};
/**
 * Puts the given buffer into this buffer.
 *
 * @param buffer the buffer to put into this one.
 *
 * @return this buffer.
 */


util.ByteStringBuffer.prototype.putBuffer = function (buffer) {
  return this.putBytes(buffer.getBytes());
};
/**
 * Gets a byte from this buffer and advances the read pointer by 1.
 *
 * @return the byte.
 */


util.ByteStringBuffer.prototype.getByte = function () {
  return this.data.charCodeAt(this.read++);
};
/**
 * Gets a uint16 from this buffer in big-endian order and advances the read
 * pointer by 2.
 *
 * @return the uint16.
 */


util.ByteStringBuffer.prototype.getInt16 = function () {
  var rval = this.data.charCodeAt(this.read) << 8 ^ this.data.charCodeAt(this.read + 1);
  this.read += 2;
  return rval;
};
/**
 * Gets a uint24 from this buffer in big-endian order and advances the read
 * pointer by 3.
 *
 * @return the uint24.
 */


util.ByteStringBuffer.prototype.getInt24 = function () {
  var rval = this.data.charCodeAt(this.read) << 16 ^ this.data.charCodeAt(this.read + 1) << 8 ^ this.data.charCodeAt(this.read + 2);
  this.read += 3;
  return rval;
};
/**
 * Gets a uint32 from this buffer in big-endian order and advances the read
 * pointer by 4.
 *
 * @return the word.
 */


util.ByteStringBuffer.prototype.getInt32 = function () {
  var rval = this.data.charCodeAt(this.read) << 24 ^ this.data.charCodeAt(this.read + 1) << 16 ^ this.data.charCodeAt(this.read + 2) << 8 ^ this.data.charCodeAt(this.read + 3);
  this.read += 4;
  return rval;
};
/**
 * Gets a uint16 from this buffer in little-endian order and advances the read
 * pointer by 2.
 *
 * @return the uint16.
 */


util.ByteStringBuffer.prototype.getInt16Le = function () {
  var rval = this.data.charCodeAt(this.read) ^ this.data.charCodeAt(this.read + 1) << 8;
  this.read += 2;
  return rval;
};
/**
 * Gets a uint24 from this buffer in little-endian order and advances the read
 * pointer by 3.
 *
 * @return the uint24.
 */


util.ByteStringBuffer.prototype.getInt24Le = function () {
  var rval = this.data.charCodeAt(this.read) ^ this.data.charCodeAt(this.read + 1) << 8 ^ this.data.charCodeAt(this.read + 2) << 16;
  this.read += 3;
  return rval;
};
/**
 * Gets a uint32 from this buffer in little-endian order and advances the read
 * pointer by 4.
 *
 * @return the word.
 */


util.ByteStringBuffer.prototype.getInt32Le = function () {
  var rval = this.data.charCodeAt(this.read) ^ this.data.charCodeAt(this.read + 1) << 8 ^ this.data.charCodeAt(this.read + 2) << 16 ^ this.data.charCodeAt(this.read + 3) << 24;
  this.read += 4;
  return rval;
};
/**
 * Gets an n-bit integer from this buffer in big-endian order and advances the
 * read pointer by ceil(n/8).
 *
 * @param n the number of bits in the integer (8, 16, 24, or 32).
 *
 * @return the integer.
 */


util.ByteStringBuffer.prototype.getInt = function (n) {
  _checkBitsParam(n);

  var rval = 0;

  do {
    // TODO: Use (rval * 0x100) if adding support for 33 to 53 bits.
    rval = (rval << 8) + this.data.charCodeAt(this.read++);
    n -= 8;
  } while (n > 0);

  return rval;
};
/**
 * Gets a signed n-bit integer from this buffer in big-endian order, using
 * two's complement, and advances the read pointer by n/8.
 *
 * @param n the number of bits in the integer (8, 16, 24, or 32).
 *
 * @return the integer.
 */


util.ByteStringBuffer.prototype.getSignedInt = function (n) {
  // getInt checks n
  var x = this.getInt(n);
  var max = 2 << n - 2;

  if (x >= max) {
    x -= max << 1;
  }

  return x;
};
/**
 * Reads bytes out into a UTF-8 string and clears them from the buffer.
 *
 * @param count the number of bytes to read, undefined or null for all.
 *
 * @return a UTF-8 string of bytes.
 */


util.ByteStringBuffer.prototype.getBytes = function (count) {
  var rval;

  if (count) {
    // read count bytes
    count = Math.min(this.length(), count);
    rval = this.data.slice(this.read, this.read + count);
    this.read += count;
  } else if (count === 0) {
    rval = '';
  } else {
    // read all bytes, optimize to only copy when needed
    rval = this.read === 0 ? this.data : this.data.slice(this.read);
    this.clear();
  }

  return rval;
};
/**
 * Gets a UTF-8 encoded string of the bytes from this buffer without modifying
 * the read pointer.
 *
 * @param count the number of bytes to get, omit to get all.
 *
 * @return a string full of UTF-8 encoded characters.
 */


util.ByteStringBuffer.prototype.bytes = function (count) {
  return typeof count === 'undefined' ? this.data.slice(this.read) : this.data.slice(this.read, this.read + count);
};
/**
 * Gets a byte at the given index without modifying the read pointer.
 *
 * @param i the byte index.
 *
 * @return the byte.
 */


util.ByteStringBuffer.prototype.at = function (i) {
  return this.data.charCodeAt(this.read + i);
};
/**
 * Puts a byte at the given index without modifying the read pointer.
 *
 * @param i the byte index.
 * @param b the byte to put.
 *
 * @return this buffer.
 */


util.ByteStringBuffer.prototype.setAt = function (i, b) {
  this.data = this.data.substr(0, this.read + i) + String.fromCharCode(b) + this.data.substr(this.read + i + 1);
  return this;
};
/**
 * Gets the last byte without modifying the read pointer.
 *
 * @return the last byte.
 */


util.ByteStringBuffer.prototype.last = function () {
  return this.data.charCodeAt(this.data.length - 1);
};
/**
 * Creates a copy of this buffer.
 *
 * @return the copy.
 */


util.ByteStringBuffer.prototype.copy = function () {
  var c = util.createBuffer(this.data);
  c.read = this.read;
  return c;
};
/**
 * Compacts this buffer.
 *
 * @return this buffer.
 */


util.ByteStringBuffer.prototype.compact = function () {
  if (this.read > 0) {
    this.data = this.data.slice(this.read);
    this.read = 0;
  }

  return this;
};
/**
 * Clears this buffer.
 *
 * @return this buffer.
 */


util.ByteStringBuffer.prototype.clear = function () {
  this.data = '';
  this.read = 0;
  return this;
};
/**
 * Shortens this buffer by triming bytes off of the end of this buffer.
 *
 * @param count the number of bytes to trim off.
 *
 * @return this buffer.
 */


util.ByteStringBuffer.prototype.truncate = function (count) {
  var len = Math.max(0, this.length() - count);
  this.data = this.data.substr(this.read, len);
  this.read = 0;
  return this;
};
/**
 * Converts this buffer to a hexadecimal string.
 *
 * @return a hexadecimal string.
 */


util.ByteStringBuffer.prototype.toHex = function () {
  var rval = '';

  for (var i = this.read; i < this.data.length; ++i) {
    var b = this.data.charCodeAt(i);

    if (b < 16) {
      rval += '0';
    }

    rval += b.toString(16);
  }

  return rval;
};
/**
 * Converts this buffer to a UTF-16 string (standard JavaScript string).
 *
 * @return a UTF-16 string.
 */


util.ByteStringBuffer.prototype.toString = function () {
  return util.decodeUtf8(this.bytes());
};
/** End Buffer w/BinaryString backing */

/** Buffer w/UInt8Array backing */

/**
 * FIXME: Experimental. Do not use yet.
 *
 * Constructor for an ArrayBuffer-backed byte buffer.
 *
 * The buffer may be constructed from a string, an ArrayBuffer, DataView, or a
 * TypedArray.
 *
 * If a string is given, its encoding should be provided as an option,
 * otherwise it will default to 'binary'. A 'binary' string is encoded such
 * that each character is one byte in length and size.
 *
 * If an ArrayBuffer, DataView, or TypedArray is given, it will be used
 * *directly* without any copying. Note that, if a write to the buffer requires
 * more space, the buffer will allocate a new backing ArrayBuffer to
 * accommodate. The starting read and write offsets for the buffer may be
 * given as options.
 *
 * @param [b] the initial bytes for this buffer.
 * @param options the options to use:
 *          [readOffset] the starting read offset to use (default: 0).
 *          [writeOffset] the starting write offset to use (default: the
 *            length of the first parameter).
 *          [growSize] the minimum amount, in bytes, to grow the buffer by to
 *            accommodate writes (default: 1024).
 *          [encoding] the encoding ('binary', 'utf8', 'utf16', 'hex') for the
 *            first parameter, if it is a string (default: 'binary').
 */


function DataBuffer(b, options) {
  // default options
  options = options || {}; // pointers for read from/write to buffer

  this.read = options.readOffset || 0;
  this.growSize = options.growSize || 1024;
  var isArrayBuffer = util.isArrayBuffer(b);
  var isArrayBufferView = util.isArrayBufferView(b);

  if (isArrayBuffer || isArrayBufferView) {
    // use ArrayBuffer directly
    if (isArrayBuffer) {
      this.data = new DataView(b);
    } else {
      // TODO: adjust read/write offset based on the type of view
      // or specify that this must be done in the options ... that the
      // offsets are byte-based
      this.data = new DataView(b.buffer, b.byteOffset, b.byteLength);
    }

    this.write = 'writeOffset' in options ? options.writeOffset : this.data.byteLength;
    return;
  } // initialize to empty array buffer and add any given bytes using putBytes


  this.data = new DataView(new ArrayBuffer(0));
  this.write = 0;

  if (b !== null && b !== undefined) {
    this.putBytes(b);
  }

  if ('writeOffset' in options) {
    this.write = options.writeOffset;
  }
}

util.DataBuffer = DataBuffer;
/**
 * Gets the number of bytes in this buffer.
 *
 * @return the number of bytes in this buffer.
 */

util.DataBuffer.prototype.length = function () {
  return this.write - this.read;
};
/**
 * Gets whether or not this buffer is empty.
 *
 * @return true if this buffer is empty, false if not.
 */


util.DataBuffer.prototype.isEmpty = function () {
  return this.length() <= 0;
};
/**
 * Ensures this buffer has enough empty space to accommodate the given number
 * of bytes. An optional parameter may be given that indicates a minimum
 * amount to grow the buffer if necessary. If the parameter is not given,
 * the buffer will be grown by some previously-specified default amount
 * or heuristic.
 *
 * @param amount the number of bytes to accommodate.
 * @param [growSize] the minimum amount, in bytes, to grow the buffer by if
 *          necessary.
 */


util.DataBuffer.prototype.accommodate = function (amount, growSize) {
  if (this.length() >= amount) {
    return this;
  }

  growSize = Math.max(growSize || this.growSize, amount); // grow buffer

  var src = new Uint8Array(this.data.buffer, this.data.byteOffset, this.data.byteLength);
  var dst = new Uint8Array(this.length() + growSize);
  dst.set(src);
  this.data = new DataView(dst.buffer);
  return this;
};
/**
 * Puts a byte in this buffer.
 *
 * @param b the byte to put.
 *
 * @return this buffer.
 */


util.DataBuffer.prototype.putByte = function (b) {
  this.accommodate(1);
  this.data.setUint8(this.write++, b);
  return this;
};
/**
 * Puts a byte in this buffer N times.
 *
 * @param b the byte to put.
 * @param n the number of bytes of value b to put.
 *
 * @return this buffer.
 */


util.DataBuffer.prototype.fillWithByte = function (b, n) {
  this.accommodate(n);

  for (var i = 0; i < n; ++i) {
    this.data.setUint8(b);
  }

  return this;
};
/**
 * Puts bytes in this buffer. The bytes may be given as a string, an
 * ArrayBuffer, a DataView, or a TypedArray.
 *
 * @param bytes the bytes to put.
 * @param [encoding] the encoding for the first parameter ('binary', 'utf8',
 *          'utf16', 'hex'), if it is a string (default: 'binary').
 *
 * @return this buffer.
 */


util.DataBuffer.prototype.putBytes = function (bytes, encoding) {
  if (util.isArrayBufferView(bytes)) {
    var src = new Uint8Array(bytes.buffer, bytes.byteOffset, bytes.byteLength);
    var len = src.byteLength - src.byteOffset;
    this.accommodate(len);
    var dst = new Uint8Array(this.data.buffer, this.write);
    dst.set(src);
    this.write += len;
    return this;
  }

  if (util.isArrayBuffer(bytes)) {
    var src = new Uint8Array(bytes);
    this.accommodate(src.byteLength);
    var dst = new Uint8Array(this.data.buffer);
    dst.set(src, this.write);
    this.write += src.byteLength;
    return this;
  } // bytes is a util.DataBuffer or equivalent


  if (bytes instanceof util.DataBuffer || _typeof(bytes) === 'object' && typeof bytes.read === 'number' && typeof bytes.write === 'number' && util.isArrayBufferView(bytes.data)) {
    var src = new Uint8Array(bytes.data.byteLength, bytes.read, bytes.length());
    this.accommodate(src.byteLength);
    var dst = new Uint8Array(bytes.data.byteLength, this.write);
    dst.set(src);
    this.write += src.byteLength;
    return this;
  }

  if (bytes instanceof util.ByteStringBuffer) {
    // copy binary string and process as the same as a string parameter below
    bytes = bytes.data;
    encoding = 'binary';
  } // string conversion


  encoding = encoding || 'binary';

  if (typeof bytes === 'string') {
    var view; // decode from string

    if (encoding === 'hex') {
      this.accommodate(Math.ceil(bytes.length / 2));
      view = new Uint8Array(this.data.buffer, this.write);
      this.write += util.binary.hex.decode(bytes, view, this.write);
      return this;
    }

    if (encoding === 'base64') {
      this.accommodate(Math.ceil(bytes.length / 4) * 3);
      view = new Uint8Array(this.data.buffer, this.write);
      this.write += util.binary.base64.decode(bytes, view, this.write);
      return this;
    } // encode text as UTF-8 bytes


    if (encoding === 'utf8') {
      // encode as UTF-8 then decode string as raw binary
      bytes = util.encodeUtf8(bytes);
      encoding = 'binary';
    } // decode string as raw binary


    if (encoding === 'binary' || encoding === 'raw') {
      // one byte per character
      this.accommodate(bytes.length);
      view = new Uint8Array(this.data.buffer, this.write);
      this.write += util.binary.raw.decode(view);
      return this;
    } // encode text as UTF-16 bytes


    if (encoding === 'utf16') {
      // two bytes per character
      this.accommodate(bytes.length * 2);
      view = new Uint16Array(this.data.buffer, this.write);
      this.write += util.text.utf16.encode(view);
      return this;
    }

    throw new Error('Invalid encoding: ' + encoding);
  }

  throw Error('Invalid parameter: ' + bytes);
};
/**
 * Puts the given buffer into this buffer.
 *
 * @param buffer the buffer to put into this one.
 *
 * @return this buffer.
 */


util.DataBuffer.prototype.putBuffer = function (buffer) {
  this.putBytes(buffer);
  buffer.clear();
  return this;
};
/**
 * Puts a string into this buffer.
 *
 * @param str the string to put.
 * @param [encoding] the encoding for the string (default: 'utf16').
 *
 * @return this buffer.
 */


util.DataBuffer.prototype.putString = function (str) {
  return this.putBytes(str, 'utf16');
};
/**
 * Puts a 16-bit integer in this buffer in big-endian order.
 *
 * @param i the 16-bit integer.
 *
 * @return this buffer.
 */


util.DataBuffer.prototype.putInt16 = function (i) {
  this.accommodate(2);
  this.data.setInt16(this.write, i);
  this.write += 2;
  return this;
};
/**
 * Puts a 24-bit integer in this buffer in big-endian order.
 *
 * @param i the 24-bit integer.
 *
 * @return this buffer.
 */


util.DataBuffer.prototype.putInt24 = function (i) {
  this.accommodate(3);
  this.data.setInt16(this.write, i >> 8 & 0xFFFF);
  this.data.setInt8(this.write, i >> 16 & 0xFF);
  this.write += 3;
  return this;
};
/**
 * Puts a 32-bit integer in this buffer in big-endian order.
 *
 * @param i the 32-bit integer.
 *
 * @return this buffer.
 */


util.DataBuffer.prototype.putInt32 = function (i) {
  this.accommodate(4);
  this.data.setInt32(this.write, i);
  this.write += 4;
  return this;
};
/**
 * Puts a 16-bit integer in this buffer in little-endian order.
 *
 * @param i the 16-bit integer.
 *
 * @return this buffer.
 */


util.DataBuffer.prototype.putInt16Le = function (i) {
  this.accommodate(2);
  this.data.setInt16(this.write, i, true);
  this.write += 2;
  return this;
};
/**
 * Puts a 24-bit integer in this buffer in little-endian order.
 *
 * @param i the 24-bit integer.
 *
 * @return this buffer.
 */


util.DataBuffer.prototype.putInt24Le = function (i) {
  this.accommodate(3);
  this.data.setInt8(this.write, i >> 16 & 0xFF);
  this.data.setInt16(this.write, i >> 8 & 0xFFFF, true);
  this.write += 3;
  return this;
};
/**
 * Puts a 32-bit integer in this buffer in little-endian order.
 *
 * @param i the 32-bit integer.
 *
 * @return this buffer.
 */


util.DataBuffer.prototype.putInt32Le = function (i) {
  this.accommodate(4);
  this.data.setInt32(this.write, i, true);
  this.write += 4;
  return this;
};
/**
 * Puts an n-bit integer in this buffer in big-endian order.
 *
 * @param i the n-bit integer.
 * @param n the number of bits in the integer (8, 16, 24, or 32).
 *
 * @return this buffer.
 */


util.DataBuffer.prototype.putInt = function (i, n) {
  _checkBitsParam(n);

  this.accommodate(n / 8);

  do {
    n -= 8;
    this.data.setInt8(this.write++, i >> n & 0xFF);
  } while (n > 0);

  return this;
};
/**
 * Puts a signed n-bit integer in this buffer in big-endian order. Two's
 * complement representation is used.
 *
 * @param i the n-bit integer.
 * @param n the number of bits in the integer.
 *
 * @return this buffer.
 */


util.DataBuffer.prototype.putSignedInt = function (i, n) {
  _checkBitsParam(n);

  this.accommodate(n / 8);

  if (i < 0) {
    i += 2 << n - 1;
  }

  return this.putInt(i, n);
};
/**
 * Gets a byte from this buffer and advances the read pointer by 1.
 *
 * @return the byte.
 */


util.DataBuffer.prototype.getByte = function () {
  return this.data.getInt8(this.read++);
};
/**
 * Gets a uint16 from this buffer in big-endian order and advances the read
 * pointer by 2.
 *
 * @return the uint16.
 */


util.DataBuffer.prototype.getInt16 = function () {
  var rval = this.data.getInt16(this.read);
  this.read += 2;
  return rval;
};
/**
 * Gets a uint24 from this buffer in big-endian order and advances the read
 * pointer by 3.
 *
 * @return the uint24.
 */


util.DataBuffer.prototype.getInt24 = function () {
  var rval = this.data.getInt16(this.read) << 8 ^ this.data.getInt8(this.read + 2);
  this.read += 3;
  return rval;
};
/**
 * Gets a uint32 from this buffer in big-endian order and advances the read
 * pointer by 4.
 *
 * @return the word.
 */


util.DataBuffer.prototype.getInt32 = function () {
  var rval = this.data.getInt32(this.read);
  this.read += 4;
  return rval;
};
/**
 * Gets a uint16 from this buffer in little-endian order and advances the read
 * pointer by 2.
 *
 * @return the uint16.
 */


util.DataBuffer.prototype.getInt16Le = function () {
  var rval = this.data.getInt16(this.read, true);
  this.read += 2;
  return rval;
};
/**
 * Gets a uint24 from this buffer in little-endian order and advances the read
 * pointer by 3.
 *
 * @return the uint24.
 */


util.DataBuffer.prototype.getInt24Le = function () {
  var rval = this.data.getInt8(this.read) ^ this.data.getInt16(this.read + 1, true) << 8;
  this.read += 3;
  return rval;
};
/**
 * Gets a uint32 from this buffer in little-endian order and advances the read
 * pointer by 4.
 *
 * @return the word.
 */


util.DataBuffer.prototype.getInt32Le = function () {
  var rval = this.data.getInt32(this.read, true);
  this.read += 4;
  return rval;
};
/**
 * Gets an n-bit integer from this buffer in big-endian order and advances the
 * read pointer by n/8.
 *
 * @param n the number of bits in the integer (8, 16, 24, or 32).
 *
 * @return the integer.
 */


util.DataBuffer.prototype.getInt = function (n) {
  _checkBitsParam(n);

  var rval = 0;

  do {
    // TODO: Use (rval * 0x100) if adding support for 33 to 53 bits.
    rval = (rval << 8) + this.data.getInt8(this.read++);
    n -= 8;
  } while (n > 0);

  return rval;
};
/**
 * Gets a signed n-bit integer from this buffer in big-endian order, using
 * two's complement, and advances the read pointer by n/8.
 *
 * @param n the number of bits in the integer (8, 16, 24, or 32).
 *
 * @return the integer.
 */


util.DataBuffer.prototype.getSignedInt = function (n) {
  // getInt checks n
  var x = this.getInt(n);
  var max = 2 << n - 2;

  if (x >= max) {
    x -= max << 1;
  }

  return x;
};
/**
 * Reads bytes out into a UTF-8 string and clears them from the buffer.
 *
 * @param count the number of bytes to read, undefined or null for all.
 *
 * @return a UTF-8 string of bytes.
 */


util.DataBuffer.prototype.getBytes = function (count) {
  // TODO: deprecate this method, it is poorly named and
  // this.toString('binary') replaces it
  // add a toTypedArray()/toArrayBuffer() function
  var rval;

  if (count) {
    // read count bytes
    count = Math.min(this.length(), count);
    rval = this.data.slice(this.read, this.read + count);
    this.read += count;
  } else if (count === 0) {
    rval = '';
  } else {
    // read all bytes, optimize to only copy when needed
    rval = this.read === 0 ? this.data : this.data.slice(this.read);
    this.clear();
  }

  return rval;
};
/**
 * Gets a UTF-8 encoded string of the bytes from this buffer without modifying
 * the read pointer.
 *
 * @param count the number of bytes to get, omit to get all.
 *
 * @return a string full of UTF-8 encoded characters.
 */


util.DataBuffer.prototype.bytes = function (count) {
  // TODO: deprecate this method, it is poorly named, add "getString()"
  return typeof count === 'undefined' ? this.data.slice(this.read) : this.data.slice(this.read, this.read + count);
};
/**
 * Gets a byte at the given index without modifying the read pointer.
 *
 * @param i the byte index.
 *
 * @return the byte.
 */


util.DataBuffer.prototype.at = function (i) {
  return this.data.getUint8(this.read + i);
};
/**
 * Puts a byte at the given index without modifying the read pointer.
 *
 * @param i the byte index.
 * @param b the byte to put.
 *
 * @return this buffer.
 */


util.DataBuffer.prototype.setAt = function (i, b) {
  this.data.setUint8(i, b);
  return this;
};
/**
 * Gets the last byte without modifying the read pointer.
 *
 * @return the last byte.
 */


util.DataBuffer.prototype.last = function () {
  return this.data.getUint8(this.write - 1);
};
/**
 * Creates a copy of this buffer.
 *
 * @return the copy.
 */


util.DataBuffer.prototype.copy = function () {
  return new util.DataBuffer(this);
};
/**
 * Compacts this buffer.
 *
 * @return this buffer.
 */


util.DataBuffer.prototype.compact = function () {
  if (this.read > 0) {
    var src = new Uint8Array(this.data.buffer, this.read);
    var dst = new Uint8Array(src.byteLength);
    dst.set(src);
    this.data = new DataView(dst);
    this.write -= this.read;
    this.read = 0;
  }

  return this;
};
/**
 * Clears this buffer.
 *
 * @return this buffer.
 */


util.DataBuffer.prototype.clear = function () {
  this.data = new DataView(new ArrayBuffer(0));
  this.read = this.write = 0;
  return this;
};
/**
 * Shortens this buffer by triming bytes off of the end of this buffer.
 *
 * @param count the number of bytes to trim off.
 *
 * @return this buffer.
 */


util.DataBuffer.prototype.truncate = function (count) {
  this.write = Math.max(0, this.length() - count);
  this.read = Math.min(this.read, this.write);
  return this;
};
/**
 * Converts this buffer to a hexadecimal string.
 *
 * @return a hexadecimal string.
 */


util.DataBuffer.prototype.toHex = function () {
  var rval = '';

  for (var i = this.read; i < this.data.byteLength; ++i) {
    var b = this.data.getUint8(i);

    if (b < 16) {
      rval += '0';
    }

    rval += b.toString(16);
  }

  return rval;
};
/**
 * Converts this buffer to a string, using the given encoding. If no
 * encoding is given, 'utf8' (UTF-8) is used.
 *
 * @param [encoding] the encoding to use: 'binary', 'utf8', 'utf16', 'hex',
 *          'base64' (default: 'utf8').
 *
 * @return a string representation of the bytes in this buffer.
 */


util.DataBuffer.prototype.toString = function (encoding) {
  var view = new Uint8Array(this.data, this.read, this.length());
  encoding = encoding || 'utf8'; // encode to string

  if (encoding === 'binary' || encoding === 'raw') {
    return util.binary.raw.encode(view);
  }

  if (encoding === 'hex') {
    return util.binary.hex.encode(view);
  }

  if (encoding === 'base64') {
    return util.binary.base64.encode(view);
  } // decode to text


  if (encoding === 'utf8') {
    return util.text.utf8.decode(view);
  }

  if (encoding === 'utf16') {
    return util.text.utf16.decode(view);
  }

  throw new Error('Invalid encoding: ' + encoding);
};
/** End Buffer w/UInt8Array backing */

/**
 * Creates a buffer that stores bytes. A value may be given to put into the
 * buffer that is either a string of bytes or a UTF-16 string that will
 * be encoded using UTF-8 (to do the latter, specify 'utf8' as the encoding).
 *
 * @param [input] the bytes to wrap (as a string) or a UTF-16 string to encode
 *          as UTF-8.
 * @param [encoding] (default: 'raw', other: 'utf8').
 */


util.createBuffer = function (input, encoding) {
  // TODO: deprecate, use new ByteBuffer() instead
  encoding = encoding || 'raw';

  if (input !== undefined && encoding === 'utf8') {
    input = util.encodeUtf8(input);
  }

  return new util.ByteBuffer(input);
};
/**
 * Fills a string with a particular value. If you want the string to be a byte
 * string, pass in String.fromCharCode(theByte).
 *
 * @param c the character to fill the string with, use String.fromCharCode
 *          to fill the string with a byte value.
 * @param n the number of characters of value c to fill with.
 *
 * @return the filled string.
 */


util.fillString = function (c, n) {
  var s = '';

  while (n > 0) {
    if (n & 1) {
      s += c;
    }

    n >>>= 1;

    if (n > 0) {
      c += c;
    }
  }

  return s;
};
/**
 * Performs a per byte XOR between two byte strings and returns the result as a
 * string of bytes.
 *
 * @param s1 first string of bytes.
 * @param s2 second string of bytes.
 * @param n the number of bytes to XOR.
 *
 * @return the XOR'd result.
 */


util.xorBytes = function (s1, s2, n) {
  var s3 = '';
  var b = '';
  var t = '';
  var i = 0;
  var c = 0;

  for (; n > 0; --n, ++i) {
    b = s1.charCodeAt(i) ^ s2.charCodeAt(i);

    if (c >= 10) {
      s3 += t;
      t = '';
      c = 0;
    }

    t += String.fromCharCode(b);
    ++c;
  }

  s3 += t;
  return s3;
};
/**
 * Converts a hex string into a 'binary' encoded string of bytes.
 *
 * @param hex the hexadecimal string to convert.
 *
 * @return the binary-encoded string of bytes.
 */


util.hexToBytes = function (hex) {
  // TODO: deprecate: "Deprecated. Use util.binary.hex.decode instead."
  var rval = '';
  var i = 0;

  if (hex.length & 1 == 1) {
    // odd number of characters, convert first character alone
    i = 1;
    rval += String.fromCharCode(parseInt(hex[0], 16));
  } // convert 2 characters (1 byte) at a time


  for (; i < hex.length; i += 2) {
    rval += String.fromCharCode(parseInt(hex.substr(i, 2), 16));
  }

  return rval;
};
/**
 * Converts a 'binary' encoded string of bytes to hex.
 *
 * @param bytes the byte string to convert.
 *
 * @return the string of hexadecimal characters.
 */


util.bytesToHex = function (bytes) {
  // TODO: deprecate: "Deprecated. Use util.binary.hex.encode instead."
  return util.createBuffer(bytes).toHex();
};
/**
 * Converts an 32-bit integer to 4-big-endian byte string.
 *
 * @param i the integer.
 *
 * @return the byte string.
 */


util.int32ToBytes = function (i) {
  return String.fromCharCode(i >> 24 & 0xFF) + String.fromCharCode(i >> 16 & 0xFF) + String.fromCharCode(i >> 8 & 0xFF) + String.fromCharCode(i & 0xFF);
}; // base64 characters, reverse mapping


var _base64 = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';
var _base64Idx = [
/*43 -43 = 0*/

/*'+',  1,  2,  3,'/' */
62, -1, -1, -1, 63,
/*'0','1','2','3','4','5','6','7','8','9' */
52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
/*15, 16, 17,'=', 19, 20, 21 */
-1, -1, -1, 64, -1, -1, -1,
/*65 - 43 = 22*/

/*'A','B','C','D','E','F','G','H','I','J','K','L','M', */
0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12,
/*'N','O','P','Q','R','S','T','U','V','W','X','Y','Z' */
13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25,
/*91 - 43 = 48 */

/*48, 49, 50, 51, 52, 53 */
-1, -1, -1, -1, -1, -1,
/*97 - 43 = 54*/

/*'a','b','c','d','e','f','g','h','i','j','k','l','m' */
26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38,
/*'n','o','p','q','r','s','t','u','v','w','x','y','z' */
39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51]; // base58 characters (Bitcoin alphabet)

var _base58 = '123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz';
/**
 * Base64 encodes a 'binary' encoded string of bytes.
 *
 * @param input the binary encoded string of bytes to base64-encode.
 * @param maxline the maximum number of encoded characters per line to use,
 *          defaults to none.
 *
 * @return the base64-encoded output.
 */

util.encode64 = function (input, maxline) {
  // TODO: deprecate: "Deprecated. Use util.binary.base64.encode instead."
  var line = '';
  var output = '';
  var chr1, chr2, chr3;
  var i = 0;

  while (i < input.length) {
    chr1 = input.charCodeAt(i++);
    chr2 = input.charCodeAt(i++);
    chr3 = input.charCodeAt(i++); // encode 4 character group

    line += _base64.charAt(chr1 >> 2);
    line += _base64.charAt((chr1 & 3) << 4 | chr2 >> 4);

    if (isNaN(chr2)) {
      line += '==';
    } else {
      line += _base64.charAt((chr2 & 15) << 2 | chr3 >> 6);
      line += isNaN(chr3) ? '=' : _base64.charAt(chr3 & 63);
    }

    if (maxline && line.length > maxline) {
      output += line.substr(0, maxline) + '\r\n';
      line = line.substr(maxline);
    }
  }

  output += line;
  return output;
};
/**
 * Base64 decodes a string into a 'binary' encoded string of bytes.
 *
 * @param input the base64-encoded input.
 *
 * @return the binary encoded string.
 */


util.decode64 = function (input) {
  // TODO: deprecate: "Deprecated. Use util.binary.base64.decode instead."
  // remove all non-base64 characters
  input = input.replace(/[^A-Za-z0-9\+\/\=]/g, '');
  var output = '';
  var enc1, enc2, enc3, enc4;
  var i = 0;

  while (i < input.length) {
    enc1 = _base64Idx[input.charCodeAt(i++) - 43];
    enc2 = _base64Idx[input.charCodeAt(i++) - 43];
    enc3 = _base64Idx[input.charCodeAt(i++) - 43];
    enc4 = _base64Idx[input.charCodeAt(i++) - 43];
    output += String.fromCharCode(enc1 << 2 | enc2 >> 4);

    if (enc3 !== 64) {
      // decoded at least 2 bytes
      output += String.fromCharCode((enc2 & 15) << 4 | enc3 >> 2);

      if (enc4 !== 64) {
        // decoded 3 bytes
        output += String.fromCharCode((enc3 & 3) << 6 | enc4);
      }
    }
  }

  return output;
};
/**
 * UTF-8 encodes the given UTF-16 encoded string (a standard JavaScript
 * string). Non-ASCII characters will be encoded as multiple bytes according
 * to UTF-8.
 *
 * @param str the string to encode.
 *
 * @return the UTF-8 encoded string.
 */


util.encodeUtf8 = function (str) {
  return unescape(encodeURIComponent(str));
};
/**
 * Decodes a UTF-8 encoded string into a UTF-16 string.
 *
 * @param str the string to decode.
 *
 * @return the UTF-16 encoded string (standard JavaScript string).
 */


util.decodeUtf8 = function (str) {
  return decodeURIComponent(escape(str));
}; // binary encoding/decoding tools
// FIXME: Experimental. Do not use yet.


util.binary = {
  raw: {},
  hex: {},
  base64: {},
  base58: {},
  baseN: {
    encode: baseN.encode,
    decode: baseN.decode
  }
};
/**
 * Encodes a Uint8Array as a binary-encoded string. This encoding uses
 * a value between 0 and 255 for each character.
 *
 * @param bytes the Uint8Array to encode.
 *
 * @return the binary-encoded string.
 */

util.binary.raw.encode = function (bytes) {
  return String.fromCharCode.apply(null, bytes);
};
/**
 * Decodes a binary-encoded string to a Uint8Array. This encoding uses
 * a value between 0 and 255 for each character.
 *
 * @param str the binary-encoded string to decode.
 * @param [output] an optional Uint8Array to write the output to; if it
 *          is too small, an exception will be thrown.
 * @param [offset] the start offset for writing to the output (default: 0).
 *
 * @return the Uint8Array or the number of bytes written if output was given.
 */


util.binary.raw.decode = function (str, output, offset) {
  var out = output;

  if (!out) {
    out = new Uint8Array(str.length);
  }

  offset = offset || 0;
  var j = offset;

  for (var i = 0; i < str.length; ++i) {
    out[j++] = str.charCodeAt(i);
  }

  return output ? j - offset : out;
};
/**
 * Encodes a 'binary' string, ArrayBuffer, DataView, TypedArray, or
 * ByteBuffer as a string of hexadecimal characters.
 *
 * @param bytes the bytes to convert.
 *
 * @return the string of hexadecimal characters.
 */


util.binary.hex.encode = util.bytesToHex;
/**
 * Decodes a hex-encoded string to a Uint8Array.
 *
 * @param hex the hexadecimal string to convert.
 * @param [output] an optional Uint8Array to write the output to; if it
 *          is too small, an exception will be thrown.
 * @param [offset] the start offset for writing to the output (default: 0).
 *
 * @return the Uint8Array or the number of bytes written if output was given.
 */

util.binary.hex.decode = function (hex, output, offset) {
  var out = output;

  if (!out) {
    out = new Uint8Array(Math.ceil(hex.length / 2));
  }

  offset = offset || 0;
  var i = 0,
      j = offset;

  if (hex.length & 1) {
    // odd number of characters, convert first character alone
    i = 1;
    out[j++] = parseInt(hex[0], 16);
  } // convert 2 characters (1 byte) at a time


  for (; i < hex.length; i += 2) {
    out[j++] = parseInt(hex.substr(i, 2), 16);
  }

  return output ? j - offset : out;
};
/**
 * Base64-encodes a Uint8Array.
 *
 * @param input the Uint8Array to encode.
 * @param maxline the maximum number of encoded characters per line to use,
 *          defaults to none.
 *
 * @return the base64-encoded output string.
 */


util.binary.base64.encode = function (input, maxline) {
  var line = '';
  var output = '';
  var chr1, chr2, chr3;
  var i = 0;

  while (i < input.byteLength) {
    chr1 = input[i++];
    chr2 = input[i++];
    chr3 = input[i++]; // encode 4 character group

    line += _base64.charAt(chr1 >> 2);
    line += _base64.charAt((chr1 & 3) << 4 | chr2 >> 4);

    if (isNaN(chr2)) {
      line += '==';
    } else {
      line += _base64.charAt((chr2 & 15) << 2 | chr3 >> 6);
      line += isNaN(chr3) ? '=' : _base64.charAt(chr3 & 63);
    }

    if (maxline && line.length > maxline) {
      output += line.substr(0, maxline) + '\r\n';
      line = line.substr(maxline);
    }
  }

  output += line;
  return output;
};
/**
 * Decodes a base64-encoded string to a Uint8Array.
 *
 * @param input the base64-encoded input string.
 * @param [output] an optional Uint8Array to write the output to; if it
 *          is too small, an exception will be thrown.
 * @param [offset] the start offset for writing to the output (default: 0).
 *
 * @return the Uint8Array or the number of bytes written if output was given.
 */


util.binary.base64.decode = function (input, output, offset) {
  var out = output;

  if (!out) {
    out = new Uint8Array(Math.ceil(input.length / 4) * 3);
  } // remove all non-base64 characters


  input = input.replace(/[^A-Za-z0-9\+\/\=]/g, '');
  offset = offset || 0;
  var enc1, enc2, enc3, enc4;
  var i = 0,
      j = offset;

  while (i < input.length) {
    enc1 = _base64Idx[input.charCodeAt(i++) - 43];
    enc2 = _base64Idx[input.charCodeAt(i++) - 43];
    enc3 = _base64Idx[input.charCodeAt(i++) - 43];
    enc4 = _base64Idx[input.charCodeAt(i++) - 43];
    out[j++] = enc1 << 2 | enc2 >> 4;

    if (enc3 !== 64) {
      // decoded at least 2 bytes
      out[j++] = (enc2 & 15) << 4 | enc3 >> 2;

      if (enc4 !== 64) {
        // decoded 3 bytes
        out[j++] = (enc3 & 3) << 6 | enc4;
      }
    }
  } // make sure result is the exact decoded length


  return output ? j - offset : out.subarray(0, j);
}; // add support for base58 encoding/decoding with Bitcoin alphabet


util.binary.base58.encode = function (input, maxline) {
  return util.binary.baseN.encode(input, _base58, maxline);
};

util.binary.base58.decode = function (input, maxline) {
  return util.binary.baseN.decode(input, _base58, maxline);
}; // text encoding/decoding tools
// FIXME: Experimental. Do not use yet.


util.text = {
  utf8: {},
  utf16: {}
};
/**
 * Encodes the given string as UTF-8 in a Uint8Array.
 *
 * @param str the string to encode.
 * @param [output] an optional Uint8Array to write the output to; if it
 *          is too small, an exception will be thrown.
 * @param [offset] the start offset for writing to the output (default: 0).
 *
 * @return the Uint8Array or the number of bytes written if output was given.
 */

util.text.utf8.encode = function (str, output, offset) {
  str = util.encodeUtf8(str);
  var out = output;

  if (!out) {
    out = new Uint8Array(str.length);
  }

  offset = offset || 0;
  var j = offset;

  for (var i = 0; i < str.length; ++i) {
    out[j++] = str.charCodeAt(i);
  }

  return output ? j - offset : out;
};
/**
 * Decodes the UTF-8 contents from a Uint8Array.
 *
 * @param bytes the Uint8Array to decode.
 *
 * @return the resulting string.
 */


util.text.utf8.decode = function (bytes) {
  return util.decodeUtf8(String.fromCharCode.apply(null, bytes));
};
/**
 * Encodes the given string as UTF-16 in a Uint8Array.
 *
 * @param str the string to encode.
 * @param [output] an optional Uint8Array to write the output to; if it
 *          is too small, an exception will be thrown.
 * @param [offset] the start offset for writing to the output (default: 0).
 *
 * @return the Uint8Array or the number of bytes written if output was given.
 */


util.text.utf16.encode = function (str, output, offset) {
  var out = output;

  if (!out) {
    out = new Uint8Array(str.length * 2);
  }

  var view = new Uint16Array(out.buffer);
  offset = offset || 0;
  var j = offset;
  var k = offset;

  for (var i = 0; i < str.length; ++i) {
    view[k++] = str.charCodeAt(i);
    j += 2;
  }

  return output ? j - offset : out;
};
/**
 * Decodes the UTF-16 contents from a Uint8Array.
 *
 * @param bytes the Uint8Array to decode.
 *
 * @return the resulting string.
 */


util.text.utf16.decode = function (bytes) {
  return String.fromCharCode.apply(null, new Uint16Array(bytes.buffer));
};
/**
 * Deflates the given data using a flash interface.
 *
 * @param api the flash interface.
 * @param bytes the data.
 * @param raw true to return only raw deflate data, false to include zlib
 *          header and trailer.
 *
 * @return the deflated data as a string.
 */


util.deflate = function (api, bytes, raw) {
  bytes = util.decode64(api.deflate(util.encode64(bytes)).rval); // strip zlib header and trailer if necessary

  if (raw) {
    // zlib header is 2 bytes (CMF,FLG) where FLG indicates that
    // there is a 4-byte DICT (alder-32) block before the data if
    // its 5th bit is set
    var start = 2;
    var flg = bytes.charCodeAt(1);

    if (flg & 0x20) {
      start = 6;
    } // zlib trailer is 4 bytes of adler-32


    bytes = bytes.substring(start, bytes.length - 4);
  }

  return bytes;
};
/**
 * Inflates the given data using a flash interface.
 *
 * @param api the flash interface.
 * @param bytes the data.
 * @param raw true if the incoming data has no zlib header or trailer and is
 *          raw DEFLATE data.
 *
 * @return the inflated data as a string, null on error.
 */


util.inflate = function (api, bytes, raw) {
  // TODO: add zlib header and trailer if necessary/possible
  var rval = api.inflate(util.encode64(bytes)).rval;
  return rval === null ? null : util.decode64(rval);
};
/**
 * Sets a storage object.
 *
 * @param api the storage interface.
 * @param id the storage ID to use.
 * @param obj the storage object, null to remove.
 */


var _setStorageObject = function (api, id, obj) {
  if (!api) {
    throw new Error('WebStorage not available.');
  }

  var rval;

  if (obj === null) {
    rval = api.removeItem(id);
  } else {
    // json-encode and base64-encode object
    obj = util.encode64(JSON.stringify(obj));
    rval = api.setItem(id, obj);
  } // handle potential flash error


  if (typeof rval !== 'undefined' && rval.rval !== true) {
    var error = new Error(rval.error.message);
    error.id = rval.error.id;
    error.name = rval.error.name;
    throw error;
  }
};
/**
 * Gets a storage object.
 *
 * @param api the storage interface.
 * @param id the storage ID to use.
 *
 * @return the storage object entry or null if none exists.
 */


var _getStorageObject = function (api, id) {
  if (!api) {
    throw new Error('WebStorage not available.');
  } // get the existing entry


  var rval = api.getItem(id);
  /* Note: We check api.init because we can't do (api == localStorage)
    on IE because of "Class doesn't support Automation" exception. Only
    the flash api has an init method so this works too, but we need a
    better solution in the future. */
  // flash returns item wrapped in an object, handle special case

  if (api.init) {
    if (rval.rval === null) {
      if (rval.error) {
        var error = new Error(rval.error.message);
        error.id = rval.error.id;
        error.name = rval.error.name;
        throw error;
      } // no error, but also no item


      rval = null;
    } else {
      rval = rval.rval;
    }
  } // handle decoding


  if (rval !== null) {
    // base64-decode and json-decode data
    rval = JSON.parse(util.decode64(rval));
  }

  return rval;
};
/**
 * Stores an item in local storage.
 *
 * @param api the storage interface.
 * @param id the storage ID to use.
 * @param key the key for the item.
 * @param data the data for the item (any javascript object/primitive).
 */


var _setItem = function (api, id, key, data) {
  // get storage object
  var obj = _getStorageObject(api, id);

  if (obj === null) {
    // create a new storage object
    obj = {};
  } // update key


  obj[key] = data; // set storage object

  _setStorageObject(api, id, obj);
};
/**
 * Gets an item from local storage.
 *
 * @param api the storage interface.
 * @param id the storage ID to use.
 * @param key the key for the item.
 *
 * @return the item.
 */


var _getItem = function (api, id, key) {
  // get storage object
  var rval = _getStorageObject(api, id);

  if (rval !== null) {
    // return data at key
    rval = key in rval ? rval[key] : null;
  }

  return rval;
};
/**
 * Removes an item from local storage.
 *
 * @param api the storage interface.
 * @param id the storage ID to use.
 * @param key the key for the item.
 */


var _removeItem = function (api, id, key) {
  // get storage object
  var obj = _getStorageObject(api, id);

  if (obj !== null && key in obj) {
    // remove key
    delete obj[key]; // see if entry has no keys remaining

    var empty = true;

    for (var prop in obj) {
      empty = false;
      break;
    }

    if (empty) {
      // remove entry entirely if no keys are left
      obj = null;
    } // set storage object


    _setStorageObject(api, id, obj);
  }
};
/**
 * Clears the local disk storage identified by the given ID.
 *
 * @param api the storage interface.
 * @param id the storage ID to use.
 */


var _clearItems = function (api, id) {
  _setStorageObject(api, id, null);
};
/**
 * Calls a storage function.
 *
 * @param func the function to call.
 * @param args the arguments for the function.
 * @param location the location argument.
 *
 * @return the return value from the function.
 */


var _callStorageFunction = function (func, args, location) {
  var rval = null; // default storage types

  if (typeof location === 'undefined') {
    location = ['web', 'flash'];
  } // apply storage types in order of preference


  var type;
  var done = false;
  var exception = null;

  for (var idx in location) {
    type = location[idx];

    try {
      if (type === 'flash' || type === 'both') {
        if (args[0] === null) {
          throw new Error('Flash local storage not available.');
        }

        rval = func.apply(this, args);
        done = type === 'flash';
      }

      if (type === 'web' || type === 'both') {
        args[0] = localStorage;
        rval = func.apply(this, args);
        done = true;
      }
    } catch (ex) {
      exception = ex;
    }

    if (done) {
      break;
    }
  }

  if (!done) {
    throw exception;
  }

  return rval;
};
/**
 * Stores an item on local disk.
 *
 * The available types of local storage include 'flash', 'web', and 'both'.
 *
 * The type 'flash' refers to flash local storage (SharedObject). In order
 * to use flash local storage, the 'api' parameter must be valid. The type
 * 'web' refers to WebStorage, if supported by the browser. The type 'both'
 * refers to storing using both 'flash' and 'web', not just one or the
 * other.
 *
 * The location array should list the storage types to use in order of
 * preference:
 *
 * ['flash']: flash only storage
 * ['web']: web only storage
 * ['both']: try to store in both
 * ['flash','web']: store in flash first, but if not available, 'web'
 * ['web','flash']: store in web first, but if not available, 'flash'
 *
 * The location array defaults to: ['web', 'flash']
 *
 * @param api the flash interface, null to use only WebStorage.
 * @param id the storage ID to use.
 * @param key the key for the item.
 * @param data the data for the item (any javascript object/primitive).
 * @param location an array with the preferred types of storage to use.
 */


util.setItem = function (api, id, key, data, location) {
  _callStorageFunction(_setItem, arguments, location);
};
/**
 * Gets an item on local disk.
 *
 * Set setItem() for details on storage types.
 *
 * @param api the flash interface, null to use only WebStorage.
 * @param id the storage ID to use.
 * @param key the key for the item.
 * @param location an array with the preferred types of storage to use.
 *
 * @return the item.
 */


util.getItem = function (api, id, key, location) {
  return _callStorageFunction(_getItem, arguments, location);
};
/**
 * Removes an item on local disk.
 *
 * Set setItem() for details on storage types.
 *
 * @param api the flash interface.
 * @param id the storage ID to use.
 * @param key the key for the item.
 * @param location an array with the preferred types of storage to use.
 */


util.removeItem = function (api, id, key, location) {
  _callStorageFunction(_removeItem, arguments, location);
};
/**
 * Clears the local disk storage identified by the given ID.
 *
 * Set setItem() for details on storage types.
 *
 * @param api the flash interface if flash is available.
 * @param id the storage ID to use.
 * @param location an array with the preferred types of storage to use.
 */


util.clearItems = function (api, id, location) {
  _callStorageFunction(_clearItems, arguments, location);
};
/**
 * Parses the scheme, host, and port from an http(s) url.
 *
 * @param str the url string.
 *
 * @return the parsed url object or null if the url is invalid.
 */


util.parseUrl = function (str) {
  // FIXME: this regex looks a bit broken
  var regex = /^(https?):\/\/([^:&^\/]*):?(\d*)(.*)$/g;
  regex.lastIndex = 0;
  var m = regex.exec(str);
  var url = m === null ? null : {
    full: str,
    scheme: m[1],
    host: m[2],
    port: m[3],
    path: m[4]
  };

  if (url) {
    url.fullHost = url.host;

    if (url.port) {
      if (url.port !== 80 && url.scheme === 'http') {
        url.fullHost += ':' + url.port;
      } else if (url.port !== 443 && url.scheme === 'https') {
        url.fullHost += ':' + url.port;
      }
    } else if (url.scheme === 'http') {
      url.port = 80;
    } else if (url.scheme === 'https') {
      url.port = 443;
    }

    url.full = url.scheme + '://' + url.fullHost;
  }

  return url;
};
/* Storage for query variables */


var _queryVariables = null;
/**
 * Returns the window location query variables. Query is parsed on the first
 * call and the same object is returned on subsequent calls. The mapping
 * is from keys to an array of values. Parameters without values will have
 * an object key set but no value added to the value array. Values are
 * unescaped.
 *
 * ...?k1=v1&k2=v2:
 * {
 *   "k1": ["v1"],
 *   "k2": ["v2"]
 * }
 *
 * ...?k1=v1&k1=v2:
 * {
 *   "k1": ["v1", "v2"]
 * }
 *
 * ...?k1=v1&k2:
 * {
 *   "k1": ["v1"],
 *   "k2": []
 * }
 *
 * ...?k1=v1&k1:
 * {
 *   "k1": ["v1"]
 * }
 *
 * ...?k1&k1:
 * {
 *   "k1": []
 * }
 *
 * @param query the query string to parse (optional, default to cached
 *          results from parsing window location search query).
 *
 * @return object mapping keys to variables.
 */

util.getQueryVariables = function (query) {
  var parse = function (q) {
    var rval = {};
    var kvpairs = q.split('&');

    for (var i = 0; i < kvpairs.length; i++) {
      var pos = kvpairs[i].indexOf('=');
      var key;
      var val;

      if (pos > 0) {
        key = kvpairs[i].substring(0, pos);
        val = kvpairs[i].substring(pos + 1);
      } else {
        key = kvpairs[i];
        val = null;
      }

      if (!(key in rval)) {
        rval[key] = [];
      } // disallow overriding object prototype keys


      if (!(key in Object.prototype) && val !== null) {
        rval[key].push(unescape(val));
      }
    }

    return rval;
  };

  var rval;

  if (typeof query === 'undefined') {
    // set cached variables if needed
    if (_queryVariables === null) {
      if (typeof window !== 'undefined' && window.location && window.location.search) {
        // parse window search query
        _queryVariables = parse(window.location.search.substring(1));
      } else {
        // no query variables available
        _queryVariables = {};
      }
    }

    rval = _queryVariables;
  } else {
    // parse given query
    rval = parse(query);
  }

  return rval;
};
/**
 * Parses a fragment into a path and query. This method will take a URI
 * fragment and break it up as if it were the main URI. For example:
 *    /bar/baz?a=1&b=2
 * results in:
 *    {
 *       path: ["bar", "baz"],
 *       query: {"k1": ["v1"], "k2": ["v2"]}
 *    }
 *
 * @return object with a path array and query object.
 */


util.parseFragment = function (fragment) {
  // default to whole fragment
  var fp = fragment;
  var fq = ''; // split into path and query if possible at the first '?'

  var pos = fragment.indexOf('?');

  if (pos > 0) {
    fp = fragment.substring(0, pos);
    fq = fragment.substring(pos + 1);
  } // split path based on '/' and ignore first element if empty


  var path = fp.split('/');

  if (path.length > 0 && path[0] === '') {
    path.shift();
  } // convert query into object


  var query = fq === '' ? {} : util.getQueryVariables(fq);
  return {
    pathString: fp,
    queryString: fq,
    path: path,
    query: query
  };
};
/**
 * Makes a request out of a URI-like request string. This is intended to
 * be used where a fragment id (after a URI '#') is parsed as a URI with
 * path and query parts. The string should have a path beginning and
 * delimited by '/' and optional query parameters following a '?'. The
 * query should be a standard URL set of key value pairs delimited by
 * '&'. For backwards compatibility the initial '/' on the path is not
 * required. The request object has the following API, (fully described
 * in the method code):
 *    {
 *       path: <the path string part>.
 *       query: <the query string part>,
 *       getPath(i): get part or all of the split path array,
 *       getQuery(k, i): get part or all of a query key array,
 *       getQueryLast(k, _default): get last element of a query key array.
 *    }
 *
 * @return object with request parameters.
 */


util.makeRequest = function (reqString) {
  var frag = util.parseFragment(reqString);
  var req = {
    // full path string
    path: frag.pathString,
    // full query string
    query: frag.queryString,

    /**
     * Get path or element in path.
     *
     * @param i optional path index.
     *
     * @return path or part of path if i provided.
     */
    getPath: function (i) {
      return typeof i === 'undefined' ? frag.path : frag.path[i];
    },

    /**
     * Get query, values for a key, or value for a key index.
     *
     * @param k optional query key.
     * @param i optional query key index.
     *
     * @return query, values for a key, or value for a key index.
     */
    getQuery: function (k, i) {
      var rval;

      if (typeof k === 'undefined') {
        rval = frag.query;
      } else {
        rval = frag.query[k];

        if (rval && typeof i !== 'undefined') {
          rval = rval[i];
        }
      }

      return rval;
    },
    getQueryLast: function (k, _default) {
      var rval;
      var vals = req.getQuery(k);

      if (vals) {
        rval = vals[vals.length - 1];
      } else {
        rval = _default;
      }

      return rval;
    }
  };
  return req;
};
/**
 * Makes a URI out of a path, an object with query parameters, and a
 * fragment. Uses jQuery.param() internally for query string creation.
 * If the path is an array, it will be joined with '/'.
 *
 * @param path string path or array of strings.
 * @param query object with query parameters. (optional)
 * @param fragment fragment string. (optional)
 *
 * @return string object with request parameters.
 */


util.makeLink = function (path, query, fragment) {
  // join path parts if needed
  path = jQuery.isArray(path) ? path.join('/') : path;
  var qstr = jQuery.param(query || {});
  fragment = fragment || '';
  return path + (qstr.length > 0 ? '?' + qstr : '') + (fragment.length > 0 ? '#' + fragment : '');
};
/**
 * Follows a path of keys deep into an object hierarchy and set a value.
 * If a key does not exist or it's value is not an object, create an
 * object in it's place. This can be destructive to a object tree if
 * leaf nodes are given as non-final path keys.
 * Used to avoid exceptions from missing parts of the path.
 *
 * @param object the starting object.
 * @param keys an array of string keys.
 * @param value the value to set.
 */


util.setPath = function (object, keys, value) {
  // need to start at an object
  if (_typeof(object) === 'object' && object !== null) {
    var i = 0;
    var len = keys.length;

    while (i < len) {
      var next = keys[i++];

      if (i == len) {
        // last
        object[next] = value;
      } else {
        // more
        var hasNext = (next in object);

        if (!hasNext || hasNext && _typeof(object[next]) !== 'object' || hasNext && object[next] === null) {
          object[next] = {};
        }

        object = object[next];
      }
    }
  }
};
/**
 * Follows a path of keys deep into an object hierarchy and return a value.
 * If a key does not exist, create an object in it's place.
 * Used to avoid exceptions from missing parts of the path.
 *
 * @param object the starting object.
 * @param keys an array of string keys.
 * @param _default value to return if path not found.
 *
 * @return the value at the path if found, else default if given, else
 *         undefined.
 */


util.getPath = function (object, keys, _default) {
  var i = 0;
  var len = keys.length;
  var hasNext = true;

  while (hasNext && i < len && _typeof(object) === 'object' && object !== null) {
    var next = keys[i++];
    hasNext = next in object;

    if (hasNext) {
      object = object[next];
    }
  }

  return hasNext ? object : _default;
};
/**
 * Follow a path of keys deep into an object hierarchy and delete the
 * last one. If a key does not exist, do nothing.
 * Used to avoid exceptions from missing parts of the path.
 *
 * @param object the starting object.
 * @param keys an array of string keys.
 */


util.deletePath = function (object, keys) {
  // need to start at an object
  if (_typeof(object) === 'object' && object !== null) {
    var i = 0;
    var len = keys.length;

    while (i < len) {
      var next = keys[i++];

      if (i == len) {
        // last
        delete object[next];
      } else {
        // more
        if (!(next in object) || _typeof(object[next]) !== 'object' || object[next] === null) {
          break;
        }

        object = object[next];
      }
    }
  }
};
/**
 * Check if an object is empty.
 *
 * Taken from:
 * http://stackoverflow.com/questions/679915/how-do-i-test-for-an-empty-javascript-object-from-json/679937#679937
 *
 * @param object the object to check.
 */


util.isEmpty = function (obj) {
  for (var prop in obj) {
    if (obj.hasOwnProperty(prop)) {
      return false;
    }
  }

  return true;
};
/**
 * Format with simple printf-style interpolation.
 *
 * %%: literal '%'
 * %s,%o: convert next argument into a string.
 *
 * @param format the string to format.
 * @param ... arguments to interpolate into the format string.
 */


util.format = function (format) {
  var re = /%./g; // current match

  var match; // current part

  var part; // current arg index

  var argi = 0; // collected parts to recombine later

  var parts = []; // last index found

  var last = 0; // loop while matches remain

  while (match = re.exec(format)) {
    part = format.substring(last, re.lastIndex - 2); // don't add empty strings (ie, parts between %s%s)

    if (part.length > 0) {
      parts.push(part);
    }

    last = re.lastIndex; // switch on % code

    var code = match[0][1];

    switch (code) {
      case 's':
      case 'o':
        // check if enough arguments were given
        if (argi < arguments.length) {
          parts.push(arguments[argi++ + 1]);
        } else {
          parts.push('<?>');
        }

        break;
      // FIXME: do proper formating for numbers, etc
      //case 'f':
      //case 'd':

      case '%':
        parts.push('%');
        break;

      default:
        parts.push('<%' + code + '?>');
    }
  } // add trailing part of format string


  parts.push(format.substring(last));
  return parts.join('');
};
/**
 * Formats a number.
 *
 * http://snipplr.com/view/5945/javascript-numberformat--ported-from-php/
 */


util.formatNumber = function (number, decimals, dec_point, thousands_sep) {
  // http://kevin.vanzonneveld.net
  // +   original by: Jonas Raoni Soares Silva (http://www.jsfromhell.com)
  // +   improved by: Kevin van Zonneveld (http://kevin.vanzonneveld.net)
  // +     bugfix by: Michael White (http://crestidg.com)
  // +     bugfix by: Benjamin Lupton
  // +     bugfix by: Allan Jensen (http://www.winternet.no)
  // +    revised by: Jonas Raoni Soares Silva (http://www.jsfromhell.com)
  // *     example 1: number_format(1234.5678, 2, '.', '');
  // *     returns 1: 1234.57
  var n = number,
      c = isNaN(decimals = Math.abs(decimals)) ? 2 : decimals;
  var d = dec_point === undefined ? ',' : dec_point;
  var t = thousands_sep === undefined ? '.' : thousands_sep,
      s = n < 0 ? '-' : '';
  var i = parseInt(n = Math.abs(+n || 0).toFixed(c), 10) + '';
  var j = i.length > 3 ? i.length % 3 : 0;
  return s + (j ? i.substr(0, j) + t : '') + i.substr(j).replace(/(\d{3})(?=\d)/g, '$1' + t) + (c ? d + Math.abs(n - i).toFixed(c).slice(2) : '');
};
/**
 * Formats a byte size.
 *
 * http://snipplr.com/view/5949/format-humanize-file-byte-size-presentation-in-javascript/
 */


util.formatSize = function (size) {
  if (size >= 1073741824) {
    size = util.formatNumber(size / 1073741824, 2, '.', '') + ' GiB';
  } else if (size >= 1048576) {
    size = util.formatNumber(size / 1048576, 2, '.', '') + ' MiB';
  } else if (size >= 1024) {
    size = util.formatNumber(size / 1024, 0) + ' KiB';
  } else {
    size = util.formatNumber(size, 0) + ' bytes';
  }

  return size;
};
/**
 * Converts an IPv4 or IPv6 string representation into bytes (in network order).
 *
 * @param ip the IPv4 or IPv6 address to convert.
 *
 * @return the 4-byte IPv6 or 16-byte IPv6 address or null if the address can't
 *         be parsed.
 */


util.bytesFromIP = function (ip) {
  if (ip.indexOf('.') !== -1) {
    return util.bytesFromIPv4(ip);
  }

  if (ip.indexOf(':') !== -1) {
    return util.bytesFromIPv6(ip);
  }

  return null;
};
/**
 * Converts an IPv4 string representation into bytes (in network order).
 *
 * @param ip the IPv4 address to convert.
 *
 * @return the 4-byte address or null if the address can't be parsed.
 */


util.bytesFromIPv4 = function (ip) {
  ip = ip.split('.');

  if (ip.length !== 4) {
    return null;
  }

  var b = util.createBuffer();

  for (var i = 0; i < ip.length; ++i) {
    var num = parseInt(ip[i], 10);

    if (isNaN(num)) {
      return null;
    }

    b.putByte(num);
  }

  return b.getBytes();
};
/**
 * Converts an IPv6 string representation into bytes (in network order).
 *
 * @param ip the IPv6 address to convert.
 *
 * @return the 16-byte address or null if the address can't be parsed.
 */


util.bytesFromIPv6 = function (ip) {
  var blanks = 0;
  ip = ip.split(':').filter(function (e) {
    if (e.length === 0) ++blanks;
    return true;
  });
  var zeros = (8 - ip.length + blanks) * 2;
  var b = util.createBuffer();

  for (var i = 0; i < 8; ++i) {
    if (!ip[i] || ip[i].length === 0) {
      b.fillWithByte(0, zeros);
      zeros = 0;
      continue;
    }

    var bytes = util.hexToBytes(ip[i]);

    if (bytes.length < 2) {
      b.putByte(0);
    }

    b.putBytes(bytes);
  }

  return b.getBytes();
};
/**
 * Converts 4-bytes into an IPv4 string representation or 16-bytes into
 * an IPv6 string representation. The bytes must be in network order.
 *
 * @param bytes the bytes to convert.
 *
 * @return the IPv4 or IPv6 string representation if 4 or 16 bytes,
 *         respectively, are given, otherwise null.
 */


util.bytesToIP = function (bytes) {
  if (bytes.length === 4) {
    return util.bytesToIPv4(bytes);
  }

  if (bytes.length === 16) {
    return util.bytesToIPv6(bytes);
  }

  return null;
};
/**
 * Converts 4-bytes into an IPv4 string representation. The bytes must be
 * in network order.
 *
 * @param bytes the bytes to convert.
 *
 * @return the IPv4 string representation or null for an invalid # of bytes.
 */


util.bytesToIPv4 = function (bytes) {
  if (bytes.length !== 4) {
    return null;
  }

  var ip = [];

  for (var i = 0; i < bytes.length; ++i) {
    ip.push(bytes.charCodeAt(i));
  }

  return ip.join('.');
};
/**
 * Converts 16-bytes into an IPv16 string representation. The bytes must be
 * in network order.
 *
 * @param bytes the bytes to convert.
 *
 * @return the IPv16 string representation or null for an invalid # of bytes.
 */


util.bytesToIPv6 = function (bytes) {
  if (bytes.length !== 16) {
    return null;
  }

  var ip = [];
  var zeroGroups = [];
  var zeroMaxGroup = 0;

  for (var i = 0; i < bytes.length; i += 2) {
    var hex = util.bytesToHex(bytes[i] + bytes[i + 1]); // canonicalize zero representation

    while (hex[0] === '0' && hex !== '0') {
      hex = hex.substr(1);
    }

    if (hex === '0') {
      var last = zeroGroups[zeroGroups.length - 1];
      var idx = ip.length;

      if (!last || idx !== last.end + 1) {
        zeroGroups.push({
          start: idx,
          end: idx
        });
      } else {
        last.end = idx;

        if (last.end - last.start > zeroGroups[zeroMaxGroup].end - zeroGroups[zeroMaxGroup].start) {
          zeroMaxGroup = zeroGroups.length - 1;
        }
      }
    }

    ip.push(hex);
  }

  if (zeroGroups.length > 0) {
    var group = zeroGroups[zeroMaxGroup]; // only shorten group of length > 0

    if (group.end - group.start > 0) {
      ip.splice(group.start, group.end - group.start + 1, '');

      if (group.start === 0) {
        ip.unshift('');
      }

      if (group.end === 7) {
        ip.push('');
      }
    }
  }

  return ip.join(':');
};
/**
 * Estimates the number of processes that can be run concurrently. If
 * creating Web Workers, keep in mind that the main JavaScript process needs
 * its own core.
 *
 * @param options the options to use:
 *          update true to force an update (not use the cached value).
 * @param callback(err, max) called once the operation completes.
 */


util.estimateCores = function (options, callback) {
  if (typeof options === 'function') {
    callback = options;
    options = {};
  }

  options = options || {};

  if ('cores' in util && !options.update) {
    return callback(null, util.cores);
  }

  if (typeof navigator !== 'undefined' && 'hardwareConcurrency' in navigator && navigator.hardwareConcurrency > 0) {
    util.cores = navigator.hardwareConcurrency;
    return callback(null, util.cores);
  }

  if (typeof Worker === 'undefined') {
    // workers not available
    util.cores = 1;
    return callback(null, util.cores);
  }

  if (typeof Blob === 'undefined') {
    // can't estimate, default to 2
    util.cores = 2;
    return callback(null, util.cores);
  } // create worker concurrency estimation code as blob


  var blobUrl = URL.createObjectURL(new Blob(['(', function () {
    self.addEventListener('message', function (e) {
      // run worker for 4 ms
      var st = Date.now();
      var et = st + 4;

      while (Date.now() < et);

      self.postMessage({
        st: st,
        et: et
      });
    });
  }.toString(), ')()'], {
    type: 'application/javascript'
  })); // take 5 samples using 16 workers

  sample([], 5, 16);

  function sample(max, samples, numWorkers) {
    if (samples === 0) {
      // get overlap average
      var avg = Math.floor(max.reduce(function (avg, x) {
        return avg + x;
      }, 0) / max.length);
      util.cores = Math.max(1, avg);
      URL.revokeObjectURL(blobUrl);
      return callback(null, util.cores);
    }

    map(numWorkers, function (err, results) {
      max.push(reduce(numWorkers, results));
      sample(max, samples - 1, numWorkers);
    });
  }

  function map(numWorkers, callback) {
    var workers = [];
    var results = [];

    for (var i = 0; i < numWorkers; ++i) {
      var worker = new Worker(blobUrl);
      worker.addEventListener('message', function (e) {
        results.push(e.data);

        if (results.length === numWorkers) {
          for (var i = 0; i < numWorkers; ++i) {
            workers[i].terminate();
          }

          callback(null, results);
        }
      });
      workers.push(worker);
    }

    for (var i = 0; i < numWorkers; ++i) {
      workers[i].postMessage(i);
    }
  }

  function reduce(numWorkers, results) {
    // find overlapping time windows
    var overlaps = [];

    for (var n = 0; n < numWorkers; ++n) {
      var r1 = results[n];
      var overlap = overlaps[n] = [];

      for (var i = 0; i < numWorkers; ++i) {
        if (n === i) {
          continue;
        }

        var r2 = results[i];

        if (r1.st > r2.st && r1.st < r2.et || r2.st > r1.st && r2.st < r1.et) {
          overlap.push(i);
        }
      }
    } // get maximum overlaps ... don't include overlapping worker itself
    // as the main JS process was also being scheduled during the work and
    // would have to be subtracted from the estimate anyway


    return overlaps.reduce(function (max, overlap) {
      return Math.max(max, overlap.length);
    }, 0);
  }
};
},{"./forge":"o20S","./baseN":"JEMJ","process":"vpK4","buffer":"vpK4"}],"UdiU":[function(require,module,exports) {
/**
 * Cipher base API.
 *
 * @author Dave Longley
 *
 * Copyright (c) 2010-2014 Digital Bazaar, Inc.
 */
var forge = require('./forge');

require('./util');

module.exports = forge.cipher = forge.cipher || {}; // registered algorithms

forge.cipher.algorithms = forge.cipher.algorithms || {};
/**
 * Creates a cipher object that can be used to encrypt data using the given
 * algorithm and key. The algorithm may be provided as a string value for a
 * previously registered algorithm or it may be given as a cipher algorithm
 * API object.
 *
 * @param algorithm the algorithm to use, either a string or an algorithm API
 *          object.
 * @param key the key to use, as a binary-encoded string of bytes or a
 *          byte buffer.
 *
 * @return the cipher.
 */

forge.cipher.createCipher = function (algorithm, key) {
  var api = algorithm;

  if (typeof api === 'string') {
    api = forge.cipher.getAlgorithm(api);

    if (api) {
      api = api();
    }
  }

  if (!api) {
    throw new Error('Unsupported algorithm: ' + algorithm);
  } // assume block cipher


  return new forge.cipher.BlockCipher({
    algorithm: api,
    key: key,
    decrypt: false
  });
};
/**
 * Creates a decipher object that can be used to decrypt data using the given
 * algorithm and key. The algorithm may be provided as a string value for a
 * previously registered algorithm or it may be given as a cipher algorithm
 * API object.
 *
 * @param algorithm the algorithm to use, either a string or an algorithm API
 *          object.
 * @param key the key to use, as a binary-encoded string of bytes or a
 *          byte buffer.
 *
 * @return the cipher.
 */


forge.cipher.createDecipher = function (algorithm, key) {
  var api = algorithm;

  if (typeof api === 'string') {
    api = forge.cipher.getAlgorithm(api);

    if (api) {
      api = api();
    }
  }

  if (!api) {
    throw new Error('Unsupported algorithm: ' + algorithm);
  } // assume block cipher


  return new forge.cipher.BlockCipher({
    algorithm: api,
    key: key,
    decrypt: true
  });
};
/**
 * Registers an algorithm by name. If the name was already registered, the
 * algorithm API object will be overwritten.
 *
 * @param name the name of the algorithm.
 * @param algorithm the algorithm API object.
 */


forge.cipher.registerAlgorithm = function (name, algorithm) {
  name = name.toUpperCase();
  forge.cipher.algorithms[name] = algorithm;
};
/**
 * Gets a registered algorithm by name.
 *
 * @param name the name of the algorithm.
 *
 * @return the algorithm, if found, null if not.
 */


forge.cipher.getAlgorithm = function (name) {
  name = name.toUpperCase();

  if (name in forge.cipher.algorithms) {
    return forge.cipher.algorithms[name];
  }

  return null;
};

var BlockCipher = forge.cipher.BlockCipher = function (options) {
  this.algorithm = options.algorithm;
  this.mode = this.algorithm.mode;
  this.blockSize = this.mode.blockSize;
  this._finish = false;
  this._input = null;
  this.output = null;
  this._op = options.decrypt ? this.mode.decrypt : this.mode.encrypt;
  this._decrypt = options.decrypt;
  this.algorithm.initialize(options);
};
/**
 * Starts or restarts the encryption or decryption process, whichever
 * was previously configured.
 *
 * For non-GCM mode, the IV may be a binary-encoded string of bytes, an array
 * of bytes, a byte buffer, or an array of 32-bit integers. If the IV is in
 * bytes, then it must be Nb (16) bytes in length. If the IV is given in as
 * 32-bit integers, then it must be 4 integers long.
 *
 * Note: an IV is not required or used in ECB mode.
 *
 * For GCM-mode, the IV must be given as a binary-encoded string of bytes or
 * a byte buffer. The number of bytes should be 12 (96 bits) as recommended
 * by NIST SP-800-38D but another length may be given.
 *
 * @param options the options to use:
 *          iv the initialization vector to use as a binary-encoded string of
 *            bytes, null to reuse the last ciphered block from a previous
 *            update() (this "residue" method is for legacy support only).
 *          additionalData additional authentication data as a binary-encoded
 *            string of bytes, for 'GCM' mode, (default: none).
 *          tagLength desired length of authentication tag, in bits, for
 *            'GCM' mode (0-128, default: 128).
 *          tag the authentication tag to check if decrypting, as a
 *             binary-encoded string of bytes.
 *          output the output the buffer to write to, null to create one.
 */


BlockCipher.prototype.start = function (options) {
  options = options || {};
  var opts = {};

  for (var key in options) {
    opts[key] = options[key];
  }

  opts.decrypt = this._decrypt;
  this._finish = false;
  this._input = forge.util.createBuffer();
  this.output = options.output || forge.util.createBuffer();
  this.mode.start(opts);
};
/**
 * Updates the next block according to the cipher mode.
 *
 * @param input the buffer to read from.
 */


BlockCipher.prototype.update = function (input) {
  if (input) {
    // input given, so empty it into the input buffer
    this._input.putBuffer(input);
  } // do cipher operation until it needs more input and not finished


  while (!this._op.call(this.mode, this._input, this.output, this._finish) && !this._finish) {} // free consumed memory from input buffer


  this._input.compact();
};
/**
 * Finishes encrypting or decrypting.
 *
 * @param pad a padding function to use in CBC mode, null for default,
 *          signature(blockSize, buffer, decrypt).
 *
 * @return true if successful, false on error.
 */


BlockCipher.prototype.finish = function (pad) {
  // backwards-compatibility w/deprecated padding API
  // Note: will overwrite padding functions even after another start() call
  if (pad && (this.mode.name === 'ECB' || this.mode.name === 'CBC')) {
    this.mode.pad = function (input) {
      return pad(this.blockSize, input, false);
    };

    this.mode.unpad = function (output) {
      return pad(this.blockSize, output, true);
    };
  } // build options for padding and afterFinish functions


  var options = {};
  options.decrypt = this._decrypt; // get # of bytes that won't fill a block

  options.overflow = this._input.length() % this.blockSize;

  if (!this._decrypt && this.mode.pad) {
    if (!this.mode.pad(this._input, options)) {
      return false;
    }
  } // do final update


  this._finish = true;
  this.update();

  if (this._decrypt && this.mode.unpad) {
    if (!this.mode.unpad(this.output, options)) {
      return false;
    }
  }

  if (this.mode.afterFinish) {
    if (!this.mode.afterFinish(this.output, options)) {
      return false;
    }
  }

  return true;
};
},{"./forge":"o20S","./util":"lWyh"}],"PpVb":[function(require,module,exports) {
/**
 * Supported cipher modes.
 *
 * @author Dave Longley
 *
 * Copyright (c) 2010-2014 Digital Bazaar, Inc.
 */
var forge = require('./forge');

require('./util');

forge.cipher = forge.cipher || {}; // supported cipher modes

var modes = module.exports = forge.cipher.modes = forge.cipher.modes || {};
/** Electronic codebook (ECB) (Don't use this; it's not secure) **/

modes.ecb = function (options) {
  options = options || {};
  this.name = 'ECB';
  this.cipher = options.cipher;
  this.blockSize = options.blockSize || 16;
  this._ints = this.blockSize / 4;
  this._inBlock = new Array(this._ints);
  this._outBlock = new Array(this._ints);
};

modes.ecb.prototype.start = function (options) {};

modes.ecb.prototype.encrypt = function (input, output, finish) {
  // not enough input to encrypt
  if (input.length() < this.blockSize && !(finish && input.length() > 0)) {
    return true;
  } // get next block


  for (var i = 0; i < this._ints; ++i) {
    this._inBlock[i] = input.getInt32();
  } // encrypt block


  this.cipher.encrypt(this._inBlock, this._outBlock); // write output

  for (var i = 0; i < this._ints; ++i) {
    output.putInt32(this._outBlock[i]);
  }
};

modes.ecb.prototype.decrypt = function (input, output, finish) {
  // not enough input to decrypt
  if (input.length() < this.blockSize && !(finish && input.length() > 0)) {
    return true;
  } // get next block


  for (var i = 0; i < this._ints; ++i) {
    this._inBlock[i] = input.getInt32();
  } // decrypt block


  this.cipher.decrypt(this._inBlock, this._outBlock); // write output

  for (var i = 0; i < this._ints; ++i) {
    output.putInt32(this._outBlock[i]);
  }
};

modes.ecb.prototype.pad = function (input, options) {
  // add PKCS#7 padding to block (each pad byte is the
  // value of the number of pad bytes)
  var padding = input.length() === this.blockSize ? this.blockSize : this.blockSize - input.length();
  input.fillWithByte(padding, padding);
  return true;
};

modes.ecb.prototype.unpad = function (output, options) {
  // check for error: input data not a multiple of blockSize
  if (options.overflow > 0) {
    return false;
  } // ensure padding byte count is valid


  var len = output.length();
  var count = output.at(len - 1);

  if (count > this.blockSize << 2) {
    return false;
  } // trim off padding bytes


  output.truncate(count);
  return true;
};
/** Cipher-block Chaining (CBC) **/


modes.cbc = function (options) {
  options = options || {};
  this.name = 'CBC';
  this.cipher = options.cipher;
  this.blockSize = options.blockSize || 16;
  this._ints = this.blockSize / 4;
  this._inBlock = new Array(this._ints);
  this._outBlock = new Array(this._ints);
};

modes.cbc.prototype.start = function (options) {
  // Note: legacy support for using IV residue (has security flaws)
  // if IV is null, reuse block from previous processing
  if (options.iv === null) {
    // must have a previous block
    if (!this._prev) {
      throw new Error('Invalid IV parameter.');
    }

    this._iv = this._prev.slice(0);
  } else if (!('iv' in options)) {
    throw new Error('Invalid IV parameter.');
  } else {
    // save IV as "previous" block
    this._iv = transformIV(options.iv);
    this._prev = this._iv.slice(0);
  }
};

modes.cbc.prototype.encrypt = function (input, output, finish) {
  // not enough input to encrypt
  if (input.length() < this.blockSize && !(finish && input.length() > 0)) {
    return true;
  } // get next block
  // CBC XOR's IV (or previous block) with plaintext


  for (var i = 0; i < this._ints; ++i) {
    this._inBlock[i] = this._prev[i] ^ input.getInt32();
  } // encrypt block


  this.cipher.encrypt(this._inBlock, this._outBlock); // write output, save previous block

  for (var i = 0; i < this._ints; ++i) {
    output.putInt32(this._outBlock[i]);
  }

  this._prev = this._outBlock;
};

modes.cbc.prototype.decrypt = function (input, output, finish) {
  // not enough input to decrypt
  if (input.length() < this.blockSize && !(finish && input.length() > 0)) {
    return true;
  } // get next block


  for (var i = 0; i < this._ints; ++i) {
    this._inBlock[i] = input.getInt32();
  } // decrypt block


  this.cipher.decrypt(this._inBlock, this._outBlock); // write output, save previous ciphered block
  // CBC XOR's IV (or previous block) with ciphertext

  for (var i = 0; i < this._ints; ++i) {
    output.putInt32(this._prev[i] ^ this._outBlock[i]);
  }

  this._prev = this._inBlock.slice(0);
};

modes.cbc.prototype.pad = function (input, options) {
  // add PKCS#7 padding to block (each pad byte is the
  // value of the number of pad bytes)
  var padding = input.length() === this.blockSize ? this.blockSize : this.blockSize - input.length();
  input.fillWithByte(padding, padding);
  return true;
};

modes.cbc.prototype.unpad = function (output, options) {
  // check for error: input data not a multiple of blockSize
  if (options.overflow > 0) {
    return false;
  } // ensure padding byte count is valid


  var len = output.length();
  var count = output.at(len - 1);

  if (count > this.blockSize << 2) {
    return false;
  } // trim off padding bytes


  output.truncate(count);
  return true;
};
/** Cipher feedback (CFB) **/


modes.cfb = function (options) {
  options = options || {};
  this.name = 'CFB';
  this.cipher = options.cipher;
  this.blockSize = options.blockSize || 16;
  this._ints = this.blockSize / 4;
  this._inBlock = null;
  this._outBlock = new Array(this._ints);
  this._partialBlock = new Array(this._ints);
  this._partialOutput = forge.util.createBuffer();
  this._partialBytes = 0;
};

modes.cfb.prototype.start = function (options) {
  if (!('iv' in options)) {
    throw new Error('Invalid IV parameter.');
  } // use IV as first input


  this._iv = transformIV(options.iv);
  this._inBlock = this._iv.slice(0);
  this._partialBytes = 0;
};

modes.cfb.prototype.encrypt = function (input, output, finish) {
  // not enough input to encrypt
  var inputLength = input.length();

  if (inputLength === 0) {
    return true;
  } // encrypt block


  this.cipher.encrypt(this._inBlock, this._outBlock); // handle full block

  if (this._partialBytes === 0 && inputLength >= this.blockSize) {
    // XOR input with output, write input as output
    for (var i = 0; i < this._ints; ++i) {
      this._inBlock[i] = input.getInt32() ^ this._outBlock[i];
      output.putInt32(this._inBlock[i]);
    }

    return;
  } // handle partial block


  var partialBytes = (this.blockSize - inputLength) % this.blockSize;

  if (partialBytes > 0) {
    partialBytes = this.blockSize - partialBytes;
  } // XOR input with output, write input as partial output


  this._partialOutput.clear();

  for (var i = 0; i < this._ints; ++i) {
    this._partialBlock[i] = input.getInt32() ^ this._outBlock[i];

    this._partialOutput.putInt32(this._partialBlock[i]);
  }

  if (partialBytes > 0) {
    // block still incomplete, restore input buffer
    input.read -= this.blockSize;
  } else {
    // block complete, update input block
    for (var i = 0; i < this._ints; ++i) {
      this._inBlock[i] = this._partialBlock[i];
    }
  } // skip any previous partial bytes


  if (this._partialBytes > 0) {
    this._partialOutput.getBytes(this._partialBytes);
  }

  if (partialBytes > 0 && !finish) {
    output.putBytes(this._partialOutput.getBytes(partialBytes - this._partialBytes));
    this._partialBytes = partialBytes;
    return true;
  }

  output.putBytes(this._partialOutput.getBytes(inputLength - this._partialBytes));
  this._partialBytes = 0;
};

modes.cfb.prototype.decrypt = function (input, output, finish) {
  // not enough input to decrypt
  var inputLength = input.length();

  if (inputLength === 0) {
    return true;
  } // encrypt block (CFB always uses encryption mode)


  this.cipher.encrypt(this._inBlock, this._outBlock); // handle full block

  if (this._partialBytes === 0 && inputLength >= this.blockSize) {
    // XOR input with output, write input as output
    for (var i = 0; i < this._ints; ++i) {
      this._inBlock[i] = input.getInt32();
      output.putInt32(this._inBlock[i] ^ this._outBlock[i]);
    }

    return;
  } // handle partial block


  var partialBytes = (this.blockSize - inputLength) % this.blockSize;

  if (partialBytes > 0) {
    partialBytes = this.blockSize - partialBytes;
  } // XOR input with output, write input as partial output


  this._partialOutput.clear();

  for (var i = 0; i < this._ints; ++i) {
    this._partialBlock[i] = input.getInt32();

    this._partialOutput.putInt32(this._partialBlock[i] ^ this._outBlock[i]);
  }

  if (partialBytes > 0) {
    // block still incomplete, restore input buffer
    input.read -= this.blockSize;
  } else {
    // block complete, update input block
    for (var i = 0; i < this._ints; ++i) {
      this._inBlock[i] = this._partialBlock[i];
    }
  } // skip any previous partial bytes


  if (this._partialBytes > 0) {
    this._partialOutput.getBytes(this._partialBytes);
  }

  if (partialBytes > 0 && !finish) {
    output.putBytes(this._partialOutput.getBytes(partialBytes - this._partialBytes));
    this._partialBytes = partialBytes;
    return true;
  }

  output.putBytes(this._partialOutput.getBytes(inputLength - this._partialBytes));
  this._partialBytes = 0;
};
/** Output feedback (OFB) **/


modes.ofb = function (options) {
  options = options || {};
  this.name = 'OFB';
  this.cipher = options.cipher;
  this.blockSize = options.blockSize || 16;
  this._ints = this.blockSize / 4;
  this._inBlock = null;
  this._outBlock = new Array(this._ints);
  this._partialOutput = forge.util.createBuffer();
  this._partialBytes = 0;
};

modes.ofb.prototype.start = function (options) {
  if (!('iv' in options)) {
    throw new Error('Invalid IV parameter.');
  } // use IV as first input


  this._iv = transformIV(options.iv);
  this._inBlock = this._iv.slice(0);
  this._partialBytes = 0;
};

modes.ofb.prototype.encrypt = function (input, output, finish) {
  // not enough input to encrypt
  var inputLength = input.length();

  if (input.length() === 0) {
    return true;
  } // encrypt block (OFB always uses encryption mode)


  this.cipher.encrypt(this._inBlock, this._outBlock); // handle full block

  if (this._partialBytes === 0 && inputLength >= this.blockSize) {
    // XOR input with output and update next input
    for (var i = 0; i < this._ints; ++i) {
      output.putInt32(input.getInt32() ^ this._outBlock[i]);
      this._inBlock[i] = this._outBlock[i];
    }

    return;
  } // handle partial block


  var partialBytes = (this.blockSize - inputLength) % this.blockSize;

  if (partialBytes > 0) {
    partialBytes = this.blockSize - partialBytes;
  } // XOR input with output


  this._partialOutput.clear();

  for (var i = 0; i < this._ints; ++i) {
    this._partialOutput.putInt32(input.getInt32() ^ this._outBlock[i]);
  }

  if (partialBytes > 0) {
    // block still incomplete, restore input buffer
    input.read -= this.blockSize;
  } else {
    // block complete, update input block
    for (var i = 0; i < this._ints; ++i) {
      this._inBlock[i] = this._outBlock[i];
    }
  } // skip any previous partial bytes


  if (this._partialBytes > 0) {
    this._partialOutput.getBytes(this._partialBytes);
  }

  if (partialBytes > 0 && !finish) {
    output.putBytes(this._partialOutput.getBytes(partialBytes - this._partialBytes));
    this._partialBytes = partialBytes;
    return true;
  }

  output.putBytes(this._partialOutput.getBytes(inputLength - this._partialBytes));
  this._partialBytes = 0;
};

modes.ofb.prototype.decrypt = modes.ofb.prototype.encrypt;
/** Counter (CTR) **/

modes.ctr = function (options) {
  options = options || {};
  this.name = 'CTR';
  this.cipher = options.cipher;
  this.blockSize = options.blockSize || 16;
  this._ints = this.blockSize / 4;
  this._inBlock = null;
  this._outBlock = new Array(this._ints);
  this._partialOutput = forge.util.createBuffer();
  this._partialBytes = 0;
};

modes.ctr.prototype.start = function (options) {
  if (!('iv' in options)) {
    throw new Error('Invalid IV parameter.');
  } // use IV as first input


  this._iv = transformIV(options.iv);
  this._inBlock = this._iv.slice(0);
  this._partialBytes = 0;
};

modes.ctr.prototype.encrypt = function (input, output, finish) {
  // not enough input to encrypt
  var inputLength = input.length();

  if (inputLength === 0) {
    return true;
  } // encrypt block (CTR always uses encryption mode)


  this.cipher.encrypt(this._inBlock, this._outBlock); // handle full block

  if (this._partialBytes === 0 && inputLength >= this.blockSize) {
    // XOR input with output
    for (var i = 0; i < this._ints; ++i) {
      output.putInt32(input.getInt32() ^ this._outBlock[i]);
    }
  } else {
    // handle partial block
    var partialBytes = (this.blockSize - inputLength) % this.blockSize;

    if (partialBytes > 0) {
      partialBytes = this.blockSize - partialBytes;
    } // XOR input with output


    this._partialOutput.clear();

    for (var i = 0; i < this._ints; ++i) {
      this._partialOutput.putInt32(input.getInt32() ^ this._outBlock[i]);
    }

    if (partialBytes > 0) {
      // block still incomplete, restore input buffer
      input.read -= this.blockSize;
    } // skip any previous partial bytes


    if (this._partialBytes > 0) {
      this._partialOutput.getBytes(this._partialBytes);
    }

    if (partialBytes > 0 && !finish) {
      output.putBytes(this._partialOutput.getBytes(partialBytes - this._partialBytes));
      this._partialBytes = partialBytes;
      return true;
    }

    output.putBytes(this._partialOutput.getBytes(inputLength - this._partialBytes));
    this._partialBytes = 0;
  } // block complete, increment counter (input block)


  inc32(this._inBlock);
};

modes.ctr.prototype.decrypt = modes.ctr.prototype.encrypt;
/** Galois/Counter Mode (GCM) **/

modes.gcm = function (options) {
  options = options || {};
  this.name = 'GCM';
  this.cipher = options.cipher;
  this.blockSize = options.blockSize || 16;
  this._ints = this.blockSize / 4;
  this._inBlock = new Array(this._ints);
  this._outBlock = new Array(this._ints);
  this._partialOutput = forge.util.createBuffer();
  this._partialBytes = 0; // R is actually this value concatenated with 120 more zero bits, but
  // we only XOR against R so the other zeros have no effect -- we just
  // apply this value to the first integer in a block

  this._R = 0xE1000000;
};

modes.gcm.prototype.start = function (options) {
  if (!('iv' in options)) {
    throw new Error('Invalid IV parameter.');
  } // ensure IV is a byte buffer


  var iv = forge.util.createBuffer(options.iv); // no ciphered data processed yet

  this._cipherLength = 0; // default additional data is none

  var additionalData;

  if ('additionalData' in options) {
    additionalData = forge.util.createBuffer(options.additionalData);
  } else {
    additionalData = forge.util.createBuffer();
  } // default tag length is 128 bits


  if ('tagLength' in options) {
    this._tagLength = options.tagLength;
  } else {
    this._tagLength = 128;
  } // if tag is given, ensure tag matches tag length


  this._tag = null;

  if (options.decrypt) {
    // save tag to check later
    this._tag = forge.util.createBuffer(options.tag).getBytes();

    if (this._tag.length !== this._tagLength / 8) {
      throw new Error('Authentication tag does not match tag length.');
    }
  } // create tmp storage for hash calculation


  this._hashBlock = new Array(this._ints); // no tag generated yet

  this.tag = null; // generate hash subkey
  // (apply block cipher to "zero" block)

  this._hashSubkey = new Array(this._ints);
  this.cipher.encrypt([0, 0, 0, 0], this._hashSubkey); // generate table M
  // use 4-bit tables (32 component decomposition of a 16 byte value)
  // 8-bit tables take more space and are known to have security
  // vulnerabilities (in native implementations)

  this.componentBits = 4;
  this._m = this.generateHashTable(this._hashSubkey, this.componentBits); // Note: support IV length different from 96 bits? (only supporting
  // 96 bits is recommended by NIST SP-800-38D)
  // generate J_0

  var ivLength = iv.length();

  if (ivLength === 12) {
    // 96-bit IV
    this._j0 = [iv.getInt32(), iv.getInt32(), iv.getInt32(), 1];
  } else {
    // IV is NOT 96-bits
    this._j0 = [0, 0, 0, 0];

    while (iv.length() > 0) {
      this._j0 = this.ghash(this._hashSubkey, this._j0, [iv.getInt32(), iv.getInt32(), iv.getInt32(), iv.getInt32()]);
    }

    this._j0 = this.ghash(this._hashSubkey, this._j0, [0, 0].concat(from64To32(ivLength * 8)));
  } // generate ICB (initial counter block)


  this._inBlock = this._j0.slice(0);
  inc32(this._inBlock);
  this._partialBytes = 0; // consume authentication data

  additionalData = forge.util.createBuffer(additionalData); // save additional data length as a BE 64-bit number

  this._aDataLength = from64To32(additionalData.length() * 8); // pad additional data to 128 bit (16 byte) block size

  var overflow = additionalData.length() % this.blockSize;

  if (overflow) {
    additionalData.fillWithByte(0, this.blockSize - overflow);
  }

  this._s = [0, 0, 0, 0];

  while (additionalData.length() > 0) {
    this._s = this.ghash(this._hashSubkey, this._s, [additionalData.getInt32(), additionalData.getInt32(), additionalData.getInt32(), additionalData.getInt32()]);
  }
};

modes.gcm.prototype.encrypt = function (input, output, finish) {
  // not enough input to encrypt
  var inputLength = input.length();

  if (inputLength === 0) {
    return true;
  } // encrypt block


  this.cipher.encrypt(this._inBlock, this._outBlock); // handle full block

  if (this._partialBytes === 0 && inputLength >= this.blockSize) {
    // XOR input with output
    for (var i = 0; i < this._ints; ++i) {
      output.putInt32(this._outBlock[i] ^= input.getInt32());
    }

    this._cipherLength += this.blockSize;
  } else {
    // handle partial block
    var partialBytes = (this.blockSize - inputLength) % this.blockSize;

    if (partialBytes > 0) {
      partialBytes = this.blockSize - partialBytes;
    } // XOR input with output


    this._partialOutput.clear();

    for (var i = 0; i < this._ints; ++i) {
      this._partialOutput.putInt32(input.getInt32() ^ this._outBlock[i]);
    }

    if (partialBytes <= 0 || finish) {
      // handle overflow prior to hashing
      if (finish) {
        // get block overflow
        var overflow = inputLength % this.blockSize;
        this._cipherLength += overflow; // truncate for hash function

        this._partialOutput.truncate(this.blockSize - overflow);
      } else {
        this._cipherLength += this.blockSize;
      } // get output block for hashing


      for (var i = 0; i < this._ints; ++i) {
        this._outBlock[i] = this._partialOutput.getInt32();
      }

      this._partialOutput.read -= this.blockSize;
    } // skip any previous partial bytes


    if (this._partialBytes > 0) {
      this._partialOutput.getBytes(this._partialBytes);
    }

    if (partialBytes > 0 && !finish) {
      // block still incomplete, restore input buffer, get partial output,
      // and return early
      input.read -= this.blockSize;
      output.putBytes(this._partialOutput.getBytes(partialBytes - this._partialBytes));
      this._partialBytes = partialBytes;
      return true;
    }

    output.putBytes(this._partialOutput.getBytes(inputLength - this._partialBytes));
    this._partialBytes = 0;
  } // update hash block S


  this._s = this.ghash(this._hashSubkey, this._s, this._outBlock); // increment counter (input block)

  inc32(this._inBlock);
};

modes.gcm.prototype.decrypt = function (input, output, finish) {
  // not enough input to decrypt
  var inputLength = input.length();

  if (inputLength < this.blockSize && !(finish && inputLength > 0)) {
    return true;
  } // encrypt block (GCM always uses encryption mode)


  this.cipher.encrypt(this._inBlock, this._outBlock); // increment counter (input block)

  inc32(this._inBlock); // update hash block S

  this._hashBlock[0] = input.getInt32();
  this._hashBlock[1] = input.getInt32();
  this._hashBlock[2] = input.getInt32();
  this._hashBlock[3] = input.getInt32();
  this._s = this.ghash(this._hashSubkey, this._s, this._hashBlock); // XOR hash input with output

  for (var i = 0; i < this._ints; ++i) {
    output.putInt32(this._outBlock[i] ^ this._hashBlock[i]);
  } // increment cipher data length


  if (inputLength < this.blockSize) {
    this._cipherLength += inputLength % this.blockSize;
  } else {
    this._cipherLength += this.blockSize;
  }
};

modes.gcm.prototype.afterFinish = function (output, options) {
  var rval = true; // handle overflow

  if (options.decrypt && options.overflow) {
    output.truncate(this.blockSize - options.overflow);
  } // handle authentication tag


  this.tag = forge.util.createBuffer(); // concatenate additional data length with cipher length

  var lengths = this._aDataLength.concat(from64To32(this._cipherLength * 8)); // include lengths in hash


  this._s = this.ghash(this._hashSubkey, this._s, lengths); // do GCTR(J_0, S)

  var tag = [];
  this.cipher.encrypt(this._j0, tag);

  for (var i = 0; i < this._ints; ++i) {
    this.tag.putInt32(this._s[i] ^ tag[i]);
  } // trim tag to length


  this.tag.truncate(this.tag.length() % (this._tagLength / 8)); // check authentication tag

  if (options.decrypt && this.tag.bytes() !== this._tag) {
    rval = false;
  }

  return rval;
};
/**
 * See NIST SP-800-38D 6.3 (Algorithm 1). This function performs Galois
 * field multiplication. The field, GF(2^128), is defined by the polynomial:
 *
 * x^128 + x^7 + x^2 + x + 1
 *
 * Which is represented in little-endian binary form as: 11100001 (0xe1). When
 * the value of a coefficient is 1, a bit is set. The value R, is the
 * concatenation of this value and 120 zero bits, yielding a 128-bit value
 * which matches the block size.
 *
 * This function will multiply two elements (vectors of bytes), X and Y, in
 * the field GF(2^128). The result is initialized to zero. For each bit of
 * X (out of 128), x_i, if x_i is set, then the result is multiplied (XOR'd)
 * by the current value of Y. For each bit, the value of Y will be raised by
 * a power of x (multiplied by the polynomial x). This can be achieved by
 * shifting Y once to the right. If the current value of Y, prior to being
 * multiplied by x, has 0 as its LSB, then it is a 127th degree polynomial.
 * Otherwise, we must divide by R after shifting to find the remainder.
 *
 * @param x the first block to multiply by the second.
 * @param y the second block to multiply by the first.
 *
 * @return the block result of the multiplication.
 */


modes.gcm.prototype.multiply = function (x, y) {
  var z_i = [0, 0, 0, 0];
  var v_i = y.slice(0); // calculate Z_128 (block has 128 bits)

  for (var i = 0; i < 128; ++i) {
    // if x_i is 0, Z_{i+1} = Z_i (unchanged)
    // else Z_{i+1} = Z_i ^ V_i
    // get x_i by finding 32-bit int position, then left shift 1 by remainder
    var x_i = x[i / 32 | 0] & 1 << 31 - i % 32;

    if (x_i) {
      z_i[0] ^= v_i[0];
      z_i[1] ^= v_i[1];
      z_i[2] ^= v_i[2];
      z_i[3] ^= v_i[3];
    } // if LSB(V_i) is 1, V_i = V_i >> 1
    // else V_i = (V_i >> 1) ^ R


    this.pow(v_i, v_i);
  }

  return z_i;
};

modes.gcm.prototype.pow = function (x, out) {
  // if LSB(x) is 1, x = x >>> 1
  // else x = (x >>> 1) ^ R
  var lsb = x[3] & 1; // always do x >>> 1:
  // starting with the rightmost integer, shift each integer to the right
  // one bit, pulling in the bit from the integer to the left as its top
  // most bit (do this for the last 3 integers)

  for (var i = 3; i > 0; --i) {
    out[i] = x[i] >>> 1 | (x[i - 1] & 1) << 31;
  } // shift the first integer normally


  out[0] = x[0] >>> 1; // if lsb was not set, then polynomial had a degree of 127 and doesn't
  // need to divided; otherwise, XOR with R to find the remainder; we only
  // need to XOR the first integer since R technically ends w/120 zero bits

  if (lsb) {
    out[0] ^= this._R;
  }
};

modes.gcm.prototype.tableMultiply = function (x) {
  // assumes 4-bit tables are used
  var z = [0, 0, 0, 0];

  for (var i = 0; i < 32; ++i) {
    var idx = i / 8 | 0;
    var x_i = x[idx] >>> (7 - i % 8) * 4 & 0xF;
    var ah = this._m[i][x_i];
    z[0] ^= ah[0];
    z[1] ^= ah[1];
    z[2] ^= ah[2];
    z[3] ^= ah[3];
  }

  return z;
};
/**
 * A continuing version of the GHASH algorithm that operates on a single
 * block. The hash block, last hash value (Ym) and the new block to hash
 * are given.
 *
 * @param h the hash block.
 * @param y the previous value for Ym, use [0, 0, 0, 0] for a new hash.
 * @param x the block to hash.
 *
 * @return the hashed value (Ym).
 */


modes.gcm.prototype.ghash = function (h, y, x) {
  y[0] ^= x[0];
  y[1] ^= x[1];
  y[2] ^= x[2];
  y[3] ^= x[3];
  return this.tableMultiply(y); //return this.multiply(y, h);
};
/**
 * Precomputes a table for multiplying against the hash subkey. This
 * mechanism provides a substantial speed increase over multiplication
 * performed without a table. The table-based multiplication this table is
 * for solves X * H by multiplying each component of X by H and then
 * composing the results together using XOR.
 *
 * This function can be used to generate tables with different bit sizes
 * for the components, however, this implementation assumes there are
 * 32 components of X (which is a 16 byte vector), therefore each component
 * takes 4-bits (so the table is constructed with bits=4).
 *
 * @param h the hash subkey.
 * @param bits the bit size for a component.
 */


modes.gcm.prototype.generateHashTable = function (h, bits) {
  // TODO: There are further optimizations that would use only the
  // first table M_0 (or some variant) along with a remainder table;
  // this can be explored in the future
  var multiplier = 8 / bits;
  var perInt = 4 * multiplier;
  var size = 16 * multiplier;
  var m = new Array(size);

  for (var i = 0; i < size; ++i) {
    var tmp = [0, 0, 0, 0];
    var idx = i / perInt | 0;
    var shft = (perInt - 1 - i % perInt) * bits;
    tmp[idx] = 1 << bits - 1 << shft;
    m[i] = this.generateSubHashTable(this.multiply(tmp, h), bits);
  }

  return m;
};
/**
 * Generates a table for multiplying against the hash subkey for one
 * particular component (out of all possible component values).
 *
 * @param mid the pre-multiplied value for the middle key of the table.
 * @param bits the bit size for a component.
 */


modes.gcm.prototype.generateSubHashTable = function (mid, bits) {
  // compute the table quickly by minimizing the number of
  // POW operations -- they only need to be performed for powers of 2,
  // all other entries can be composed from those powers using XOR
  var size = 1 << bits;
  var half = size >>> 1;
  var m = new Array(size);
  m[half] = mid.slice(0);
  var i = half >>> 1;

  while (i > 0) {
    // raise m0[2 * i] and store in m0[i]
    this.pow(m[2 * i], m[i] = []);
    i >>= 1;
  }

  i = 2;

  while (i < half) {
    for (var j = 1; j < i; ++j) {
      var m_i = m[i];
      var m_j = m[j];
      m[i + j] = [m_i[0] ^ m_j[0], m_i[1] ^ m_j[1], m_i[2] ^ m_j[2], m_i[3] ^ m_j[3]];
    }

    i *= 2;
  }

  m[0] = [0, 0, 0, 0];
  /* Note: We could avoid storing these by doing composition during multiply
  calculate top half using composition by speed is preferred. */

  for (i = half + 1; i < size; ++i) {
    var c = m[i ^ half];
    m[i] = [mid[0] ^ c[0], mid[1] ^ c[1], mid[2] ^ c[2], mid[3] ^ c[3]];
  }

  return m;
};
/** Utility functions */


function transformIV(iv) {
  if (typeof iv === 'string') {
    // convert iv string into byte buffer
    iv = forge.util.createBuffer(iv);
  }

  if (forge.util.isArray(iv) && iv.length > 4) {
    // convert iv byte array into byte buffer
    var tmp = iv;
    iv = forge.util.createBuffer();

    for (var i = 0; i < tmp.length; ++i) {
      iv.putByte(tmp[i]);
    }
  }

  if (!forge.util.isArray(iv)) {
    // convert iv byte buffer into 32-bit integer array
    iv = [iv.getInt32(), iv.getInt32(), iv.getInt32(), iv.getInt32()];
  }

  return iv;
}

function inc32(block) {
  // increment last 32 bits of block only
  block[block.length - 1] = block[block.length - 1] + 1 & 0xFFFFFFFF;
}

function from64To32(num) {
  // convert 64-bit number to two BE Int32s
  return [num / 0x100000000 | 0, num & 0xFFFFFFFF];
}
},{"./forge":"o20S","./util":"lWyh"}],"EkQ3":[function(require,module,exports) {
/**
 * Advanced Encryption Standard (AES) implementation.
 *
 * This implementation is based on the public domain library 'jscrypto' which
 * was written by:
 *
 * Emily Stark (estark@stanford.edu)
 * Mike Hamburg (mhamburg@stanford.edu)
 * Dan Boneh (dabo@cs.stanford.edu)
 *
 * Parts of this code are based on the OpenSSL implementation of AES:
 * http://www.openssl.org
 *
 * @author Dave Longley
 *
 * Copyright (c) 2010-2014 Digital Bazaar, Inc.
 */
var forge = require('./forge');

require('./cipher');

require('./cipherModes');

require('./util');
/* AES API */


module.exports = forge.aes = forge.aes || {};
/**
 * Deprecated. Instead, use:
 *
 * var cipher = forge.cipher.createCipher('AES-<mode>', key);
 * cipher.start({iv: iv});
 *
 * Creates an AES cipher object to encrypt data using the given symmetric key.
 * The output will be stored in the 'output' member of the returned cipher.
 *
 * The key and iv may be given as a string of bytes, an array of bytes,
 * a byte buffer, or an array of 32-bit words.
 *
 * @param key the symmetric key to use.
 * @param iv the initialization vector to use.
 * @param output the buffer to write to, null to create one.
 * @param mode the cipher mode to use (default: 'CBC').
 *
 * @return the cipher.
 */

forge.aes.startEncrypting = function (key, iv, output, mode) {
  var cipher = _createCipher({
    key: key,
    output: output,
    decrypt: false,
    mode: mode
  });

  cipher.start(iv);
  return cipher;
};
/**
 * Deprecated. Instead, use:
 *
 * var cipher = forge.cipher.createCipher('AES-<mode>', key);
 *
 * Creates an AES cipher object to encrypt data using the given symmetric key.
 *
 * The key may be given as a string of bytes, an array of bytes, a
 * byte buffer, or an array of 32-bit words.
 *
 * @param key the symmetric key to use.
 * @param mode the cipher mode to use (default: 'CBC').
 *
 * @return the cipher.
 */


forge.aes.createEncryptionCipher = function (key, mode) {
  return _createCipher({
    key: key,
    output: null,
    decrypt: false,
    mode: mode
  });
};
/**
 * Deprecated. Instead, use:
 *
 * var decipher = forge.cipher.createDecipher('AES-<mode>', key);
 * decipher.start({iv: iv});
 *
 * Creates an AES cipher object to decrypt data using the given symmetric key.
 * The output will be stored in the 'output' member of the returned cipher.
 *
 * The key and iv may be given as a string of bytes, an array of bytes,
 * a byte buffer, or an array of 32-bit words.
 *
 * @param key the symmetric key to use.
 * @param iv the initialization vector to use.
 * @param output the buffer to write to, null to create one.
 * @param mode the cipher mode to use (default: 'CBC').
 *
 * @return the cipher.
 */


forge.aes.startDecrypting = function (key, iv, output, mode) {
  var cipher = _createCipher({
    key: key,
    output: output,
    decrypt: true,
    mode: mode
  });

  cipher.start(iv);
  return cipher;
};
/**
 * Deprecated. Instead, use:
 *
 * var decipher = forge.cipher.createDecipher('AES-<mode>', key);
 *
 * Creates an AES cipher object to decrypt data using the given symmetric key.
 *
 * The key may be given as a string of bytes, an array of bytes, a
 * byte buffer, or an array of 32-bit words.
 *
 * @param key the symmetric key to use.
 * @param mode the cipher mode to use (default: 'CBC').
 *
 * @return the cipher.
 */


forge.aes.createDecryptionCipher = function (key, mode) {
  return _createCipher({
    key: key,
    output: null,
    decrypt: true,
    mode: mode
  });
};
/**
 * Creates a new AES cipher algorithm object.
 *
 * @param name the name of the algorithm.
 * @param mode the mode factory function.
 *
 * @return the AES algorithm object.
 */


forge.aes.Algorithm = function (name, mode) {
  if (!init) {
    initialize();
  }

  var self = this;
  self.name = name;
  self.mode = new mode({
    blockSize: 16,
    cipher: {
      encrypt: function (inBlock, outBlock) {
        return _updateBlock(self._w, inBlock, outBlock, false);
      },
      decrypt: function (inBlock, outBlock) {
        return _updateBlock(self._w, inBlock, outBlock, true);
      }
    }
  });
  self._init = false;
};
/**
 * Initializes this AES algorithm by expanding its key.
 *
 * @param options the options to use.
 *          key the key to use with this algorithm.
 *          decrypt true if the algorithm should be initialized for decryption,
 *            false for encryption.
 */


forge.aes.Algorithm.prototype.initialize = function (options) {
  if (this._init) {
    return;
  }

  var key = options.key;
  var tmp;
  /* Note: The key may be a string of bytes, an array of bytes, a byte
    buffer, or an array of 32-bit integers. If the key is in bytes, then
    it must be 16, 24, or 32 bytes in length. If it is in 32-bit
    integers, it must be 4, 6, or 8 integers long. */

  if (typeof key === 'string' && (key.length === 16 || key.length === 24 || key.length === 32)) {
    // convert key string into byte buffer
    key = forge.util.createBuffer(key);
  } else if (forge.util.isArray(key) && (key.length === 16 || key.length === 24 || key.length === 32)) {
    // convert key integer array into byte buffer
    tmp = key;
    key = forge.util.createBuffer();

    for (var i = 0; i < tmp.length; ++i) {
      key.putByte(tmp[i]);
    }
  } // convert key byte buffer into 32-bit integer array


  if (!forge.util.isArray(key)) {
    tmp = key;
    key = []; // key lengths of 16, 24, 32 bytes allowed

    var len = tmp.length();

    if (len === 16 || len === 24 || len === 32) {
      len = len >>> 2;

      for (var i = 0; i < len; ++i) {
        key.push(tmp.getInt32());
      }
    }
  } // key must be an array of 32-bit integers by now


  if (!forge.util.isArray(key) || !(key.length === 4 || key.length === 6 || key.length === 8)) {
    throw new Error('Invalid key parameter.');
  } // encryption operation is always used for these modes


  var mode = this.mode.name;
  var encryptOp = ['CFB', 'OFB', 'CTR', 'GCM'].indexOf(mode) !== -1; // do key expansion

  this._w = _expandKey(key, options.decrypt && !encryptOp);
  this._init = true;
};
/**
 * Expands a key. Typically only used for testing.
 *
 * @param key the symmetric key to expand, as an array of 32-bit words.
 * @param decrypt true to expand for decryption, false for encryption.
 *
 * @return the expanded key.
 */


forge.aes._expandKey = function (key, decrypt) {
  if (!init) {
    initialize();
  }

  return _expandKey(key, decrypt);
};
/**
 * Updates a single block. Typically only used for testing.
 *
 * @param w the expanded key to use.
 * @param input an array of block-size 32-bit words.
 * @param output an array of block-size 32-bit words.
 * @param decrypt true to decrypt, false to encrypt.
 */


forge.aes._updateBlock = _updateBlock;
/** Register AES algorithms **/

registerAlgorithm('AES-ECB', forge.cipher.modes.ecb);
registerAlgorithm('AES-CBC', forge.cipher.modes.cbc);
registerAlgorithm('AES-CFB', forge.cipher.modes.cfb);
registerAlgorithm('AES-OFB', forge.cipher.modes.ofb);
registerAlgorithm('AES-CTR', forge.cipher.modes.ctr);
registerAlgorithm('AES-GCM', forge.cipher.modes.gcm);

function registerAlgorithm(name, mode) {
  var factory = function () {
    return new forge.aes.Algorithm(name, mode);
  };

  forge.cipher.registerAlgorithm(name, factory);
}
/** AES implementation **/


var init = false; // not yet initialized

var Nb = 4; // number of words comprising the state (AES = 4)

var sbox; // non-linear substitution table used in key expansion

var isbox; // inversion of sbox

var rcon; // round constant word array

var mix; // mix-columns table

var imix; // inverse mix-columns table

/**
 * Performs initialization, ie: precomputes tables to optimize for speed.
 *
 * One way to understand how AES works is to imagine that 'addition' and
 * 'multiplication' are interfaces that require certain mathematical
 * properties to hold true (ie: they are associative) but they might have
 * different implementations and produce different kinds of results ...
 * provided that their mathematical properties remain true. AES defines
 * its own methods of addition and multiplication but keeps some important
 * properties the same, ie: associativity and distributivity. The
 * explanation below tries to shed some light on how AES defines addition
 * and multiplication of bytes and 32-bit words in order to perform its
 * encryption and decryption algorithms.
 *
 * The basics:
 *
 * The AES algorithm views bytes as binary representations of polynomials
 * that have either 1 or 0 as the coefficients. It defines the addition
 * or subtraction of two bytes as the XOR operation. It also defines the
 * multiplication of two bytes as a finite field referred to as GF(2^8)
 * (Note: 'GF' means "Galois Field" which is a field that contains a finite
 * number of elements so GF(2^8) has 256 elements).
 *
 * This means that any two bytes can be represented as binary polynomials;
 * when they multiplied together and modularly reduced by an irreducible
 * polynomial of the 8th degree, the results are the field GF(2^8). The
 * specific irreducible polynomial that AES uses in hexadecimal is 0x11b.
 * This multiplication is associative with 0x01 as the identity:
 *
 * (b * 0x01 = GF(b, 0x01) = b).
 *
 * The operation GF(b, 0x02) can be performed at the byte level by left
 * shifting b once and then XOR'ing it (to perform the modular reduction)
 * with 0x11b if b is >= 128. Repeated application of the multiplication
 * of 0x02 can be used to implement the multiplication of any two bytes.
 *
 * For instance, multiplying 0x57 and 0x13, denoted as GF(0x57, 0x13), can
 * be performed by factoring 0x13 into 0x01, 0x02, and 0x10. Then these
 * factors can each be multiplied by 0x57 and then added together. To do
 * the multiplication, values for 0x57 multiplied by each of these 3 factors
 * can be precomputed and stored in a table. To add them, the values from
 * the table are XOR'd together.
 *
 * AES also defines addition and multiplication of words, that is 4-byte
 * numbers represented as polynomials of 3 degrees where the coefficients
 * are the values of the bytes.
 *
 * The word [a0, a1, a2, a3] is a polynomial a3x^3 + a2x^2 + a1x + a0.
 *
 * Addition is performed by XOR'ing like powers of x. Multiplication
 * is performed in two steps, the first is an algebriac expansion as
 * you would do normally (where addition is XOR). But the result is
 * a polynomial larger than 3 degrees and thus it cannot fit in a word. So
 * next the result is modularly reduced by an AES-specific polynomial of
 * degree 4 which will always produce a polynomial of less than 4 degrees
 * such that it will fit in a word. In AES, this polynomial is x^4 + 1.
 *
 * The modular product of two polynomials 'a' and 'b' is thus:
 *
 * d(x) = d3x^3 + d2x^2 + d1x + d0
 * with
 * d0 = GF(a0, b0) ^ GF(a3, b1) ^ GF(a2, b2) ^ GF(a1, b3)
 * d1 = GF(a1, b0) ^ GF(a0, b1) ^ GF(a3, b2) ^ GF(a2, b3)
 * d2 = GF(a2, b0) ^ GF(a1, b1) ^ GF(a0, b2) ^ GF(a3, b3)
 * d3 = GF(a3, b0) ^ GF(a2, b1) ^ GF(a1, b2) ^ GF(a0, b3)
 *
 * As a matrix:
 *
 * [d0] = [a0 a3 a2 a1][b0]
 * [d1]   [a1 a0 a3 a2][b1]
 * [d2]   [a2 a1 a0 a3][b2]
 * [d3]   [a3 a2 a1 a0][b3]
 *
 * Special polynomials defined by AES (0x02 == {02}):
 * a(x)    = {03}x^3 + {01}x^2 + {01}x + {02}
 * a^-1(x) = {0b}x^3 + {0d}x^2 + {09}x + {0e}.
 *
 * These polynomials are used in the MixColumns() and InverseMixColumns()
 * operations, respectively, to cause each element in the state to affect
 * the output (referred to as diffusing).
 *
 * RotWord() uses: a0 = a1 = a2 = {00} and a3 = {01}, which is the
 * polynomial x3.
 *
 * The ShiftRows() method modifies the last 3 rows in the state (where
 * the state is 4 words with 4 bytes per word) by shifting bytes cyclically.
 * The 1st byte in the second row is moved to the end of the row. The 1st
 * and 2nd bytes in the third row are moved to the end of the row. The 1st,
 * 2nd, and 3rd bytes are moved in the fourth row.
 *
 * More details on how AES arithmetic works:
 *
 * In the polynomial representation of binary numbers, XOR performs addition
 * and subtraction and multiplication in GF(2^8) denoted as GF(a, b)
 * corresponds with the multiplication of polynomials modulo an irreducible
 * polynomial of degree 8. In other words, for AES, GF(a, b) will multiply
 * polynomial 'a' with polynomial 'b' and then do a modular reduction by
 * an AES-specific irreducible polynomial of degree 8.
 *
 * A polynomial is irreducible if its only divisors are one and itself. For
 * the AES algorithm, this irreducible polynomial is:
 *
 * m(x) = x^8 + x^4 + x^3 + x + 1,
 *
 * or {01}{1b} in hexadecimal notation, where each coefficient is a bit:
 * 100011011 = 283 = 0x11b.
 *
 * For example, GF(0x57, 0x83) = 0xc1 because
 *
 * 0x57 = 87  = 01010111 = x^6 + x^4 + x^2 + x + 1
 * 0x85 = 131 = 10000101 = x^7 + x + 1
 *
 * (x^6 + x^4 + x^2 + x + 1) * (x^7 + x + 1)
 * =  x^13 + x^11 + x^9 + x^8 + x^7 +
 *    x^7 + x^5 + x^3 + x^2 + x +
 *    x^6 + x^4 + x^2 + x + 1
 * =  x^13 + x^11 + x^9 + x^8 + x^6 + x^5 + x^4 + x^3 + 1 = y
 *    y modulo (x^8 + x^4 + x^3 + x + 1)
 * =  x^7 + x^6 + 1.
 *
 * The modular reduction by m(x) guarantees the result will be a binary
 * polynomial of less than degree 8, so that it can fit in a byte.
 *
 * The operation to multiply a binary polynomial b with x (the polynomial
 * x in binary representation is 00000010) is:
 *
 * b_7x^8 + b_6x^7 + b_5x^6 + b_4x^5 + b_3x^4 + b_2x^3 + b_1x^2 + b_0x^1
 *
 * To get GF(b, x) we must reduce that by m(x). If b_7 is 0 (that is the
 * most significant bit is 0 in b) then the result is already reduced. If
 * it is 1, then we can reduce it by subtracting m(x) via an XOR.
 *
 * It follows that multiplication by x (00000010 or 0x02) can be implemented
 * by performing a left shift followed by a conditional bitwise XOR with
 * 0x1b. This operation on bytes is denoted by xtime(). Multiplication by
 * higher powers of x can be implemented by repeated application of xtime().
 *
 * By adding intermediate results, multiplication by any constant can be
 * implemented. For instance:
 *
 * GF(0x57, 0x13) = 0xfe because:
 *
 * xtime(b) = (b & 128) ? (b << 1 ^ 0x11b) : (b << 1)
 *
 * Note: We XOR with 0x11b instead of 0x1b because in javascript our
 * datatype for b can be larger than 1 byte, so a left shift will not
 * automatically eliminate bits that overflow a byte ... by XOR'ing the
 * overflow bit with 1 (the extra one from 0x11b) we zero it out.
 *
 * GF(0x57, 0x02) = xtime(0x57) = 0xae
 * GF(0x57, 0x04) = xtime(0xae) = 0x47
 * GF(0x57, 0x08) = xtime(0x47) = 0x8e
 * GF(0x57, 0x10) = xtime(0x8e) = 0x07
 *
 * GF(0x57, 0x13) = GF(0x57, (0x01 ^ 0x02 ^ 0x10))
 *
 * And by the distributive property (since XOR is addition and GF() is
 * multiplication):
 *
 * = GF(0x57, 0x01) ^ GF(0x57, 0x02) ^ GF(0x57, 0x10)
 * = 0x57 ^ 0xae ^ 0x07
 * = 0xfe.
 */

function initialize() {
  init = true;
  /* Populate the Rcon table. These are the values given by
    [x^(i-1),{00},{00},{00}] where x^(i-1) are powers of x (and x = 0x02)
    in the field of GF(2^8), where i starts at 1.
     rcon[0] = [0x00, 0x00, 0x00, 0x00]
    rcon[1] = [0x01, 0x00, 0x00, 0x00] 2^(1-1) = 2^0 = 1
    rcon[2] = [0x02, 0x00, 0x00, 0x00] 2^(2-1) = 2^1 = 2
    ...
    rcon[9]  = [0x1B, 0x00, 0x00, 0x00] 2^(9-1)  = 2^8 = 0x1B
    rcon[10] = [0x36, 0x00, 0x00, 0x00] 2^(10-1) = 2^9 = 0x36
     We only store the first byte because it is the only one used.
  */

  rcon = [0x00, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1B, 0x36]; // compute xtime table which maps i onto GF(i, 0x02)

  var xtime = new Array(256);

  for (var i = 0; i < 128; ++i) {
    xtime[i] = i << 1;
    xtime[i + 128] = i + 128 << 1 ^ 0x11B;
  } // compute all other tables


  sbox = new Array(256);
  isbox = new Array(256);
  mix = new Array(4);
  imix = new Array(4);

  for (var i = 0; i < 4; ++i) {
    mix[i] = new Array(256);
    imix[i] = new Array(256);
  }

  var e = 0,
      ei = 0,
      e2,
      e4,
      e8,
      sx,
      sx2,
      me,
      ime;

  for (var i = 0; i < 256; ++i) {
    /* We need to generate the SubBytes() sbox and isbox tables so that
      we can perform byte substitutions. This requires us to traverse
      all of the elements in GF, find their multiplicative inverses,
      and apply to each the following affine transformation:
       bi' = bi ^ b(i + 4) mod 8 ^ b(i + 5) mod 8 ^ b(i + 6) mod 8 ^
            b(i + 7) mod 8 ^ ci
      for 0 <= i < 8, where bi is the ith bit of the byte, and ci is the
      ith bit of a byte c with the value {63} or {01100011}.
       It is possible to traverse every possible value in a Galois field
      using what is referred to as a 'generator'. There are many
      generators (128 out of 256): 3,5,6,9,11,82 to name a few. To fully
      traverse GF we iterate 255 times, multiplying by our generator
      each time.
       On each iteration we can determine the multiplicative inverse for
      the current element.
       Suppose there is an element in GF 'e'. For a given generator 'g',
      e = g^x. The multiplicative inverse of e is g^(255 - x). It turns
      out that if use the inverse of a generator as another generator
      it will produce all of the corresponding multiplicative inverses
      at the same time. For this reason, we choose 5 as our inverse
      generator because it only requires 2 multiplies and 1 add and its
      inverse, 82, requires relatively few operations as well.
       In order to apply the affine transformation, the multiplicative
      inverse 'ei' of 'e' can be repeatedly XOR'd (4 times) with a
      bit-cycling of 'ei'. To do this 'ei' is first stored in 's' and
      'x'. Then 's' is left shifted and the high bit of 's' is made the
      low bit. The resulting value is stored in 's'. Then 'x' is XOR'd
      with 's' and stored in 'x'. On each subsequent iteration the same
      operation is performed. When 4 iterations are complete, 'x' is
      XOR'd with 'c' (0x63) and the transformed value is stored in 'x'.
      For example:
       s = 01000001
      x = 01000001
       iteration 1: s = 10000010, x ^= s
      iteration 2: s = 00000101, x ^= s
      iteration 3: s = 00001010, x ^= s
      iteration 4: s = 00010100, x ^= s
      x ^= 0x63
       This can be done with a loop where s = (s << 1) | (s >> 7). However,
      it can also be done by using a single 16-bit (in this case 32-bit)
      number 'sx'. Since XOR is an associative operation, we can set 'sx'
      to 'ei' and then XOR it with 'sx' left-shifted 1,2,3, and 4 times.
      The most significant bits will flow into the high 8 bit positions
      and be correctly XOR'd with one another. All that remains will be
      to cycle the high 8 bits by XOR'ing them all with the lower 8 bits
      afterwards.
       At the same time we're populating sbox and isbox we can precompute
      the multiplication we'll need to do to do MixColumns() later.
    */
    // apply affine transformation
    sx = ei ^ ei << 1 ^ ei << 2 ^ ei << 3 ^ ei << 4;
    sx = sx >> 8 ^ sx & 255 ^ 0x63; // update tables

    sbox[e] = sx;
    isbox[sx] = e;
    /* Mixing columns is done using matrix multiplication. The columns
      that are to be mixed are each a single word in the current state.
      The state has Nb columns (4 columns). Therefore each column is a
      4 byte word. So to mix the columns in a single column 'c' where
      its rows are r0, r1, r2, and r3, we use the following matrix
      multiplication:
       [2 3 1 1]*[r0,c]=[r'0,c]
      [1 2 3 1] [r1,c] [r'1,c]
      [1 1 2 3] [r2,c] [r'2,c]
      [3 1 1 2] [r3,c] [r'3,c]
       r0, r1, r2, and r3 are each 1 byte of one of the words in the
      state (a column). To do matrix multiplication for each mixed
      column c' we multiply the corresponding row from the left matrix
      with the corresponding column from the right matrix. In total, we
      get 4 equations:
       r0,c' = 2*r0,c + 3*r1,c + 1*r2,c + 1*r3,c
      r1,c' = 1*r0,c + 2*r1,c + 3*r2,c + 1*r3,c
      r2,c' = 1*r0,c + 1*r1,c + 2*r2,c + 3*r3,c
      r3,c' = 3*r0,c + 1*r1,c + 1*r2,c + 2*r3,c
       As usual, the multiplication is as previously defined and the
      addition is XOR. In order to optimize mixing columns we can store
      the multiplication results in tables. If you think of the whole
      column as a word (it might help to visualize by mentally rotating
      the equations above by counterclockwise 90 degrees) then you can
      see that it would be useful to map the multiplications performed on
      each byte (r0, r1, r2, r3) onto a word as well. For instance, we
      could map 2*r0,1*r0,1*r0,3*r0 onto a word by storing 2*r0 in the
      highest 8 bits and 3*r0 in the lowest 8 bits (with the other two
      respectively in the middle). This means that a table can be
      constructed that uses r0 as an index to the word. We can do the
      same with r1, r2, and r3, creating a total of 4 tables.
       To construct a full c', we can just look up each byte of c in
      their respective tables and XOR the results together.
       Also, to build each table we only have to calculate the word
      for 2,1,1,3 for every byte ... which we can do on each iteration
      of this loop since we will iterate over every byte. After we have
      calculated 2,1,1,3 we can get the results for the other tables
      by cycling the byte at the end to the beginning. For instance
      we can take the result of table 2,1,1,3 and produce table 3,2,1,1
      by moving the right most byte to the left most position just like
      how you can imagine the 3 moved out of 2,1,1,3 and to the front
      to produce 3,2,1,1.
       There is another optimization in that the same multiples of
      the current element we need in order to advance our generator
      to the next iteration can be reused in performing the 2,1,1,3
      calculation. We also calculate the inverse mix column tables,
      with e,9,d,b being the inverse of 2,1,1,3.
       When we're done, and we need to actually mix columns, the first
      byte of each state word should be put through mix[0] (2,1,1,3),
      the second through mix[1] (3,2,1,1) and so forth. Then they should
      be XOR'd together to produce the fully mixed column.
    */
    // calculate mix and imix table values

    sx2 = xtime[sx];
    e2 = xtime[e];
    e4 = xtime[e2];
    e8 = xtime[e4];
    me = sx2 << 24 ^ // 2
    sx << 16 ^ // 1
    sx << 8 ^ ( // 1
    sx ^ sx2); // 3

    ime = (e2 ^ e4 ^ e8) << 24 ^ // E (14)
    (e ^ e8) << 16 ^ // 9
    (e ^ e4 ^ e8) << 8 ^ ( // D (13)
    e ^ e2 ^ e8); // B (11)
    // produce each of the mix tables by rotating the 2,1,1,3 value

    for (var n = 0; n < 4; ++n) {
      mix[n][e] = me;
      imix[n][sx] = ime; // cycle the right most byte to the left most position
      // ie: 2,1,1,3 becomes 3,2,1,1

      me = me << 24 | me >>> 8;
      ime = ime << 24 | ime >>> 8;
    } // get next element and inverse


    if (e === 0) {
      // 1 is the inverse of 1
      e = ei = 1;
    } else {
      // e = 2e + 2*2*2*(10e)) = multiply e by 82 (chosen generator)
      // ei = ei + 2*2*ei = multiply ei by 5 (inverse generator)
      e = e2 ^ xtime[xtime[xtime[e2 ^ e8]]];
      ei ^= xtime[xtime[ei]];
    }
  }
}
/**
 * Generates a key schedule using the AES key expansion algorithm.
 *
 * The AES algorithm takes the Cipher Key, K, and performs a Key Expansion
 * routine to generate a key schedule. The Key Expansion generates a total
 * of Nb*(Nr + 1) words: the algorithm requires an initial set of Nb words,
 * and each of the Nr rounds requires Nb words of key data. The resulting
 * key schedule consists of a linear array of 4-byte words, denoted [wi ],
 * with i in the range 0 <= i < Nb(Nr + 1).
 *
 * KeyExpansion(byte key[4*Nk], word w[Nb*(Nr+1)], Nk)
 * AES-128 (Nb=4, Nk=4, Nr=10)
 * AES-192 (Nb=4, Nk=6, Nr=12)
 * AES-256 (Nb=4, Nk=8, Nr=14)
 * Note: Nr=Nk+6.
 *
 * Nb is the number of columns (32-bit words) comprising the State (or
 * number of bytes in a block). For AES, Nb=4.
 *
 * @param key the key to schedule (as an array of 32-bit words).
 * @param decrypt true to modify the key schedule to decrypt, false not to.
 *
 * @return the generated key schedule.
 */


function _expandKey(key, decrypt) {
  // copy the key's words to initialize the key schedule
  var w = key.slice(0);
  /* RotWord() will rotate a word, moving the first byte to the last
    byte's position (shifting the other bytes left).
     We will be getting the value of Rcon at i / Nk. 'i' will iterate
    from Nk to (Nb * Nr+1). Nk = 4 (4 byte key), Nb = 4 (4 words in
    a block), Nr = Nk + 6 (10). Therefore 'i' will iterate from
    4 to 44 (exclusive). Each time we iterate 4 times, i / Nk will
    increase by 1. We use a counter iNk to keep track of this.
   */
  // go through the rounds expanding the key

  var temp,
      iNk = 1;
  var Nk = w.length;
  var Nr1 = Nk + 6 + 1;
  var end = Nb * Nr1;

  for (var i = Nk; i < end; ++i) {
    temp = w[i - 1];

    if (i % Nk === 0) {
      // temp = SubWord(RotWord(temp)) ^ Rcon[i / Nk]
      temp = sbox[temp >>> 16 & 255] << 24 ^ sbox[temp >>> 8 & 255] << 16 ^ sbox[temp & 255] << 8 ^ sbox[temp >>> 24] ^ rcon[iNk] << 24;
      iNk++;
    } else if (Nk > 6 && i % Nk === 4) {
      // temp = SubWord(temp)
      temp = sbox[temp >>> 24] << 24 ^ sbox[temp >>> 16 & 255] << 16 ^ sbox[temp >>> 8 & 255] << 8 ^ sbox[temp & 255];
    }

    w[i] = w[i - Nk] ^ temp;
  }
  /* When we are updating a cipher block we always use the code path for
     encryption whether we are decrypting or not (to shorten code and
     simplify the generation of look up tables). However, because there
     are differences in the decryption algorithm, other than just swapping
     in different look up tables, we must transform our key schedule to
     account for these changes:
      1. The decryption algorithm gets its key rounds in reverse order.
     2. The decryption algorithm adds the round key before mixing columns
       instead of afterwards.
      We don't need to modify our key schedule to handle the first case,
     we can just traverse the key schedule in reverse order when decrypting.
      The second case requires a little work.
      The tables we built for performing rounds will take an input and then
     perform SubBytes() and MixColumns() or, for the decrypt version,
     InvSubBytes() and InvMixColumns(). But the decrypt algorithm requires
     us to AddRoundKey() before InvMixColumns(). This means we'll need to
     apply some transformations to the round key to inverse-mix its columns
     so they'll be correct for moving AddRoundKey() to after the state has
     had its columns inverse-mixed.
      To inverse-mix the columns of the state when we're decrypting we use a
     lookup table that will apply InvSubBytes() and InvMixColumns() at the
     same time. However, the round key's bytes are not inverse-substituted
     in the decryption algorithm. To get around this problem, we can first
     substitute the bytes in the round key so that when we apply the
     transformation via the InvSubBytes()+InvMixColumns() table, it will
     undo our substitution leaving us with the original value that we
     want -- and then inverse-mix that value.
      This change will correctly alter our key schedule so that we can XOR
     each round key with our already transformed decryption state. This
     allows us to use the same code path as the encryption algorithm.
      We make one more change to the decryption key. Since the decryption
     algorithm runs in reverse from the encryption algorithm, we reverse
     the order of the round keys to avoid having to iterate over the key
     schedule backwards when running the encryption algorithm later in
     decryption mode. In addition to reversing the order of the round keys,
     we also swap each round key's 2nd and 4th rows. See the comments
     section where rounds are performed for more details about why this is
     done. These changes are done inline with the other substitution
     described above.
  */


  if (decrypt) {
    var tmp;
    var m0 = imix[0];
    var m1 = imix[1];
    var m2 = imix[2];
    var m3 = imix[3];
    var wnew = w.slice(0);
    end = w.length;

    for (var i = 0, wi = end - Nb; i < end; i += Nb, wi -= Nb) {
      // do not sub the first or last round key (round keys are Nb
      // words) as no column mixing is performed before they are added,
      // but do change the key order
      if (i === 0 || i === end - Nb) {
        wnew[i] = w[wi];
        wnew[i + 1] = w[wi + 3];
        wnew[i + 2] = w[wi + 2];
        wnew[i + 3] = w[wi + 1];
      } else {
        // substitute each round key byte because the inverse-mix
        // table will inverse-substitute it (effectively cancel the
        // substitution because round key bytes aren't sub'd in
        // decryption mode) and swap indexes 3 and 1
        for (var n = 0; n < Nb; ++n) {
          tmp = w[wi + n];
          wnew[i + (3 & -n)] = m0[sbox[tmp >>> 24]] ^ m1[sbox[tmp >>> 16 & 255]] ^ m2[sbox[tmp >>> 8 & 255]] ^ m3[sbox[tmp & 255]];
        }
      }
    }

    w = wnew;
  }

  return w;
}
/**
 * Updates a single block (16 bytes) using AES. The update will either
 * encrypt or decrypt the block.
 *
 * @param w the key schedule.
 * @param input the input block (an array of 32-bit words).
 * @param output the updated output block.
 * @param decrypt true to decrypt the block, false to encrypt it.
 */


function _updateBlock(w, input, output, decrypt) {
  /*
  Cipher(byte in[4*Nb], byte out[4*Nb], word w[Nb*(Nr+1)])
  begin
    byte state[4,Nb]
    state = in
    AddRoundKey(state, w[0, Nb-1])
    for round = 1 step 1 to Nr-1
      SubBytes(state)
      ShiftRows(state)
      MixColumns(state)
      AddRoundKey(state, w[round*Nb, (round+1)*Nb-1])
    end for
    SubBytes(state)
    ShiftRows(state)
    AddRoundKey(state, w[Nr*Nb, (Nr+1)*Nb-1])
    out = state
  end
   InvCipher(byte in[4*Nb], byte out[4*Nb], word w[Nb*(Nr+1)])
  begin
    byte state[4,Nb]
    state = in
    AddRoundKey(state, w[Nr*Nb, (Nr+1)*Nb-1])
    for round = Nr-1 step -1 downto 1
      InvShiftRows(state)
      InvSubBytes(state)
      AddRoundKey(state, w[round*Nb, (round+1)*Nb-1])
      InvMixColumns(state)
    end for
    InvShiftRows(state)
    InvSubBytes(state)
    AddRoundKey(state, w[0, Nb-1])
    out = state
  end
  */
  // Encrypt: AddRoundKey(state, w[0, Nb-1])
  // Decrypt: AddRoundKey(state, w[Nr*Nb, (Nr+1)*Nb-1])
  var Nr = w.length / 4 - 1;
  var m0, m1, m2, m3, sub;

  if (decrypt) {
    m0 = imix[0];
    m1 = imix[1];
    m2 = imix[2];
    m3 = imix[3];
    sub = isbox;
  } else {
    m0 = mix[0];
    m1 = mix[1];
    m2 = mix[2];
    m3 = mix[3];
    sub = sbox;
  }

  var a, b, c, d, a2, b2, c2;
  a = input[0] ^ w[0];
  b = input[decrypt ? 3 : 1] ^ w[1];
  c = input[2] ^ w[2];
  d = input[decrypt ? 1 : 3] ^ w[3];
  var i = 3;
  /* In order to share code we follow the encryption algorithm when both
    encrypting and decrypting. To account for the changes required in the
    decryption algorithm, we use different lookup tables when decrypting
    and use a modified key schedule to account for the difference in the
    order of transformations applied when performing rounds. We also get
    key rounds in reverse order (relative to encryption). */

  for (var round = 1; round < Nr; ++round) {
    /* As described above, we'll be using table lookups to perform the
      column mixing. Each column is stored as a word in the state (the
      array 'input' has one column as a word at each index). In order to
      mix a column, we perform these transformations on each row in c,
      which is 1 byte in each word. The new column for c0 is c'0:
                m0      m1      m2      m3
      r0,c'0 = 2*r0,c0 + 3*r1,c0 + 1*r2,c0 + 1*r3,c0
      r1,c'0 = 1*r0,c0 + 2*r1,c0 + 3*r2,c0 + 1*r3,c0
      r2,c'0 = 1*r0,c0 + 1*r1,c0 + 2*r2,c0 + 3*r3,c0
      r3,c'0 = 3*r0,c0 + 1*r1,c0 + 1*r2,c0 + 2*r3,c0
       So using mix tables where c0 is a word with r0 being its upper
      8 bits and r3 being its lower 8 bits:
       m0[c0 >> 24] will yield this word: [2*r0,1*r0,1*r0,3*r0]
      ...
      m3[c0 & 255] will yield this word: [1*r3,1*r3,3*r3,2*r3]
       Therefore to mix the columns in each word in the state we
      do the following (& 255 omitted for brevity):
      c'0,r0 = m0[c0 >> 24] ^ m1[c1 >> 16] ^ m2[c2 >> 8] ^ m3[c3]
      c'0,r1 = m0[c0 >> 24] ^ m1[c1 >> 16] ^ m2[c2 >> 8] ^ m3[c3]
      c'0,r2 = m0[c0 >> 24] ^ m1[c1 >> 16] ^ m2[c2 >> 8] ^ m3[c3]
      c'0,r3 = m0[c0 >> 24] ^ m1[c1 >> 16] ^ m2[c2 >> 8] ^ m3[c3]
       However, before mixing, the algorithm requires us to perform
      ShiftRows(). The ShiftRows() transformation cyclically shifts the
      last 3 rows of the state over different offsets. The first row
      (r = 0) is not shifted.
       s'_r,c = s_r,(c + shift(r, Nb) mod Nb
      for 0 < r < 4 and 0 <= c < Nb and
      shift(1, 4) = 1
      shift(2, 4) = 2
      shift(3, 4) = 3.
       This causes the first byte in r = 1 to be moved to the end of
      the row, the first 2 bytes in r = 2 to be moved to the end of
      the row, the first 3 bytes in r = 3 to be moved to the end of
      the row:
       r1: [c0 c1 c2 c3] => [c1 c2 c3 c0]
      r2: [c0 c1 c2 c3]    [c2 c3 c0 c1]
      r3: [c0 c1 c2 c3]    [c3 c0 c1 c2]
       We can make these substitutions inline with our column mixing to
      generate an updated set of equations to produce each word in the
      state (note the columns have changed positions):
       c0 c1 c2 c3 => c0 c1 c2 c3
      c0 c1 c2 c3    c1 c2 c3 c0  (cycled 1 byte)
      c0 c1 c2 c3    c2 c3 c0 c1  (cycled 2 bytes)
      c0 c1 c2 c3    c3 c0 c1 c2  (cycled 3 bytes)
       Therefore:
       c'0 = 2*r0,c0 + 3*r1,c1 + 1*r2,c2 + 1*r3,c3
      c'0 = 1*r0,c0 + 2*r1,c1 + 3*r2,c2 + 1*r3,c3
      c'0 = 1*r0,c0 + 1*r1,c1 + 2*r2,c2 + 3*r3,c3
      c'0 = 3*r0,c0 + 1*r1,c1 + 1*r2,c2 + 2*r3,c3
       c'1 = 2*r0,c1 + 3*r1,c2 + 1*r2,c3 + 1*r3,c0
      c'1 = 1*r0,c1 + 2*r1,c2 + 3*r2,c3 + 1*r3,c0
      c'1 = 1*r0,c1 + 1*r1,c2 + 2*r2,c3 + 3*r3,c0
      c'1 = 3*r0,c1 + 1*r1,c2 + 1*r2,c3 + 2*r3,c0
       ... and so forth for c'2 and c'3. The important distinction is
      that the columns are cycling, with c0 being used with the m0
      map when calculating c0, but c1 being used with the m0 map when
      calculating c1 ... and so forth.
       When performing the inverse we transform the mirror image and
      skip the bottom row, instead of the top one, and move upwards:
       c3 c2 c1 c0 => c0 c3 c2 c1  (cycled 3 bytes) *same as encryption
      c3 c2 c1 c0    c1 c0 c3 c2  (cycled 2 bytes)
      c3 c2 c1 c0    c2 c1 c0 c3  (cycled 1 byte)  *same as encryption
      c3 c2 c1 c0    c3 c2 c1 c0
       If you compare the resulting matrices for ShiftRows()+MixColumns()
      and for InvShiftRows()+InvMixColumns() the 2nd and 4th columns are
      different (in encrypt mode vs. decrypt mode). So in order to use
      the same code to handle both encryption and decryption, we will
      need to do some mapping.
       If in encryption mode we let a=c0, b=c1, c=c2, d=c3, and r<N> be
      a row number in the state, then the resulting matrix in encryption
      mode for applying the above transformations would be:
       r1: a b c d
      r2: b c d a
      r3: c d a b
      r4: d a b c
       If we did the same in decryption mode we would get:
       r1: a d c b
      r2: b a d c
      r3: c b a d
      r4: d c b a
       If instead we swap d and b (set b=c3 and d=c1), then we get:
       r1: a b c d
      r2: d a b c
      r3: c d a b
      r4: b c d a
       Now the 1st and 3rd rows are the same as the encryption matrix. All
      we need to do then to make the mapping exactly the same is to swap
      the 2nd and 4th rows when in decryption mode. To do this without
      having to do it on each iteration, we swapped the 2nd and 4th rows
      in the decryption key schedule. We also have to do the swap above
      when we first pull in the input and when we set the final output. */
    a2 = m0[a >>> 24] ^ m1[b >>> 16 & 255] ^ m2[c >>> 8 & 255] ^ m3[d & 255] ^ w[++i];
    b2 = m0[b >>> 24] ^ m1[c >>> 16 & 255] ^ m2[d >>> 8 & 255] ^ m3[a & 255] ^ w[++i];
    c2 = m0[c >>> 24] ^ m1[d >>> 16 & 255] ^ m2[a >>> 8 & 255] ^ m3[b & 255] ^ w[++i];
    d = m0[d >>> 24] ^ m1[a >>> 16 & 255] ^ m2[b >>> 8 & 255] ^ m3[c & 255] ^ w[++i];
    a = a2;
    b = b2;
    c = c2;
  }
  /*
    Encrypt:
    SubBytes(state)
    ShiftRows(state)
    AddRoundKey(state, w[Nr*Nb, (Nr+1)*Nb-1])
     Decrypt:
    InvShiftRows(state)
    InvSubBytes(state)
    AddRoundKey(state, w[0, Nb-1])
   */
  // Note: rows are shifted inline


  output[0] = sub[a >>> 24] << 24 ^ sub[b >>> 16 & 255] << 16 ^ sub[c >>> 8 & 255] << 8 ^ sub[d & 255] ^ w[++i];
  output[decrypt ? 3 : 1] = sub[b >>> 24] << 24 ^ sub[c >>> 16 & 255] << 16 ^ sub[d >>> 8 & 255] << 8 ^ sub[a & 255] ^ w[++i];
  output[2] = sub[c >>> 24] << 24 ^ sub[d >>> 16 & 255] << 16 ^ sub[a >>> 8 & 255] << 8 ^ sub[b & 255] ^ w[++i];
  output[decrypt ? 1 : 3] = sub[d >>> 24] << 24 ^ sub[a >>> 16 & 255] << 16 ^ sub[b >>> 8 & 255] << 8 ^ sub[c & 255] ^ w[++i];
}
/**
 * Deprecated. Instead, use:
 *
 * forge.cipher.createCipher('AES-<mode>', key);
 * forge.cipher.createDecipher('AES-<mode>', key);
 *
 * Creates a deprecated AES cipher object. This object's mode will default to
 * CBC (cipher-block-chaining).
 *
 * The key and iv may be given as a string of bytes, an array of bytes, a
 * byte buffer, or an array of 32-bit words.
 *
 * @param options the options to use.
 *          key the symmetric key to use.
 *          output the buffer to write to.
 *          decrypt true for decryption, false for encryption.
 *          mode the cipher mode to use (default: 'CBC').
 *
 * @return the cipher.
 */


function _createCipher(options) {
  options = options || {};
  var mode = (options.mode || 'CBC').toUpperCase();
  var algorithm = 'AES-' + mode;
  var cipher;

  if (options.decrypt) {
    cipher = forge.cipher.createDecipher(algorithm, options.key);
  } else {
    cipher = forge.cipher.createCipher(algorithm, options.key);
  } // backwards compatible start API


  var start = cipher.start;

  cipher.start = function (iv, options) {
    // backwards compatibility: support second arg as output buffer
    var output = null;

    if (options instanceof forge.util.ByteBuffer) {
      output = options;
      options = {};
    }

    options = options || {};
    options.output = output;
    options.iv = iv;
    start.call(cipher, options);
  };

  return cipher;
}
},{"./forge":"o20S","./cipher":"UdiU","./cipherModes":"PpVb","./util":"lWyh"}],"Tsiu":[function(require,module,exports) {
/**
 * Node.js module for Forge message digests.
 *
 * @author Dave Longley
 *
 * Copyright 2011-2017 Digital Bazaar, Inc.
 */
var forge = require('./forge');

module.exports = forge.md = forge.md || {};
forge.md.algorithms = forge.md.algorithms || {};
},{"./forge":"o20S"}],"pZAX":[function(require,module,exports) {
/**
 * Secure Hash Algorithm with 256-bit digest (SHA-256) implementation.
 *
 * See FIPS 180-2 for details.
 *
 * @author Dave Longley
 *
 * Copyright (c) 2010-2015 Digital Bazaar, Inc.
 */
var forge = require('./forge');

require('./md');

require('./util');

var sha256 = module.exports = forge.sha256 = forge.sha256 || {};
forge.md.sha256 = forge.md.algorithms.sha256 = sha256;
/**
 * Creates a SHA-256 message digest object.
 *
 * @return a message digest object.
 */

sha256.create = function () {
  // do initialization as necessary
  if (!_initialized) {
    _init();
  } // SHA-256 state contains eight 32-bit integers


  var _state = null; // input buffer

  var _input = forge.util.createBuffer(); // used for word storage


  var _w = new Array(64); // message digest object


  var md = {
    algorithm: 'sha256',
    blockLength: 64,
    digestLength: 32,
    // 56-bit length of message so far (does not including padding)
    messageLength: 0,
    // true message length
    fullMessageLength: null,
    // size of message length in bytes
    messageLengthSize: 8
  };
  /**
   * Starts the digest.
   *
   * @return this digest object.
   */

  md.start = function () {
    // up to 56-bit message length for convenience
    md.messageLength = 0; // full message length (set md.messageLength64 for backwards-compatibility)

    md.fullMessageLength = md.messageLength64 = [];
    var int32s = md.messageLengthSize / 4;

    for (var i = 0; i < int32s; ++i) {
      md.fullMessageLength.push(0);
    }

    _input = forge.util.createBuffer();
    _state = {
      h0: 0x6A09E667,
      h1: 0xBB67AE85,
      h2: 0x3C6EF372,
      h3: 0xA54FF53A,
      h4: 0x510E527F,
      h5: 0x9B05688C,
      h6: 0x1F83D9AB,
      h7: 0x5BE0CD19
    };
    return md;
  }; // start digest automatically for first time


  md.start();
  /**
   * Updates the digest with the given message input. The given input can
   * treated as raw input (no encoding will be applied) or an encoding of
   * 'utf8' maybe given to encode the input using UTF-8.
   *
   * @param msg the message input to update with.
   * @param encoding the encoding to use (default: 'raw', other: 'utf8').
   *
   * @return this digest object.
   */

  md.update = function (msg, encoding) {
    if (encoding === 'utf8') {
      msg = forge.util.encodeUtf8(msg);
    } // update message length


    var len = msg.length;
    md.messageLength += len;
    len = [len / 0x100000000 >>> 0, len >>> 0];

    for (var i = md.fullMessageLength.length - 1; i >= 0; --i) {
      md.fullMessageLength[i] += len[1];
      len[1] = len[0] + (md.fullMessageLength[i] / 0x100000000 >>> 0);
      md.fullMessageLength[i] = md.fullMessageLength[i] >>> 0;
      len[0] = len[1] / 0x100000000 >>> 0;
    } // add bytes to input buffer


    _input.putBytes(msg); // process bytes


    _update(_state, _w, _input); // compact input buffer every 2K or if empty


    if (_input.read > 2048 || _input.length() === 0) {
      _input.compact();
    }

    return md;
  };
  /**
   * Produces the digest.
   *
   * @return a byte buffer containing the digest value.
   */


  md.digest = function () {
    /* Note: Here we copy the remaining bytes in the input buffer and
    add the appropriate SHA-256 padding. Then we do the final update
    on a copy of the state so that if the user wants to get
    intermediate digests they can do so. */

    /* Determine the number of bytes that must be added to the message
    to ensure its length is congruent to 448 mod 512. In other words,
    the data to be digested must be a multiple of 512 bits (or 128 bytes).
    This data includes the message, some padding, and the length of the
    message. Since the length of the message will be encoded as 8 bytes (64
    bits), that means that the last segment of the data must have 56 bytes
    (448 bits) of message and padding. Therefore, the length of the message
    plus the padding must be congruent to 448 mod 512 because
    512 - 128 = 448.
     In order to fill up the message length it must be filled with
    padding that begins with 1 bit followed by all 0 bits. Padding
    must *always* be present, so if the message length is already
    congruent to 448 mod 512, then 512 padding bits must be added. */
    var finalBlock = forge.util.createBuffer();
    finalBlock.putBytes(_input.bytes()); // compute remaining size to be digested (include message length size)

    var remaining = md.fullMessageLength[md.fullMessageLength.length - 1] + md.messageLengthSize; // add padding for overflow blockSize - overflow
    // _padding starts with 1 byte with first bit is set (byte value 128), then
    // there may be up to (blockSize - 1) other pad bytes

    var overflow = remaining & md.blockLength - 1;
    finalBlock.putBytes(_padding.substr(0, md.blockLength - overflow)); // serialize message length in bits in big-endian order; since length
    // is stored in bytes we multiply by 8 and add carry from next int

    var next, carry;
    var bits = md.fullMessageLength[0] * 8;

    for (var i = 0; i < md.fullMessageLength.length - 1; ++i) {
      next = md.fullMessageLength[i + 1] * 8;
      carry = next / 0x100000000 >>> 0;
      bits += carry;
      finalBlock.putInt32(bits >>> 0);
      bits = next >>> 0;
    }

    finalBlock.putInt32(bits);
    var s2 = {
      h0: _state.h0,
      h1: _state.h1,
      h2: _state.h2,
      h3: _state.h3,
      h4: _state.h4,
      h5: _state.h5,
      h6: _state.h6,
      h7: _state.h7
    };

    _update(s2, _w, finalBlock);

    var rval = forge.util.createBuffer();
    rval.putInt32(s2.h0);
    rval.putInt32(s2.h1);
    rval.putInt32(s2.h2);
    rval.putInt32(s2.h3);
    rval.putInt32(s2.h4);
    rval.putInt32(s2.h5);
    rval.putInt32(s2.h6);
    rval.putInt32(s2.h7);
    return rval;
  };

  return md;
}; // sha-256 padding bytes not initialized yet


var _padding = null;
var _initialized = false; // table of constants

var _k = null;
/**
 * Initializes the constant tables.
 */

function _init() {
  // create padding
  _padding = String.fromCharCode(128);
  _padding += forge.util.fillString(String.fromCharCode(0x00), 64); // create K table for SHA-256

  _k = [0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5, 0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174, 0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da, 0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967, 0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85, 0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070, 0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3, 0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2]; // now initialized

  _initialized = true;
}
/**
 * Updates a SHA-256 state with the given byte buffer.
 *
 * @param s the SHA-256 state to update.
 * @param w the array to use to store words.
 * @param bytes the byte buffer to update with.
 */


function _update(s, w, bytes) {
  // consume 512 bit (64 byte) chunks
  var t1, t2, s0, s1, ch, maj, i, a, b, c, d, e, f, g, h;
  var len = bytes.length();

  while (len >= 64) {
    // the w array will be populated with sixteen 32-bit big-endian words
    // and then extended into 64 32-bit words according to SHA-256
    for (i = 0; i < 16; ++i) {
      w[i] = bytes.getInt32();
    }

    for (; i < 64; ++i) {
      // XOR word 2 words ago rot right 17, rot right 19, shft right 10
      t1 = w[i - 2];
      t1 = (t1 >>> 17 | t1 << 15) ^ (t1 >>> 19 | t1 << 13) ^ t1 >>> 10; // XOR word 15 words ago rot right 7, rot right 18, shft right 3

      t2 = w[i - 15];
      t2 = (t2 >>> 7 | t2 << 25) ^ (t2 >>> 18 | t2 << 14) ^ t2 >>> 3; // sum(t1, word 7 ago, t2, word 16 ago) modulo 2^32

      w[i] = t1 + w[i - 7] + t2 + w[i - 16] | 0;
    } // initialize hash value for this chunk


    a = s.h0;
    b = s.h1;
    c = s.h2;
    d = s.h3;
    e = s.h4;
    f = s.h5;
    g = s.h6;
    h = s.h7; // round function

    for (i = 0; i < 64; ++i) {
      // Sum1(e)
      s1 = (e >>> 6 | e << 26) ^ (e >>> 11 | e << 21) ^ (e >>> 25 | e << 7); // Ch(e, f, g) (optimized the same way as SHA-1)

      ch = g ^ e & (f ^ g); // Sum0(a)

      s0 = (a >>> 2 | a << 30) ^ (a >>> 13 | a << 19) ^ (a >>> 22 | a << 10); // Maj(a, b, c) (optimized the same way as SHA-1)

      maj = a & b | c & (a ^ b); // main algorithm

      t1 = h + s1 + ch + _k[i] + w[i];
      t2 = s0 + maj;
      h = g;
      g = f;
      f = e; // `>>> 0` necessary to avoid iOS/Safari 10 optimization bug
      // can't truncate with `| 0`

      e = d + t1 >>> 0;
      d = c;
      c = b;
      b = a; // `>>> 0` necessary to avoid iOS/Safari 10 optimization bug
      // can't truncate with `| 0`

      a = t1 + t2 >>> 0;
    } // update hash state


    s.h0 = s.h0 + a | 0;
    s.h1 = s.h1 + b | 0;
    s.h2 = s.h2 + c | 0;
    s.h3 = s.h3 + d | 0;
    s.h4 = s.h4 + e | 0;
    s.h5 = s.h5 + f | 0;
    s.h6 = s.h6 + g | 0;
    s.h7 = s.h7 + h | 0;
    len -= 64;
  }
}
},{"./forge":"o20S","./md":"Tsiu","./util":"lWyh"}],"QgPb":[function(require,module,exports) {
var process = require("process");
/**
 * A javascript implementation of a cryptographically-secure
 * Pseudo Random Number Generator (PRNG). The Fortuna algorithm is followed
 * here though the use of SHA-256 is not enforced; when generating an
 * a PRNG context, the hashing algorithm and block cipher used for
 * the generator are specified via a plugin.
 *
 * @author Dave Longley
 *
 * Copyright (c) 2010-2014 Digital Bazaar, Inc.
 */
var forge = require('./forge');

require('./util');

var _crypto = null;

if (forge.util.isNodejs && !forge.options.usePureJavaScript && !process.versions['node-webkit']) {
  _crypto = require('crypto');
}
/* PRNG API */


var prng = module.exports = forge.prng = forge.prng || {};
/**
 * Creates a new PRNG context.
 *
 * A PRNG plugin must be passed in that will provide:
 *
 * 1. A function that initializes the key and seed of a PRNG context. It
 *   will be given a 16 byte key and a 16 byte seed. Any key expansion
 *   or transformation of the seed from a byte string into an array of
 *   integers (or similar) should be performed.
 * 2. The cryptographic function used by the generator. It takes a key and
 *   a seed.
 * 3. A seed increment function. It takes the seed and returns seed + 1.
 * 4. An api to create a message digest.
 *
 * For an example, see random.js.
 *
 * @param plugin the PRNG plugin to use.
 */

prng.create = function (plugin) {
  var ctx = {
    plugin: plugin,
    key: null,
    seed: null,
    time: null,
    // number of reseeds so far
    reseeds: 0,
    // amount of data generated so far
    generated: 0,
    // no initial key bytes
    keyBytes: ''
  }; // create 32 entropy pools (each is a message digest)

  var md = plugin.md;
  var pools = new Array(32);

  for (var i = 0; i < 32; ++i) {
    pools[i] = md.create();
  }

  ctx.pools = pools; // entropy pools are written to cyclically, starting at index 0

  ctx.pool = 0;
  /**
   * Generates random bytes. The bytes may be generated synchronously or
   * asynchronously. Web workers must use the asynchronous interface or
   * else the behavior is undefined.
   *
   * @param count the number of random bytes to generate.
   * @param [callback(err, bytes)] called once the operation completes.
   *
   * @return count random bytes as a string.
   */

  ctx.generate = function (count, callback) {
    // do synchronously
    if (!callback) {
      return ctx.generateSync(count);
    } // simple generator using counter-based CBC


    var cipher = ctx.plugin.cipher;
    var increment = ctx.plugin.increment;
    var formatKey = ctx.plugin.formatKey;
    var formatSeed = ctx.plugin.formatSeed;
    var b = forge.util.createBuffer(); // paranoid deviation from Fortuna:
    // reset key for every request to protect previously
    // generated random bytes should the key be discovered;
    // there is no 100ms based reseeding because of this
    // forced reseed for every `generate` call

    ctx.key = null;
    generate();

    function generate(err) {
      if (err) {
        return callback(err);
      } // sufficient bytes generated


      if (b.length() >= count) {
        return callback(null, b.getBytes(count));
      } // if amount of data generated is greater than 1 MiB, trigger reseed


      if (ctx.generated > 0xfffff) {
        ctx.key = null;
      }

      if (ctx.key === null) {
        // prevent stack overflow
        return forge.util.nextTick(function () {
          _reseed(generate);
        });
      } // generate the random bytes


      var bytes = cipher(ctx.key, ctx.seed);
      ctx.generated += bytes.length;
      b.putBytes(bytes); // generate bytes for a new key and seed

      ctx.key = formatKey(cipher(ctx.key, increment(ctx.seed)));
      ctx.seed = formatSeed(cipher(ctx.key, ctx.seed));
      forge.util.setImmediate(generate);
    }
  };
  /**
   * Generates random bytes synchronously.
   *
   * @param count the number of random bytes to generate.
   *
   * @return count random bytes as a string.
   */


  ctx.generateSync = function (count) {
    // simple generator using counter-based CBC
    var cipher = ctx.plugin.cipher;
    var increment = ctx.plugin.increment;
    var formatKey = ctx.plugin.formatKey;
    var formatSeed = ctx.plugin.formatSeed; // paranoid deviation from Fortuna:
    // reset key for every request to protect previously
    // generated random bytes should the key be discovered;
    // there is no 100ms based reseeding because of this
    // forced reseed for every `generateSync` call

    ctx.key = null;
    var b = forge.util.createBuffer();

    while (b.length() < count) {
      // if amount of data generated is greater than 1 MiB, trigger reseed
      if (ctx.generated > 0xfffff) {
        ctx.key = null;
      }

      if (ctx.key === null) {
        _reseedSync();
      } // generate the random bytes


      var bytes = cipher(ctx.key, ctx.seed);
      ctx.generated += bytes.length;
      b.putBytes(bytes); // generate bytes for a new key and seed

      ctx.key = formatKey(cipher(ctx.key, increment(ctx.seed)));
      ctx.seed = formatSeed(cipher(ctx.key, ctx.seed));
    }

    return b.getBytes(count);
  };
  /**
   * Private function that asynchronously reseeds a generator.
   *
   * @param callback(err) called once the operation completes.
   */


  function _reseed(callback) {
    if (ctx.pools[0].messageLength >= 32) {
      _seed();

      return callback();
    } // not enough seed data...


    var needed = 32 - ctx.pools[0].messageLength << 5;
    ctx.seedFile(needed, function (err, bytes) {
      if (err) {
        return callback(err);
      }

      ctx.collect(bytes);

      _seed();

      callback();
    });
  }
  /**
   * Private function that synchronously reseeds a generator.
   */


  function _reseedSync() {
    if (ctx.pools[0].messageLength >= 32) {
      return _seed();
    } // not enough seed data...


    var needed = 32 - ctx.pools[0].messageLength << 5;
    ctx.collect(ctx.seedFileSync(needed));

    _seed();
  }
  /**
   * Private function that seeds a generator once enough bytes are available.
   */


  function _seed() {
    // update reseed count
    ctx.reseeds = ctx.reseeds === 0xffffffff ? 0 : ctx.reseeds + 1; // goal is to update `key` via:
    // key = hash(key + s)
    //   where 's' is all collected entropy from selected pools, then...
    // create a plugin-based message digest

    var md = ctx.plugin.md.create(); // consume current key bytes

    md.update(ctx.keyBytes); // digest the entropy of pools whose index k meet the
    // condition 'n mod 2^k == 0' where n is the number of reseeds

    var _2powK = 1;

    for (var k = 0; k < 32; ++k) {
      if (ctx.reseeds % _2powK === 0) {
        md.update(ctx.pools[k].digest().getBytes());
        ctx.pools[k].start();
      }

      _2powK = _2powK << 1;
    } // get digest for key bytes


    ctx.keyBytes = md.digest().getBytes(); // paranoid deviation from Fortuna:
    // update `seed` via `seed = hash(key)`
    // instead of initializing to zero once and only
    // ever incrementing it

    md.start();
    md.update(ctx.keyBytes);
    var seedBytes = md.digest().getBytes(); // update state

    ctx.key = ctx.plugin.formatKey(ctx.keyBytes);
    ctx.seed = ctx.plugin.formatSeed(seedBytes);
    ctx.generated = 0;
  }
  /**
   * The built-in default seedFile. This seedFile is used when entropy
   * is needed immediately.
   *
   * @param needed the number of bytes that are needed.
   *
   * @return the random bytes.
   */


  function defaultSeedFile(needed) {
    // use window.crypto.getRandomValues strong source of entropy if available
    var getRandomValues = null;
    var globalScope = forge.util.globalScope;

    var _crypto = globalScope.crypto || globalScope.msCrypto;

    if (_crypto && _crypto.getRandomValues) {
      getRandomValues = function (arr) {
        return _crypto.getRandomValues(arr);
      };
    }

    var b = forge.util.createBuffer();

    if (getRandomValues) {
      while (b.length() < needed) {
        // max byte length is 65536 before QuotaExceededError is thrown
        // http://www.w3.org/TR/WebCryptoAPI/#RandomSource-method-getRandomValues
        var count = Math.max(1, Math.min(needed - b.length(), 65536) / 4);
        var entropy = new Uint32Array(Math.floor(count));

        try {
          getRandomValues(entropy);

          for (var i = 0; i < entropy.length; ++i) {
            b.putInt32(entropy[i]);
          }
        } catch (e) {
          /* only ignore QuotaExceededError */
          if (!(typeof QuotaExceededError !== 'undefined' && e instanceof QuotaExceededError)) {
            throw e;
          }
        }
      }
    } // be sad and add some weak random data


    if (b.length() < needed) {
      /* Draws from Park-Miller "minimal standard" 31 bit PRNG,
      implemented with David G. Carta's optimization: with 32 bit math
      and without division (Public Domain). */
      var hi, lo, next;
      var seed = Math.floor(Math.random() * 0x010000);

      while (b.length() < needed) {
        lo = 16807 * (seed & 0xFFFF);
        hi = 16807 * (seed >> 16);
        lo += (hi & 0x7FFF) << 16;
        lo += hi >> 15;
        lo = (lo & 0x7FFFFFFF) + (lo >> 31);
        seed = lo & 0xFFFFFFFF; // consume lower 3 bytes of seed

        for (var i = 0; i < 3; ++i) {
          // throw in more pseudo random
          next = seed >>> (i << 3);
          next ^= Math.floor(Math.random() * 0x0100);
          b.putByte(String.fromCharCode(next & 0xFF));
        }
      }
    }

    return b.getBytes(needed);
  } // initialize seed file APIs


  if (_crypto) {
    // use nodejs async API
    ctx.seedFile = function (needed, callback) {
      _crypto.randomBytes(needed, function (err, bytes) {
        if (err) {
          return callback(err);
        }

        callback(null, bytes.toString());
      });
    }; // use nodejs sync API


    ctx.seedFileSync = function (needed) {
      return _crypto.randomBytes(needed).toString();
    };
  } else {
    ctx.seedFile = function (needed, callback) {
      try {
        callback(null, defaultSeedFile(needed));
      } catch (e) {
        callback(e);
      }
    };

    ctx.seedFileSync = defaultSeedFile;
  }
  /**
   * Adds entropy to a prng ctx's accumulator.
   *
   * @param bytes the bytes of entropy as a string.
   */


  ctx.collect = function (bytes) {
    // iterate over pools distributing entropy cyclically
    var count = bytes.length;

    for (var i = 0; i < count; ++i) {
      ctx.pools[ctx.pool].update(bytes.substr(i, 1));
      ctx.pool = ctx.pool === 31 ? 0 : ctx.pool + 1;
    }
  };
  /**
   * Collects an integer of n bits.
   *
   * @param i the integer entropy.
   * @param n the number of bits in the integer.
   */


  ctx.collectInt = function (i, n) {
    var bytes = '';

    for (var x = 0; x < n; x += 8) {
      bytes += String.fromCharCode(i >> x & 0xFF);
    }

    ctx.collect(bytes);
  };
  /**
   * Registers a Web Worker to receive immediate entropy from the main thread.
   * This method is required until Web Workers can access the native crypto
   * API. This method should be called twice for each created worker, once in
   * the main thread, and once in the worker itself.
   *
   * @param worker the worker to register.
   */


  ctx.registerWorker = function (worker) {
    // worker receives random bytes
    if (worker === self) {
      ctx.seedFile = function (needed, callback) {
        function listener(e) {
          var data = e.data;

          if (data.forge && data.forge.prng) {
            self.removeEventListener('message', listener);
            callback(data.forge.prng.err, data.forge.prng.bytes);
          }
        }

        self.addEventListener('message', listener);
        self.postMessage({
          forge: {
            prng: {
              needed: needed
            }
          }
        });
      };
    } else {
      // main thread sends random bytes upon request
      var listener = function (e) {
        var data = e.data;

        if (data.forge && data.forge.prng) {
          ctx.seedFile(data.forge.prng.needed, function (err, bytes) {
            worker.postMessage({
              forge: {
                prng: {
                  err: err,
                  bytes: bytes
                }
              }
            });
          });
        }
      }; // TODO: do we need to remove the event listener when the worker dies?


      worker.addEventListener('message', listener);
    }
  };

  return ctx;
};
},{"./forge":"o20S","./util":"lWyh","crypto":"vpK4","process":"vpK4"}],"Gfwb":[function(require,module,exports) {
/**
 * An API for getting cryptographically-secure random bytes. The bytes are
 * generated using the Fortuna algorithm devised by Bruce Schneier and
 * Niels Ferguson.
 *
 * Getting strong random bytes is not yet easy to do in javascript. The only
 * truish random entropy that can be collected is from the mouse, keyboard, or
 * from timing with respect to page loads, etc. This generator makes a poor
 * attempt at providing random bytes when those sources haven't yet provided
 * enough entropy to initially seed or to reseed the PRNG.
 *
 * @author Dave Longley
 *
 * Copyright (c) 2009-2014 Digital Bazaar, Inc.
 */
var forge = require('./forge');

require('./aes');

require('./sha256');

require('./prng');

require('./util');

(function () {
  // forge.random already defined
  if (forge.random && forge.random.getBytes) {
    module.exports = forge.random;
    return;
  }

  (function (jQuery) {
    // the default prng plugin, uses AES-128
    var prng_aes = {};

    var _prng_aes_output = new Array(4);

    var _prng_aes_buffer = forge.util.createBuffer();

    prng_aes.formatKey = function (key) {
      // convert the key into 32-bit integers
      var tmp = forge.util.createBuffer(key);
      key = new Array(4);
      key[0] = tmp.getInt32();
      key[1] = tmp.getInt32();
      key[2] = tmp.getInt32();
      key[3] = tmp.getInt32(); // return the expanded key

      return forge.aes._expandKey(key, false);
    };

    prng_aes.formatSeed = function (seed) {
      // convert seed into 32-bit integers
      var tmp = forge.util.createBuffer(seed);
      seed = new Array(4);
      seed[0] = tmp.getInt32();
      seed[1] = tmp.getInt32();
      seed[2] = tmp.getInt32();
      seed[3] = tmp.getInt32();
      return seed;
    };

    prng_aes.cipher = function (key, seed) {
      forge.aes._updateBlock(key, seed, _prng_aes_output, false);

      _prng_aes_buffer.putInt32(_prng_aes_output[0]);

      _prng_aes_buffer.putInt32(_prng_aes_output[1]);

      _prng_aes_buffer.putInt32(_prng_aes_output[2]);

      _prng_aes_buffer.putInt32(_prng_aes_output[3]);

      return _prng_aes_buffer.getBytes();
    };

    prng_aes.increment = function (seed) {
      // FIXME: do we care about carry or signed issues?
      ++seed[3];
      return seed;
    };

    prng_aes.md = forge.md.sha256;
    /**
     * Creates a new PRNG.
     */

    function spawnPrng() {
      var ctx = forge.prng.create(prng_aes);
      /**
       * Gets random bytes. If a native secure crypto API is unavailable, this
       * method tries to make the bytes more unpredictable by drawing from data that
       * can be collected from the user of the browser, eg: mouse movement.
       *
       * If a callback is given, this method will be called asynchronously.
       *
       * @param count the number of random bytes to get.
       * @param [callback(err, bytes)] called once the operation completes.
       *
       * @return the random bytes in a string.
       */

      ctx.getBytes = function (count, callback) {
        return ctx.generate(count, callback);
      };
      /**
       * Gets random bytes asynchronously. If a native secure crypto API is
       * unavailable, this method tries to make the bytes more unpredictable by
       * drawing from data that can be collected from the user of the browser,
       * eg: mouse movement.
       *
       * @param count the number of random bytes to get.
       *
       * @return the random bytes in a string.
       */


      ctx.getBytesSync = function (count) {
        return ctx.generate(count);
      };

      return ctx;
    } // create default prng context


    var _ctx = spawnPrng(); // add other sources of entropy only if window.crypto.getRandomValues is not
    // available -- otherwise this source will be automatically used by the prng


    var getRandomValues = null;
    var globalScope = forge.util.globalScope;

    var _crypto = globalScope.crypto || globalScope.msCrypto;

    if (_crypto && _crypto.getRandomValues) {
      getRandomValues = function (arr) {
        return _crypto.getRandomValues(arr);
      };
    }

    if (forge.options.usePureJavaScript || !forge.util.isNodejs && !getRandomValues) {
      // if this is a web worker, do not use weak entropy, instead register to
      // receive strong entropy asynchronously from the main thread
      if (typeof window === 'undefined' || window.document === undefined) {// FIXME:
      } // get load time entropy


      _ctx.collectInt(+new Date(), 32); // add some entropy from navigator object


      if (typeof navigator !== 'undefined') {
        var _navBytes = '';

        for (var key in navigator) {
          try {
            if (typeof navigator[key] == 'string') {
              _navBytes += navigator[key];
            }
          } catch (e) {
            /* Some navigator keys might not be accessible, e.g. the geolocation
              attribute throws an exception if touched in Mozilla chrome://
              context.
               Silently ignore this and just don't use this as a source of
              entropy. */
          }
        }

        _ctx.collect(_navBytes);

        _navBytes = null;
      } // add mouse and keyboard collectors if jquery is available


      if (jQuery) {
        // set up mouse entropy capture
        jQuery().mousemove(function (e) {
          // add mouse coords
          _ctx.collectInt(e.clientX, 16);

          _ctx.collectInt(e.clientY, 16);
        }); // set up keyboard entropy capture

        jQuery().keypress(function (e) {
          _ctx.collectInt(e.charCode, 8);
        });
      }
    }
    /* Random API */


    if (!forge.random) {
      forge.random = _ctx;
    } else {
      // extend forge.random with _ctx
      for (var key in _ctx) {
        forge.random[key] = _ctx[key];
      }
    } // expose spawn PRNG


    forge.random.createInstance = spawnPrng;
    module.exports = forge.random;
  })(typeof jQuery !== 'undefined' ? jQuery : null);
})();
},{"./forge":"o20S","./aes":"EkQ3","./sha256":"pZAX","./prng":"QgPb","./util":"lWyh"}],"UrkL":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.seedWordsList = [
    'abandon', 'ability', 'able', 'about', 'above', 'absent', 'absorb', 'abstract', 'absurd', 'abuse', 'access',
    'accident', 'account', 'accuse', 'achieve', 'acid', 'acoustic', 'acquire', 'across', 'act', 'action',
    'actor', 'actress', 'actual', 'adapt', 'add', 'addict', 'address', 'adjust', 'admit', 'adult', 'advance',
    'advice', 'aerobic', 'affair', 'afford', 'afraid', 'again', 'age', 'agent', 'agree', 'ahead', 'aim', 'air',
    'airport', 'aisle', 'alarm', 'album', 'alcohol', 'alert', 'alien', 'all', 'alley', 'allow', 'almost',
    'alone', 'alpha', 'already', 'also', 'alter', 'always', 'amateur', 'amazing', 'among', 'amount', 'amused',
    'analyst', 'anchor', 'ancient', 'anger', 'angle', 'angry', 'animal', 'ankle', 'announce', 'annual',
    'another', 'answer', 'antenna', 'antique', 'anxiety', 'any', 'apart', 'apology', 'appear', 'apple',
    'approve', 'april', 'arch', 'arctic', 'area', 'arena', 'argue', 'arm', 'armed', 'armor', 'army', 'around',
    'arrange', 'arrest', 'arrive', 'arrow', 'art', 'artefact', 'artist', 'artwork', 'ask', 'aspect', 'assault',
    'asset', 'assist', 'assume', 'asthma', 'athlete', 'atom', 'attack', 'attend', 'attitude', 'attract',
    'auction', 'audit', 'august', 'aunt', 'author', 'auto', 'autumn', 'average', 'avocado', 'avoid', 'awake',
    'aware', 'away', 'awesome', 'awful', 'awkward', 'axis', 'baby', 'bachelor', 'bacon', 'badge', 'bag',
    'balance', 'balcony', 'ball', 'bamboo', 'banana', 'banner', 'bar', 'barely', 'bargain', 'barrel', 'base',
    'basic', 'basket', 'battle', 'beach', 'bean', 'beauty', 'because', 'become', 'beef', 'before', 'begin',
    'behave', 'behind', 'believe', 'below', 'belt', 'bench', 'benefit', 'best', 'betray', 'better', 'between',
    'beyond', 'bicycle', 'bid', 'bike', 'bind', 'biology', 'bird', 'birth', 'bitter', 'black', 'blade', 'blame',
    'blanket', 'blast', 'bleak', 'bless', 'blind', 'blood', 'blossom', 'blouse', 'blue', 'blur', 'blush',
    'board', 'boat', 'body', 'boil', 'bomb', 'bone', 'bonus', 'book', 'boost', 'border', 'boring', 'borrow',
    'boss', 'bottom', 'bounce', 'box', 'boy', 'bracket', 'brain', 'brand', 'brass', 'brave', 'bread', 'breeze',
    'brick', 'bridge', 'brief', 'bright', 'bring', 'brisk', 'broccoli', 'broken', 'bronze', 'broom', 'brother',
    'brown', 'brush', 'bubble', 'buddy', 'budget', 'buffalo', 'build', 'bulb', 'bulk', 'bullet', 'bundle',
    'bunker', 'burden', 'burger', 'burst', 'bus', 'business', 'busy', 'butter', 'buyer', 'buzz', 'cabbage',
    'cabin', 'cable', 'cactus', 'cage', 'cake', 'call', 'calm', 'camera', 'camp', 'can', 'canal', 'cancel',
    'candy', 'cannon', 'canoe', 'canvas', 'canyon', 'capable', 'capital', 'captain', 'car', 'carbon', 'card',
    'cargo', 'carpet', 'carry', 'cart', 'case', 'cash', 'casino', 'castle', 'casual', 'cat', 'catalog', 'catch',
    'category', 'cattle', 'caught', 'cause', 'caution', 'cave', 'ceiling', 'celery', 'cement', 'census',
    'century', 'cereal', 'certain', 'chair', 'chalk', 'champion', 'change', 'chaos', 'chapter', 'charge',
    'chase', 'chat', 'cheap', 'check', 'cheese', 'chef', 'cherry', 'chest', 'chicken', 'chief', 'child',
    'chimney', 'choice', 'choose', 'chronic', 'chuckle', 'chunk', 'churn', 'cigar', 'cinnamon', 'circle',
    'citizen', 'city', 'civil', 'claim', 'clap', 'clarify', 'claw', 'clay', 'clean', 'clerk', 'clever', 'click',
    'client', 'cliff', 'climb', 'clinic', 'clip', 'clock', 'clog', 'close', 'cloth', 'cloud', 'clown', 'club',
    'clump', 'cluster', 'clutch', 'coach', 'coast', 'coconut', 'code', 'coffee', 'coil', 'coin', 'collect',
    'color', 'column', 'combine', 'come', 'comfort', 'comic', 'common', 'company', 'concert', 'conduct',
    'confirm', 'congress', 'connect', 'consider', 'control', 'convince', 'cook', 'cool', 'copper', 'copy',
    'coral', 'core', 'corn', 'correct', 'cost', 'cotton', 'couch', 'country', 'couple', 'course', 'cousin',
    'cover', 'coyote', 'crack', 'cradle', 'craft', 'cram', 'crane', 'crash', 'crater', 'crawl', 'crazy',
    'cream', 'credit', 'creek', 'crew', 'cricket', 'crime', 'crisp', 'critic', 'crop', 'cross', 'crouch',
    'crowd', 'crucial', 'cruel', 'cruise', 'crumble', 'crunch', 'crush', 'cry', 'crystal', 'cube', 'culture',
    'cup', 'cupboard', 'curious', 'current', 'curtain', 'curve', 'cushion', 'custom', 'cute', 'cycle', 'dad',
    'damage', 'damp', 'dance', 'danger', 'daring', 'dash', 'daughter', 'dawn', 'day', 'deal', 'debate',
    'debris', 'decade', 'december', 'decide', 'decline', 'decorate', 'decrease', 'deer', 'defense', 'define',
    'defy', 'degree', 'delay', 'deliver', 'demand', 'demise', 'denial', 'dentist', 'deny', 'depart', 'depend',
    'deposit', 'depth', 'deputy', 'derive', 'describe', 'desert', 'design', 'desk', 'despair', 'destroy',
    'detail', 'detect', 'develop', 'device', 'devote', 'diagram', 'dial', 'diamond', 'diary', 'dice', 'diesel',
    'diet', 'differ', 'digital', 'dignity', 'dilemma', 'dinner', 'dinosaur', 'direct', 'dirt', 'disagree',
    'discover', 'disease', 'dish', 'dismiss', 'disorder', 'display', 'distance', 'divert', 'divide', 'divorce',
    'dizzy', 'doctor', 'document', 'dog', 'doll', 'dolphin', 'domain', 'donate', 'donkey', 'donor', 'door',
    'dose', 'double', 'dove', 'draft', 'dragon', 'drama', 'drastic', 'draw', 'dream', 'dress', 'drift', 'drill',
    'drink', 'drip', 'drive', 'drop', 'drum', 'dry', 'duck', 'dumb', 'dune', 'during', 'dust', 'dutch', 'duty',
    'dwarf', 'dynamic', 'eager', 'eagle', 'early', 'earn', 'earth', 'easily', 'east', 'easy', 'echo', 'ecology',
    'economy', 'edge', 'edit', 'educate', 'effort', 'egg', 'eight', 'either', 'elbow', 'elder', 'electric',
    'elegant', 'element', 'elephant', 'elevator', 'elite', 'else', 'embark', 'embody', 'embrace', 'emerge',
    'emotion', 'employ', 'empower', 'empty', 'enable', 'enact', 'end', 'endless', 'endorse', 'enemy', 'energy',
    'enforce', 'engage', 'engine', 'enhance', 'enjoy', 'enlist', 'enough', 'enrich', 'enroll', 'ensure',
    'enter', 'entire', 'entry', 'envelope', 'episode', 'equal', 'equip', 'era', 'erase', 'erode', 'erosion',
    'error', 'erupt', 'escape', 'essay', 'essence', 'estate', 'eternal', 'ethics', 'evidence', 'evil', 'evoke',
    'evolve', 'exact', 'example', 'excess', 'exchange', 'excite', 'exclude', 'excuse', 'execute', 'exercise',
    'exhaust', 'exhibit', 'exile', 'exist', 'exit', 'exotic', 'expand', 'expect', 'expire', 'explain', 'expose',
    'express', 'extend', 'extra', 'eye', 'eyebrow', 'fabric', 'face', 'faculty', 'fade', 'faint', 'faith',
    'fall', 'false', 'fame', 'family', 'famous', 'fan', 'fancy', 'fantasy', 'farm', 'fashion', 'fat', 'fatal',
    'father', 'fatigue', 'fault', 'favorite', 'feature', 'february', 'federal', 'fee', 'feed', 'feel', 'female',
    'fence', 'festival', 'fetch', 'fever', 'few', 'fiber', 'fiction', 'field', 'figure', 'file', 'film',
    'filter', 'final', 'find', 'fine', 'finger', 'finish', 'fire', 'firm', 'first', 'fiscal', 'fish', 'fit',
    'fitness', 'fix', 'flag', 'flame', 'flash', 'flat', 'flavor', 'flee', 'flight', 'flip', 'float', 'flock',
    'floor', 'flower', 'fluid', 'flush', 'fly', 'foam', 'focus', 'fog', 'foil', 'fold', 'follow', 'food',
    'foot', 'force', 'forest', 'forget', 'fork', 'fortune', 'forum', 'forward', 'fossil', 'foster', 'found',
    'fox', 'fragile', 'frame', 'frequent', 'fresh', 'friend', 'fringe', 'frog', 'front', 'frost', 'frown',
    'frozen', 'fruit', 'fuel', 'fun', 'funny', 'furnace', 'fury', 'future', 'gadget', 'gain', 'galaxy',
    'gallery', 'game', 'gap', 'garage', 'garbage', 'garden', 'garlic', 'garment', 'gas', 'gasp', 'gate',
    'gather', 'gauge', 'gaze', 'general', 'genius', 'genre', 'gentle', 'genuine', 'gesture', 'ghost', 'giant',
    'gift', 'giggle', 'ginger', 'giraffe', 'girl', 'give', 'glad', 'glance', 'glare', 'glass', 'glide',
    'glimpse', 'globe', 'gloom', 'glory', 'glove', 'glow', 'glue', 'goat', 'goddess', 'gold', 'good', 'goose',
    'gorilla', 'gospel', 'gossip', 'govern', 'gown', 'grab', 'grace', 'grain', 'grant', 'grape', 'grass',
    'gravity', 'great', 'green', 'grid', 'grief', 'grit', 'grocery', 'group', 'grow', 'grunt', 'guard', 'guess',
    'guide', 'guilt', 'guitar', 'gun', 'gym', 'habit', 'hair', 'half', 'hammer', 'hamster', 'hand', 'happy',
    'harbor', 'hard', 'harsh', 'harvest', 'hat', 'have', 'hawk', 'hazard', 'head', 'health', 'heart', 'heavy',
    'hedgehog', 'height', 'hello', 'helmet', 'help', 'hen', 'hero', 'hidden', 'high', 'hill', 'hint', 'hip',
    'hire', 'history', 'hobby', 'hockey', 'hold', 'hole', 'holiday', 'hollow', 'home', 'honey', 'hood', 'hope',
    'horn', 'horror', 'horse', 'hospital', 'host', 'hotel', 'hour', 'hover', 'hub', 'huge', 'human', 'humble',
    'humor', 'hundred', 'hungry', 'hunt', 'hurdle', 'hurry', 'hurt', 'husband', 'hybrid', 'ice', 'icon', 'idea',
    'identify', 'idle', 'ignore', 'ill', 'illegal', 'illness', 'image', 'imitate', 'immense', 'immune',
    'impact', 'impose', 'improve', 'impulse', 'inch', 'include', 'income', 'increase', 'index', 'indicate',
    'indoor', 'industry', 'infant', 'inflict', 'inform', 'inhale', 'inherit', 'initial', 'inject', 'injury',
    'inmate', 'inner', 'innocent', 'input', 'inquiry', 'insane', 'insect', 'inside', 'inspire', 'install',
    'intact', 'interest', 'into', 'invest', 'invite', 'involve', 'iron', 'island', 'isolate', 'issue', 'item',
    'ivory', 'jacket', 'jaguar', 'jar', 'jazz', 'jealous', 'jeans', 'jelly', 'jewel', 'job', 'join', 'joke',
    'journey', 'joy', 'judge', 'juice', 'jump', 'jungle', 'junior', 'junk', 'just', 'kangaroo', 'keen', 'keep',
    'ketchup', 'key', 'kick', 'kid', 'kidney', 'kind', 'kingdom', 'kiss', 'kit', 'kitchen', 'kite', 'kitten',
    'kiwi', 'knee', 'knife', 'knock', 'know', 'lab', 'label', 'labor', 'ladder', 'lady', 'lake', 'lamp',
    'language', 'laptop', 'large', 'later', 'latin', 'laugh', 'laundry', 'lava', 'law', 'lawn', 'lawsuit',
    'layer', 'lazy', 'leader', 'leaf', 'learn', 'leave', 'lecture', 'left', 'leg', 'legal', 'legend', 'leisure',
    'lemon', 'lend', 'length', 'lens', 'leopard', 'lesson', 'letter', 'level', 'liar', 'liberty', 'library',
    'license', 'life', 'lift', 'light', 'like', 'limb', 'limit', 'link', 'lion', 'liquid', 'list', 'little',
    'live', 'lizard', 'load', 'loan', 'lobster', 'local', 'lock', 'logic', 'lonely', 'long', 'loop', 'lottery',
    'loud', 'lounge', 'love', 'loyal', 'lucky', 'luggage', 'lumber', 'lunar', 'lunch', 'luxury', 'lyrics',
    'machine', 'mad', 'magic', 'magnet', 'maid', 'mail', 'main', 'major', 'make', 'mammal', 'man', 'manage',
    'mandate', 'mango', 'mansion', 'manual', 'maple', 'marble', 'march', 'margin', 'marine', 'market',
    'marriage', 'mask', 'mass', 'master', 'match', 'material', 'math', 'matrix', 'matter', 'maximum', 'maze',
    'meadow', 'mean', 'measure', 'meat', 'mechanic', 'medal', 'media', 'melody', 'melt', 'member', 'memory',
    'mention', 'menu', 'mercy', 'merge', 'merit', 'merry', 'mesh', 'message', 'metal', 'method', 'middle',
    'midnight', 'milk', 'million', 'mimic', 'mind', 'minimum', 'minor', 'minute', 'miracle', 'mirror', 'misery',
    'miss', 'mistake', 'mix', 'mixed', 'mixture', 'mobile', 'model', 'modify', 'mom', 'moment', 'monitor',
    'monkey', 'monster', 'month', 'moon', 'moral', 'more', 'morning', 'mosquito', 'mother', 'motion', 'motor',
    'mountain', 'mouse', 'move', 'movie', 'much', 'muffin', 'mule', 'multiply', 'muscle', 'museum', 'mushroom',
    'music', 'must', 'mutual', 'myself', 'mystery', 'myth', 'naive', 'name', 'napkin', 'narrow', 'nasty',
    'nation', 'nature', 'near', 'neck', 'need', 'negative', 'neglect', 'neither', 'nephew', 'nerve', 'nest',
    'net', 'network', 'neutral', 'never', 'news', 'next', 'nice', 'night', 'noble', 'noise', 'nominee',
    'noodle', 'normal', 'north', 'nose', 'notable', 'note', 'nothing', 'notice', 'novel', 'now', 'nuclear',
    'number', 'nurse', 'nut', 'oak', 'obey', 'object', 'oblige', 'obscure', 'observe', 'obtain', 'obvious',
    'occur', 'ocean', 'october', 'odor', 'off', 'offer', 'office', 'often', 'oil', 'okay', 'old', 'olive',
    'olympic', 'omit', 'once', 'one', 'onion', 'online', 'only', 'open', 'opera', 'opinion', 'oppose',
    'option', 'orange', 'orbit', 'orchard', 'order', 'ordinary', 'organ', 'orient', 'original', 'orphan',
    'ostrich', 'other', 'outdoor', 'outer', 'output', 'outside', 'oval', 'oven', 'over', 'own', 'owner',
    'oxygen', 'oyster', 'ozone', 'pact', 'paddle', 'page', 'pair', 'palace', 'palm', 'panda', 'panel', 'panic',
    'panther', 'paper', 'parade', 'parent', 'park', 'parrot', 'party', 'pass', 'patch', 'path', 'patient',
    'patrol', 'pattern', 'pause', 'pave', 'payment', 'peace', 'peanut', 'pear', 'peasant', 'pelican', 'pen',
    'penalty', 'pencil', 'people', 'pepper', 'perfect', 'permit', 'person', 'pet', 'phone', 'photo', 'phrase',
    'physical', 'piano', 'picnic', 'picture', 'piece', 'pig', 'pigeon', 'pill', 'pilot', 'pink', 'pioneer',
    'pipe', 'pistol', 'pitch', 'pizza', 'place', 'planet', 'plastic', 'plate', 'play', 'please', 'pledge',
    'pluck', 'plug', 'plunge', 'poem', 'poet', 'point', 'polar', 'pole', 'police', 'pond', 'pony', 'pool',
    'popular', 'portion', 'position', 'possible', 'post', 'potato', 'pottery', 'poverty', 'powder', 'power',
    'practice', 'praise', 'predict', 'prefer', 'prepare', 'present', 'pretty', 'prevent', 'price', 'pride',
    'primary', 'print', 'priority', 'prison', 'private', 'prize', 'problem', 'process', 'produce', 'profit',
    'program', 'project', 'promote', 'proof', 'property', 'prosper', 'protect', 'proud', 'provide', 'public',
    'pudding', 'pull', 'pulp', 'pulse', 'pumpkin', 'punch', 'pupil', 'puppy', 'purchase', 'purity', 'purpose',
    'purse', 'push', 'put', 'puzzle', 'pyramid', 'quality', 'quantum', 'quarter', 'question', 'quick', 'quit',
    'quiz', 'quote', 'rabbit', 'raccoon', 'race', 'rack', 'radar', 'radio', 'rail', 'rain', 'raise', 'rally',
    'ramp', 'ranch', 'random', 'range', 'rapid', 'rare', 'rate', 'rather', 'raven', 'raw', 'razor', 'ready',
    'real', 'reason', 'rebel', 'rebuild', 'recall', 'receive', 'recipe', 'record', 'recycle', 'reduce',
    'reflect', 'reform', 'refuse', 'region', 'regret', 'regular', 'reject', 'relax', 'release', 'relief',
    'rely', 'remain', 'remember', 'remind', 'remove', 'render', 'renew', 'rent', 'reopen', 'repair', 'repeat',
    'replace', 'report', 'require', 'rescue', 'resemble', 'resist', 'resource', 'response', 'result', 'retire',
    'retreat', 'return', 'reunion', 'reveal', 'review', 'reward', 'rhythm', 'rib', 'ribbon', 'rice', 'rich',
    'ride', 'ridge', 'rifle', 'right', 'rigid', 'ring', 'riot', 'ripple', 'risk', 'ritual', 'rival', 'river',
    'road', 'roast', 'robot', 'robust', 'rocket', 'romance', 'roof', 'rookie', 'room', 'rose', 'rotate',
    'rough', 'round', 'route', 'royal', 'rubber', 'rude', 'rug', 'rule', 'run', 'runway', 'rural', 'sad',
    'saddle', 'sadness', 'safe', 'sail', 'salad', 'salmon', 'salon', 'salt', 'salute', 'same', 'sample', 'sand',
    'satisfy', 'satoshi', 'sauce', 'sausage', 'save', 'say', 'scale', 'scan', 'scare', 'scatter', 'scene',
    'scheme', 'school', 'science', 'scissors', 'scorpion', 'scout', 'scrap', 'screen', 'script', 'scrub', 'sea',
    'search', 'season', 'seat', 'second', 'secret', 'section', 'security', 'seed', 'seek', 'segment', 'select',
    'sell', 'seminar', 'senior', 'sense', 'sentence', 'series', 'service', 'session', 'settle', 'setup',
    'seven', 'shadow', 'shaft', 'shallow', 'share', 'shed', 'shell', 'sheriff', 'shield', 'shift', 'shine',
    'ship', 'shiver', 'shock', 'shoe', 'shoot', 'shop', 'short', 'shoulder', 'shove', 'shrimp', 'shrug',
    'shuffle', 'shy', 'sibling', 'sick', 'side', 'siege', 'sight', 'sign', 'silent', 'silk', 'silly', 'silver',
    'similar', 'simple', 'since', 'sing', 'siren', 'sister', 'situate', 'six', 'size', 'skate', 'sketch', 'ski',
    'skill', 'skin', 'skirt', 'skull', 'slab', 'slam', 'sleep', 'slender', 'slice', 'slide', 'slight', 'slim',
    'slogan', 'slot', 'slow', 'slush', 'small', 'smart', 'smile', 'smoke', 'smooth', 'snack', 'snake', 'snap',
    'sniff', 'snow', 'soap', 'soccer', 'social', 'sock', 'soda', 'soft', 'solar', 'soldier', 'solid',
    'solution', 'solve', 'someone', 'song', 'soon', 'sorry', 'sort', 'soul', 'sound', 'soup', 'source', 'south',
    'space', 'spare', 'spatial', 'spawn', 'speak', 'special', 'speed', 'spell', 'spend', 'sphere', 'spice',
    'spider', 'spike', 'spin', 'spirit', 'split', 'spoil', 'sponsor', 'spoon', 'sport', 'spot', 'spray',
    'spread', 'spring', 'spy', 'square', 'squeeze', 'squirrel', 'stable', 'stadium', 'staff', 'stage', 'stairs',
    'stamp', 'stand', 'start', 'state', 'stay', 'steak', 'steel', 'stem', 'step', 'stereo', 'stick', 'still',
    'sting', 'stock', 'stomach', 'stone', 'stool', 'story', 'stove', 'strategy', 'street', 'strike', 'strong',
    'struggle', 'student', 'stuff', 'stumble', 'style', 'subject', 'submit', 'subway', 'success', 'such',
    'sudden', 'suffer', 'sugar', 'suggest', 'suit', 'summer', 'sun', 'sunny', 'sunset', 'super', 'supply',
    'supreme', 'sure', 'surface', 'surge', 'surprise', 'surround', 'survey', 'suspect', 'sustain', 'swallow',
    'swamp', 'swap', 'swarm', 'swear', 'sweet', 'swift', 'swim', 'swing', 'switch', 'sword', 'symbol',
    'symptom', 'syrup', 'system', 'table', 'tackle', 'tag', 'tail', 'talent', 'talk', 'tank', 'tape', 'target',
    'task', 'taste', 'tattoo', 'taxi', 'teach', 'team', 'tell', 'ten', 'tenant', 'tennis', 'tent', 'term',
    'test', 'text', 'thank', 'that', 'theme', 'then', 'theory', 'there', 'they', 'thing', 'this', 'thought',
    'three', 'thrive', 'throw', 'thumb', 'thunder', 'ticket', 'tide', 'tiger', 'tilt', 'timber', 'time', 'tiny',
    'tip', 'tired', 'tissue', 'title', 'toast', 'tobacco', 'today', 'toddler', 'toe', 'together', 'toilet',
    'token', 'tomato', 'tomorrow', 'tone', 'tongue', 'tonight', 'tool', 'tooth', 'top', 'topic', 'topple',
    'torch', 'tornado', 'tortoise', 'toss', 'total', 'tourist', 'toward', 'tower', 'town', 'toy', 'track',
    'trade', 'traffic', 'tragic', 'train', 'transfer', 'trap', 'trash', 'travel', 'tray', 'treat', 'tree',
    'trend', 'trial', 'tribe', 'trick', 'trigger', 'trim', 'trip', 'trophy', 'trouble', 'truck', 'true',
    'truly', 'trumpet', 'trust', 'truth', 'try', 'tube', 'tuition', 'tumble', 'tuna', 'tunnel', 'turkey',
    'turn', 'turtle', 'twelve', 'twenty', 'twice', 'twin', 'twist', 'two', 'type', 'typical', 'ugly',
    'umbrella', 'unable', 'unaware', 'uncle', 'uncover', 'under', 'undo', 'unfair', 'unfold', 'unhappy',
    'uniform', 'unique', 'unit', 'universe', 'unknown', 'unlock', 'until', 'unusual', 'unveil', 'update',
    'upgrade', 'uphold', 'upon', 'upper', 'upset', 'urban', 'urge', 'usage', 'use', 'used', 'useful', 'useless',
    'usual', 'utility', 'vacant', 'vacuum', 'vague', 'valid', 'valley', 'valve', 'van', 'vanish', 'vapor',
    'various', 'vast', 'vault', 'vehicle', 'velvet', 'vendor', 'venture', 'venue', 'verb', 'verify', 'version',
    'very', 'vessel', 'veteran', 'viable', 'vibrant', 'vicious', 'victory', 'video', 'view', 'village',
    'vintage', 'violin', 'virtual', 'virus', 'visa', 'visit', 'visual', 'vital', 'vivid', 'vocal', 'voice',
    'void', 'volcano', 'volume', 'vote', 'voyage', 'wage', 'wagon', 'wait', 'walk', 'wall', 'walnut', 'want',
    'warfare', 'warm', 'warrior', 'wash', 'wasp', 'waste', 'water', 'wave', 'way', 'wealth', 'weapon', 'wear',
    'weasel', 'weather', 'web', 'wedding', 'weekend', 'weird', 'welcome', 'west', 'wet', 'whale', 'what',
    'wheat', 'wheel', 'when', 'where', 'whip', 'whisper', 'wide', 'width', 'wife', 'wild', 'will', 'win',
    'window', 'wine', 'wing', 'wink', 'winner', 'winter', 'wire', 'wisdom', 'wise', 'wish', 'witness', 'wolf',
    'woman', 'wonder', 'wood', 'wool', 'word', 'work', 'world', 'worry', 'worth', 'wrap', 'wreck', 'wrestle',
    'wrist', 'write', 'wrong', 'yard', 'year', 'yellow', 'you', 'young', 'youth', 'zebra', 'zero', 'zone', 'zoo',
];

},{}],"AoMy":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var ALPHABET = '123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz';
var ALPHABET_MAP = ALPHABET.split('').reduce(function (map, c, i) {
    map[c] = i;
    return map;
}, {});
exports.default = {
    encode: function (buffer) {
        if (!buffer.length)
            return '';
        var digits = [0];
        for (var i = 0; i < buffer.length; i++) {
            for (var j = 0; j < digits.length; j++) {
                digits[j] <<= 8;
            }
            digits[0] += buffer[i];
            var carry = 0;
            for (var k = 0; k < digits.length; k++) {
                digits[k] += carry;
                carry = (digits[k] / 58) | 0;
                digits[k] %= 58;
            }
            while (carry) {
                digits.push(carry % 58);
                carry = (carry / 58) | 0;
            }
        }
        for (var i = 0; buffer[i] === 0 && i < buffer.length - 1; i++) {
            digits.push(0);
        }
        return digits.reverse().map(function (digit) {
            return ALPHABET[digit];
        }).join('');
    },
    decode: function (string) {
        if (!string.length)
            return new Uint8Array(0);
        var bytes = [0];
        for (var i = 0; i < string.length; i++) {
            var c = string[i];
            if (!(c in ALPHABET_MAP)) {
                throw "There is no character \"" + c + "\" in the Base58 sequence!";
            }
            for (var j = 0; j < bytes.length; j++) {
                bytes[j] *= 58;
            }
            bytes[0] += ALPHABET_MAP[c];
            var carry = 0;
            for (var j = 0; j < bytes.length; j++) {
                bytes[j] += carry;
                carry = bytes[j] >> 8;
                bytes[j] &= 0xff;
            }
            while (carry) {
                bytes.push(carry & 0xff);
                carry >>= 8;
            }
        }
        for (var i = 0; string[i] === '1' && i < string.length - 1; i++) {
            bytes.push(0);
        }
        return new Uint8Array(bytes.reverse());
    },
};

},{}],"uXRm":[function(require,module,exports) {
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
//@ts-ignore
var util_1 = require("node-forge/lib/util");
var base58_1 = __importDefault(require("../libs/base58"));
var param_1 = require("./param");
var string_bytes_1 = require("./string-bytes");
exports.base64Decode = function (input) {
    return string_bytes_1.stringToBytes(util_1.decode64(input), 'raw');
};
exports.base64Encode = function (input) {
    return util_1.encode64(string_bytes_1.bytesToString(param_1._fromIn(input), 'raw'));
};
exports.base58Decode = function (input) {
    return base58_1.default.decode(input);
};
exports.base58Encode = function (input) {
    return base58_1.default.encode(param_1._fromIn(input));
};
exports.base16Decode = function (input) {
    return string_bytes_1.stringToBytes(util_1.hexToBytes(input), 'raw');
};
exports.base16Encode = function (input) { return util_1.bytesToHex(string_bytes_1.bytesToString(param_1._fromIn(input), 'raw')); };

},{"node-forge/lib/util":"lWyh","../libs/base58":"AoMy","./param":"WDpF","./string-bytes":"WqH7"}],"WDpF":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var base_xx_1 = require("./base-xx");
var string_bytes_1 = require("./string-bytes");
var isString = function (val) { return typeof val === 'string' || val instanceof String; };
var isUint8Array = function (val) { return val instanceof Uint8Array; };
var isTRawStringInDiscriminator = function (_) { return false; };
exports._fromIn = function (inValue) {
    if (isString(inValue))
        return base_xx_1.base58Decode(inValue);
    if (isUint8Array(inValue))
        return inValue;
    return Uint8Array.from(inValue);
};
exports._fromRawIn = function (inValue) {
    if (isTRawStringInDiscriminator(inValue))
        throw new Error('');
    if (isString(inValue))
        return string_bytes_1.stringToBytes(inValue);
    if (isUint8Array(inValue))
        return inValue;
    return Uint8Array.from(inValue);
};

},{"./base-xx":"uXRm","./string-bytes":"WqH7"}],"ImLh":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var Utf8ArrayToStr = (function () {
    var charCache = new Array(128); // Preallocate the cache for the common single byte chars
    var charFromCodePt = String.fromCodePoint || String.fromCharCode;
    var result = [];
    return function (array) {
        var codePt, byte1;
        var buffLen = array.length;
        result.length = 0;
        for (var i = 0; i < buffLen;) {
            byte1 = array[i++];
            if (byte1 <= 0x7F) {
                codePt = byte1;
            }
            else if (byte1 <= 0xDF) {
                codePt = ((byte1 & 0x1F) << 6) | (array[i++] & 0x3F);
            }
            else if (byte1 <= 0xEF) {
                codePt = ((byte1 & 0x0F) << 12) | ((array[i++] & 0x3F) << 6) | (array[i++] & 0x3F);
            }
            else if (String.fromCodePoint) {
                codePt = ((byte1 & 0x07) << 18) | ((array[i++] & 0x3F) << 12) | ((array[i++] & 0x3F) << 6) | (array[i++] & 0x3F);
            }
            else {
                codePt = 63; // Cannot convertLongFields four byte code points, so use "?" instead
                i += 3;
            }
            result.push(charCache[codePt] || (charCache[codePt] = charFromCodePt(codePt)));
        }
        return result.join('');
    };
});
exports.utf8ArrayToStr = Utf8ArrayToStr();
function strToUtf8Array(str) {
    var utf8 = [];
    for (var i = 0; i < str.length; i++) {
        var charcode = str.charCodeAt(i);
        if (charcode < 0x80)
            utf8.push(charcode);
        else if (charcode < 0x800) {
            utf8.push(0xc0 | (charcode >> 6), 0x80 | (charcode & 0x3f));
        }
        else if (charcode < 0xd800 || charcode >= 0xe000) {
            utf8.push(0xe0 | (charcode >> 12), 0x80 | ((charcode >> 6) & 0x3f), 0x80 | (charcode & 0x3f));
        }
        // surrogate pair
        else {
            i++;
            // UTF-16 encodes 0x10000-0x10FFFF by
            // subtracting 0x10000 and splitting the
            // 20 bits of 0x0-0xFFFFF into two halves
            charcode = 0x10000 + (((charcode & 0x3ff) << 10)
                | (str.charCodeAt(i) & 0x3ff));
            utf8.push(0xf0 | (charcode >> 18), 0x80 | ((charcode >> 12) & 0x3f), 0x80 | ((charcode >> 6) & 0x3f), 0x80 | (charcode & 0x3f));
        }
    }
    return Uint8Array.from(utf8);
}
exports.strToUtf8Array = strToUtf8Array;

},{}],"WqH7":[function(require,module,exports) {
"use strict";
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spread = (this && this.__spread) || function () {
    for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));
    return ar;
};
Object.defineProperty(exports, "__esModule", { value: true });
var param_1 = require("./param");
var Utf8_1 = require("../libs/Utf8");
exports.stringToBytes = function (str, encoding) {
    if (encoding === void 0) { encoding = 'utf8'; }
    if (encoding === 'utf8') {
        return Utf8_1.strToUtf8Array(str);
    }
    else if (encoding === 'raw') {
        return Uint8Array.from(__spread(str).map(function (c) { return c.charCodeAt(0); }));
    }
    else {
        throw new Error("Unsupported encoding " + encoding);
    }
};
exports.bytesToString = function (bytes, encoding) {
    if (encoding === void 0) { encoding = 'utf8'; }
    if (encoding === 'utf8') {
        return Utf8_1.utf8ArrayToStr(Array.from(param_1._fromIn(bytes)));
    }
    else if (encoding === 'raw') {
        return Array.from(param_1._fromIn(bytes))
            .map(function (byte) { return String.fromCharCode(byte); })
            .join('');
    }
    else {
        throw new Error("Unsupported encoding " + encoding);
    }
};
/**
 * Converts each character to byte
 */
exports.binaryStringToBytes = function (str) {
    return Uint8Array.from(__spread(str).map(function (c) { return c.charCodeAt(0); }));
};
/**
 * Reads each byte as individual character
 */
exports.bytesToBinaryString = function (bytes) {
    return Array.from(param_1._fromIn(bytes))
        .map(function (byte) { return String.fromCharCode(byte); })
        .join('');
};

},{"./param":"WDpF","../libs/Utf8":"ImLh"}],"prL8":[function(require,module,exports) {
'use strict'

exports.byteLength = byteLength
exports.toByteArray = toByteArray
exports.fromByteArray = fromByteArray

var lookup = []
var revLookup = []
var Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array

var code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'
for (var i = 0, len = code.length; i < len; ++i) {
  lookup[i] = code[i]
  revLookup[code.charCodeAt(i)] = i
}

// Support decoding URL-safe base64 strings, as Node.js does.
// See: https://en.wikipedia.org/wiki/Base64#URL_applications
revLookup['-'.charCodeAt(0)] = 62
revLookup['_'.charCodeAt(0)] = 63

function getLens (b64) {
  var len = b64.length

  if (len % 4 > 0) {
    throw new Error('Invalid string. Length must be a multiple of 4')
  }

  // Trim off extra bytes after placeholder bytes are found
  // See: https://github.com/beatgammit/base64-js/issues/42
  var validLen = b64.indexOf('=')
  if (validLen === -1) validLen = len

  var placeHoldersLen = validLen === len
    ? 0
    : 4 - (validLen % 4)

  return [validLen, placeHoldersLen]
}

// base64 is 4/3 + up to two characters of the original data
function byteLength (b64) {
  var lens = getLens(b64)
  var validLen = lens[0]
  var placeHoldersLen = lens[1]
  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen
}

function _byteLength (b64, validLen, placeHoldersLen) {
  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen
}

function toByteArray (b64) {
  var tmp
  var lens = getLens(b64)
  var validLen = lens[0]
  var placeHoldersLen = lens[1]

  var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen))

  var curByte = 0

  // if there are placeholders, only get up to the last complete 4 chars
  var len = placeHoldersLen > 0
    ? validLen - 4
    : validLen

  var i
  for (i = 0; i < len; i += 4) {
    tmp =
      (revLookup[b64.charCodeAt(i)] << 18) |
      (revLookup[b64.charCodeAt(i + 1)] << 12) |
      (revLookup[b64.charCodeAt(i + 2)] << 6) |
      revLookup[b64.charCodeAt(i + 3)]
    arr[curByte++] = (tmp >> 16) & 0xFF
    arr[curByte++] = (tmp >> 8) & 0xFF
    arr[curByte++] = tmp & 0xFF
  }

  if (placeHoldersLen === 2) {
    tmp =
      (revLookup[b64.charCodeAt(i)] << 2) |
      (revLookup[b64.charCodeAt(i + 1)] >> 4)
    arr[curByte++] = tmp & 0xFF
  }

  if (placeHoldersLen === 1) {
    tmp =
      (revLookup[b64.charCodeAt(i)] << 10) |
      (revLookup[b64.charCodeAt(i + 1)] << 4) |
      (revLookup[b64.charCodeAt(i + 2)] >> 2)
    arr[curByte++] = (tmp >> 8) & 0xFF
    arr[curByte++] = tmp & 0xFF
  }

  return arr
}

function tripletToBase64 (num) {
  return lookup[num >> 18 & 0x3F] +
    lookup[num >> 12 & 0x3F] +
    lookup[num >> 6 & 0x3F] +
    lookup[num & 0x3F]
}

function encodeChunk (uint8, start, end) {
  var tmp
  var output = []
  for (var i = start; i < end; i += 3) {
    tmp =
      ((uint8[i] << 16) & 0xFF0000) +
      ((uint8[i + 1] << 8) & 0xFF00) +
      (uint8[i + 2] & 0xFF)
    output.push(tripletToBase64(tmp))
  }
  return output.join('')
}

function fromByteArray (uint8) {
  var tmp
  var len = uint8.length
  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes
  var parts = []
  var maxChunkLength = 16383 // must be multiple of 3

  // go through the array every three bytes, we'll deal with trailing stuff later
  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {
    parts.push(encodeChunk(uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)))
  }

  // pad the end with zeros, but make sure to not forget the extra bytes
  if (extraBytes === 1) {
    tmp = uint8[len - 1]
    parts.push(
      lookup[tmp >> 2] +
      lookup[(tmp << 4) & 0x3F] +
      '=='
    )
  } else if (extraBytes === 2) {
    tmp = (uint8[len - 2] << 8) + uint8[len - 1]
    parts.push(
      lookup[tmp >> 10] +
      lookup[(tmp >> 4) & 0x3F] +
      lookup[(tmp << 2) & 0x3F] +
      '='
    )
  }

  return parts.join('')
}

},{}],"iism":[function(require,module,exports) {
/*! ieee754. BSD-3-Clause License. Feross Aboukhadijeh <https://feross.org/opensource> */
exports.read = function (buffer, offset, isLE, mLen, nBytes) {
  var e, m
  var eLen = (nBytes * 8) - mLen - 1
  var eMax = (1 << eLen) - 1
  var eBias = eMax >> 1
  var nBits = -7
  var i = isLE ? (nBytes - 1) : 0
  var d = isLE ? -1 : 1
  var s = buffer[offset + i]

  i += d

  e = s & ((1 << (-nBits)) - 1)
  s >>= (-nBits)
  nBits += eLen
  for (; nBits > 0; e = (e * 256) + buffer[offset + i], i += d, nBits -= 8) {}

  m = e & ((1 << (-nBits)) - 1)
  e >>= (-nBits)
  nBits += mLen
  for (; nBits > 0; m = (m * 256) + buffer[offset + i], i += d, nBits -= 8) {}

  if (e === 0) {
    e = 1 - eBias
  } else if (e === eMax) {
    return m ? NaN : ((s ? -1 : 1) * Infinity)
  } else {
    m = m + Math.pow(2, mLen)
    e = e - eBias
  }
  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)
}

exports.write = function (buffer, value, offset, isLE, mLen, nBytes) {
  var e, m, c
  var eLen = (nBytes * 8) - mLen - 1
  var eMax = (1 << eLen) - 1
  var eBias = eMax >> 1
  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)
  var i = isLE ? 0 : (nBytes - 1)
  var d = isLE ? 1 : -1
  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0

  value = Math.abs(value)

  if (isNaN(value) || value === Infinity) {
    m = isNaN(value) ? 1 : 0
    e = eMax
  } else {
    e = Math.floor(Math.log(value) / Math.LN2)
    if (value * (c = Math.pow(2, -e)) < 1) {
      e--
      c *= 2
    }
    if (e + eBias >= 1) {
      value += rt / c
    } else {
      value += rt * Math.pow(2, 1 - eBias)
    }
    if (value * c >= 2) {
      e++
      c /= 2
    }

    if (e + eBias >= eMax) {
      m = 0
      e = eMax
    } else if (e + eBias >= 1) {
      m = ((value * c) - 1) * Math.pow(2, mLen)
      e = e + eBias
    } else {
      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)
      e = 0
    }
  }

  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}

  e = (e << mLen) | m
  eLen += mLen
  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}

  buffer[offset + i - d] |= s * 128
}

},{}],"BOve":[function(require,module,exports) {
var toString = {}.toString;

module.exports = Array.isArray || function (arr) {
  return toString.call(arr) == '[object Array]';
};

},{}],"XyCw":[function(require,module,exports) {

var global = arguments[3];
/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <http://feross.org>
 * @license  MIT
 */
/* eslint-disable no-proto */

'use strict'

var base64 = require('base64-js')
var ieee754 = require('ieee754')
var isArray = require('isarray')

exports.Buffer = Buffer
exports.SlowBuffer = SlowBuffer
exports.INSPECT_MAX_BYTES = 50

/**
 * If `Buffer.TYPED_ARRAY_SUPPORT`:
 *   === true    Use Uint8Array implementation (fastest)
 *   === false   Use Object implementation (most compatible, even IE6)
 *
 * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
 * Opera 11.6+, iOS 4.2+.
 *
 * Due to various browser bugs, sometimes the Object implementation will be used even
 * when the browser supports typed arrays.
 *
 * Note:
 *
 *   - Firefox 4-29 lacks support for adding new properties to `Uint8Array` instances,
 *     See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.
 *
 *   - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.
 *
 *   - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of
 *     incorrect length in some situations.

 * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they
 * get the Object implementation, which is slower but behaves correctly.
 */
Buffer.TYPED_ARRAY_SUPPORT = global.TYPED_ARRAY_SUPPORT !== undefined
  ? global.TYPED_ARRAY_SUPPORT
  : typedArraySupport()

/*
 * Export kMaxLength after typed array support is determined.
 */
exports.kMaxLength = kMaxLength()

function typedArraySupport () {
  try {
    var arr = new Uint8Array(1)
    arr.__proto__ = {__proto__: Uint8Array.prototype, foo: function () { return 42 }}
    return arr.foo() === 42 && // typed array instances can be augmented
        typeof arr.subarray === 'function' && // chrome 9-10 lack `subarray`
        arr.subarray(1, 1).byteLength === 0 // ie10 has broken `subarray`
  } catch (e) {
    return false
  }
}

function kMaxLength () {
  return Buffer.TYPED_ARRAY_SUPPORT
    ? 0x7fffffff
    : 0x3fffffff
}

function createBuffer (that, length) {
  if (kMaxLength() < length) {
    throw new RangeError('Invalid typed array length')
  }
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    // Return an augmented `Uint8Array` instance, for best performance
    that = new Uint8Array(length)
    that.__proto__ = Buffer.prototype
  } else {
    // Fallback: Return an object instance of the Buffer class
    if (that === null) {
      that = new Buffer(length)
    }
    that.length = length
  }

  return that
}

/**
 * The Buffer constructor returns instances of `Uint8Array` that have their
 * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of
 * `Uint8Array`, so the returned instances will have all the node `Buffer` methods
 * and the `Uint8Array` methods. Square bracket notation works as expected -- it
 * returns a single octet.
 *
 * The `Uint8Array` prototype remains unmodified.
 */

function Buffer (arg, encodingOrOffset, length) {
  if (!Buffer.TYPED_ARRAY_SUPPORT && !(this instanceof Buffer)) {
    return new Buffer(arg, encodingOrOffset, length)
  }

  // Common case.
  if (typeof arg === 'number') {
    if (typeof encodingOrOffset === 'string') {
      throw new Error(
        'If encoding is specified then the first argument must be a string'
      )
    }
    return allocUnsafe(this, arg)
  }
  return from(this, arg, encodingOrOffset, length)
}

Buffer.poolSize = 8192 // not used by this implementation

// TODO: Legacy, not needed anymore. Remove in next major version.
Buffer._augment = function (arr) {
  arr.__proto__ = Buffer.prototype
  return arr
}

function from (that, value, encodingOrOffset, length) {
  if (typeof value === 'number') {
    throw new TypeError('"value" argument must not be a number')
  }

  if (typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer) {
    return fromArrayBuffer(that, value, encodingOrOffset, length)
  }

  if (typeof value === 'string') {
    return fromString(that, value, encodingOrOffset)
  }

  return fromObject(that, value)
}

/**
 * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError
 * if value is a number.
 * Buffer.from(str[, encoding])
 * Buffer.from(array)
 * Buffer.from(buffer)
 * Buffer.from(arrayBuffer[, byteOffset[, length]])
 **/
Buffer.from = function (value, encodingOrOffset, length) {
  return from(null, value, encodingOrOffset, length)
}

if (Buffer.TYPED_ARRAY_SUPPORT) {
  Buffer.prototype.__proto__ = Uint8Array.prototype
  Buffer.__proto__ = Uint8Array
  if (typeof Symbol !== 'undefined' && Symbol.species &&
      Buffer[Symbol.species] === Buffer) {
    // Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97
    Object.defineProperty(Buffer, Symbol.species, {
      value: null,
      configurable: true
    })
  }
}

function assertSize (size) {
  if (typeof size !== 'number') {
    throw new TypeError('"size" argument must be a number')
  } else if (size < 0) {
    throw new RangeError('"size" argument must not be negative')
  }
}

function alloc (that, size, fill, encoding) {
  assertSize(size)
  if (size <= 0) {
    return createBuffer(that, size)
  }
  if (fill !== undefined) {
    // Only pay attention to encoding if it's a string. This
    // prevents accidentally sending in a number that would
    // be interpretted as a start offset.
    return typeof encoding === 'string'
      ? createBuffer(that, size).fill(fill, encoding)
      : createBuffer(that, size).fill(fill)
  }
  return createBuffer(that, size)
}

/**
 * Creates a new filled Buffer instance.
 * alloc(size[, fill[, encoding]])
 **/
Buffer.alloc = function (size, fill, encoding) {
  return alloc(null, size, fill, encoding)
}

function allocUnsafe (that, size) {
  assertSize(size)
  that = createBuffer(that, size < 0 ? 0 : checked(size) | 0)
  if (!Buffer.TYPED_ARRAY_SUPPORT) {
    for (var i = 0; i < size; ++i) {
      that[i] = 0
    }
  }
  return that
}

/**
 * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.
 * */
Buffer.allocUnsafe = function (size) {
  return allocUnsafe(null, size)
}
/**
 * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.
 */
Buffer.allocUnsafeSlow = function (size) {
  return allocUnsafe(null, size)
}

function fromString (that, string, encoding) {
  if (typeof encoding !== 'string' || encoding === '') {
    encoding = 'utf8'
  }

  if (!Buffer.isEncoding(encoding)) {
    throw new TypeError('"encoding" must be a valid string encoding')
  }

  var length = byteLength(string, encoding) | 0
  that = createBuffer(that, length)

  var actual = that.write(string, encoding)

  if (actual !== length) {
    // Writing a hex string, for example, that contains invalid characters will
    // cause everything after the first invalid character to be ignored. (e.g.
    // 'abxxcd' will be treated as 'ab')
    that = that.slice(0, actual)
  }

  return that
}

function fromArrayLike (that, array) {
  var length = array.length < 0 ? 0 : checked(array.length) | 0
  that = createBuffer(that, length)
  for (var i = 0; i < length; i += 1) {
    that[i] = array[i] & 255
  }
  return that
}

function fromArrayBuffer (that, array, byteOffset, length) {
  array.byteLength // this throws if `array` is not a valid ArrayBuffer

  if (byteOffset < 0 || array.byteLength < byteOffset) {
    throw new RangeError('\'offset\' is out of bounds')
  }

  if (array.byteLength < byteOffset + (length || 0)) {
    throw new RangeError('\'length\' is out of bounds')
  }

  if (byteOffset === undefined && length === undefined) {
    array = new Uint8Array(array)
  } else if (length === undefined) {
    array = new Uint8Array(array, byteOffset)
  } else {
    array = new Uint8Array(array, byteOffset, length)
  }

  if (Buffer.TYPED_ARRAY_SUPPORT) {
    // Return an augmented `Uint8Array` instance, for best performance
    that = array
    that.__proto__ = Buffer.prototype
  } else {
    // Fallback: Return an object instance of the Buffer class
    that = fromArrayLike(that, array)
  }
  return that
}

function fromObject (that, obj) {
  if (Buffer.isBuffer(obj)) {
    var len = checked(obj.length) | 0
    that = createBuffer(that, len)

    if (that.length === 0) {
      return that
    }

    obj.copy(that, 0, 0, len)
    return that
  }

  if (obj) {
    if ((typeof ArrayBuffer !== 'undefined' &&
        obj.buffer instanceof ArrayBuffer) || 'length' in obj) {
      if (typeof obj.length !== 'number' || isnan(obj.length)) {
        return createBuffer(that, 0)
      }
      return fromArrayLike(that, obj)
    }

    if (obj.type === 'Buffer' && isArray(obj.data)) {
      return fromArrayLike(that, obj.data)
    }
  }

  throw new TypeError('First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.')
}

function checked (length) {
  // Note: cannot use `length < kMaxLength()` here because that fails when
  // length is NaN (which is otherwise coerced to zero.)
  if (length >= kMaxLength()) {
    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +
                         'size: 0x' + kMaxLength().toString(16) + ' bytes')
  }
  return length | 0
}

function SlowBuffer (length) {
  if (+length != length) { // eslint-disable-line eqeqeq
    length = 0
  }
  return Buffer.alloc(+length)
}

Buffer.isBuffer = function isBuffer (b) {
  return !!(b != null && b._isBuffer)
}

Buffer.compare = function compare (a, b) {
  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {
    throw new TypeError('Arguments must be Buffers')
  }

  if (a === b) return 0

  var x = a.length
  var y = b.length

  for (var i = 0, len = Math.min(x, y); i < len; ++i) {
    if (a[i] !== b[i]) {
      x = a[i]
      y = b[i]
      break
    }
  }

  if (x < y) return -1
  if (y < x) return 1
  return 0
}

Buffer.isEncoding = function isEncoding (encoding) {
  switch (String(encoding).toLowerCase()) {
    case 'hex':
    case 'utf8':
    case 'utf-8':
    case 'ascii':
    case 'latin1':
    case 'binary':
    case 'base64':
    case 'ucs2':
    case 'ucs-2':
    case 'utf16le':
    case 'utf-16le':
      return true
    default:
      return false
  }
}

Buffer.concat = function concat (list, length) {
  if (!isArray(list)) {
    throw new TypeError('"list" argument must be an Array of Buffers')
  }

  if (list.length === 0) {
    return Buffer.alloc(0)
  }

  var i
  if (length === undefined) {
    length = 0
    for (i = 0; i < list.length; ++i) {
      length += list[i].length
    }
  }

  var buffer = Buffer.allocUnsafe(length)
  var pos = 0
  for (i = 0; i < list.length; ++i) {
    var buf = list[i]
    if (!Buffer.isBuffer(buf)) {
      throw new TypeError('"list" argument must be an Array of Buffers')
    }
    buf.copy(buffer, pos)
    pos += buf.length
  }
  return buffer
}

function byteLength (string, encoding) {
  if (Buffer.isBuffer(string)) {
    return string.length
  }
  if (typeof ArrayBuffer !== 'undefined' && typeof ArrayBuffer.isView === 'function' &&
      (ArrayBuffer.isView(string) || string instanceof ArrayBuffer)) {
    return string.byteLength
  }
  if (typeof string !== 'string') {
    string = '' + string
  }

  var len = string.length
  if (len === 0) return 0

  // Use a for loop to avoid recursion
  var loweredCase = false
  for (;;) {
    switch (encoding) {
      case 'ascii':
      case 'latin1':
      case 'binary':
        return len
      case 'utf8':
      case 'utf-8':
      case undefined:
        return utf8ToBytes(string).length
      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return len * 2
      case 'hex':
        return len >>> 1
      case 'base64':
        return base64ToBytes(string).length
      default:
        if (loweredCase) return utf8ToBytes(string).length // assume utf8
        encoding = ('' + encoding).toLowerCase()
        loweredCase = true
    }
  }
}
Buffer.byteLength = byteLength

function slowToString (encoding, start, end) {
  var loweredCase = false

  // No need to verify that "this.length <= MAX_UINT32" since it's a read-only
  // property of a typed array.

  // This behaves neither like String nor Uint8Array in that we set start/end
  // to their upper/lower bounds if the value passed is out of range.
  // undefined is handled specially as per ECMA-262 6th Edition,
  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.
  if (start === undefined || start < 0) {
    start = 0
  }
  // Return early if start > this.length. Done here to prevent potential uint32
  // coercion fail below.
  if (start > this.length) {
    return ''
  }

  if (end === undefined || end > this.length) {
    end = this.length
  }

  if (end <= 0) {
    return ''
  }

  // Force coersion to uint32. This will also coerce falsey/NaN values to 0.
  end >>>= 0
  start >>>= 0

  if (end <= start) {
    return ''
  }

  if (!encoding) encoding = 'utf8'

  while (true) {
    switch (encoding) {
      case 'hex':
        return hexSlice(this, start, end)

      case 'utf8':
      case 'utf-8':
        return utf8Slice(this, start, end)

      case 'ascii':
        return asciiSlice(this, start, end)

      case 'latin1':
      case 'binary':
        return latin1Slice(this, start, end)

      case 'base64':
        return base64Slice(this, start, end)

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return utf16leSlice(this, start, end)

      default:
        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
        encoding = (encoding + '').toLowerCase()
        loweredCase = true
    }
  }
}

// The property is used by `Buffer.isBuffer` and `is-buffer` (in Safari 5-7) to detect
// Buffer instances.
Buffer.prototype._isBuffer = true

function swap (b, n, m) {
  var i = b[n]
  b[n] = b[m]
  b[m] = i
}

Buffer.prototype.swap16 = function swap16 () {
  var len = this.length
  if (len % 2 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 16-bits')
  }
  for (var i = 0; i < len; i += 2) {
    swap(this, i, i + 1)
  }
  return this
}

Buffer.prototype.swap32 = function swap32 () {
  var len = this.length
  if (len % 4 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 32-bits')
  }
  for (var i = 0; i < len; i += 4) {
    swap(this, i, i + 3)
    swap(this, i + 1, i + 2)
  }
  return this
}

Buffer.prototype.swap64 = function swap64 () {
  var len = this.length
  if (len % 8 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 64-bits')
  }
  for (var i = 0; i < len; i += 8) {
    swap(this, i, i + 7)
    swap(this, i + 1, i + 6)
    swap(this, i + 2, i + 5)
    swap(this, i + 3, i + 4)
  }
  return this
}

Buffer.prototype.toString = function toString () {
  var length = this.length | 0
  if (length === 0) return ''
  if (arguments.length === 0) return utf8Slice(this, 0, length)
  return slowToString.apply(this, arguments)
}

Buffer.prototype.equals = function equals (b) {
  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')
  if (this === b) return true
  return Buffer.compare(this, b) === 0
}

Buffer.prototype.inspect = function inspect () {
  var str = ''
  var max = exports.INSPECT_MAX_BYTES
  if (this.length > 0) {
    str = this.toString('hex', 0, max).match(/.{2}/g).join(' ')
    if (this.length > max) str += ' ... '
  }
  return '<Buffer ' + str + '>'
}

Buffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {
  if (!Buffer.isBuffer(target)) {
    throw new TypeError('Argument must be a Buffer')
  }

  if (start === undefined) {
    start = 0
  }
  if (end === undefined) {
    end = target ? target.length : 0
  }
  if (thisStart === undefined) {
    thisStart = 0
  }
  if (thisEnd === undefined) {
    thisEnd = this.length
  }

  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {
    throw new RangeError('out of range index')
  }

  if (thisStart >= thisEnd && start >= end) {
    return 0
  }
  if (thisStart >= thisEnd) {
    return -1
  }
  if (start >= end) {
    return 1
  }

  start >>>= 0
  end >>>= 0
  thisStart >>>= 0
  thisEnd >>>= 0

  if (this === target) return 0

  var x = thisEnd - thisStart
  var y = end - start
  var len = Math.min(x, y)

  var thisCopy = this.slice(thisStart, thisEnd)
  var targetCopy = target.slice(start, end)

  for (var i = 0; i < len; ++i) {
    if (thisCopy[i] !== targetCopy[i]) {
      x = thisCopy[i]
      y = targetCopy[i]
      break
    }
  }

  if (x < y) return -1
  if (y < x) return 1
  return 0
}

// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,
// OR the last index of `val` in `buffer` at offset <= `byteOffset`.
//
// Arguments:
// - buffer - a Buffer to search
// - val - a string, Buffer, or number
// - byteOffset - an index into `buffer`; will be clamped to an int32
// - encoding - an optional encoding, relevant is val is a string
// - dir - true for indexOf, false for lastIndexOf
function bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {
  // Empty buffer means no match
  if (buffer.length === 0) return -1

  // Normalize byteOffset
  if (typeof byteOffset === 'string') {
    encoding = byteOffset
    byteOffset = 0
  } else if (byteOffset > 0x7fffffff) {
    byteOffset = 0x7fffffff
  } else if (byteOffset < -0x80000000) {
    byteOffset = -0x80000000
  }
  byteOffset = +byteOffset  // Coerce to Number.
  if (isNaN(byteOffset)) {
    // byteOffset: it it's undefined, null, NaN, "foo", etc, search whole buffer
    byteOffset = dir ? 0 : (buffer.length - 1)
  }

  // Normalize byteOffset: negative offsets start from the end of the buffer
  if (byteOffset < 0) byteOffset = buffer.length + byteOffset
  if (byteOffset >= buffer.length) {
    if (dir) return -1
    else byteOffset = buffer.length - 1
  } else if (byteOffset < 0) {
    if (dir) byteOffset = 0
    else return -1
  }

  // Normalize val
  if (typeof val === 'string') {
    val = Buffer.from(val, encoding)
  }

  // Finally, search either indexOf (if dir is true) or lastIndexOf
  if (Buffer.isBuffer(val)) {
    // Special case: looking for empty string/buffer always fails
    if (val.length === 0) {
      return -1
    }
    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)
  } else if (typeof val === 'number') {
    val = val & 0xFF // Search for a byte value [0-255]
    if (Buffer.TYPED_ARRAY_SUPPORT &&
        typeof Uint8Array.prototype.indexOf === 'function') {
      if (dir) {
        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)
      } else {
        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)
      }
    }
    return arrayIndexOf(buffer, [ val ], byteOffset, encoding, dir)
  }

  throw new TypeError('val must be string, number or Buffer')
}

function arrayIndexOf (arr, val, byteOffset, encoding, dir) {
  var indexSize = 1
  var arrLength = arr.length
  var valLength = val.length

  if (encoding !== undefined) {
    encoding = String(encoding).toLowerCase()
    if (encoding === 'ucs2' || encoding === 'ucs-2' ||
        encoding === 'utf16le' || encoding === 'utf-16le') {
      if (arr.length < 2 || val.length < 2) {
        return -1
      }
      indexSize = 2
      arrLength /= 2
      valLength /= 2
      byteOffset /= 2
    }
  }

  function read (buf, i) {
    if (indexSize === 1) {
      return buf[i]
    } else {
      return buf.readUInt16BE(i * indexSize)
    }
  }

  var i
  if (dir) {
    var foundIndex = -1
    for (i = byteOffset; i < arrLength; i++) {
      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {
        if (foundIndex === -1) foundIndex = i
        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize
      } else {
        if (foundIndex !== -1) i -= i - foundIndex
        foundIndex = -1
      }
    }
  } else {
    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength
    for (i = byteOffset; i >= 0; i--) {
      var found = true
      for (var j = 0; j < valLength; j++) {
        if (read(arr, i + j) !== read(val, j)) {
          found = false
          break
        }
      }
      if (found) return i
    }
  }

  return -1
}

Buffer.prototype.includes = function includes (val, byteOffset, encoding) {
  return this.indexOf(val, byteOffset, encoding) !== -1
}

Buffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {
  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)
}

Buffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {
  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)
}

function hexWrite (buf, string, offset, length) {
  offset = Number(offset) || 0
  var remaining = buf.length - offset
  if (!length) {
    length = remaining
  } else {
    length = Number(length)
    if (length > remaining) {
      length = remaining
    }
  }

  // must be an even number of digits
  var strLen = string.length
  if (strLen % 2 !== 0) throw new TypeError('Invalid hex string')

  if (length > strLen / 2) {
    length = strLen / 2
  }
  for (var i = 0; i < length; ++i) {
    var parsed = parseInt(string.substr(i * 2, 2), 16)
    if (isNaN(parsed)) return i
    buf[offset + i] = parsed
  }
  return i
}

function utf8Write (buf, string, offset, length) {
  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)
}

function asciiWrite (buf, string, offset, length) {
  return blitBuffer(asciiToBytes(string), buf, offset, length)
}

function latin1Write (buf, string, offset, length) {
  return asciiWrite(buf, string, offset, length)
}

function base64Write (buf, string, offset, length) {
  return blitBuffer(base64ToBytes(string), buf, offset, length)
}

function ucs2Write (buf, string, offset, length) {
  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)
}

Buffer.prototype.write = function write (string, offset, length, encoding) {
  // Buffer#write(string)
  if (offset === undefined) {
    encoding = 'utf8'
    length = this.length
    offset = 0
  // Buffer#write(string, encoding)
  } else if (length === undefined && typeof offset === 'string') {
    encoding = offset
    length = this.length
    offset = 0
  // Buffer#write(string, offset[, length][, encoding])
  } else if (isFinite(offset)) {
    offset = offset | 0
    if (isFinite(length)) {
      length = length | 0
      if (encoding === undefined) encoding = 'utf8'
    } else {
      encoding = length
      length = undefined
    }
  // legacy write(string, encoding, offset, length) - remove in v0.13
  } else {
    throw new Error(
      'Buffer.write(string, encoding, offset[, length]) is no longer supported'
    )
  }

  var remaining = this.length - offset
  if (length === undefined || length > remaining) length = remaining

  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {
    throw new RangeError('Attempt to write outside buffer bounds')
  }

  if (!encoding) encoding = 'utf8'

  var loweredCase = false
  for (;;) {
    switch (encoding) {
      case 'hex':
        return hexWrite(this, string, offset, length)

      case 'utf8':
      case 'utf-8':
        return utf8Write(this, string, offset, length)

      case 'ascii':
        return asciiWrite(this, string, offset, length)

      case 'latin1':
      case 'binary':
        return latin1Write(this, string, offset, length)

      case 'base64':
        // Warning: maxLength not taken into account in base64Write
        return base64Write(this, string, offset, length)

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return ucs2Write(this, string, offset, length)

      default:
        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
        encoding = ('' + encoding).toLowerCase()
        loweredCase = true
    }
  }
}

Buffer.prototype.toJSON = function toJSON () {
  return {
    type: 'Buffer',
    data: Array.prototype.slice.call(this._arr || this, 0)
  }
}

function base64Slice (buf, start, end) {
  if (start === 0 && end === buf.length) {
    return base64.fromByteArray(buf)
  } else {
    return base64.fromByteArray(buf.slice(start, end))
  }
}

function utf8Slice (buf, start, end) {
  end = Math.min(buf.length, end)
  var res = []

  var i = start
  while (i < end) {
    var firstByte = buf[i]
    var codePoint = null
    var bytesPerSequence = (firstByte > 0xEF) ? 4
      : (firstByte > 0xDF) ? 3
      : (firstByte > 0xBF) ? 2
      : 1

    if (i + bytesPerSequence <= end) {
      var secondByte, thirdByte, fourthByte, tempCodePoint

      switch (bytesPerSequence) {
        case 1:
          if (firstByte < 0x80) {
            codePoint = firstByte
          }
          break
        case 2:
          secondByte = buf[i + 1]
          if ((secondByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)
            if (tempCodePoint > 0x7F) {
              codePoint = tempCodePoint
            }
          }
          break
        case 3:
          secondByte = buf[i + 1]
          thirdByte = buf[i + 2]
          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)
            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {
              codePoint = tempCodePoint
            }
          }
          break
        case 4:
          secondByte = buf[i + 1]
          thirdByte = buf[i + 2]
          fourthByte = buf[i + 3]
          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)
            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {
              codePoint = tempCodePoint
            }
          }
      }
    }

    if (codePoint === null) {
      // we did not generate a valid codePoint so insert a
      // replacement char (U+FFFD) and advance only 1 byte
      codePoint = 0xFFFD
      bytesPerSequence = 1
    } else if (codePoint > 0xFFFF) {
      // encode to utf16 (surrogate pair dance)
      codePoint -= 0x10000
      res.push(codePoint >>> 10 & 0x3FF | 0xD800)
      codePoint = 0xDC00 | codePoint & 0x3FF
    }

    res.push(codePoint)
    i += bytesPerSequence
  }

  return decodeCodePointsArray(res)
}

// Based on http://stackoverflow.com/a/22747272/680742, the browser with
// the lowest limit is Chrome, with 0x10000 args.
// We go 1 magnitude less, for safety
var MAX_ARGUMENTS_LENGTH = 0x1000

function decodeCodePointsArray (codePoints) {
  var len = codePoints.length
  if (len <= MAX_ARGUMENTS_LENGTH) {
    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()
  }

  // Decode in chunks to avoid "call stack size exceeded".
  var res = ''
  var i = 0
  while (i < len) {
    res += String.fromCharCode.apply(
      String,
      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)
    )
  }
  return res
}

function asciiSlice (buf, start, end) {
  var ret = ''
  end = Math.min(buf.length, end)

  for (var i = start; i < end; ++i) {
    ret += String.fromCharCode(buf[i] & 0x7F)
  }
  return ret
}

function latin1Slice (buf, start, end) {
  var ret = ''
  end = Math.min(buf.length, end)

  for (var i = start; i < end; ++i) {
    ret += String.fromCharCode(buf[i])
  }
  return ret
}

function hexSlice (buf, start, end) {
  var len = buf.length

  if (!start || start < 0) start = 0
  if (!end || end < 0 || end > len) end = len

  var out = ''
  for (var i = start; i < end; ++i) {
    out += toHex(buf[i])
  }
  return out
}

function utf16leSlice (buf, start, end) {
  var bytes = buf.slice(start, end)
  var res = ''
  for (var i = 0; i < bytes.length; i += 2) {
    res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256)
  }
  return res
}

Buffer.prototype.slice = function slice (start, end) {
  var len = this.length
  start = ~~start
  end = end === undefined ? len : ~~end

  if (start < 0) {
    start += len
    if (start < 0) start = 0
  } else if (start > len) {
    start = len
  }

  if (end < 0) {
    end += len
    if (end < 0) end = 0
  } else if (end > len) {
    end = len
  }

  if (end < start) end = start

  var newBuf
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    newBuf = this.subarray(start, end)
    newBuf.__proto__ = Buffer.prototype
  } else {
    var sliceLen = end - start
    newBuf = new Buffer(sliceLen, undefined)
    for (var i = 0; i < sliceLen; ++i) {
      newBuf[i] = this[i + start]
    }
  }

  return newBuf
}

/*
 * Need to make sure that buffer isn't trying to write out of bounds.
 */
function checkOffset (offset, ext, length) {
  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')
  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')
}

Buffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var val = this[offset]
  var mul = 1
  var i = 0
  while (++i < byteLength && (mul *= 0x100)) {
    val += this[offset + i] * mul
  }

  return val
}

Buffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) {
    checkOffset(offset, byteLength, this.length)
  }

  var val = this[offset + --byteLength]
  var mul = 1
  while (byteLength > 0 && (mul *= 0x100)) {
    val += this[offset + --byteLength] * mul
  }

  return val
}

Buffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 1, this.length)
  return this[offset]
}

Buffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length)
  return this[offset] | (this[offset + 1] << 8)
}

Buffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length)
  return (this[offset] << 8) | this[offset + 1]
}

Buffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)

  return ((this[offset]) |
      (this[offset + 1] << 8) |
      (this[offset + 2] << 16)) +
      (this[offset + 3] * 0x1000000)
}

Buffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset] * 0x1000000) +
    ((this[offset + 1] << 16) |
    (this[offset + 2] << 8) |
    this[offset + 3])
}

Buffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var val = this[offset]
  var mul = 1
  var i = 0
  while (++i < byteLength && (mul *= 0x100)) {
    val += this[offset + i] * mul
  }
  mul *= 0x80

  if (val >= mul) val -= Math.pow(2, 8 * byteLength)

  return val
}

Buffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var i = byteLength
  var mul = 1
  var val = this[offset + --i]
  while (i > 0 && (mul *= 0x100)) {
    val += this[offset + --i] * mul
  }
  mul *= 0x80

  if (val >= mul) val -= Math.pow(2, 8 * byteLength)

  return val
}

Buffer.prototype.readInt8 = function readInt8 (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 1, this.length)
  if (!(this[offset] & 0x80)) return (this[offset])
  return ((0xff - this[offset] + 1) * -1)
}

Buffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length)
  var val = this[offset] | (this[offset + 1] << 8)
  return (val & 0x8000) ? val | 0xFFFF0000 : val
}

Buffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length)
  var val = this[offset + 1] | (this[offset] << 8)
  return (val & 0x8000) ? val | 0xFFFF0000 : val
}

Buffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset]) |
    (this[offset + 1] << 8) |
    (this[offset + 2] << 16) |
    (this[offset + 3] << 24)
}

Buffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset] << 24) |
    (this[offset + 1] << 16) |
    (this[offset + 2] << 8) |
    (this[offset + 3])
}

Buffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)
  return ieee754.read(this, offset, true, 23, 4)
}

Buffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)
  return ieee754.read(this, offset, false, 23, 4)
}

Buffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 8, this.length)
  return ieee754.read(this, offset, true, 52, 8)
}

Buffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 8, this.length)
  return ieee754.read(this, offset, false, 52, 8)
}

function checkInt (buf, value, offset, ext, max, min) {
  if (!Buffer.isBuffer(buf)) throw new TypeError('"buffer" argument must be a Buffer instance')
  if (value > max || value < min) throw new RangeError('"value" argument is out of bounds')
  if (offset + ext > buf.length) throw new RangeError('Index out of range')
}

Buffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) {
    var maxBytes = Math.pow(2, 8 * byteLength) - 1
    checkInt(this, value, offset, byteLength, maxBytes, 0)
  }

  var mul = 1
  var i = 0
  this[offset] = value & 0xFF
  while (++i < byteLength && (mul *= 0x100)) {
    this[offset + i] = (value / mul) & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) {
    var maxBytes = Math.pow(2, 8 * byteLength) - 1
    checkInt(this, value, offset, byteLength, maxBytes, 0)
  }

  var i = byteLength - 1
  var mul = 1
  this[offset + i] = value & 0xFF
  while (--i >= 0 && (mul *= 0x100)) {
    this[offset + i] = (value / mul) & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)
  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)
  this[offset] = (value & 0xff)
  return offset + 1
}

function objectWriteUInt16 (buf, value, offset, littleEndian) {
  if (value < 0) value = 0xffff + value + 1
  for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; ++i) {
    buf[offset + i] = (value & (0xff << (8 * (littleEndian ? i : 1 - i)))) >>>
      (littleEndian ? i : 1 - i) * 8
  }
}

Buffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value & 0xff)
    this[offset + 1] = (value >>> 8)
  } else {
    objectWriteUInt16(this, value, offset, true)
  }
  return offset + 2
}

Buffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 8)
    this[offset + 1] = (value & 0xff)
  } else {
    objectWriteUInt16(this, value, offset, false)
  }
  return offset + 2
}

function objectWriteUInt32 (buf, value, offset, littleEndian) {
  if (value < 0) value = 0xffffffff + value + 1
  for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; ++i) {
    buf[offset + i] = (value >>> (littleEndian ? i : 3 - i) * 8) & 0xff
  }
}

Buffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset + 3] = (value >>> 24)
    this[offset + 2] = (value >>> 16)
    this[offset + 1] = (value >>> 8)
    this[offset] = (value & 0xff)
  } else {
    objectWriteUInt32(this, value, offset, true)
  }
  return offset + 4
}

Buffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 24)
    this[offset + 1] = (value >>> 16)
    this[offset + 2] = (value >>> 8)
    this[offset + 3] = (value & 0xff)
  } else {
    objectWriteUInt32(this, value, offset, false)
  }
  return offset + 4
}

Buffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) {
    var limit = Math.pow(2, 8 * byteLength - 1)

    checkInt(this, value, offset, byteLength, limit - 1, -limit)
  }

  var i = 0
  var mul = 1
  var sub = 0
  this[offset] = value & 0xFF
  while (++i < byteLength && (mul *= 0x100)) {
    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {
      sub = 1
    }
    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) {
    var limit = Math.pow(2, 8 * byteLength - 1)

    checkInt(this, value, offset, byteLength, limit - 1, -limit)
  }

  var i = byteLength - 1
  var mul = 1
  var sub = 0
  this[offset + i] = value & 0xFF
  while (--i >= 0 && (mul *= 0x100)) {
    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {
      sub = 1
    }
    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)
  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)
  if (value < 0) value = 0xff + value + 1
  this[offset] = (value & 0xff)
  return offset + 1
}

Buffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value & 0xff)
    this[offset + 1] = (value >>> 8)
  } else {
    objectWriteUInt16(this, value, offset, true)
  }
  return offset + 2
}

Buffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 8)
    this[offset + 1] = (value & 0xff)
  } else {
    objectWriteUInt16(this, value, offset, false)
  }
  return offset + 2
}

Buffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value & 0xff)
    this[offset + 1] = (value >>> 8)
    this[offset + 2] = (value >>> 16)
    this[offset + 3] = (value >>> 24)
  } else {
    objectWriteUInt32(this, value, offset, true)
  }
  return offset + 4
}

Buffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
  if (value < 0) value = 0xffffffff + value + 1
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 24)
    this[offset + 1] = (value >>> 16)
    this[offset + 2] = (value >>> 8)
    this[offset + 3] = (value & 0xff)
  } else {
    objectWriteUInt32(this, value, offset, false)
  }
  return offset + 4
}

function checkIEEE754 (buf, value, offset, ext, max, min) {
  if (offset + ext > buf.length) throw new RangeError('Index out of range')
  if (offset < 0) throw new RangeError('Index out of range')
}

function writeFloat (buf, value, offset, littleEndian, noAssert) {
  if (!noAssert) {
    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)
  }
  ieee754.write(buf, value, offset, littleEndian, 23, 4)
  return offset + 4
}

Buffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {
  return writeFloat(this, value, offset, true, noAssert)
}

Buffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {
  return writeFloat(this, value, offset, false, noAssert)
}

function writeDouble (buf, value, offset, littleEndian, noAssert) {
  if (!noAssert) {
    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)
  }
  ieee754.write(buf, value, offset, littleEndian, 52, 8)
  return offset + 8
}

Buffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {
  return writeDouble(this, value, offset, true, noAssert)
}

Buffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {
  return writeDouble(this, value, offset, false, noAssert)
}

// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
Buffer.prototype.copy = function copy (target, targetStart, start, end) {
  if (!start) start = 0
  if (!end && end !== 0) end = this.length
  if (targetStart >= target.length) targetStart = target.length
  if (!targetStart) targetStart = 0
  if (end > 0 && end < start) end = start

  // Copy 0 bytes; we're done
  if (end === start) return 0
  if (target.length === 0 || this.length === 0) return 0

  // Fatal error conditions
  if (targetStart < 0) {
    throw new RangeError('targetStart out of bounds')
  }
  if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds')
  if (end < 0) throw new RangeError('sourceEnd out of bounds')

  // Are we oob?
  if (end > this.length) end = this.length
  if (target.length - targetStart < end - start) {
    end = target.length - targetStart + start
  }

  var len = end - start
  var i

  if (this === target && start < targetStart && targetStart < end) {
    // descending copy from end
    for (i = len - 1; i >= 0; --i) {
      target[i + targetStart] = this[i + start]
    }
  } else if (len < 1000 || !Buffer.TYPED_ARRAY_SUPPORT) {
    // ascending copy from start
    for (i = 0; i < len; ++i) {
      target[i + targetStart] = this[i + start]
    }
  } else {
    Uint8Array.prototype.set.call(
      target,
      this.subarray(start, start + len),
      targetStart
    )
  }

  return len
}

// Usage:
//    buffer.fill(number[, offset[, end]])
//    buffer.fill(buffer[, offset[, end]])
//    buffer.fill(string[, offset[, end]][, encoding])
Buffer.prototype.fill = function fill (val, start, end, encoding) {
  // Handle string cases:
  if (typeof val === 'string') {
    if (typeof start === 'string') {
      encoding = start
      start = 0
      end = this.length
    } else if (typeof end === 'string') {
      encoding = end
      end = this.length
    }
    if (val.length === 1) {
      var code = val.charCodeAt(0)
      if (code < 256) {
        val = code
      }
    }
    if (encoding !== undefined && typeof encoding !== 'string') {
      throw new TypeError('encoding must be a string')
    }
    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {
      throw new TypeError('Unknown encoding: ' + encoding)
    }
  } else if (typeof val === 'number') {
    val = val & 255
  }

  // Invalid ranges are not set to a default, so can range check early.
  if (start < 0 || this.length < start || this.length < end) {
    throw new RangeError('Out of range index')
  }

  if (end <= start) {
    return this
  }

  start = start >>> 0
  end = end === undefined ? this.length : end >>> 0

  if (!val) val = 0

  var i
  if (typeof val === 'number') {
    for (i = start; i < end; ++i) {
      this[i] = val
    }
  } else {
    var bytes = Buffer.isBuffer(val)
      ? val
      : utf8ToBytes(new Buffer(val, encoding).toString())
    var len = bytes.length
    for (i = 0; i < end - start; ++i) {
      this[i + start] = bytes[i % len]
    }
  }

  return this
}

// HELPER FUNCTIONS
// ================

var INVALID_BASE64_RE = /[^+\/0-9A-Za-z-_]/g

function base64clean (str) {
  // Node strips out invalid characters like \n and \t from the string, base64-js does not
  str = stringtrim(str).replace(INVALID_BASE64_RE, '')
  // Node converts strings with length < 2 to ''
  if (str.length < 2) return ''
  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not
  while (str.length % 4 !== 0) {
    str = str + '='
  }
  return str
}

function stringtrim (str) {
  if (str.trim) return str.trim()
  return str.replace(/^\s+|\s+$/g, '')
}

function toHex (n) {
  if (n < 16) return '0' + n.toString(16)
  return n.toString(16)
}

function utf8ToBytes (string, units) {
  units = units || Infinity
  var codePoint
  var length = string.length
  var leadSurrogate = null
  var bytes = []

  for (var i = 0; i < length; ++i) {
    codePoint = string.charCodeAt(i)

    // is surrogate component
    if (codePoint > 0xD7FF && codePoint < 0xE000) {
      // last char was a lead
      if (!leadSurrogate) {
        // no lead yet
        if (codePoint > 0xDBFF) {
          // unexpected trail
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
          continue
        } else if (i + 1 === length) {
          // unpaired lead
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
          continue
        }

        // valid lead
        leadSurrogate = codePoint

        continue
      }

      // 2 leads in a row
      if (codePoint < 0xDC00) {
        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
        leadSurrogate = codePoint
        continue
      }

      // valid surrogate pair
      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000
    } else if (leadSurrogate) {
      // valid bmp char, but last char was a lead
      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
    }

    leadSurrogate = null

    // encode utf8
    if (codePoint < 0x80) {
      if ((units -= 1) < 0) break
      bytes.push(codePoint)
    } else if (codePoint < 0x800) {
      if ((units -= 2) < 0) break
      bytes.push(
        codePoint >> 0x6 | 0xC0,
        codePoint & 0x3F | 0x80
      )
    } else if (codePoint < 0x10000) {
      if ((units -= 3) < 0) break
      bytes.push(
        codePoint >> 0xC | 0xE0,
        codePoint >> 0x6 & 0x3F | 0x80,
        codePoint & 0x3F | 0x80
      )
    } else if (codePoint < 0x110000) {
      if ((units -= 4) < 0) break
      bytes.push(
        codePoint >> 0x12 | 0xF0,
        codePoint >> 0xC & 0x3F | 0x80,
        codePoint >> 0x6 & 0x3F | 0x80,
        codePoint & 0x3F | 0x80
      )
    } else {
      throw new Error('Invalid code point')
    }
  }

  return bytes
}

function asciiToBytes (str) {
  var byteArray = []
  for (var i = 0; i < str.length; ++i) {
    // Node's code seems to be doing this and not & 0x7F..
    byteArray.push(str.charCodeAt(i) & 0xFF)
  }
  return byteArray
}

function utf16leToBytes (str, units) {
  var c, hi, lo
  var byteArray = []
  for (var i = 0; i < str.length; ++i) {
    if ((units -= 2) < 0) break

    c = str.charCodeAt(i)
    hi = c >> 8
    lo = c % 256
    byteArray.push(lo)
    byteArray.push(hi)
  }

  return byteArray
}

function base64ToBytes (str) {
  return base64.toByteArray(base64clean(str))
}

function blitBuffer (src, dst, offset, length) {
  for (var i = 0; i < length; ++i) {
    if ((i + offset >= dst.length) || (i >= src.length)) break
    dst[i + offset] = src[i]
  }
  return i
}

function isnan (val) {
  return val !== val // eslint-disable-line no-self-compare
}

},{"base64-js":"prL8","ieee754":"iism","isarray":"BOve","buffer":"XyCw"}],"A7J3":[function(require,module,exports) {
var Buffer = require("buffer").Buffer;
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
// @ts-ignore
var random_1 = __importDefault(require("node-forge/lib/random"));
var seed_words_list_1 = require("./seed-words-list");
var string_bytes_1 = require("../conversions/string-bytes");
var _random = function (count) { return string_bytes_1.stringToBytes(random_1.default.getBytesSync(count), 'raw'); };
var ensureBuffer = function () {
    try {
        var b = new Buffer(1);
    }
    catch (e) {
        throw new Error('Buffer not supported in this environment. Use Node.js or Browserify for browser support.');
    }
};
exports.random = function (count, type) {
    switch (type) {
        case 'Array8':
            return Array.from(_random(count));
        case 'Array16':
            return Array.from(exports.random(count, 'Uint16Array'));
        case 'Array32':
            return Array.from(exports.random(count, 'Uint32Array'));
        case 'Buffer':
            ensureBuffer();
            return Buffer.from(_random(count));
        case 'Uint8Array':
            return _random(count);
        case 'Uint16Array':
            return new Uint16Array(count)
                .map(function (_) { return _random(2).reduce(function (a, b, i) { return a | b << 8 * (1 - i); }, 0); });
        case 'Uint32Array':
            return new Uint32Array(count)
                .map(function (_) { return _random(4).reduce(function (a, b, i) { return a | b << 8 * (1 - i); }, 0); });
        default:
            throw new Error(type + ' is unsupported.');
    }
};
exports.randomBytes = function (length) {
    return exports.random(length, 'Uint8Array');
};
exports.randomSeed = function (wordsCount) {
    if (wordsCount === void 0) { wordsCount = 15; }
    return exports.random(wordsCount, 'Array32')
        .map(function (x) { return seed_words_list_1.seedWordsList[x % seed_words_list_1.seedWordsList.length]; })
        .join(' ');
};

},{"node-forge/lib/random":"Gfwb","./seed-words-list":"UrkL","../conversions/string-bytes":"WqH7","buffer":"XyCw"}],"exyY":[function(require,module,exports) {
"use strict";
/**
 * [js-sha3]{@link https://github.com/emn178/js-sha3}
 *
 * @version 0.5.7
 * @author Chen, Yi-Cyuan [emn178@gmail.com]
 * @copyright Chen, Yi-Cyuan 2015-2016
 * @license MIT
 */
exports.__esModule = true;
var sha3 = {};
var HEX_CHARS = '0123456789abcdef'.split('');
var SHAKE_PADDING = [31, 7936, 2031616, 520093696];
var KECCAK_PADDING = [1, 256, 65536, 16777216];
var PADDING = [6, 1536, 393216, 100663296];
var SHIFT = [0, 8, 16, 24];
var RC = [1, 0, 32898, 0, 32906, 2147483648, 2147516416, 2147483648, 32907, 0, 2147483649,
  0, 2147516545, 2147483648, 32777, 2147483648, 138, 0, 136, 0, 2147516425, 0,
  2147483658, 0, 2147516555, 0, 139, 2147483648, 32905, 2147483648, 32771,
  2147483648, 32770, 2147483648, 128, 2147483648, 32778, 0, 2147483658, 2147483648,
  2147516545, 2147483648, 32896, 2147483648, 2147483649, 0, 2147516424, 2147483648];
var BITS = [224, 256, 384, 512];
var SHAKE_BITS = [128, 256];
var OUTPUT_TYPES = ['hex', 'buffer', 'arrayBuffer', 'array'];
var createOutputMethod = function (bits, padding, outputType) {
  return function (message) {
    return new Keccak(bits, padding, bits).update(message)[outputType]();
  };
};
var createShakeOutputMethod = function (bits, padding, outputType) {
  return function (message, outputBits) {
    return new Keccak(bits, padding, outputBits).update(message)[outputType]();
  };
};
var createMethod = function (bits, padding) {
  var method = createOutputMethod(bits, padding, 'hex');
  method.create = function () {
    return new Keccak(bits, padding, bits);
  };
  method.update = function (message) {
    return method.create().update(message);
  };
  for (var i = 0; i < OUTPUT_TYPES.length; ++i) {
    var type = OUTPUT_TYPES[i];
    method[type] = createOutputMethod(bits, padding, type);
  }
  return method;
};
var createShakeMethod = function (bits, padding) {
  var method = createShakeOutputMethod(bits, padding, 'hex');
  method.create = function (outputBits) {
    return new Keccak(bits, padding, outputBits);
  };
  method.update = function (message, outputBits) {
    return method.create(outputBits).update(message);
  };
  for (var i = 0; i < OUTPUT_TYPES.length; ++i) {
    var type = OUTPUT_TYPES[i];
    method[type] = createShakeOutputMethod(bits, padding, type);
  }
  return method;
};
var algorithms = [
  { name: 'keccak', padding: KECCAK_PADDING, bits: BITS, createMethod: createMethod },
  { name: 'sha3', padding: PADDING, bits: BITS, createMethod: createMethod },
  { name: 'shake', padding: SHAKE_PADDING, bits: SHAKE_BITS, createMethod: createShakeMethod }
];
var methods = {}, methodNames = [];
for (var i = 0; i < algorithms.length; ++i) {
  var algorithm = algorithms[i];
  var bits = algorithm.bits;
  for (var j = 0; j < bits.length; ++j) {
    var methodName = algorithm.name + '_' + bits[j];
    methodNames.push(methodName);
    methods[methodName] = algorithm.createMethod(bits[j], algorithm.padding);
  }
}
function Keccak(bits, padding, outputBits) {
  this.blocks = [];
  this.s = [];
  this.padding = padding;
  this.outputBits = outputBits;
  this.reset = true;
  this.block = 0;
  this.start = 0;
  this.blockCount = (1600 - (bits << 1)) >> 5;
  this.byteCount = this.blockCount << 2;
  this.outputBlocks = outputBits >> 5;
  this.extraBytes = (outputBits & 31) >> 3;
  for (var i = 0; i < 50; ++i) {
    this.s[i] = 0;
  }
}
Keccak.prototype.update = function (message) {
  var notString = typeof message !== 'string';
  if (notString && message.constructor === ArrayBuffer) {
    message = new Uint8Array(message);
  }
  var length = message.length, blocks = this.blocks, byteCount = this.byteCount;
  var blockCount = this.blockCount, index = 0, s = this.s, i, code;
  while (index < length) {
    if (this.reset) {
      this.reset = false;
      blocks[0] = this.block;
      for (i = 1; i < blockCount + 1; ++i) {
        blocks[i] = 0;
      }
    }
    if (notString) {
      for (i = this.start; index < length && i < byteCount; ++index) {
        blocks[i >> 2] |= message[index] << SHIFT[i++ & 3];
      }
    }
    else {
      for (i = this.start; index < length && i < byteCount; ++index) {
        code = message.charCodeAt(index);
        if (code < 0x80) {
          blocks[i >> 2] |= code << SHIFT[i++ & 3];
        }
        else if (code < 0x800) {
          blocks[i >> 2] |= (0xc0 | (code >> 6)) << SHIFT[i++ & 3];
          blocks[i >> 2] |= (0x80 | (code & 0x3f)) << SHIFT[i++ & 3];
        }
        else if (code < 0xd800 || code >= 0xe000) {
          blocks[i >> 2] |= (0xe0 | (code >> 12)) << SHIFT[i++ & 3];
          blocks[i >> 2] |= (0x80 | ((code >> 6) & 0x3f)) << SHIFT[i++ & 3];
          blocks[i >> 2] |= (0x80 | (code & 0x3f)) << SHIFT[i++ & 3];
        }
        else {
          code = 0x10000 + (((code & 0x3ff) << 10) | (message.charCodeAt(++index) & 0x3ff));
          blocks[i >> 2] |= (0xf0 | (code >> 18)) << SHIFT[i++ & 3];
          blocks[i >> 2] |= (0x80 | ((code >> 12) & 0x3f)) << SHIFT[i++ & 3];
          blocks[i >> 2] |= (0x80 | ((code >> 6) & 0x3f)) << SHIFT[i++ & 3];
          blocks[i >> 2] |= (0x80 | (code & 0x3f)) << SHIFT[i++ & 3];
        }
      }
    }
    this.lastByteIndex = i;
    if (i >= byteCount) {
      this.start = i - byteCount;
      this.block = blocks[blockCount];
      for (i = 0; i < blockCount; ++i) {
        s[i] ^= blocks[i];
      }
      f(s);
      this.reset = true;
    }
    else {
      this.start = i;
    }
  }
  return this;
};
Keccak.prototype.finalize = function () {
  var blocks = this.blocks;
  var i = this.lastByteIndex, blockCount = this.blockCount, s = this.s;
  blocks[i >> 2] |= this.padding[i & 3];
  if (this.lastByteIndex === this.byteCount) {
    blocks[0] = blocks[blockCount];
    for (i = 1; i < blockCount + 1; ++i) {
      blocks[i] = 0;
    }
  }
  blocks[blockCount - 1] |= 0x80000000;
  for (i = 0; i < blockCount; ++i) {
    s[i] ^= blocks[i];
  }
  f(s);
};
Keccak.prototype.toString = Keccak.prototype.hex = function () {
  this.finalize();
  var blockCount = this.blockCount, s = this.s, outputBlocks = this.outputBlocks;
  var extraBytes = this.extraBytes, i = 0, j = 0;
  var hex = '', block;
  while (j < outputBlocks) {
    for (i = 0; i < blockCount && j < outputBlocks; ++i, ++j) {
      block = s[i];
      hex += HEX_CHARS[(block >> 4) & 0x0F] + HEX_CHARS[block & 0x0F] +
        HEX_CHARS[(block >> 12) & 0x0F] + HEX_CHARS[(block >> 8) & 0x0F] +
        HEX_CHARS[(block >> 20) & 0x0F] + HEX_CHARS[(block >> 16) & 0x0F] +
        HEX_CHARS[(block >> 28) & 0x0F] + HEX_CHARS[(block >> 24) & 0x0F];
    }
    if (j % blockCount === 0) {
      f(s);
      i = 0;
    }
  }
  if (extraBytes) {
    block = s[i];
    if (extraBytes > 0) {
      hex += HEX_CHARS[(block >> 4) & 0x0F] + HEX_CHARS[block & 0x0F];
    }
    if (extraBytes > 1) {
      hex += HEX_CHARS[(block >> 12) & 0x0F] + HEX_CHARS[(block >> 8) & 0x0F];
    }
    if (extraBytes > 2) {
      hex += HEX_CHARS[(block >> 20) & 0x0F] + HEX_CHARS[(block >> 16) & 0x0F];
    }
  }
  return hex;
};
Keccak.prototype.arrayBuffer = function () {
  this.finalize();
  var blockCount = this.blockCount, s = this.s, outputBlocks = this.outputBlocks;
  var extraBytes = this.extraBytes, i = 0, j = 0;
  var bytes = this.outputBits >> 3;
  var buffer;
  if (extraBytes) {
    buffer = new ArrayBuffer((outputBlocks + 1) << 2);
  }
  else {
    buffer = new ArrayBuffer(bytes);
  }
  var array = new Uint32Array(buffer);
  while (j < outputBlocks) {
    for (i = 0; i < blockCount && j < outputBlocks; ++i, ++j) {
      array[j] = s[i];
    }
    if (j % blockCount === 0) {
      f(s);
    }
  }
  if (extraBytes) {
    array[i] = s[i];
    buffer = buffer.slice(0, bytes);
  }
  return buffer;
};
Keccak.prototype.buffer = Keccak.prototype.arrayBuffer;
Keccak.prototype.digest = Keccak.prototype.array = function () {
  this.finalize();
  var blockCount = this.blockCount, s = this.s, outputBlocks = this.outputBlocks;
  var extraBytes = this.extraBytes, i = 0, j = 0;
  var array = [];
  var offset, block;
  while (j < outputBlocks) {
    for (i = 0; i < blockCount && j < outputBlocks; ++i, ++j) {
      offset = j << 2;
      block = s[i];
      array[offset] = block & 0xFF;
      array[offset + 1] = (block >> 8) & 0xFF;
      array[offset + 2] = (block >> 16) & 0xFF;
      array[offset + 3] = (block >> 24) & 0xFF;
    }
    if (j % blockCount === 0) {
      f(s);
    }
  }
  if (extraBytes) {
    offset = j << 2;
    block = s[i];
    if (extraBytes > 0) {
      array[offset] = block & 0xFF;
    }
    if (extraBytes > 1) {
      array[offset + 1] = (block >> 8) & 0xFF;
    }
    if (extraBytes > 2) {
      array[offset + 2] = (block >> 16) & 0xFF;
    }
  }
  return array;
};
var f = function (s) {
  var h, l, n, c0, c1, c2, c3, c4, c5, c6, c7, c8, c9, b0, b1, b2, b3, b4, b5, b6, b7, b8, b9, b10, b11, b12, b13, b14, b15, b16, b17, b18, b19, b20, b21, b22, b23, b24, b25, b26, b27, b28, b29, b30, b31, b32, b33, b34, b35, b36, b37, b38, b39, b40, b41, b42, b43, b44, b45, b46, b47, b48, b49;
  for (n = 0; n < 48; n += 2) {
    c0 = s[0] ^ s[10] ^ s[20] ^ s[30] ^ s[40];
    c1 = s[1] ^ s[11] ^ s[21] ^ s[31] ^ s[41];
    c2 = s[2] ^ s[12] ^ s[22] ^ s[32] ^ s[42];
    c3 = s[3] ^ s[13] ^ s[23] ^ s[33] ^ s[43];
    c4 = s[4] ^ s[14] ^ s[24] ^ s[34] ^ s[44];
    c5 = s[5] ^ s[15] ^ s[25] ^ s[35] ^ s[45];
    c6 = s[6] ^ s[16] ^ s[26] ^ s[36] ^ s[46];
    c7 = s[7] ^ s[17] ^ s[27] ^ s[37] ^ s[47];
    c8 = s[8] ^ s[18] ^ s[28] ^ s[38] ^ s[48];
    c9 = s[9] ^ s[19] ^ s[29] ^ s[39] ^ s[49];
    h = c8 ^ ((c2 << 1) | (c3 >>> 31));
    l = c9 ^ ((c3 << 1) | (c2 >>> 31));
    s[0] ^= h;
    s[1] ^= l;
    s[10] ^= h;
    s[11] ^= l;
    s[20] ^= h;
    s[21] ^= l;
    s[30] ^= h;
    s[31] ^= l;
    s[40] ^= h;
    s[41] ^= l;
    h = c0 ^ ((c4 << 1) | (c5 >>> 31));
    l = c1 ^ ((c5 << 1) | (c4 >>> 31));
    s[2] ^= h;
    s[3] ^= l;
    s[12] ^= h;
    s[13] ^= l;
    s[22] ^= h;
    s[23] ^= l;
    s[32] ^= h;
    s[33] ^= l;
    s[42] ^= h;
    s[43] ^= l;
    h = c2 ^ ((c6 << 1) | (c7 >>> 31));
    l = c3 ^ ((c7 << 1) | (c6 >>> 31));
    s[4] ^= h;
    s[5] ^= l;
    s[14] ^= h;
    s[15] ^= l;
    s[24] ^= h;
    s[25] ^= l;
    s[34] ^= h;
    s[35] ^= l;
    s[44] ^= h;
    s[45] ^= l;
    h = c4 ^ ((c8 << 1) | (c9 >>> 31));
    l = c5 ^ ((c9 << 1) | (c8 >>> 31));
    s[6] ^= h;
    s[7] ^= l;
    s[16] ^= h;
    s[17] ^= l;
    s[26] ^= h;
    s[27] ^= l;
    s[36] ^= h;
    s[37] ^= l;
    s[46] ^= h;
    s[47] ^= l;
    h = c6 ^ ((c0 << 1) | (c1 >>> 31));
    l = c7 ^ ((c1 << 1) | (c0 >>> 31));
    s[8] ^= h;
    s[9] ^= l;
    s[18] ^= h;
    s[19] ^= l;
    s[28] ^= h;
    s[29] ^= l;
    s[38] ^= h;
    s[39] ^= l;
    s[48] ^= h;
    s[49] ^= l;
    b0 = s[0];
    b1 = s[1];
    b32 = (s[11] << 4) | (s[10] >>> 28);
    b33 = (s[10] << 4) | (s[11] >>> 28);
    b14 = (s[20] << 3) | (s[21] >>> 29);
    b15 = (s[21] << 3) | (s[20] >>> 29);
    b46 = (s[31] << 9) | (s[30] >>> 23);
    b47 = (s[30] << 9) | (s[31] >>> 23);
    b28 = (s[40] << 18) | (s[41] >>> 14);
    b29 = (s[41] << 18) | (s[40] >>> 14);
    b20 = (s[2] << 1) | (s[3] >>> 31);
    b21 = (s[3] << 1) | (s[2] >>> 31);
    b2 = (s[13] << 12) | (s[12] >>> 20);
    b3 = (s[12] << 12) | (s[13] >>> 20);
    b34 = (s[22] << 10) | (s[23] >>> 22);
    b35 = (s[23] << 10) | (s[22] >>> 22);
    b16 = (s[33] << 13) | (s[32] >>> 19);
    b17 = (s[32] << 13) | (s[33] >>> 19);
    b48 = (s[42] << 2) | (s[43] >>> 30);
    b49 = (s[43] << 2) | (s[42] >>> 30);
    b40 = (s[5] << 30) | (s[4] >>> 2);
    b41 = (s[4] << 30) | (s[5] >>> 2);
    b22 = (s[14] << 6) | (s[15] >>> 26);
    b23 = (s[15] << 6) | (s[14] >>> 26);
    b4 = (s[25] << 11) | (s[24] >>> 21);
    b5 = (s[24] << 11) | (s[25] >>> 21);
    b36 = (s[34] << 15) | (s[35] >>> 17);
    b37 = (s[35] << 15) | (s[34] >>> 17);
    b18 = (s[45] << 29) | (s[44] >>> 3);
    b19 = (s[44] << 29) | (s[45] >>> 3);
    b10 = (s[6] << 28) | (s[7] >>> 4);
    b11 = (s[7] << 28) | (s[6] >>> 4);
    b42 = (s[17] << 23) | (s[16] >>> 9);
    b43 = (s[16] << 23) | (s[17] >>> 9);
    b24 = (s[26] << 25) | (s[27] >>> 7);
    b25 = (s[27] << 25) | (s[26] >>> 7);
    b6 = (s[36] << 21) | (s[37] >>> 11);
    b7 = (s[37] << 21) | (s[36] >>> 11);
    b38 = (s[47] << 24) | (s[46] >>> 8);
    b39 = (s[46] << 24) | (s[47] >>> 8);
    b30 = (s[8] << 27) | (s[9] >>> 5);
    b31 = (s[9] << 27) | (s[8] >>> 5);
    b12 = (s[18] << 20) | (s[19] >>> 12);
    b13 = (s[19] << 20) | (s[18] >>> 12);
    b44 = (s[29] << 7) | (s[28] >>> 25);
    b45 = (s[28] << 7) | (s[29] >>> 25);
    b26 = (s[38] << 8) | (s[39] >>> 24);
    b27 = (s[39] << 8) | (s[38] >>> 24);
    b8 = (s[48] << 14) | (s[49] >>> 18);
    b9 = (s[49] << 14) | (s[48] >>> 18);
    s[0] = b0 ^ (~b2 & b4);
    s[1] = b1 ^ (~b3 & b5);
    s[10] = b10 ^ (~b12 & b14);
    s[11] = b11 ^ (~b13 & b15);
    s[20] = b20 ^ (~b22 & b24);
    s[21] = b21 ^ (~b23 & b25);
    s[30] = b30 ^ (~b32 & b34);
    s[31] = b31 ^ (~b33 & b35);
    s[40] = b40 ^ (~b42 & b44);
    s[41] = b41 ^ (~b43 & b45);
    s[2] = b2 ^ (~b4 & b6);
    s[3] = b3 ^ (~b5 & b7);
    s[12] = b12 ^ (~b14 & b16);
    s[13] = b13 ^ (~b15 & b17);
    s[22] = b22 ^ (~b24 & b26);
    s[23] = b23 ^ (~b25 & b27);
    s[32] = b32 ^ (~b34 & b36);
    s[33] = b33 ^ (~b35 & b37);
    s[42] = b42 ^ (~b44 & b46);
    s[43] = b43 ^ (~b45 & b47);
    s[4] = b4 ^ (~b6 & b8);
    s[5] = b5 ^ (~b7 & b9);
    s[14] = b14 ^ (~b16 & b18);
    s[15] = b15 ^ (~b17 & b19);
    s[24] = b24 ^ (~b26 & b28);
    s[25] = b25 ^ (~b27 & b29);
    s[34] = b34 ^ (~b36 & b38);
    s[35] = b35 ^ (~b37 & b39);
    s[44] = b44 ^ (~b46 & b48);
    s[45] = b45 ^ (~b47 & b49);
    s[6] = b6 ^ (~b8 & b0);
    s[7] = b7 ^ (~b9 & b1);
    s[16] = b16 ^ (~b18 & b10);
    s[17] = b17 ^ (~b19 & b11);
    s[26] = b26 ^ (~b28 & b20);
    s[27] = b27 ^ (~b29 & b21);
    s[36] = b36 ^ (~b38 & b30);
    s[37] = b37 ^ (~b39 & b31);
    s[46] = b46 ^ (~b48 & b40);
    s[47] = b47 ^ (~b49 & b41);
    s[8] = b8 ^ (~b0 & b2);
    s[9] = b9 ^ (~b1 & b3);
    s[18] = b18 ^ (~b10 & b12);
    s[19] = b19 ^ (~b11 & b13);
    s[28] = b28 ^ (~b20 & b22);
    s[29] = b29 ^ (~b21 & b23);
    s[38] = b38 ^ (~b30 & b32);
    s[39] = b39 ^ (~b31 & b33);
    s[48] = b48 ^ (~b40 & b42);
    s[49] = b49 ^ (~b41 & b43);
    s[0] ^= RC[n];
    s[1] ^= RC[n + 1];
  }
};
exports.keccak256 = methods.keccak_256;

},{}],"NYQx":[function(require,module,exports) {
/**
 * Hash-based Message Authentication Code implementation. Requires a message
 * digest object that can be obtained, for example, from forge.md.sha1 or
 * forge.md.md5.
 *
 * @author Dave Longley
 *
 * Copyright (c) 2010-2012 Digital Bazaar, Inc. All rights reserved.
 */
var forge = require('./forge');

require('./md');

require('./util');
/* HMAC API */


var hmac = module.exports = forge.hmac = forge.hmac || {};
/**
 * Creates an HMAC object that uses the given message digest object.
 *
 * @return an HMAC object.
 */

hmac.create = function () {
  // the hmac key to use
  var _key = null; // the message digest to use

  var _md = null; // the inner padding

  var _ipadding = null; // the outer padding

  var _opadding = null; // hmac context

  var ctx = {};
  /**
   * Starts or restarts the HMAC with the given key and message digest.
   *
   * @param md the message digest to use, null to reuse the previous one,
   *           a string to use builtin 'sha1', 'md5', 'sha256'.
   * @param key the key to use as a string, array of bytes, byte buffer,
   *           or null to reuse the previous key.
   */

  ctx.start = function (md, key) {
    if (md !== null) {
      if (typeof md === 'string') {
        // create builtin message digest
        md = md.toLowerCase();

        if (md in forge.md.algorithms) {
          _md = forge.md.algorithms[md].create();
        } else {
          throw new Error('Unknown hash algorithm "' + md + '"');
        }
      } else {
        // store message digest
        _md = md;
      }
    }

    if (key === null) {
      // reuse previous key
      key = _key;
    } else {
      if (typeof key === 'string') {
        // convert string into byte buffer
        key = forge.util.createBuffer(key);
      } else if (forge.util.isArray(key)) {
        // convert byte array into byte buffer
        var tmp = key;
        key = forge.util.createBuffer();

        for (var i = 0; i < tmp.length; ++i) {
          key.putByte(tmp[i]);
        }
      } // if key is longer than blocksize, hash it


      var keylen = key.length();

      if (keylen > _md.blockLength) {
        _md.start();

        _md.update(key.bytes());

        key = _md.digest();
      } // mix key into inner and outer padding
      // ipadding = [0x36 * blocksize] ^ key
      // opadding = [0x5C * blocksize] ^ key


      _ipadding = forge.util.createBuffer();
      _opadding = forge.util.createBuffer();
      keylen = key.length();

      for (var i = 0; i < keylen; ++i) {
        var tmp = key.at(i);

        _ipadding.putByte(0x36 ^ tmp);

        _opadding.putByte(0x5C ^ tmp);
      } // if key is shorter than blocksize, add additional padding


      if (keylen < _md.blockLength) {
        var tmp = _md.blockLength - keylen;

        for (var i = 0; i < tmp; ++i) {
          _ipadding.putByte(0x36);

          _opadding.putByte(0x5C);
        }
      }

      _key = key;
      _ipadding = _ipadding.bytes();
      _opadding = _opadding.bytes();
    } // digest is done like so: hash(opadding | hash(ipadding | message))
    // prepare to do inner hash
    // hash(ipadding | message)


    _md.start();

    _md.update(_ipadding);
  };
  /**
   * Updates the HMAC with the given message bytes.
   *
   * @param bytes the bytes to update with.
   */


  ctx.update = function (bytes) {
    _md.update(bytes);
  };
  /**
   * Produces the Message Authentication Code (MAC).
   *
   * @return a byte buffer containing the digest value.
   */


  ctx.getMac = function () {
    // digest is done like so: hash(opadding | hash(ipadding | message))
    // here we do the outer hashing
    var inner = _md.digest().bytes();

    _md.start();

    _md.update(_opadding);

    _md.update(inner);

    return _md.digest();
  }; // alias for getMac


  ctx.digest = ctx.getMac;
  return ctx;
};
},{"./forge":"o20S","./md":"Tsiu","./util":"lWyh"}],"t7OD":[function(require,module,exports) {
var Buffer = require("buffer").Buffer;
"use strict";
exports.__esModule = true;
var ERROR_MSG_INPUT = 'Input must be an string, Buffer or Uint8Array';
// For convenience, let people hash a string, not just a Uint8Array
function normalizeInput(input) {
    var ret;
    if (input instanceof Uint8Array) {
        ret = input;
    }
    else if (input instanceof Buffer) {
        ret = new Uint8Array(input);
    }
    else if (typeof (input) === 'string') {
        ret = new Uint8Array(Buffer.from(input, 'utf8'));
    }
    else {
        throw new Error(ERROR_MSG_INPUT);
    }
    return ret;
}
// Converts a Uint8Array to a hexadecimal string
// For example, toHex([255, 0, 255]) returns "ff00ff"
function toHex(bytes) {
    return Array.prototype.map.call(bytes, function (n) {
        return (n < 16 ? '0' : '') + n.toString(16);
    }).join('');
}
// Converts any value in [0...2^32-1] to an 8-character hex string
function uint32ToHex(val) {
    return (0x100000000 + val).toString(16).substring(1);
}
// For debugging: prints out hash state in the same format as the RFC
// sample computation exactly, so that you can diff
function debugPrint(label, arr, size) {
    var msg = '\n' + label + ' = ';
    for (var i = 0; i < arr.length; i += 2) {
        if (size === 32) {
            msg += uint32ToHex(arr[i]).toUpperCase();
            msg += ' ';
            msg += uint32ToHex(arr[i + 1]).toUpperCase();
        }
        else if (size === 64) {
            msg += uint32ToHex(arr[i + 1]).toUpperCase();
            msg += uint32ToHex(arr[i]).toUpperCase();
        }
        else
            throw new Error('Invalid size ' + size);
        if (i % 6 === 4) {
            msg += '\n' + new Array(label.length + 4).join(' ');
        }
        else if (i < arr.length - 2) {
            msg += ' ';
        }
    }
}
// For performance testing: generates N bytes of input, hashes M times
// Measures and prints MB/second hash performance each time
function testSpeed(hashFn, N, M) {
    var startMs = new Date().getTime();
    var input = new Uint8Array(N);
    for (var i = 0; i < N; i++) {
        input[i] = i % 256;
    }
    var genMs = new Date().getTime();
    startMs = genMs;
    for (i = 0; i < M; i++) {
        var hashHex = hashFn(input);
        var hashMs = new Date().getTime();
        var ms = hashMs - startMs;
        startMs = hashMs;
    }
}
// Blake2B in pure Javascript
// Adapted from the reference implementation in RFC7693
// Ported to Javascript by DC - https://github.com/dcposch
// 64-bit unsigned addition
// Sets v[a,a+1] += v[b,b+1]
// v should be a Uint32Array
function ADD64AA(v, a, b) {
    var o0 = v[a] + v[b];
    var o1 = v[a + 1] + v[b + 1];
    if (o0 >= 0x100000000) {
        o1++;
    }
    v[a] = o0;
    v[a + 1] = o1;
}
// 64-bit unsigned addition
// Sets v[a,a+1] += b
// b0 is the low 32 bits of b, b1 represents the high 32 bits
function ADD64AC(v, a, b0, b1) {
    var o0 = v[a] + b0;
    if (b0 < 0) {
        o0 += 0x100000000;
    }
    var o1 = v[a + 1] + b1;
    if (o0 >= 0x100000000) {
        o1++;
    }
    v[a] = o0;
    v[a + 1] = o1;
}
// Little-endian byte access
function B2B_GET32(arr, i) {
    return (arr[i] ^
        (arr[i + 1] << 8) ^
        (arr[i + 2] << 16) ^
        (arr[i + 3] << 24));
}
// G Mixing function
// The ROTRs are inlined for speed
function B2B_G(a, b, c, d, ix, iy) {
    var x0 = m[ix];
    var x1 = m[ix + 1];
    var y0 = m[iy];
    var y1 = m[iy + 1];
    ADD64AA(v, a, b); // v[a,a+1] += v[b,b+1] ... in JS we must store a uint64 as two uint32s
    ADD64AC(v, a, x0, x1); // v[a, a+1] += x ... x0 is the low 32 bits of x, x1 is the high 32 bits
    // v[d,d+1] = (v[d,d+1] xor v[a,a+1]) rotated to the right by 32 bits
    var xor0 = v[d] ^ v[a];
    var xor1 = v[d + 1] ^ v[a + 1];
    v[d] = xor1;
    v[d + 1] = xor0;
    ADD64AA(v, c, d);
    // v[b,b+1] = (v[b,b+1] xor v[c,c+1]) rotated right by 24 bits
    xor0 = v[b] ^ v[c];
    xor1 = v[b + 1] ^ v[c + 1];
    v[b] = (xor0 >>> 24) ^ (xor1 << 8);
    v[b + 1] = (xor1 >>> 24) ^ (xor0 << 8);
    ADD64AA(v, a, b);
    ADD64AC(v, a, y0, y1);
    // v[d,d+1] = (v[d,d+1] xor v[a,a+1]) rotated right by 16 bits
    xor0 = v[d] ^ v[a];
    xor1 = v[d + 1] ^ v[a + 1];
    v[d] = (xor0 >>> 16) ^ (xor1 << 16);
    v[d + 1] = (xor1 >>> 16) ^ (xor0 << 16);
    ADD64AA(v, c, d);
    // v[b,b+1] = (v[b,b+1] xor v[c,c+1]) rotated right by 63 bits
    xor0 = v[b] ^ v[c];
    xor1 = v[b + 1] ^ v[c + 1];
    v[b] = (xor1 >>> 31) ^ (xor0 << 1);
    v[b + 1] = (xor0 >>> 31) ^ (xor1 << 1);
}
// Initialization Vector
var BLAKE2B_IV32 = new Uint32Array([
    0xF3BCC908, 0x6A09E667, 0x84CAA73B, 0xBB67AE85,
    0xFE94F82B, 0x3C6EF372, 0x5F1D36F1, 0xA54FF53A,
    0xADE682D1, 0x510E527F, 0x2B3E6C1F, 0x9B05688C,
    0xFB41BD6B, 0x1F83D9AB, 0x137E2179, 0x5BE0CD19
]);
var SIGMA8 = [
    0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,
    14, 10, 4, 8, 9, 15, 13, 6, 1, 12, 0, 2, 11, 7, 5, 3,
    11, 8, 12, 0, 5, 2, 15, 13, 10, 14, 3, 6, 7, 1, 9, 4,
    7, 9, 3, 1, 13, 12, 11, 14, 2, 6, 5, 10, 4, 0, 15, 8,
    9, 0, 5, 7, 2, 4, 10, 15, 14, 1, 11, 12, 6, 8, 3, 13,
    2, 12, 6, 10, 0, 11, 8, 3, 4, 13, 7, 5, 15, 14, 1, 9,
    12, 5, 1, 15, 14, 13, 4, 10, 0, 7, 6, 3, 9, 2, 8, 11,
    13, 11, 7, 14, 12, 1, 3, 9, 5, 0, 15, 4, 8, 6, 2, 10,
    6, 15, 14, 9, 11, 3, 0, 8, 12, 2, 13, 7, 1, 4, 10, 5,
    10, 2, 8, 4, 7, 6, 1, 5, 15, 11, 9, 14, 3, 12, 13, 0,
    0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,
    14, 10, 4, 8, 9, 15, 13, 6, 1, 12, 0, 2, 11, 7, 5, 3
];
// These are offsets into a uint64 buffer.
// Multiply them all by 2 to make them offsets into a uint32 buffer,
// because this is Javascript and we don't have uint64s
var SIGMA82 = new Uint8Array(SIGMA8.map(function (x) {
    return x * 2;
}));
// Compression function. 'last' flag indicates last block.
// Note we're representing 16 uint64s as 32 uint32s
var v = new Uint32Array(32);
var m = new Uint32Array(32);
function blake2bCompress(ctx, last) {
    var i = 0;
    // init work variables
    for (i = 0; i < 16; i++) {
        v[i] = ctx.h[i];
        v[i + 16] = BLAKE2B_IV32[i];
    }
    // low 64 bits of offset
    v[24] = v[24] ^ ctx.t;
    v[25] = v[25] ^ (ctx.t / 0x100000000);
    // high 64 bits not supported, offset may not be higher than 2**53-1
    // last block flag set ?
    if (last) {
        v[28] = ~v[28];
        v[29] = ~v[29];
    }
    // get little-endian words
    for (i = 0; i < 32; i++) {
        m[i] = B2B_GET32(ctx.b, 4 * i);
    }
    // twelve rounds of mixing
    // uncomment the DebugPrint calls to log the computation
    // and match the RFC sample documentation
    // util.debugPrint('          m[16]', m, 64)
    for (i = 0; i < 12; i++) {
        // util.debugPrint('   (i=' + (i < 10 ? ' ' : '') + i + ') v[16]', v, 64)
        B2B_G(0, 8, 16, 24, SIGMA82[i * 16 + 0], SIGMA82[i * 16 + 1]);
        B2B_G(2, 10, 18, 26, SIGMA82[i * 16 + 2], SIGMA82[i * 16 + 3]);
        B2B_G(4, 12, 20, 28, SIGMA82[i * 16 + 4], SIGMA82[i * 16 + 5]);
        B2B_G(6, 14, 22, 30, SIGMA82[i * 16 + 6], SIGMA82[i * 16 + 7]);
        B2B_G(0, 10, 20, 30, SIGMA82[i * 16 + 8], SIGMA82[i * 16 + 9]);
        B2B_G(2, 12, 22, 24, SIGMA82[i * 16 + 10], SIGMA82[i * 16 + 11]);
        B2B_G(4, 14, 16, 26, SIGMA82[i * 16 + 12], SIGMA82[i * 16 + 13]);
        B2B_G(6, 8, 18, 28, SIGMA82[i * 16 + 14], SIGMA82[i * 16 + 15]);
    }
    // util.debugPrint('   (i=12) v[16]', v, 64)
    for (i = 0; i < 16; i++) {
        ctx.h[i] = ctx.h[i] ^ v[i] ^ v[i + 16];
    }
    // util.debugPrint('h[8]', ctx.h, 64)
}
// Creates a BLAKE2b hashing context
// Requires an output length between 1 and 64 bytes
// Takes an optional Uint8Array key
function blake2bInit(outlen, key) {
    if (outlen === 0 || outlen > 64) {
        throw new Error('Illegal output length, expected 0 < length <= 64');
    }
    if (key && key.length > 64) {
        throw new Error('Illegal key, expected Uint8Array with 0 < length <= 64');
    }
    // state, 'param block'
    var ctx = {
        b: new Uint8Array(128),
        h: new Uint32Array(16),
        t: 0,
        c: 0,
        outlen: outlen // output length in bytes
    };
    // initialize hash state
    for (var i = 0; i < 16; i++) {
        ctx.h[i] = BLAKE2B_IV32[i];
    }
    var keylen = key ? key.length : 0;
    ctx.h[0] ^= 0x01010000 ^ (keylen << 8) ^ outlen;
    // key the hash, if applicable
    if (key) {
        blake2bUpdate(ctx, key);
        // at the end
        ctx.c = 128;
    }
    return ctx;
}
exports.blake2bInit = blake2bInit;
// Updates a BLAKE2b streaming hash
// Requires hash context and Uint8Array (byte array)
function blake2bUpdate(ctx, input) {
    for (var i = 0; i < input.length; i++) {
        if (ctx.c === 128) { // buffer full ?
            ctx.t += ctx.c; // add counters
            blake2bCompress(ctx, false); // compress (not last)
            ctx.c = 0; // counter to zero
        }
        ctx.b[ctx.c++] = input[i];
    }
}
exports.blake2bUpdate = blake2bUpdate;
// Completes a BLAKE2b streaming hash
// Returns a Uint8Array containing the message digest
function blake2bFinal(ctx) {
    ctx.t += ctx.c; // mark last block offset
    while (ctx.c < 128) { // fill up with zeros
        ctx.b[ctx.c++] = 0;
    }
    blake2bCompress(ctx, true); // final block flag = 1
    // little endian convert and store
    var out = new Uint8Array(ctx.outlen);
    for (var i = 0; i < ctx.outlen; i++) {
        out[i] = ctx.h[i >> 2] >> (8 * (i & 3));
    }
    return out;
}
exports.blake2bFinal = blake2bFinal;
// Computes the BLAKE2B hash of a string or byte array, and returns a Uint8Array
//
// Returns a n-byte Uint8Array
//
// Parameters:
// - input - the input bytes, as a string, Buffer or Uint8Array
// - key - optional key Uint8Array, up to 64 bytes
// - outlen - optional output length in bytes, default 64
function blake2b(input, key, outlen) {
    // preprocess inputs
    outlen = outlen || 64;
    input = normalizeInput(input);
    // do the math
    var ctx = blake2bInit(outlen, key);
    blake2bUpdate(ctx, input);
    return blake2bFinal(ctx);
}
exports.blake2b = blake2b;
// Computes the BLAKE2B hash of a string or byte array
//
// Returns an n-byte hash in hex, all lowercase
//
// Parameters:
// - input - the input bytes, as a string, Buffer, or Uint8Array
// - key - optional key Uint8Array, up to 64 bytes
// - outlen - optional output length in bytes, default 64
function blake2bHex(input, key, outlen) {
    var output = blake2b(input, key, outlen);
    return toHex(output);
}
exports.blake2bHex = blake2bHex;

},{"buffer":"XyCw"}],"Teij":[function(require,module,exports) {
"use strict";
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
var param_1 = require("../conversions/param");
var sha3_1 = require("../libs/sha3");
// @ts-ignore
var forgeHmac = __importStar(require("node-forge/lib/hmac"));
// @ts-ignore
var forgeMd = __importStar(require("node-forge/lib/md"));
require("node-forge/lib/sha256");
var blake = __importStar(require("../libs/blake2b"));
var string_bytes_1 = require("../conversions/string-bytes");
exports._hashChain = function (input) {
    return param_1._fromIn(exports.keccak(exports.blake2b(param_1._fromIn(input))));
};
exports.sha256 = function (input) {
    var md = forgeMd.algorithms.sha256.create();
    md.update(string_bytes_1.bytesToString(input, 'raw'));
    return string_bytes_1.stringToBytes(md.digest().getBytes(), 'raw');
};
exports.blake2b = function (input) {
    return blake.blake2b(param_1._fromIn(input), null, 32);
};
exports.keccak = function (input) {
    return param_1._fromIn(sha3_1.keccak256.array(param_1._fromIn(input)));
};
exports.hmacSHA256 = function (message, key) {
    var hmac = forgeHmac.create();
    hmac.start('sha256', string_bytes_1.bytesToString(param_1._fromIn(key), 'raw'));
    hmac.update(string_bytes_1.bytesToString(param_1._fromIn(message), 'raw'));
    return string_bytes_1.stringToBytes(hmac.digest().getBytes(), 'raw');
};

},{"../conversions/param":"WDpF","../libs/sha3":"exyY","node-forge/lib/hmac":"NYQx","node-forge/lib/md":"Tsiu","node-forge/lib/sha256":"pZAX","../libs/blake2b":"t7OD","../conversions/string-bytes":"WqH7"}],"UpB3":[function(require,module,exports) {
"use strict";
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spread = (this && this.__spread) || function () {
    for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));
    return ar;
};
Object.defineProperty(exports, "__esModule", { value: true });
var param_1 = require("../conversions/param");
exports.concat = function () {
    var arrays = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        arrays[_i] = arguments[_i];
    }
    return arrays.reduce(function (a, b) { return Uint8Array.from(__spread(a, param_1._fromIn(b))); }, new Uint8Array(0));
};
exports.split = function (binary) {
    var sizes = [];
    for (var _i = 1; _i < arguments.length; _i++) {
        sizes[_i - 1] = arguments[_i];
    }
    var _a = sizes.reduce(function (a, s) { return ({ arr: a.arr.slice(s), r: __spread(a.r, [a.arr.slice(0, s)]) }); }, { arr: param_1._fromIn(binary), r: [] }), r = _a.r, arr = _a.arr;
    return __spread(r, [arr]);
};

},{"../conversions/param":"WDpF"}],"ymEv":[function(require,module,exports) {
'use strict'
// Curve25519 signatures (and also key agreement)
// like in the early Axolotl.
//
// Written by Dmitry Chestnykh.
// You can use it under MIT or CC0 license.
exports.__esModule = true
// Curve25519 signatures idea and math by Trevor Perrin
// https://moderncrypto.org/mail-archive/curves/2014/000205.html
// Derived from TweetNaCl.js (https://tweetnacl.js.org/)
// Ported in 2014 by Dmitry Chestnykh and Devi Mandiri.
// Public domain.
//
// Implementation derived from TweetNaCl version 20140427.
// See for details: http://tweetnacl.cr.yp.to/
var axlsign = Object.create(null)
var gf = function (init) {
  var i, r = new Float64Array(16)
  if (init)
    for (i = 0; i < init.length; i++)
      r[i] = init[i]
  return r
}
var _0 = new Uint8Array(16)
var _9 = new Uint8Array(32)
_9[0] = 9
var gf0 = gf(), gf1 = gf([1]), _121665 = gf([0xdb41, 1]), D = gf([0x78a3, 0x1359, 0x4dca, 0x75eb, 0xd8ab, 0x4141, 0x0a4d, 0x0070, 0xe898, 0x7779, 0x4079, 0x8cc7, 0xfe73, 0x2b6f, 0x6cee, 0x5203]), D2 = gf([0xf159, 0x26b2, 0x9b94, 0xebd6, 0xb156, 0x8283, 0x149a, 0x00e0, 0xd130, 0xeef3, 0x80f2, 0x198e, 0xfce7, 0x56df, 0xd9dc, 0x2406]), X = gf([0xd51a, 0x8f25, 0x2d60, 0xc956, 0xa7b2, 0x9525, 0xc760, 0x692c, 0xdc5c, 0xfdd6, 0xe231, 0xc0a4, 0x53fe, 0xcd6e, 0x36d3, 0x2169]), Y = gf([0x6658, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666]), I = gf([0xa0b0, 0x4a0e, 0x1b27, 0xc4ee, 0xe478, 0xad2f, 0x1806, 0x2f43, 0xd7a7, 0x3dfb, 0x0099, 0x2b4d, 0xdf0b, 0x4fc1, 0x2480, 0x2b83])
function ts64(x, i, h, l) {
  x[i] = (h >> 24) & 0xff
  x[i + 1] = (h >> 16) & 0xff
  x[i + 2] = (h >> 8) & 0xff
  x[i + 3] = h & 0xff
  x[i + 4] = (l >> 24) & 0xff
  x[i + 5] = (l >> 16) & 0xff
  x[i + 6] = (l >> 8) & 0xff
  x[i + 7] = l & 0xff
}
function vn(x, xi, y, yi, n) {
  var i, d = 0
  for (i = 0; i < n; i++)
    d |= x[xi + i] ^ y[yi + i]
  return (1 & ((d - 1) >>> 8)) - 1
}
function crypto_verify_32(x, xi, y, yi) {
  return vn(x, xi, y, yi, 32)
}
function set25519(r, a) {
  for (var i = 0; i < 16; i++)
    r[i] = a[i] | 0
}
function car25519(o) {
  var i, v, c = 1
  for (i = 0; i < 16; i++) {
    v = o[i] + c + 65535
    c = Math.floor(v / 65536)
    o[i] = v - c * 65536
  }
  o[0] += c - 1 + 37 * (c - 1)
}
function sel25519(p, q, b) {
  var t, c = ~(b - 1)
  for (var i = 0; i < 16; i++) {
    t = c & (p[i] ^ q[i])
    p[i] ^= t
    q[i] ^= t
  }
}
function pack25519(o, n) {
  var i, j, b
  var m = gf(), t = gf()
  for (i = 0; i < 16; i++)
    t[i] = n[i]
  car25519(t)
  car25519(t)
  car25519(t)
  for (j = 0; j < 2; j++) {
    m[0] = t[0] - 0xffed
    for (i = 1; i < 15; i++) {
      m[i] = t[i] - 0xffff - ((m[i - 1] >> 16) & 1)
      m[i - 1] &= 0xffff
    }
    m[15] = t[15] - 0x7fff - ((m[14] >> 16) & 1)
    b = (m[15] >> 16) & 1
    m[14] &= 0xffff
    sel25519(t, m, 1 - b)
  }
  for (i = 0; i < 16; i++) {
    o[2 * i] = t[i] & 0xff
    o[2 * i + 1] = t[i] >> 8
  }
}
function neq25519(a, b) {
  var c = new Uint8Array(32), d = new Uint8Array(32)
  pack25519(c, a)
  pack25519(d, b)
  return crypto_verify_32(c, 0, d, 0)
}
function par25519(a) {
  var d = new Uint8Array(32)
  pack25519(d, a)
  return d[0] & 1
}
function unpack25519(o, n) {
  for (var i = 0; i < 16; i++)
    o[i] = n[2 * i] + (n[2 * i + 1] << 8)
  o[15] &= 0x7fff
}
function A(o, a, b) {
  for (var i = 0; i < 16; i++)
    o[i] = a[i] + b[i]
}
function Z(o, a, b) {
  for (var i = 0; i < 16; i++)
    o[i] = a[i] - b[i]
}
function M(o, a, b) {
  var v, c, t0 = 0, t1 = 0, t2 = 0, t3 = 0, t4 = 0, t5 = 0, t6 = 0, t7 = 0, t8 = 0, t9 = 0, t10 = 0, t11 = 0, t12 = 0, t13 = 0, t14 = 0, t15 = 0, t16 = 0, t17 = 0, t18 = 0, t19 = 0, t20 = 0, t21 = 0, t22 = 0, t23 = 0, t24 = 0, t25 = 0, t26 = 0, t27 = 0, t28 = 0, t29 = 0, t30 = 0, b0 = b[0], b1 = b[1], b2 = b[2], b3 = b[3], b4 = b[4], b5 = b[5], b6 = b[6], b7 = b[7], b8 = b[8], b9 = b[9], b10 = b[10], b11 = b[11], b12 = b[12], b13 = b[13], b14 = b[14], b15 = b[15]
  v = a[0]
  t0 += v * b0
  t1 += v * b1
  t2 += v * b2
  t3 += v * b3
  t4 += v * b4
  t5 += v * b5
  t6 += v * b6
  t7 += v * b7
  t8 += v * b8
  t9 += v * b9
  t10 += v * b10
  t11 += v * b11
  t12 += v * b12
  t13 += v * b13
  t14 += v * b14
  t15 += v * b15
  v = a[1]
  t1 += v * b0
  t2 += v * b1
  t3 += v * b2
  t4 += v * b3
  t5 += v * b4
  t6 += v * b5
  t7 += v * b6
  t8 += v * b7
  t9 += v * b8
  t10 += v * b9
  t11 += v * b10
  t12 += v * b11
  t13 += v * b12
  t14 += v * b13
  t15 += v * b14
  t16 += v * b15
  v = a[2]
  t2 += v * b0
  t3 += v * b1
  t4 += v * b2
  t5 += v * b3
  t6 += v * b4
  t7 += v * b5
  t8 += v * b6
  t9 += v * b7
  t10 += v * b8
  t11 += v * b9
  t12 += v * b10
  t13 += v * b11
  t14 += v * b12
  t15 += v * b13
  t16 += v * b14
  t17 += v * b15
  v = a[3]
  t3 += v * b0
  t4 += v * b1
  t5 += v * b2
  t6 += v * b3
  t7 += v * b4
  t8 += v * b5
  t9 += v * b6
  t10 += v * b7
  t11 += v * b8
  t12 += v * b9
  t13 += v * b10
  t14 += v * b11
  t15 += v * b12
  t16 += v * b13
  t17 += v * b14
  t18 += v * b15
  v = a[4]
  t4 += v * b0
  t5 += v * b1
  t6 += v * b2
  t7 += v * b3
  t8 += v * b4
  t9 += v * b5
  t10 += v * b6
  t11 += v * b7
  t12 += v * b8
  t13 += v * b9
  t14 += v * b10
  t15 += v * b11
  t16 += v * b12
  t17 += v * b13
  t18 += v * b14
  t19 += v * b15
  v = a[5]
  t5 += v * b0
  t6 += v * b1
  t7 += v * b2
  t8 += v * b3
  t9 += v * b4
  t10 += v * b5
  t11 += v * b6
  t12 += v * b7
  t13 += v * b8
  t14 += v * b9
  t15 += v * b10
  t16 += v * b11
  t17 += v * b12
  t18 += v * b13
  t19 += v * b14
  t20 += v * b15
  v = a[6]
  t6 += v * b0
  t7 += v * b1
  t8 += v * b2
  t9 += v * b3
  t10 += v * b4
  t11 += v * b5
  t12 += v * b6
  t13 += v * b7
  t14 += v * b8
  t15 += v * b9
  t16 += v * b10
  t17 += v * b11
  t18 += v * b12
  t19 += v * b13
  t20 += v * b14
  t21 += v * b15
  v = a[7]
  t7 += v * b0
  t8 += v * b1
  t9 += v * b2
  t10 += v * b3
  t11 += v * b4
  t12 += v * b5
  t13 += v * b6
  t14 += v * b7
  t15 += v * b8
  t16 += v * b9
  t17 += v * b10
  t18 += v * b11
  t19 += v * b12
  t20 += v * b13
  t21 += v * b14
  t22 += v * b15
  v = a[8]
  t8 += v * b0
  t9 += v * b1
  t10 += v * b2
  t11 += v * b3
  t12 += v * b4
  t13 += v * b5
  t14 += v * b6
  t15 += v * b7
  t16 += v * b8
  t17 += v * b9
  t18 += v * b10
  t19 += v * b11
  t20 += v * b12
  t21 += v * b13
  t22 += v * b14
  t23 += v * b15
  v = a[9]
  t9 += v * b0
  t10 += v * b1
  t11 += v * b2
  t12 += v * b3
  t13 += v * b4
  t14 += v * b5
  t15 += v * b6
  t16 += v * b7
  t17 += v * b8
  t18 += v * b9
  t19 += v * b10
  t20 += v * b11
  t21 += v * b12
  t22 += v * b13
  t23 += v * b14
  t24 += v * b15
  v = a[10]
  t10 += v * b0
  t11 += v * b1
  t12 += v * b2
  t13 += v * b3
  t14 += v * b4
  t15 += v * b5
  t16 += v * b6
  t17 += v * b7
  t18 += v * b8
  t19 += v * b9
  t20 += v * b10
  t21 += v * b11
  t22 += v * b12
  t23 += v * b13
  t24 += v * b14
  t25 += v * b15
  v = a[11]
  t11 += v * b0
  t12 += v * b1
  t13 += v * b2
  t14 += v * b3
  t15 += v * b4
  t16 += v * b5
  t17 += v * b6
  t18 += v * b7
  t19 += v * b8
  t20 += v * b9
  t21 += v * b10
  t22 += v * b11
  t23 += v * b12
  t24 += v * b13
  t25 += v * b14
  t26 += v * b15
  v = a[12]
  t12 += v * b0
  t13 += v * b1
  t14 += v * b2
  t15 += v * b3
  t16 += v * b4
  t17 += v * b5
  t18 += v * b6
  t19 += v * b7
  t20 += v * b8
  t21 += v * b9
  t22 += v * b10
  t23 += v * b11
  t24 += v * b12
  t25 += v * b13
  t26 += v * b14
  t27 += v * b15
  v = a[13]
  t13 += v * b0
  t14 += v * b1
  t15 += v * b2
  t16 += v * b3
  t17 += v * b4
  t18 += v * b5
  t19 += v * b6
  t20 += v * b7
  t21 += v * b8
  t22 += v * b9
  t23 += v * b10
  t24 += v * b11
  t25 += v * b12
  t26 += v * b13
  t27 += v * b14
  t28 += v * b15
  v = a[14]
  t14 += v * b0
  t15 += v * b1
  t16 += v * b2
  t17 += v * b3
  t18 += v * b4
  t19 += v * b5
  t20 += v * b6
  t21 += v * b7
  t22 += v * b8
  t23 += v * b9
  t24 += v * b10
  t25 += v * b11
  t26 += v * b12
  t27 += v * b13
  t28 += v * b14
  t29 += v * b15
  v = a[15]
  t15 += v * b0
  t16 += v * b1
  t17 += v * b2
  t18 += v * b3
  t19 += v * b4
  t20 += v * b5
  t21 += v * b6
  t22 += v * b7
  t23 += v * b8
  t24 += v * b9
  t25 += v * b10
  t26 += v * b11
  t27 += v * b12
  t28 += v * b13
  t29 += v * b14
  t30 += v * b15
  t0 += 38 * t16
  t1 += 38 * t17
  t2 += 38 * t18
  t3 += 38 * t19
  t4 += 38 * t20
  t5 += 38 * t21
  t6 += 38 * t22
  t7 += 38 * t23
  t8 += 38 * t24
  t9 += 38 * t25
  t10 += 38 * t26
  t11 += 38 * t27
  t12 += 38 * t28
  t13 += 38 * t29
  t14 += 38 * t30
  // t15 left as is
  // first car
  c = 1
  v = t0 + c + 65535
  c = Math.floor(v / 65536)
  t0 = v - c * 65536
  v = t1 + c + 65535
  c = Math.floor(v / 65536)
  t1 = v - c * 65536
  v = t2 + c + 65535
  c = Math.floor(v / 65536)
  t2 = v - c * 65536
  v = t3 + c + 65535
  c = Math.floor(v / 65536)
  t3 = v - c * 65536
  v = t4 + c + 65535
  c = Math.floor(v / 65536)
  t4 = v - c * 65536
  v = t5 + c + 65535
  c = Math.floor(v / 65536)
  t5 = v - c * 65536
  v = t6 + c + 65535
  c = Math.floor(v / 65536)
  t6 = v - c * 65536
  v = t7 + c + 65535
  c = Math.floor(v / 65536)
  t7 = v - c * 65536
  v = t8 + c + 65535
  c = Math.floor(v / 65536)
  t8 = v - c * 65536
  v = t9 + c + 65535
  c = Math.floor(v / 65536)
  t9 = v - c * 65536
  v = t10 + c + 65535
  c = Math.floor(v / 65536)
  t10 = v - c * 65536
  v = t11 + c + 65535
  c = Math.floor(v / 65536)
  t11 = v - c * 65536
  v = t12 + c + 65535
  c = Math.floor(v / 65536)
  t12 = v - c * 65536
  v = t13 + c + 65535
  c = Math.floor(v / 65536)
  t13 = v - c * 65536
  v = t14 + c + 65535
  c = Math.floor(v / 65536)
  t14 = v - c * 65536
  v = t15 + c + 65535
  c = Math.floor(v / 65536)
  t15 = v - c * 65536
  t0 += c - 1 + 37 * (c - 1)
  // second car
  c = 1
  v = t0 + c + 65535
  c = Math.floor(v / 65536)
  t0 = v - c * 65536
  v = t1 + c + 65535
  c = Math.floor(v / 65536)
  t1 = v - c * 65536
  v = t2 + c + 65535
  c = Math.floor(v / 65536)
  t2 = v - c * 65536
  v = t3 + c + 65535
  c = Math.floor(v / 65536)
  t3 = v - c * 65536
  v = t4 + c + 65535
  c = Math.floor(v / 65536)
  t4 = v - c * 65536
  v = t5 + c + 65535
  c = Math.floor(v / 65536)
  t5 = v - c * 65536
  v = t6 + c + 65535
  c = Math.floor(v / 65536)
  t6 = v - c * 65536
  v = t7 + c + 65535
  c = Math.floor(v / 65536)
  t7 = v - c * 65536
  v = t8 + c + 65535
  c = Math.floor(v / 65536)
  t8 = v - c * 65536
  v = t9 + c + 65535
  c = Math.floor(v / 65536)
  t9 = v - c * 65536
  v = t10 + c + 65535
  c = Math.floor(v / 65536)
  t10 = v - c * 65536
  v = t11 + c + 65535
  c = Math.floor(v / 65536)
  t11 = v - c * 65536
  v = t12 + c + 65535
  c = Math.floor(v / 65536)
  t12 = v - c * 65536
  v = t13 + c + 65535
  c = Math.floor(v / 65536)
  t13 = v - c * 65536
  v = t14 + c + 65535
  c = Math.floor(v / 65536)
  t14 = v - c * 65536
  v = t15 + c + 65535
  c = Math.floor(v / 65536)
  t15 = v - c * 65536
  t0 += c - 1 + 37 * (c - 1)
  o[0] = t0
  o[1] = t1
  o[2] = t2
  o[3] = t3
  o[4] = t4
  o[5] = t5
  o[6] = t6
  o[7] = t7
  o[8] = t8
  o[9] = t9
  o[10] = t10
  o[11] = t11
  o[12] = t12
  o[13] = t13
  o[14] = t14
  o[15] = t15
}
function S(o, a) {
  M(o, a, a)
}
function inv25519(o, i) {
  var c = gf()
  var a
  for (a = 0; a < 16; a++)
    c[a] = i[a]
  for (a = 253; a >= 0; a--) {
    S(c, c)
    if (a !== 2 && a !== 4)
      M(c, c, i)
  }
  for (a = 0; a < 16; a++)
    o[a] = c[a]
}
function pow2523(o, i) {
  var c = gf()
  var a
  for (a = 0; a < 16; a++)
    c[a] = i[a]
  for (a = 250; a >= 0; a--) {
    S(c, c)
    if (a !== 1)
      M(c, c, i)
  }
  for (a = 0; a < 16; a++)
    o[a] = c[a]
}
function crypto_scalarmult(q, n, p) {
  var z = new Uint8Array(32)
  var x = new Float64Array(80)
  var r, i
  var a = gf(), b = gf(), c = gf(), d = gf(), e = gf(), f = gf()
  for (i = 0; i < 31; i++)
    z[i] = n[i]
  z[31] = (n[31] & 127) | 64
  z[0] &= 248
  unpack25519(x, p)
  for (i = 0; i < 16; i++) {
    b[i] = x[i]
    d[i] = a[i] = c[i] = 0
  }
  a[0] = d[0] = 1
  for (i = 254; i >= 0; --i) {
    r = (z[i >>> 3] >>> (i & 7)) & 1
    sel25519(a, b, r)
    sel25519(c, d, r)
    A(e, a, c)
    Z(a, a, c)
    A(c, b, d)
    Z(b, b, d)
    S(d, e)
    S(f, a)
    M(a, c, a)
    M(c, b, e)
    A(e, a, c)
    Z(a, a, c)
    S(b, a)
    Z(c, d, f)
    M(a, c, _121665)
    A(a, a, d)
    M(c, c, a)
    M(a, d, f)
    M(d, b, x)
    S(b, e)
    sel25519(a, b, r)
    sel25519(c, d, r)
  }
  for (i = 0; i < 16; i++) {
    x[i + 16] = a[i]
    x[i + 32] = c[i]
    x[i + 48] = b[i]
    x[i + 64] = d[i]
  }
  var x32 = x.subarray(32)
  var x16 = x.subarray(16)
  inv25519(x32, x32)
  M(x16, x16, x32)
  pack25519(q, x16)
  return 0
}
function crypto_scalarmult_base(q, n) {
  return crypto_scalarmult(q, n, _9)
}
var K = [
  0x428a2f98, 0xd728ae22, 0x71374491, 0x23ef65cd,
  0xb5c0fbcf, 0xec4d3b2f, 0xe9b5dba5, 0x8189dbbc,
  0x3956c25b, 0xf348b538, 0x59f111f1, 0xb605d019,
  0x923f82a4, 0xaf194f9b, 0xab1c5ed5, 0xda6d8118,
  0xd807aa98, 0xa3030242, 0x12835b01, 0x45706fbe,
  0x243185be, 0x4ee4b28c, 0x550c7dc3, 0xd5ffb4e2,
  0x72be5d74, 0xf27b896f, 0x80deb1fe, 0x3b1696b1,
  0x9bdc06a7, 0x25c71235, 0xc19bf174, 0xcf692694,
  0xe49b69c1, 0x9ef14ad2, 0xefbe4786, 0x384f25e3,
  0x0fc19dc6, 0x8b8cd5b5, 0x240ca1cc, 0x77ac9c65,
  0x2de92c6f, 0x592b0275, 0x4a7484aa, 0x6ea6e483,
  0x5cb0a9dc, 0xbd41fbd4, 0x76f988da, 0x831153b5,
  0x983e5152, 0xee66dfab, 0xa831c66d, 0x2db43210,
  0xb00327c8, 0x98fb213f, 0xbf597fc7, 0xbeef0ee4,
  0xc6e00bf3, 0x3da88fc2, 0xd5a79147, 0x930aa725,
  0x06ca6351, 0xe003826f, 0x14292967, 0x0a0e6e70,
  0x27b70a85, 0x46d22ffc, 0x2e1b2138, 0x5c26c926,
  0x4d2c6dfc, 0x5ac42aed, 0x53380d13, 0x9d95b3df,
  0x650a7354, 0x8baf63de, 0x766a0abb, 0x3c77b2a8,
  0x81c2c92e, 0x47edaee6, 0x92722c85, 0x1482353b,
  0xa2bfe8a1, 0x4cf10364, 0xa81a664b, 0xbc423001,
  0xc24b8b70, 0xd0f89791, 0xc76c51a3, 0x0654be30,
  0xd192e819, 0xd6ef5218, 0xd6990624, 0x5565a910,
  0xf40e3585, 0x5771202a, 0x106aa070, 0x32bbd1b8,
  0x19a4c116, 0xb8d2d0c8, 0x1e376c08, 0x5141ab53,
  0x2748774c, 0xdf8eeb99, 0x34b0bcb5, 0xe19b48a8,
  0x391c0cb3, 0xc5c95a63, 0x4ed8aa4a, 0xe3418acb,
  0x5b9cca4f, 0x7763e373, 0x682e6ff3, 0xd6b2b8a3,
  0x748f82ee, 0x5defb2fc, 0x78a5636f, 0x43172f60,
  0x84c87814, 0xa1f0ab72, 0x8cc70208, 0x1a6439ec,
  0x90befffa, 0x23631e28, 0xa4506ceb, 0xde82bde9,
  0xbef9a3f7, 0xb2c67915, 0xc67178f2, 0xe372532b,
  0xca273ece, 0xea26619c, 0xd186b8c7, 0x21c0c207,
  0xeada7dd6, 0xcde0eb1e, 0xf57d4f7f, 0xee6ed178,
  0x06f067aa, 0x72176fba, 0x0a637dc5, 0xa2c898a6,
  0x113f9804, 0xbef90dae, 0x1b710b35, 0x131c471b,
  0x28db77f5, 0x23047d84, 0x32caab7b, 0x40c72493,
  0x3c9ebe0a, 0x15c9bebc, 0x431d67c4, 0x9c100d4c,
  0x4cc5d4be, 0xcb3e42b6, 0x597f299c, 0xfc657e2a,
  0x5fcb6fab, 0x3ad6faec, 0x6c44198c, 0x4a475817,
]
function crypto_hashblocks_hl(hh, hl, m, n) {
  var wh = new Int32Array(16), wl = new Int32Array(16)
  var bh0, bh1, bh2, bh3, bh4, bh5, bh6, bh7, bl0, bl1, bl2, bl3, bl4, bl5, bl6, bl7, th, tl, i, j, h, l, a, b, c, d
  var ah0 = hh[0], ah1 = hh[1], ah2 = hh[2], ah3 = hh[3], ah4 = hh[4], ah5 = hh[5], ah6 = hh[6], ah7 = hh[7], al0 = hl[0], al1 = hl[1], al2 = hl[2], al3 = hl[3], al4 = hl[4], al5 = hl[5], al6 = hl[6], al7 = hl[7]
  var pos = 0
  while (n >= 128) {
    for (i = 0; i < 16; i++) {
      j = 8 * i + pos
      wh[i] = (m[j + 0] << 24) | (m[j + 1] << 16) | (m[j + 2] << 8) | m[j + 3]
      wl[i] = (m[j + 4] << 24) | (m[j + 5] << 16) | (m[j + 6] << 8) | m[j + 7]
    }
    for (i = 0; i < 80; i++) {
      bh0 = ah0
      bh1 = ah1
      bh2 = ah2
      bh3 = ah3
      bh4 = ah4
      bh5 = ah5
      bh6 = ah6
      bh7 = ah7
      bl0 = al0
      bl1 = al1
      bl2 = al2
      bl3 = al3
      bl4 = al4
      bl5 = al5
      bl6 = al6
      bl7 = al7
      // add
      h = ah7
      l = al7
      a = l & 0xffff
      b = l >>> 16
      c = h & 0xffff
      d = h >>> 16
      // Sigma1
      h = ((ah4 >>> 14) | (al4 << (32 - 14))) ^ ((ah4 >>> 18) | (al4 << (32 - 18))) ^ ((al4 >>> (41 - 32)) | (ah4 << (32 - (41 - 32))))
      l = ((al4 >>> 14) | (ah4 << (32 - 14))) ^ ((al4 >>> 18) | (ah4 << (32 - 18))) ^ ((ah4 >>> (41 - 32)) | (al4 << (32 - (41 - 32))))
      a += l & 0xffff
      b += l >>> 16
      c += h & 0xffff
      d += h >>> 16
      // Ch
      h = (ah4 & ah5) ^ (~ah4 & ah6)
      l = (al4 & al5) ^ (~al4 & al6)
      a += l & 0xffff
      b += l >>> 16
      c += h & 0xffff
      d += h >>> 16
      // K
      h = K[i * 2]
      l = K[i * 2 + 1]
      a += l & 0xffff
      b += l >>> 16
      c += h & 0xffff
      d += h >>> 16
      // w
      h = wh[i % 16]
      l = wl[i % 16]
      a += l & 0xffff
      b += l >>> 16
      c += h & 0xffff
      d += h >>> 16
      b += a >>> 16
      c += b >>> 16
      d += c >>> 16
      th = c & 0xffff | d << 16
      tl = a & 0xffff | b << 16
      // add
      h = th
      l = tl
      a = l & 0xffff
      b = l >>> 16
      c = h & 0xffff
      d = h >>> 16
      // Sigma0
      h = ((ah0 >>> 28) | (al0 << (32 - 28))) ^ ((al0 >>> (34 - 32)) | (ah0 << (32 - (34 - 32)))) ^ ((al0 >>> (39 - 32)) | (ah0 << (32 - (39 - 32))))
      l = ((al0 >>> 28) | (ah0 << (32 - 28))) ^ ((ah0 >>> (34 - 32)) | (al0 << (32 - (34 - 32)))) ^ ((ah0 >>> (39 - 32)) | (al0 << (32 - (39 - 32))))
      a += l & 0xffff
      b += l >>> 16
      c += h & 0xffff
      d += h >>> 16
      // Maj
      h = (ah0 & ah1) ^ (ah0 & ah2) ^ (ah1 & ah2)
      l = (al0 & al1) ^ (al0 & al2) ^ (al1 & al2)
      a += l & 0xffff
      b += l >>> 16
      c += h & 0xffff
      d += h >>> 16
      b += a >>> 16
      c += b >>> 16
      d += c >>> 16
      bh7 = (c & 0xffff) | (d << 16)
      bl7 = (a & 0xffff) | (b << 16)
      // add
      h = bh3
      l = bl3
      a = l & 0xffff
      b = l >>> 16
      c = h & 0xffff
      d = h >>> 16
      h = th
      l = tl
      a += l & 0xffff
      b += l >>> 16
      c += h & 0xffff
      d += h >>> 16
      b += a >>> 16
      c += b >>> 16
      d += c >>> 16
      bh3 = (c & 0xffff) | (d << 16)
      bl3 = (a & 0xffff) | (b << 16)
      ah1 = bh0
      ah2 = bh1
      ah3 = bh2
      ah4 = bh3
      ah5 = bh4
      ah6 = bh5
      ah7 = bh6
      ah0 = bh7
      al1 = bl0
      al2 = bl1
      al3 = bl2
      al4 = bl3
      al5 = bl4
      al6 = bl5
      al7 = bl6
      al0 = bl7
      if (i % 16 === 15) {
        for (j = 0; j < 16; j++) {
          // add
          h = wh[j]
          l = wl[j]
          a = l & 0xffff
          b = l >>> 16
          c = h & 0xffff
          d = h >>> 16
          h = wh[(j + 9) % 16]
          l = wl[(j + 9) % 16]
          a += l & 0xffff
          b += l >>> 16
          c += h & 0xffff
          d += h >>> 16
          // sigma0
          th = wh[(j + 1) % 16]
          tl = wl[(j + 1) % 16]
          h = ((th >>> 1) | (tl << (32 - 1))) ^ ((th >>> 8) | (tl << (32 - 8))) ^ (th >>> 7)
          l = ((tl >>> 1) | (th << (32 - 1))) ^ ((tl >>> 8) | (th << (32 - 8))) ^ ((tl >>> 7) | (th << (32 - 7)))
          a += l & 0xffff
          b += l >>> 16
          c += h & 0xffff
          d += h >>> 16
          // sigma1
          th = wh[(j + 14) % 16]
          tl = wl[(j + 14) % 16]
          h = ((th >>> 19) | (tl << (32 - 19))) ^ ((tl >>> (61 - 32)) | (th << (32 - (61 - 32)))) ^ (th >>> 6)
          l = ((tl >>> 19) | (th << (32 - 19))) ^ ((th >>> (61 - 32)) | (tl << (32 - (61 - 32)))) ^ ((tl >>> 6) | (th << (32 - 6)))
          a += l & 0xffff
          b += l >>> 16
          c += h & 0xffff
          d += h >>> 16
          b += a >>> 16
          c += b >>> 16
          d += c >>> 16
          wh[j] = (c & 0xffff) | (d << 16)
          wl[j] = (a & 0xffff) | (b << 16)
        }
      }
    }
    // add
    h = ah0
    l = al0
    a = l & 0xffff
    b = l >>> 16
    c = h & 0xffff
    d = h >>> 16
    h = hh[0]
    l = hl[0]
    a += l & 0xffff
    b += l >>> 16
    c += h & 0xffff
    d += h >>> 16
    b += a >>> 16
    c += b >>> 16
    d += c >>> 16
    hh[0] = ah0 = (c & 0xffff) | (d << 16)
    hl[0] = al0 = (a & 0xffff) | (b << 16)
    h = ah1
    l = al1
    a = l & 0xffff
    b = l >>> 16
    c = h & 0xffff
    d = h >>> 16
    h = hh[1]
    l = hl[1]
    a += l & 0xffff
    b += l >>> 16
    c += h & 0xffff
    d += h >>> 16
    b += a >>> 16
    c += b >>> 16
    d += c >>> 16
    hh[1] = ah1 = (c & 0xffff) | (d << 16)
    hl[1] = al1 = (a & 0xffff) | (b << 16)
    h = ah2
    l = al2
    a = l & 0xffff
    b = l >>> 16
    c = h & 0xffff
    d = h >>> 16
    h = hh[2]
    l = hl[2]
    a += l & 0xffff
    b += l >>> 16
    c += h & 0xffff
    d += h >>> 16
    b += a >>> 16
    c += b >>> 16
    d += c >>> 16
    hh[2] = ah2 = (c & 0xffff) | (d << 16)
    hl[2] = al2 = (a & 0xffff) | (b << 16)
    h = ah3
    l = al3
    a = l & 0xffff
    b = l >>> 16
    c = h & 0xffff
    d = h >>> 16
    h = hh[3]
    l = hl[3]
    a += l & 0xffff
    b += l >>> 16
    c += h & 0xffff
    d += h >>> 16
    b += a >>> 16
    c += b >>> 16
    d += c >>> 16
    hh[3] = ah3 = (c & 0xffff) | (d << 16)
    hl[3] = al3 = (a & 0xffff) | (b << 16)
    h = ah4
    l = al4
    a = l & 0xffff
    b = l >>> 16
    c = h & 0xffff
    d = h >>> 16
    h = hh[4]
    l = hl[4]
    a += l & 0xffff
    b += l >>> 16
    c += h & 0xffff
    d += h >>> 16
    b += a >>> 16
    c += b >>> 16
    d += c >>> 16
    hh[4] = ah4 = (c & 0xffff) | (d << 16)
    hl[4] = al4 = (a & 0xffff) | (b << 16)
    h = ah5
    l = al5
    a = l & 0xffff
    b = l >>> 16
    c = h & 0xffff
    d = h >>> 16
    h = hh[5]
    l = hl[5]
    a += l & 0xffff
    b += l >>> 16
    c += h & 0xffff
    d += h >>> 16
    b += a >>> 16
    c += b >>> 16
    d += c >>> 16
    hh[5] = ah5 = (c & 0xffff) | (d << 16)
    hl[5] = al5 = (a & 0xffff) | (b << 16)
    h = ah6
    l = al6
    a = l & 0xffff
    b = l >>> 16
    c = h & 0xffff
    d = h >>> 16
    h = hh[6]
    l = hl[6]
    a += l & 0xffff
    b += l >>> 16
    c += h & 0xffff
    d += h >>> 16
    b += a >>> 16
    c += b >>> 16
    d += c >>> 16
    hh[6] = ah6 = (c & 0xffff) | (d << 16)
    hl[6] = al6 = (a & 0xffff) | (b << 16)
    h = ah7
    l = al7
    a = l & 0xffff
    b = l >>> 16
    c = h & 0xffff
    d = h >>> 16
    h = hh[7]
    l = hl[7]
    a += l & 0xffff
    b += l >>> 16
    c += h & 0xffff
    d += h >>> 16
    b += a >>> 16
    c += b >>> 16
    d += c >>> 16
    hh[7] = ah7 = (c & 0xffff) | (d << 16)
    hl[7] = al7 = (a & 0xffff) | (b << 16)
    pos += 128
    n -= 128
  }
  return n
}
function crypto_hash(out, m, n) {
  var hh = new Int32Array(8)
  var hl = new Int32Array(8)
  var x = new Uint8Array(256)
  var i, b = n
  hh[0] = 0x6a09e667
  hh[1] = 0xbb67ae85
  hh[2] = 0x3c6ef372
  hh[3] = 0xa54ff53a
  hh[4] = 0x510e527f
  hh[5] = 0x9b05688c
  hh[6] = 0x1f83d9ab
  hh[7] = 0x5be0cd19
  hl[0] = 0xf3bcc908
  hl[1] = 0x84caa73b
  hl[2] = 0xfe94f82b
  hl[3] = 0x5f1d36f1
  hl[4] = 0xade682d1
  hl[5] = 0x2b3e6c1f
  hl[6] = 0xfb41bd6b
  hl[7] = 0x137e2179
  crypto_hashblocks_hl(hh, hl, m, n)
  n %= 128
  for (i = 0; i < n; i++)
    x[i] = m[b - n + i]
  x[n] = 128
  n = 256 - 128 * (n < 112 ? 1 : 0)
  x[n - 9] = 0
  ts64(x, n - 8, (b / 0x20000000) | 0, b << 3)
  crypto_hashblocks_hl(hh, hl, x, n)
  for (i = 0; i < 8; i++)
    ts64(out, 8 * i, hh[i], hl[i])
  return 0
}
function add(p, q) {
  var a = gf(), b = gf(), c = gf(), d = gf(), e = gf(), f = gf(), g = gf(), h = gf(), t = gf()
  Z(a, p[1], p[0])
  Z(t, q[1], q[0])
  M(a, a, t)
  A(b, p[0], p[1])
  A(t, q[0], q[1])
  M(b, b, t)
  M(c, p[3], q[3])
  M(c, c, D2)
  M(d, p[2], q[2])
  A(d, d, d)
  Z(e, b, a)
  Z(f, d, c)
  A(g, d, c)
  A(h, b, a)
  M(p[0], e, f)
  M(p[1], h, g)
  M(p[2], g, f)
  M(p[3], e, h)
}
function cswap(p, q, b) {
  for (var i = 0; i < 4; i++) {
    sel25519(p[i], q[i], b)
  }
}
function pack(r, p) {
  var tx = gf(), ty = gf(), zi = gf()
  inv25519(zi, p[2])
  M(tx, p[0], zi)
  M(ty, p[1], zi)
  pack25519(r, ty)
  r[31] ^= par25519(tx) << 7
}
function scalarmult(p, q, s) {
  var b, i
  set25519(p[0], gf0)
  set25519(p[1], gf1)
  set25519(p[2], gf1)
  set25519(p[3], gf0)
  for (i = 255; i >= 0; --i) {
    b = (s[(i / 8) | 0] >> (i & 7)) & 1
    cswap(p, q, b)
    add(q, p)
    add(p, p)
    cswap(p, q, b)
  }
}
function scalarbase(p, s) {
  var q = [gf(), gf(), gf(), gf()]
  set25519(q[0], X)
  set25519(q[1], Y)
  set25519(q[2], gf1)
  M(q[3], X, Y)
  scalarmult(p, q, s)
}
var L = new Float64Array([0xed, 0xd3, 0xf5, 0x5c, 0x1a, 0x63, 0x12, 0x58, 0xd6, 0x9c, 0xf7, 0xa2, 0xde, 0xf9, 0xde, 0x14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0x10])
function modL(r, x) {
  var carry, i, j, k
  for (i = 63; i >= 32; --i) {
    carry = 0
    for (j = i - 32, k = i - 12; j < k; ++j) {
      x[j] += carry - 16 * x[i] * L[j - (i - 32)]
      carry = (x[j] + 128) >> 8
      x[j] -= carry * 256
    }
    x[j] += carry
    x[i] = 0
  }
  carry = 0
  for (j = 0; j < 32; j++) {
    x[j] += carry - (x[31] >> 4) * L[j]
    carry = x[j] >> 8
    x[j] &= 255
  }
  for (j = 0; j < 32; j++)
    x[j] -= carry * L[j]
  for (i = 0; i < 32; i++) {
    x[i + 1] += x[i] >> 8
    r[i] = x[i] & 255
  }
}
function reduce(r) {
  var x = new Float64Array(64)
  var i
  for (i = 0; i < 64; i++)
    x[i] = r[i]
  for (i = 0; i < 64; i++)
    r[i] = 0
  modL(r, x)
}
// Like crypto_sign, but uses secret key directly in hash.
function crypto_sign_direct(sm, m, n, sk) {
  var d = new Uint8Array(64), h = new Uint8Array(64), r = new Uint8Array(64)
  var x = new Float64Array(64)
  var p = [gf(), gf(), gf(), gf()]
  var i, j
  for (i = 0; i < n; i++)
    sm[64 + i] = m[i]
  for (i = 0; i < 32; i++)
    sm[32 + i] = sk[i]
  crypto_hash(r, sm.subarray(32), n + 32)
  reduce(r)
  scalarbase(p, r)
  pack(sm, p)
  for (i = 0; i < 32; i++)
    sm[i + 32] = sk[32 + i]
  crypto_hash(h, sm, n + 64)
  reduce(h)
  for (i = 0; i < 64; i++)
    x[i] = 0
  for (i = 0; i < 32; i++)
    x[i] = r[i]
  for (i = 0; i < 32; i++) {
    for (j = 0; j < 32; j++) {
      x[i + j] += h[i] * sk[j]
    }
  }
  modL(sm.subarray(32), x)
  return n + 64
}
// Note: sm must be n+128.
function crypto_sign_direct_rnd(sm, m, n, sk, rnd) {
  var d = new Uint8Array(64), h = new Uint8Array(64), r = new Uint8Array(64)
  var x = new Float64Array(64)
  var p = [gf(), gf(), gf(), gf()]
  var i, j
  // Hash separation.
  sm[0] = 0xfe
  for (i = 1; i < 32; i++)
    sm[i] = 0xff
  // Secret key.
  for (i = 0; i < 32; i++)
    sm[32 + i] = sk[i]
  // Message.
  for (i = 0; i < n; i++)
    sm[64 + i] = m[i]
  // Random suffix.
  for (i = 0; i < 64; i++)
    sm[n + 64 + i] = rnd[i]
  crypto_hash(r, sm, n + 128)
  reduce(r)
  scalarbase(p, r)
  pack(sm, p)
  for (i = 0; i < 32; i++)
    sm[i + 32] = sk[32 + i]
  crypto_hash(h, sm, n + 64)
  reduce(h)
  // Wipe out random suffix.
  for (i = 0; i < 64; i++)
    sm[n + 64 + i] = 0
  for (i = 0; i < 64; i++)
    x[i] = 0
  for (i = 0; i < 32; i++)
    x[i] = r[i]
  for (i = 0; i < 32; i++) {
    for (j = 0; j < 32; j++) {
      x[i + j] += h[i] * sk[j]
    }
  }
  modL(sm.subarray(32, n + 64), x)
  return n + 64
}
function curve25519_sign(sm, m, n, sk, opt_rnd) {
  // If opt_rnd is provided, sm must have n + 128,
  // otherwise it must have n + 64 bytes.
  // Convert Curve25519 secret key into Ed25519 secret key (includes pub key).
  var edsk = new Uint8Array(64)
  var p = [gf(), gf(), gf(), gf()]
  for (var i = 0; i < 32; i++)
    edsk[i] = sk[i]
  // Ensure private key is in the correct format.
  edsk[0] &= 248
  edsk[31] &= 127
  edsk[31] |= 64
  scalarbase(p, edsk)
  pack(edsk.subarray(32), p)
  // Remember sign bit.
  var signBit = edsk[63] & 128
  var smlen
  if (opt_rnd) {
    smlen = crypto_sign_direct_rnd(sm, m, n, edsk, opt_rnd)
  }
  else {
    smlen = crypto_sign_direct(sm, m, n, edsk)
  }
  // Copy sign bit from public key into signature.
  sm[63] |= signBit
  return smlen
}
function unpackneg(r, p) {
  var t = gf(), chk = gf(), num = gf(), den = gf(), den2 = gf(), den4 = gf(), den6 = gf()
  set25519(r[2], gf1)
  unpack25519(r[1], p)
  S(num, r[1])
  M(den, num, D)
  Z(num, num, r[2])
  A(den, r[2], den)
  S(den2, den)
  S(den4, den2)
  M(den6, den4, den2)
  M(t, den6, num)
  M(t, t, den)
  pow2523(t, t)
  M(t, t, num)
  M(t, t, den)
  M(t, t, den)
  M(r[0], t, den)
  S(chk, r[0])
  M(chk, chk, den)
  if (neq25519(chk, num))
    M(r[0], r[0], I)
  S(chk, r[0])
  M(chk, chk, den)
  if (neq25519(chk, num))
    return -1
  if (par25519(r[0]) === (p[31] >> 7))
    Z(r[0], gf0, r[0])
  M(r[3], r[0], r[1])
  return 0
}
function crypto_sign_open(m, sm, n, pk) {
  var i, mlen
  var t = new Uint8Array(32), h = new Uint8Array(64)
  var p = [gf(), gf(), gf(), gf()], q = [gf(), gf(), gf(), gf()]
  mlen = -1
  if (n < 64)
    return -1
  if (unpackneg(q, pk))
    return -1
  for (i = 0; i < n; i++)
    m[i] = sm[i]
  for (i = 0; i < 32; i++)
    m[i + 32] = pk[i]
  crypto_hash(h, m, n)
  reduce(h)
  scalarmult(p, q, h)
  scalarbase(q, sm.subarray(32))
  add(p, q)
  pack(t, p)
  n -= 64
  if (crypto_verify_32(sm, 0, t, 0)) {
    for (i = 0; i < n; i++)
      m[i] = 0
    return -1
  }
  for (i = 0; i < n; i++)
    m[i] = sm[i + 64]
  mlen = n
  return mlen
}
// Converts Curve25519 public key back to Ed25519 public key.
// edwardsY = (montgomeryX - 1) / (montgomeryX + 1)
function convertPublicKey(pk) {
  var z = new Uint8Array(32), x = gf(), a = gf(), b = gf()
  unpack25519(x, pk)
  A(a, x, gf1)
  Z(b, x, gf1)
  inv25519(a, a)
  M(a, a, b)
  pack25519(z, a)
  return z
}
function curve25519_sign_open(m, sm, n, pk) {
  // Convert Curve25519 public key into Ed25519 public key.
  var edpk = convertPublicKey(pk)
  // Restore sign bit from signature.
  edpk[31] |= sm[63] & 128
  // Remove sign bit from signature.
  sm[63] &= 127
  // Verify signed message.
  return crypto_sign_open(m, sm, n, edpk)
}
/* High-level API */
function checkArrayTypes() {
  var args = []
  for (var _i = 0; _i < arguments.length; _i++) {
    args[_i] = arguments[_i]
  }
  var t, i
  for (i = 0; i < arguments.length; i++) {
    if ((t = Object.prototype.toString.call(arguments[i])) !== '[object Uint8Array]')
      throw new TypeError('unexpected type ' + t + ', use Uint8Array')
  }
}
axlsign.sharedKey = function (secretKey, publicKey) {
  checkArrayTypes(publicKey, secretKey)
  if (publicKey.length !== 32)
    throw new Error('wrong public key length')
  if (secretKey.length !== 32)
    throw new Error('wrong secret key length')
  var sharedKey = new Uint8Array(32)
  crypto_scalarmult(sharedKey, secretKey, publicKey)
  return sharedKey
}
axlsign.signMessage = function (secretKey, msg, opt_random) {
  checkArrayTypes(msg, secretKey)
  if (secretKey.length !== 32)
    throw new Error('wrong secret key length')
  if (opt_random) {
    checkArrayTypes(opt_random)
    if (opt_random.length !== 64)
      throw new Error('wrong random data length')
    var buf = new Uint8Array(128 + msg.length)
    curve25519_sign(buf, msg, msg.length, secretKey, opt_random)
    return new Uint8Array(buf.subarray(0, 64 + msg.length))
  }
  else {
    var signedMsg = new Uint8Array(64 + msg.length)
    curve25519_sign(signedMsg, msg, msg.length, secretKey)
    return signedMsg
  }
}
axlsign.openMessage = function (publicKey, signedMsg) {
  checkArrayTypes(signedMsg, publicKey)
  if (publicKey.length !== 32)
    throw new Error('wrong public key length')
  var tmp = new Uint8Array(signedMsg.length)
  var mlen = curve25519_sign_open(tmp, signedMsg, signedMsg.length, publicKey)
  if (mlen < 0)
    return null
  var m = new Uint8Array(mlen)
  for (var i = 0; i < m.length; i++)
    m[i] = tmp[i]
  return m
}
axlsign.sign = function (secretKey, msg, opt_random) {
  checkArrayTypes(secretKey, msg)
  if (secretKey.length !== 32)
    throw new Error('wrong secret key length')
  if (opt_random) {
    checkArrayTypes(opt_random)
    if (opt_random.length !== 64)
      throw new Error('wrong random data length')
  }
  var buf = new Uint8Array((opt_random ? 128 : 64) + msg.length)
  curve25519_sign(buf, msg, msg.length, secretKey, opt_random)
  var signature = new Uint8Array(64)
  for (var i = 0; i < signature.length; i++)
    signature[i] = buf[i]
  return signature
}
axlsign.verify = function (publicKey, msg, signature) {
  checkArrayTypes(msg, signature, publicKey)
  if (signature.length !== 64)
    throw new Error('wrong signature length')
  if (publicKey.length !== 32)
    throw new Error('wrong public key length')
  var sm = new Uint8Array(64 + msg.length)
  var m = new Uint8Array(64 + msg.length)
  var i
  for (i = 0; i < 64; i++)
    sm[i] = signature[i]
  for (i = 0; i < msg.length; i++)
    sm[i + 64] = msg[i]
  return (curve25519_sign_open(m, sm, sm.length, publicKey) >= 0)
}
axlsign.generateKeyPair = function (seed) {
  checkArrayTypes(seed)
  if (seed.length !== 32)
    throw new Error('wrong seed length')
  var sk = new Uint8Array(32)
  var pk = new Uint8Array(32)
  for (var i = 0; i < 32; i++)
    sk[i] = seed[i]
  crypto_scalarmult_base(pk, sk)
  // Turn secret key into the correct format.
  sk[0] &= 248
  sk[31] &= 127
  sk[31] |= 64
  // Remove sign bit from public key.
  pk[31] &= 127
  return {
    public: pk,
    private: sk,
  }
}
exports['default'] = axlsign

},{}],"cfOA":[function(require,module,exports) {
"use strict";
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
// @ts-ignore
var forgeCipher = __importStar(require("node-forge/lib/cipher"));
// @ts-ignore
var util = __importStar(require("node-forge/lib/util"));
var random_1 = require("./random");
var param_1 = require("../conversions/param");
var hashing_1 = require("./hashing");
var concat_split_1 = require("./concat-split");
var axlsign_1 = __importDefault(require("../libs/axlsign"));
var string_bytes_1 = require("../conversions/string-bytes");
exports.aesEncrypt = function (data, key, mode, iv) {
    if (mode === void 0) { mode = 'CBC'; }
    var cipher = forgeCipher.createCipher("AES-" + mode, string_bytes_1.bytesToString(param_1._fromIn(key), 'raw'));
    cipher.start({ iv: iv && util.createBuffer(string_bytes_1.bytesToString(param_1._fromIn(iv), 'raw')) });
    cipher.update(util.createBuffer(string_bytes_1.bytesToString(data, 'raw')));
    cipher.finish();
    return string_bytes_1.stringToBytes(cipher.output.getBytes(), 'raw');
};
exports.aesDecrypt = function (encryptedData, key, mode, iv) {
    if (mode === void 0) { mode = 'CBC'; }
    var decipher = forgeCipher.createDecipher("AES-" + mode, string_bytes_1.bytesToString(param_1._fromIn(key), 'raw'));
    decipher.start({ iv: iv && util.createBuffer(string_bytes_1.bytesToString(param_1._fromIn(iv), 'raw')) });
    var encbuf = util.createBuffer(string_bytes_1.bytesToString(param_1._fromIn(encryptedData), 'raw'));
    decipher.update(encbuf);
    if (!decipher.finish()) {
        throw new Error('Failed to decrypt data with provided key');
    }
    return string_bytes_1.stringToBytes(decipher.output.getBytes(), 'raw');
};
exports.messageEncrypt = function (sharedKey, message) {
    var version = Uint8Array.from([1]);
    var CEK = random_1.randomBytes(32);
    var IV = random_1.randomBytes(16);
    var m = string_bytes_1.stringToBytes(message);
    var Cc = exports.aesEncrypt(m, CEK, 'CTR', IV);
    var Ccek = exports.aesEncrypt(CEK, sharedKey, 'ECB');
    var Mhmac = hashing_1.hmacSHA256(m, CEK);
    var CEKhmac = hashing_1.hmacSHA256(concat_split_1.concat(CEK, IV), sharedKey);
    var packageBytes = concat_split_1.concat(version, Ccek, CEKhmac, Mhmac, IV, Cc);
    return packageBytes;
};
exports.messageDecrypt = function (sharedKey, encryptedMessage) {
    var _a = __read(concat_split_1.split(encryptedMessage, 1, 48, 32, 32, 16), 6), version = _a[0], Ccek = _a[1], _CEKhmac = _a[2], _Mhmac = _a[3], iv = _a[4], Cc = _a[5];
    var CEK = exports.aesDecrypt(Ccek, sharedKey, 'ECB');
    var CEKhmac = param_1._fromIn(hashing_1.hmacSHA256(concat_split_1.concat(CEK, iv), param_1._fromIn(sharedKey)));
    var isValidKey = CEKhmac.every(function (v, i) { return v === _CEKhmac[i]; });
    if (!isValidKey)
        throw new Error('Invalid key');
    var M = exports.aesDecrypt(Cc, CEK, 'CTR', iv);
    var Mhmac = param_1._fromIn(hashing_1.hmacSHA256(M, CEK));
    var isValidMessage = Mhmac.every(function (v, i) { return v === _Mhmac[i]; });
    if (!isValidMessage)
        throw new Error('Invalid message');
    return string_bytes_1.bytesToString(M);
};
exports.sharedKey = function (privateKeyFrom, publicKeyTo, prefix) {
    var sharedKey = axlsign_1.default.sharedKey(param_1._fromIn(privateKeyFrom), param_1._fromIn(publicKeyTo));
    var prefixHash = hashing_1.sha256(param_1._fromRawIn(prefix));
    return hashing_1.hmacSHA256(sharedKey, prefixHash);
};

},{"node-forge/lib/cipher":"UdiU","node-forge/lib/util":"lWyh","./random":"A7J3","../conversions/param":"WDpF","./hashing":"Teij","./concat-split":"UpB3","../libs/axlsign":"ymEv","../conversions/string-bytes":"WqH7"}],"OpBg":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.PUBLIC_KEY_LENGTH = 32;
exports.PRIVATE_KEY_LENGTH = 32;
exports.SIGNATURE_LENGTH = 64;
exports.ADDRESS_LENGTH = 26;
exports.MAIN_NET_CHAIN_ID = 87; // W
exports.TEST_NET_CHAIN_ID = 84; // T

},{}],"sGC0":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var param_1 = require("../conversions/param");
var string_bytes_1 = require("../conversions/string-bytes");
exports.Seed = {
    isSeedWithNonce: function (val) {
        return val.nonce !== undefined;
    },
    toBinary: function (seed) {
        return exports.Seed.isSeedWithNonce(seed) ?
            { seed: exports.Seed.toBinary(seed.seed).seed, nonce: seed.nonce } :
            { seed: param_1._fromRawIn(seed), nonce: undefined };
    },
    toString: function (seed) {
        return string_bytes_1.bytesToString(exports.Seed.toBinary(seed).seed);
    },
};

},{"../conversions/param":"WDpF","../conversions/string-bytes":"WqH7"}],"FuKR":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.isPublicKey = function (val) {
    return val.publicKey !== undefined;
};
exports.isPrivateKey = function (val) {
    return val.privateKey !== undefined;
};

},{}],"yznw":[function(require,module,exports) {
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var interface_1 = require("./interface");
var seed_1 = require("../extensions/seed");
var hashing_1 = require("./hashing");
var param_1 = require("../conversions/param");
var concat_split_1 = require("./concat-split");
var util_1 = require("./util");
var axlsign_1 = __importDefault(require("../libs/axlsign"));
exports.seedWithNonce = function (seed, nonce) { return ({ seed: seed_1.Seed.toBinary(seed).seed, nonce: nonce }); };
exports.buildAddress = function (publicKeyBytes, chainId) {
    if (chainId === void 0) { chainId = interface_1.MAIN_NET_CHAIN_ID; }
    var prefix = [1, typeof chainId === 'string' ? chainId.charCodeAt(0) : chainId];
    var publicKeyHashPart = hashing_1._hashChain(publicKeyBytes).slice(0, 20);
    var rawAddress = concat_split_1.concat(prefix, publicKeyHashPart);
    var addressHash = hashing_1._hashChain(rawAddress).slice(0, 4);
    return concat_split_1.concat(rawAddress, addressHash);
};
var buildSeedHash = function (seedBytes, nonce) {
    var nonceArray = [0, 0, 0, 0];
    if (nonce && nonce > 0) {
        var remainder = nonce;
        for (var i = 3; i >= 0; i--) {
            nonceArray[3 - i] = Math.floor(remainder / Math.pow(2, (i * 8)));
            remainder = remainder % Math.pow(2, (i * 8));
        }
    }
    var seedBytesWithNonce = concat_split_1.concat(nonceArray, seedBytes);
    var seedHash = hashing_1._hashChain(seedBytesWithNonce);
    return hashing_1.sha256(seedHash);
};
exports.keyPair = function (seed) {
    var _a = seed_1.Seed.toBinary(seed), seedBytes = _a.seed, nonce = _a.nonce;
    var seedHash = buildSeedHash(seedBytes, nonce);
    var keys = axlsign_1.default.generateKeyPair(seedHash);
    return {
        privateKey: keys.private,
        publicKey: keys.public,
    };
};
exports.address = function (seedOrPublicKey, chainId) {
    if (chainId === void 0) { chainId = interface_1.MAIN_NET_CHAIN_ID; }
    return util_1.isPublicKey(seedOrPublicKey) ?
        exports.buildAddress(param_1._fromIn(seedOrPublicKey.publicKey), chainId) :
        exports.address(exports.keyPair(seedOrPublicKey), chainId);
};
exports.publicKey = function (seedOrPrivateKey) {
    return util_1.isPrivateKey(seedOrPrivateKey) ?
        axlsign_1.default.generateKeyPair(param_1._fromIn(seedOrPrivateKey.privateKey)).public :
        exports.keyPair(seedOrPrivateKey).publicKey;
};
exports.privateKey = function (seed) {
    return exports.keyPair(seed).privateKey;
};

},{"./interface":"OpBg","../extensions/seed":"sGC0","./hashing":"Teij","../conversions/param":"WDpF","./concat-split":"UpB3","./util":"FuKR","../libs/axlsign":"ymEv"}],"e93L":[function(require,module,exports) {
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var axlsign_1 = __importDefault(require("../libs/axlsign"));
var param_1 = require("../conversions/param");
var util_1 = require("./util");
var address_keys_seed_1 = require("./address-keys-seed");
var random_1 = require("./random");
exports.signBytes = function (seedOrPrivateKey, bytes, random) {
    return axlsign_1.default.sign(param_1._fromIn(util_1.isPrivateKey(seedOrPrivateKey)
        ? seedOrPrivateKey.privateKey
        : address_keys_seed_1.privateKey(seedOrPrivateKey)), param_1._fromIn(bytes), param_1._fromIn(random || random_1.randomBytes(64)));
};

},{"../libs/axlsign":"ymEv","../conversions/param":"WDpF","./util":"FuKR","./address-keys-seed":"yznw","./random":"A7J3"}],"TNAS":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var interface_1 = require("../crypto/interface");
var interface_2 = require("../crypto/interface");
exports.ChaidId = {
    toNumber: function (chainId) {
        return (typeof chainId === 'string' ? chainId.charCodeAt(0) : chainId);
    },
    isMainnet: function (chainId) {
        return exports.ChaidId.toNumber(chainId) === interface_1.MAIN_NET_CHAIN_ID;
    },
    isTestnet: function (chainId) {
        return exports.ChaidId.toNumber(chainId) === interface_2.TEST_NET_CHAIN_ID;
    },
};

},{"../crypto/interface":"OpBg"}],"MzsO":[function(require,module,exports) {
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var interface_1 = require("./interface");
var chain_id_1 = require("../extensions/chain-id");
var param_1 = require("../conversions/param");
var hashing_1 = require("./hashing");
var address_keys_seed_1 = require("./address-keys-seed");
var axlsign_1 = __importDefault(require("../libs/axlsign"));
exports.verifyAddress = function (addr, optional) {
    var chainId = optional ? optional.chainId : undefined;
    try {
        var addressBytes = param_1._fromIn(addr);
        if (addressBytes[0] != 1 || (chainId ? addressBytes[1] != chain_id_1.ChaidId.toNumber(chainId) : false))
            return false;
        var key = addressBytes.slice(0, 22);
        var check = addressBytes.slice(22, 26);
        var keyHash = hashing_1._hashChain(key).slice(0, 4);
        for (var i = 0; i < 4; i++) {
            if (check[i] != keyHash[i])
                return false;
        }
        if (optional && optional.publicKey) {
            var a = address_keys_seed_1.address({ publicKey: optional.publicKey }, chainId);
            if (addressBytes.length !== a.length)
                return false;
            for (var i = 0; i < a.length; i++) {
                if (a[i] !== addressBytes[i])
                    return false;
            }
        }
    }
    catch (ex) {
        return false;
    }
    return true;
};
exports.verifySignature = function (publicKey, bytes, signature) {
    try {
        return axlsign_1.default.verify(param_1._fromIn(publicKey), param_1._fromIn(bytes), param_1._fromIn(signature));
    }
    catch (error) {
        return false;
    }
};
exports.verifyPublicKey = function (publicKey) { return param_1._fromIn(publicKey).length === interface_1.PUBLIC_KEY_LENGTH; };

},{"./interface":"OpBg","../extensions/chain-id":"TNAS","../conversions/param":"WDpF","./hashing":"Teij","./address-keys-seed":"yznw","../libs/axlsign":"ymEv"}],"rbLR":[function(require,module,exports) {
/**
 * Object IDs for ASN.1.
 *
 * @author Dave Longley
 *
 * Copyright (c) 2010-2013 Digital Bazaar, Inc.
 */
var forge = require('./forge');

forge.pki = forge.pki || {};
var oids = module.exports = forge.pki.oids = forge.oids = forge.oids || {}; // set id to name mapping and name to id mapping

function _IN(id, name) {
  oids[id] = name;
  oids[name] = id;
} // set id to name mapping only


function _I_(id, name) {
  oids[id] = name;
} // algorithm OIDs


_IN('1.2.840.113549.1.1.1', 'rsaEncryption'); // Note: md2 & md4 not implemented
//_IN('1.2.840.113549.1.1.2', 'md2WithRSAEncryption');
//_IN('1.2.840.113549.1.1.3', 'md4WithRSAEncryption');


_IN('1.2.840.113549.1.1.4', 'md5WithRSAEncryption');

_IN('1.2.840.113549.1.1.5', 'sha1WithRSAEncryption');

_IN('1.2.840.113549.1.1.7', 'RSAES-OAEP');

_IN('1.2.840.113549.1.1.8', 'mgf1');

_IN('1.2.840.113549.1.1.9', 'pSpecified');

_IN('1.2.840.113549.1.1.10', 'RSASSA-PSS');

_IN('1.2.840.113549.1.1.11', 'sha256WithRSAEncryption');

_IN('1.2.840.113549.1.1.12', 'sha384WithRSAEncryption');

_IN('1.2.840.113549.1.1.13', 'sha512WithRSAEncryption');

_IN('1.2.840.10040.4.3', 'dsa-with-sha1');

_IN('1.3.14.3.2.7', 'desCBC');

_IN('1.3.14.3.2.26', 'sha1');

_IN('2.16.840.1.101.3.4.2.1', 'sha256');

_IN('2.16.840.1.101.3.4.2.2', 'sha384');

_IN('2.16.840.1.101.3.4.2.3', 'sha512');

_IN('1.2.840.113549.2.5', 'md5'); // pkcs#7 content types


_IN('1.2.840.113549.1.7.1', 'data');

_IN('1.2.840.113549.1.7.2', 'signedData');

_IN('1.2.840.113549.1.7.3', 'envelopedData');

_IN('1.2.840.113549.1.7.4', 'signedAndEnvelopedData');

_IN('1.2.840.113549.1.7.5', 'digestedData');

_IN('1.2.840.113549.1.7.6', 'encryptedData'); // pkcs#9 oids


_IN('1.2.840.113549.1.9.1', 'emailAddress');

_IN('1.2.840.113549.1.9.2', 'unstructuredName');

_IN('1.2.840.113549.1.9.3', 'contentType');

_IN('1.2.840.113549.1.9.4', 'messageDigest');

_IN('1.2.840.113549.1.9.5', 'signingTime');

_IN('1.2.840.113549.1.9.6', 'counterSignature');

_IN('1.2.840.113549.1.9.7', 'challengePassword');

_IN('1.2.840.113549.1.9.8', 'unstructuredAddress');

_IN('1.2.840.113549.1.9.14', 'extensionRequest');

_IN('1.2.840.113549.1.9.20', 'friendlyName');

_IN('1.2.840.113549.1.9.21', 'localKeyId');

_IN('1.2.840.113549.1.9.22.1', 'x509Certificate'); // pkcs#12 safe bags


_IN('1.2.840.113549.1.12.10.1.1', 'keyBag');

_IN('1.2.840.113549.1.12.10.1.2', 'pkcs8ShroudedKeyBag');

_IN('1.2.840.113549.1.12.10.1.3', 'certBag');

_IN('1.2.840.113549.1.12.10.1.4', 'crlBag');

_IN('1.2.840.113549.1.12.10.1.5', 'secretBag');

_IN('1.2.840.113549.1.12.10.1.6', 'safeContentsBag'); // password-based-encryption for pkcs#12


_IN('1.2.840.113549.1.5.13', 'pkcs5PBES2');

_IN('1.2.840.113549.1.5.12', 'pkcs5PBKDF2');

_IN('1.2.840.113549.1.12.1.1', 'pbeWithSHAAnd128BitRC4');

_IN('1.2.840.113549.1.12.1.2', 'pbeWithSHAAnd40BitRC4');

_IN('1.2.840.113549.1.12.1.3', 'pbeWithSHAAnd3-KeyTripleDES-CBC');

_IN('1.2.840.113549.1.12.1.4', 'pbeWithSHAAnd2-KeyTripleDES-CBC');

_IN('1.2.840.113549.1.12.1.5', 'pbeWithSHAAnd128BitRC2-CBC');

_IN('1.2.840.113549.1.12.1.6', 'pbewithSHAAnd40BitRC2-CBC'); // hmac OIDs


_IN('1.2.840.113549.2.7', 'hmacWithSHA1');

_IN('1.2.840.113549.2.8', 'hmacWithSHA224');

_IN('1.2.840.113549.2.9', 'hmacWithSHA256');

_IN('1.2.840.113549.2.10', 'hmacWithSHA384');

_IN('1.2.840.113549.2.11', 'hmacWithSHA512'); // symmetric key algorithm oids


_IN('1.2.840.113549.3.7', 'des-EDE3-CBC');

_IN('2.16.840.1.101.3.4.1.2', 'aes128-CBC');

_IN('2.16.840.1.101.3.4.1.22', 'aes192-CBC');

_IN('2.16.840.1.101.3.4.1.42', 'aes256-CBC'); // certificate issuer/subject OIDs


_IN('2.5.4.3', 'commonName');

_IN('2.5.4.5', 'serialName');

_IN('2.5.4.6', 'countryName');

_IN('2.5.4.7', 'localityName');

_IN('2.5.4.8', 'stateOrProvinceName');

_IN('2.5.4.10', 'organizationName');

_IN('2.5.4.11', 'organizationalUnitName');

_IN('2.5.4.13', 'description'); // X.509 extension OIDs


_IN('2.16.840.1.113730.1.1', 'nsCertType');

_IN('2.16.840.1.113730.1.13', 'nsComment'); // deprecated in theory; still widely used


_I_('2.5.29.1', 'authorityKeyIdentifier'); // deprecated, use .35


_I_('2.5.29.2', 'keyAttributes'); // obsolete use .37 or .15


_I_('2.5.29.3', 'certificatePolicies'); // deprecated, use .32


_I_('2.5.29.4', 'keyUsageRestriction'); // obsolete use .37 or .15


_I_('2.5.29.5', 'policyMapping'); // deprecated use .33


_I_('2.5.29.6', 'subtreesConstraint'); // obsolete use .30


_I_('2.5.29.7', 'subjectAltName'); // deprecated use .17


_I_('2.5.29.8', 'issuerAltName'); // deprecated use .18


_I_('2.5.29.9', 'subjectDirectoryAttributes');

_I_('2.5.29.10', 'basicConstraints'); // deprecated use .19


_I_('2.5.29.11', 'nameConstraints'); // deprecated use .30


_I_('2.5.29.12', 'policyConstraints'); // deprecated use .36


_I_('2.5.29.13', 'basicConstraints'); // deprecated use .19


_IN('2.5.29.14', 'subjectKeyIdentifier');

_IN('2.5.29.15', 'keyUsage');

_I_('2.5.29.16', 'privateKeyUsagePeriod');

_IN('2.5.29.17', 'subjectAltName');

_IN('2.5.29.18', 'issuerAltName');

_IN('2.5.29.19', 'basicConstraints');

_I_('2.5.29.20', 'cRLNumber');

_I_('2.5.29.21', 'cRLReason');

_I_('2.5.29.22', 'expirationDate');

_I_('2.5.29.23', 'instructionCode');

_I_('2.5.29.24', 'invalidityDate');

_I_('2.5.29.25', 'cRLDistributionPoints'); // deprecated use .31


_I_('2.5.29.26', 'issuingDistributionPoint'); // deprecated use .28


_I_('2.5.29.27', 'deltaCRLIndicator');

_I_('2.5.29.28', 'issuingDistributionPoint');

_I_('2.5.29.29', 'certificateIssuer');

_I_('2.5.29.30', 'nameConstraints');

_IN('2.5.29.31', 'cRLDistributionPoints');

_IN('2.5.29.32', 'certificatePolicies');

_I_('2.5.29.33', 'policyMappings');

_I_('2.5.29.34', 'policyConstraints'); // deprecated use .36


_IN('2.5.29.35', 'authorityKeyIdentifier');

_I_('2.5.29.36', 'policyConstraints');

_IN('2.5.29.37', 'extKeyUsage');

_I_('2.5.29.46', 'freshestCRL');

_I_('2.5.29.54', 'inhibitAnyPolicy'); // extKeyUsage purposes


_IN('1.3.6.1.4.1.11129.2.4.2', 'timestampList');

_IN('1.3.6.1.5.5.7.1.1', 'authorityInfoAccess');

_IN('1.3.6.1.5.5.7.3.1', 'serverAuth');

_IN('1.3.6.1.5.5.7.3.2', 'clientAuth');

_IN('1.3.6.1.5.5.7.3.3', 'codeSigning');

_IN('1.3.6.1.5.5.7.3.4', 'emailProtection');

_IN('1.3.6.1.5.5.7.3.8', 'timeStamping');
},{"./forge":"o20S"}],"BA5j":[function(require,module,exports) {
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

/**
 * Javascript implementation of Abstract Syntax Notation Number One.
 *
 * @author Dave Longley
 *
 * Copyright (c) 2010-2015 Digital Bazaar, Inc.
 *
 * An API for storing data using the Abstract Syntax Notation Number One
 * format using DER (Distinguished Encoding Rules) encoding. This encoding is
 * commonly used to store data for PKI, i.e. X.509 Certificates, and this
 * implementation exists for that purpose.
 *
 * Abstract Syntax Notation Number One (ASN.1) is used to define the abstract
 * syntax of information without restricting the way the information is encoded
 * for transmission. It provides a standard that allows for open systems
 * communication. ASN.1 defines the syntax of information data and a number of
 * simple data types as well as a notation for describing them and specifying
 * values for them.
 *
 * The RSA algorithm creates public and private keys that are often stored in
 * X.509 or PKCS#X formats -- which use ASN.1 (encoded in DER format). This
 * class provides the most basic functionality required to store and load DSA
 * keys that are encoded according to ASN.1.
 *
 * The most common binary encodings for ASN.1 are BER (Basic Encoding Rules)
 * and DER (Distinguished Encoding Rules). DER is just a subset of BER that
 * has stricter requirements for how data must be encoded.
 *
 * Each ASN.1 structure has a tag (a byte identifying the ASN.1 structure type)
 * and a byte array for the value of this ASN1 structure which may be data or a
 * list of ASN.1 structures.
 *
 * Each ASN.1 structure using BER is (Tag-Length-Value):
 *
 * | byte 0 | bytes X | bytes Y |
 * |--------|---------|----------
 * |  tag   | length  |  value  |
 *
 * ASN.1 allows for tags to be of "High-tag-number form" which allows a tag to
 * be two or more octets, but that is not supported by this class. A tag is
 * only 1 byte. Bits 1-5 give the tag number (ie the data type within a
 * particular 'class'), 6 indicates whether or not the ASN.1 value is
 * constructed from other ASN.1 values, and bits 7 and 8 give the 'class'. If
 * bits 7 and 8 are both zero, the class is UNIVERSAL. If only bit 7 is set,
 * then the class is APPLICATION. If only bit 8 is set, then the class is
 * CONTEXT_SPECIFIC. If both bits 7 and 8 are set, then the class is PRIVATE.
 * The tag numbers for the data types for the class UNIVERSAL are listed below:
 *
 * UNIVERSAL 0 Reserved for use by the encoding rules
 * UNIVERSAL 1 Boolean type
 * UNIVERSAL 2 Integer type
 * UNIVERSAL 3 Bitstring type
 * UNIVERSAL 4 Octetstring type
 * UNIVERSAL 5 Null type
 * UNIVERSAL 6 Object identifier type
 * UNIVERSAL 7 Object descriptor type
 * UNIVERSAL 8 External type and Instance-of type
 * UNIVERSAL 9 Real type
 * UNIVERSAL 10 Enumerated type
 * UNIVERSAL 11 Embedded-pdv type
 * UNIVERSAL 12 UTF8String type
 * UNIVERSAL 13 Relative object identifier type
 * UNIVERSAL 14-15 Reserved for future editions
 * UNIVERSAL 16 Sequence and Sequence-of types
 * UNIVERSAL 17 Set and Set-of types
 * UNIVERSAL 18-22, 25-30 Character string types
 * UNIVERSAL 23-24 Time types
 *
 * The length of an ASN.1 structure is specified after the tag identifier.
 * There is a definite form and an indefinite form. The indefinite form may
 * be used if the encoding is constructed and not all immediately available.
 * The indefinite form is encoded using a length byte with only the 8th bit
 * set. The end of the constructed object is marked using end-of-contents
 * octets (two zero bytes).
 *
 * The definite form looks like this:
 *
 * The length may take up 1 or more bytes, it depends on the length of the
 * value of the ASN.1 structure. DER encoding requires that if the ASN.1
 * structure has a value that has a length greater than 127, more than 1 byte
 * will be used to store its length, otherwise just one byte will be used.
 * This is strict.
 *
 * In the case that the length of the ASN.1 value is less than 127, 1 octet
 * (byte) is used to store the "short form" length. The 8th bit has a value of
 * 0 indicating the length is "short form" and not "long form" and bits 7-1
 * give the length of the data. (The 8th bit is the left-most, most significant
 * bit: also known as big endian or network format).
 *
 * In the case that the length of the ASN.1 value is greater than 127, 2 to
 * 127 octets (bytes) are used to store the "long form" length. The first
 * byte's 8th bit is set to 1 to indicate the length is "long form." Bits 7-1
 * give the number of additional octets. All following octets are in base 256
 * with the most significant digit first (typical big-endian binary unsigned
 * integer storage). So, for instance, if the length of a value was 257, the
 * first byte would be set to:
 *
 * 10000010 = 130 = 0x82.
 *
 * This indicates there are 2 octets (base 256) for the length. The second and
 * third bytes (the octets just mentioned) would store the length in base 256:
 *
 * octet 2: 00000001 = 1 * 256^1 = 256
 * octet 3: 00000001 = 1 * 256^0 = 1
 * total = 257
 *
 * The algorithm for converting a js integer value of 257 to base-256 is:
 *
 * var value = 257;
 * var bytes = [];
 * bytes[0] = (value >>> 8) & 0xFF; // most significant byte first
 * bytes[1] = value & 0xFF;        // least significant byte last
 *
 * On the ASN.1 UNIVERSAL Object Identifier (OID) type:
 *
 * An OID can be written like: "value1.value2.value3...valueN"
 *
 * The DER encoding rules:
 *
 * The first byte has the value 40 * value1 + value2.
 * The following bytes, if any, encode the remaining values. Each value is
 * encoded in base 128, most significant digit first (big endian), with as
 * few digits as possible, and the most significant bit of each byte set
 * to 1 except the last in each value's encoding. For example: Given the
 * OID "1.2.840.113549", its DER encoding is (remember each byte except the
 * last one in each encoding is OR'd with 0x80):
 *
 * byte 1: 40 * 1 + 2 = 42 = 0x2A.
 * bytes 2-3: 128 * 6 + 72 = 840 = 6 72 = 6 72 = 0x0648 = 0x8648
 * bytes 4-6: 16384 * 6 + 128 * 119 + 13 = 6 119 13 = 0x06770D = 0x86F70D
 *
 * The final value is: 0x2A864886F70D.
 * The full OID (including ASN.1 tag and length of 6 bytes) is:
 * 0x06062A864886F70D
 */
var forge = require('./forge');

require('./util');

require('./oids');
/* ASN.1 API */


var asn1 = module.exports = forge.asn1 = forge.asn1 || {};
/**
 * ASN.1 classes.
 */

asn1.Class = {
  UNIVERSAL: 0x00,
  APPLICATION: 0x40,
  CONTEXT_SPECIFIC: 0x80,
  PRIVATE: 0xC0
};
/**
 * ASN.1 types. Not all types are supported by this implementation, only
 * those necessary to implement a simple PKI are implemented.
 */

asn1.Type = {
  NONE: 0,
  BOOLEAN: 1,
  INTEGER: 2,
  BITSTRING: 3,
  OCTETSTRING: 4,
  NULL: 5,
  OID: 6,
  ODESC: 7,
  EXTERNAL: 8,
  REAL: 9,
  ENUMERATED: 10,
  EMBEDDED: 11,
  UTF8: 12,
  ROID: 13,
  SEQUENCE: 16,
  SET: 17,
  PRINTABLESTRING: 19,
  IA5STRING: 22,
  UTCTIME: 23,
  GENERALIZEDTIME: 24,
  BMPSTRING: 30
};
/**
 * Creates a new asn1 object.
 *
 * @param tagClass the tag class for the object.
 * @param type the data type (tag number) for the object.
 * @param constructed true if the asn1 object is in constructed form.
 * @param value the value for the object, if it is not constructed.
 * @param [options] the options to use:
 *          [bitStringContents] the plain BIT STRING content including padding
 *            byte.
 *
 * @return the asn1 object.
 */

asn1.create = function (tagClass, type, constructed, value, options) {
  /* An asn1 object has a tagClass, a type, a constructed flag, and a
    value. The value's type depends on the constructed flag. If
    constructed, it will contain a list of other asn1 objects. If not,
    it will contain the ASN.1 value as an array of bytes formatted
    according to the ASN.1 data type. */
  // remove undefined values
  if (forge.util.isArray(value)) {
    var tmp = [];

    for (var i = 0; i < value.length; ++i) {
      if (value[i] !== undefined) {
        tmp.push(value[i]);
      }
    }

    value = tmp;
  }

  var obj = {
    tagClass: tagClass,
    type: type,
    constructed: constructed,
    composed: constructed || forge.util.isArray(value),
    value: value
  };

  if (options && 'bitStringContents' in options) {
    // TODO: copy byte buffer if it's a buffer not a string
    obj.bitStringContents = options.bitStringContents; // TODO: add readonly flag to avoid this overhead
    // save copy to detect changes

    obj.original = asn1.copy(obj);
  }

  return obj;
};
/**
 * Copies an asn1 object.
 *
 * @param obj the asn1 object.
 * @param [options] copy options:
 *          [excludeBitStringContents] true to not copy bitStringContents
 *
 * @return the a copy of the asn1 object.
 */


asn1.copy = function (obj, options) {
  var copy;

  if (forge.util.isArray(obj)) {
    copy = [];

    for (var i = 0; i < obj.length; ++i) {
      copy.push(asn1.copy(obj[i], options));
    }

    return copy;
  }

  if (typeof obj === 'string') {
    // TODO: copy byte buffer if it's a buffer not a string
    return obj;
  }

  copy = {
    tagClass: obj.tagClass,
    type: obj.type,
    constructed: obj.constructed,
    composed: obj.composed,
    value: asn1.copy(obj.value, options)
  };

  if (options && !options.excludeBitStringContents) {
    // TODO: copy byte buffer if it's a buffer not a string
    copy.bitStringContents = obj.bitStringContents;
  }

  return copy;
};
/**
 * Compares asn1 objects for equality.
 *
 * Note this function does not run in constant time.
 *
 * @param obj1 the first asn1 object.
 * @param obj2 the second asn1 object.
 * @param [options] compare options:
 *          [includeBitStringContents] true to compare bitStringContents
 *
 * @return true if the asn1 objects are equal.
 */


asn1.equals = function (obj1, obj2, options) {
  if (forge.util.isArray(obj1)) {
    if (!forge.util.isArray(obj2)) {
      return false;
    }

    if (obj1.length !== obj2.length) {
      return false;
    }

    for (var i = 0; i < obj1.length; ++i) {
      if (!asn1.equals(obj1[i], obj2[i])) {
        return false;
      }
    }

    return true;
  }

  if (_typeof(obj1) !== _typeof(obj2)) {
    return false;
  }

  if (typeof obj1 === 'string') {
    return obj1 === obj2;
  }

  var equal = obj1.tagClass === obj2.tagClass && obj1.type === obj2.type && obj1.constructed === obj2.constructed && obj1.composed === obj2.composed && asn1.equals(obj1.value, obj2.value);

  if (options && options.includeBitStringContents) {
    equal = equal && obj1.bitStringContents === obj2.bitStringContents;
  }

  return equal;
};
/**
 * Gets the length of a BER-encoded ASN.1 value.
 *
 * In case the length is not specified, undefined is returned.
 *
 * @param b the BER-encoded ASN.1 byte buffer, starting with the first
 *          length byte.
 *
 * @return the length of the BER-encoded ASN.1 value or undefined.
 */


asn1.getBerValueLength = function (b) {
  // TODO: move this function and related DER/BER functions to a der.js
  // file; better abstract ASN.1 away from der/ber.
  var b2 = b.getByte();

  if (b2 === 0x80) {
    return undefined;
  } // see if the length is "short form" or "long form" (bit 8 set)


  var length;
  var longForm = b2 & 0x80;

  if (!longForm) {
    // length is just the first byte
    length = b2;
  } else {
    // the number of bytes the length is specified in bits 7 through 1
    // and each length byte is in big-endian base-256
    length = b.getInt((b2 & 0x7F) << 3);
  }

  return length;
};
/**
 * Check if the byte buffer has enough bytes. Throws an Error if not.
 *
 * @param bytes the byte buffer to parse from.
 * @param remaining the bytes remaining in the current parsing state.
 * @param n the number of bytes the buffer must have.
 */


function _checkBufferLength(bytes, remaining, n) {
  if (n > remaining) {
    var error = new Error('Too few bytes to parse DER.');
    error.available = bytes.length();
    error.remaining = remaining;
    error.requested = n;
    throw error;
  }
}
/**
 * Gets the length of a BER-encoded ASN.1 value.
 *
 * In case the length is not specified, undefined is returned.
 *
 * @param bytes the byte buffer to parse from.
 * @param remaining the bytes remaining in the current parsing state.
 *
 * @return the length of the BER-encoded ASN.1 value or undefined.
 */


var _getValueLength = function (bytes, remaining) {
  // TODO: move this function and related DER/BER functions to a der.js
  // file; better abstract ASN.1 away from der/ber.
  // fromDer already checked that this byte exists
  var b2 = bytes.getByte();
  remaining--;

  if (b2 === 0x80) {
    return undefined;
  } // see if the length is "short form" or "long form" (bit 8 set)


  var length;
  var longForm = b2 & 0x80;

  if (!longForm) {
    // length is just the first byte
    length = b2;
  } else {
    // the number of bytes the length is specified in bits 7 through 1
    // and each length byte is in big-endian base-256
    var longFormBytes = b2 & 0x7F;

    _checkBufferLength(bytes, remaining, longFormBytes);

    length = bytes.getInt(longFormBytes << 3);
  } // FIXME: this will only happen for 32 bit getInt with high bit set


  if (length < 0) {
    throw new Error('Negative length: ' + length);
  }

  return length;
};
/**
 * Parses an asn1 object from a byte buffer in DER format.
 *
 * @param bytes the byte buffer to parse from.
 * @param [strict] true to be strict when checking value lengths, false to
 *          allow truncated values (default: true).
 * @param [options] object with options or boolean strict flag
 *          [strict] true to be strict when checking value lengths, false to
 *            allow truncated values (default: true).
 *          [decodeBitStrings] true to attempt to decode the content of
 *            BIT STRINGs (not OCTET STRINGs) using strict mode. Note that
 *            without schema support to understand the data context this can
 *            erroneously decode values that happen to be valid ASN.1. This
 *            flag will be deprecated or removed as soon as schema support is
 *            available. (default: true)
 *
 * @return the parsed asn1 object.
 */


asn1.fromDer = function (bytes, options) {
  if (options === undefined) {
    options = {
      strict: true,
      decodeBitStrings: true
    };
  }

  if (typeof options === 'boolean') {
    options = {
      strict: options,
      decodeBitStrings: true
    };
  }

  if (!('strict' in options)) {
    options.strict = true;
  }

  if (!('decodeBitStrings' in options)) {
    options.decodeBitStrings = true;
  } // wrap in buffer if needed


  if (typeof bytes === 'string') {
    bytes = forge.util.createBuffer(bytes);
  }

  return _fromDer(bytes, bytes.length(), 0, options);
};
/**
 * Internal function to parse an asn1 object from a byte buffer in DER format.
 *
 * @param bytes the byte buffer to parse from.
 * @param remaining the number of bytes remaining for this chunk.
 * @param depth the current parsing depth.
 * @param options object with same options as fromDer().
 *
 * @return the parsed asn1 object.
 */


function _fromDer(bytes, remaining, depth, options) {
  // temporary storage for consumption calculations
  var start; // minimum length for ASN.1 DER structure is 2

  _checkBufferLength(bytes, remaining, 2); // get the first byte


  var b1 = bytes.getByte(); // consumed one byte

  remaining--; // get the tag class

  var tagClass = b1 & 0xC0; // get the type (bits 1-5)

  var type = b1 & 0x1F; // get the variable value length and adjust remaining bytes

  start = bytes.length();

  var length = _getValueLength(bytes, remaining);

  remaining -= start - bytes.length(); // ensure there are enough bytes to get the value

  if (length !== undefined && length > remaining) {
    if (options.strict) {
      var error = new Error('Too few bytes to read ASN.1 value.');
      error.available = bytes.length();
      error.remaining = remaining;
      error.requested = length;
      throw error;
    } // Note: be lenient with truncated values and use remaining state bytes


    length = remaining;
  } // value storage


  var value; // possible BIT STRING contents storage

  var bitStringContents; // constructed flag is bit 6 (32 = 0x20) of the first byte

  var constructed = (b1 & 0x20) === 0x20;

  if (constructed) {
    // parse child asn1 objects from the value
    value = [];

    if (length === undefined) {
      // asn1 object of indefinite length, read until end tag
      for (;;) {
        _checkBufferLength(bytes, remaining, 2);

        if (bytes.bytes(2) === String.fromCharCode(0, 0)) {
          bytes.getBytes(2);
          remaining -= 2;
          break;
        }

        start = bytes.length();
        value.push(_fromDer(bytes, remaining, depth + 1, options));
        remaining -= start - bytes.length();
      }
    } else {
      // parsing asn1 object of definite length
      while (length > 0) {
        start = bytes.length();
        value.push(_fromDer(bytes, length, depth + 1, options));
        remaining -= start - bytes.length();
        length -= start - bytes.length();
      }
    }
  } // if a BIT STRING, save the contents including padding


  if (value === undefined && tagClass === asn1.Class.UNIVERSAL && type === asn1.Type.BITSTRING) {
    bitStringContents = bytes.bytes(length);
  } // determine if a non-constructed value should be decoded as a composed
  // value that contains other ASN.1 objects. BIT STRINGs (and OCTET STRINGs)
  // can be used this way.


  if (value === undefined && options.decodeBitStrings && tagClass === asn1.Class.UNIVERSAL && // FIXME: OCTET STRINGs not yet supported here
  // .. other parts of forge expect to decode OCTET STRINGs manually
  type === asn1.Type.BITSTRING
  /*|| type === asn1.Type.OCTETSTRING*/
  && length > 1) {
    // save read position
    var savedRead = bytes.read;
    var savedRemaining = remaining;
    var unused = 0;

    if (type === asn1.Type.BITSTRING) {
      /* The first octet gives the number of bits by which the length of the
        bit string is less than the next multiple of eight (this is called
        the "number of unused bits").
         The second and following octets give the value of the bit string
        converted to an octet string. */
      _checkBufferLength(bytes, remaining, 1);

      unused = bytes.getByte();
      remaining--;
    } // if all bits are used, maybe the BIT/OCTET STRING holds ASN.1 objs


    if (unused === 0) {
      try {
        // attempt to parse child asn1 object from the value
        // (stored in array to signal composed value)
        start = bytes.length();
        var subOptions = {
          // enforce strict mode to avoid parsing ASN.1 from plain data
          verbose: options.verbose,
          strict: true,
          decodeBitStrings: true
        };

        var composed = _fromDer(bytes, remaining, depth + 1, subOptions);

        var used = start - bytes.length();
        remaining -= used;

        if (type == asn1.Type.BITSTRING) {
          used++;
        } // if the data all decoded and the class indicates UNIVERSAL or
        // CONTEXT_SPECIFIC then assume we've got an encapsulated ASN.1 object


        var tc = composed.tagClass;

        if (used === length && (tc === asn1.Class.UNIVERSAL || tc === asn1.Class.CONTEXT_SPECIFIC)) {
          value = [composed];
        }
      } catch (ex) {}
    }

    if (value === undefined) {
      // restore read position
      bytes.read = savedRead;
      remaining = savedRemaining;
    }
  }

  if (value === undefined) {
    // asn1 not constructed or composed, get raw value
    // TODO: do DER to OID conversion and vice-versa in .toDer?
    if (length === undefined) {
      if (options.strict) {
        throw new Error('Non-constructed ASN.1 object of indefinite length.');
      } // be lenient and use remaining state bytes


      length = remaining;
    }

    if (type === asn1.Type.BMPSTRING) {
      value = '';

      for (; length > 0; length -= 2) {
        _checkBufferLength(bytes, remaining, 2);

        value += String.fromCharCode(bytes.getInt16());
        remaining -= 2;
      }
    } else {
      value = bytes.getBytes(length);
    }
  } // add BIT STRING contents if available


  var asn1Options = bitStringContents === undefined ? null : {
    bitStringContents: bitStringContents
  }; // create and return asn1 object

  return asn1.create(tagClass, type, constructed, value, asn1Options);
}
/**
 * Converts the given asn1 object to a buffer of bytes in DER format.
 *
 * @param asn1 the asn1 object to convert to bytes.
 *
 * @return the buffer of bytes.
 */


asn1.toDer = function (obj) {
  var bytes = forge.util.createBuffer(); // build the first byte

  var b1 = obj.tagClass | obj.type; // for storing the ASN.1 value

  var value = forge.util.createBuffer(); // use BIT STRING contents if available and data not changed

  var useBitStringContents = false;

  if ('bitStringContents' in obj) {
    useBitStringContents = true;

    if (obj.original) {
      useBitStringContents = asn1.equals(obj, obj.original);
    }
  }

  if (useBitStringContents) {
    value.putBytes(obj.bitStringContents);
  } else if (obj.composed) {
    // if composed, use each child asn1 object's DER bytes as value
    // turn on 6th bit (0x20 = 32) to indicate asn1 is constructed
    // from other asn1 objects
    if (obj.constructed) {
      b1 |= 0x20;
    } else {
      // type is a bit string, add unused bits of 0x00
      value.putByte(0x00);
    } // add all of the child DER bytes together


    for (var i = 0; i < obj.value.length; ++i) {
      if (obj.value[i] !== undefined) {
        value.putBuffer(asn1.toDer(obj.value[i]));
      }
    }
  } else {
    // use asn1.value directly
    if (obj.type === asn1.Type.BMPSTRING) {
      for (var i = 0; i < obj.value.length; ++i) {
        value.putInt16(obj.value.charCodeAt(i));
      }
    } else {
      // ensure integer is minimally-encoded
      // TODO: should all leading bytes be stripped vs just one?
      // .. ex '00 00 01' => '01'?
      if (obj.type === asn1.Type.INTEGER && obj.value.length > 1 && ( // leading 0x00 for positive integer
      obj.value.charCodeAt(0) === 0 && (obj.value.charCodeAt(1) & 0x80) === 0 || // leading 0xFF for negative integer
      obj.value.charCodeAt(0) === 0xFF && (obj.value.charCodeAt(1) & 0x80) === 0x80)) {
        value.putBytes(obj.value.substr(1));
      } else {
        value.putBytes(obj.value);
      }
    }
  } // add tag byte


  bytes.putByte(b1); // use "short form" encoding

  if (value.length() <= 127) {
    // one byte describes the length
    // bit 8 = 0 and bits 7-1 = length
    bytes.putByte(value.length() & 0x7F);
  } else {
    // use "long form" encoding
    // 2 to 127 bytes describe the length
    // first byte: bit 8 = 1 and bits 7-1 = # of additional bytes
    // other bytes: length in base 256, big-endian
    var len = value.length();
    var lenBytes = '';

    do {
      lenBytes += String.fromCharCode(len & 0xFF);
      len = len >>> 8;
    } while (len > 0); // set first byte to # bytes used to store the length and turn on
    // bit 8 to indicate long-form length is used


    bytes.putByte(lenBytes.length | 0x80); // concatenate length bytes in reverse since they were generated
    // little endian and we need big endian

    for (var i = lenBytes.length - 1; i >= 0; --i) {
      bytes.putByte(lenBytes.charCodeAt(i));
    }
  } // concatenate value bytes


  bytes.putBuffer(value);
  return bytes;
};
/**
 * Converts an OID dot-separated string to a byte buffer. The byte buffer
 * contains only the DER-encoded value, not any tag or length bytes.
 *
 * @param oid the OID dot-separated string.
 *
 * @return the byte buffer.
 */


asn1.oidToDer = function (oid) {
  // split OID into individual values
  var values = oid.split('.');
  var bytes = forge.util.createBuffer(); // first byte is 40 * value1 + value2

  bytes.putByte(40 * parseInt(values[0], 10) + parseInt(values[1], 10)); // other bytes are each value in base 128 with 8th bit set except for
  // the last byte for each value

  var last, valueBytes, value, b;

  for (var i = 2; i < values.length; ++i) {
    // produce value bytes in reverse because we don't know how many
    // bytes it will take to store the value
    last = true;
    valueBytes = [];
    value = parseInt(values[i], 10);

    do {
      b = value & 0x7F;
      value = value >>> 7; // if value is not last, then turn on 8th bit

      if (!last) {
        b |= 0x80;
      }

      valueBytes.push(b);
      last = false;
    } while (value > 0); // add value bytes in reverse (needs to be in big endian)


    for (var n = valueBytes.length - 1; n >= 0; --n) {
      bytes.putByte(valueBytes[n]);
    }
  }

  return bytes;
};
/**
 * Converts a DER-encoded byte buffer to an OID dot-separated string. The
 * byte buffer should contain only the DER-encoded value, not any tag or
 * length bytes.
 *
 * @param bytes the byte buffer.
 *
 * @return the OID dot-separated string.
 */


asn1.derToOid = function (bytes) {
  var oid; // wrap in buffer if needed

  if (typeof bytes === 'string') {
    bytes = forge.util.createBuffer(bytes);
  } // first byte is 40 * value1 + value2


  var b = bytes.getByte();
  oid = Math.floor(b / 40) + '.' + b % 40; // other bytes are each value in base 128 with 8th bit set except for
  // the last byte for each value

  var value = 0;

  while (bytes.length() > 0) {
    b = bytes.getByte();
    value = value << 7; // not the last byte for the value

    if (b & 0x80) {
      value += b & 0x7F;
    } else {
      // last byte
      oid += '.' + (value + b);
      value = 0;
    }
  }

  return oid;
};
/**
 * Converts a UTCTime value to a date.
 *
 * Note: GeneralizedTime has 4 digits for the year and is used for X.509
 * dates past 2049. Parsing that structure hasn't been implemented yet.
 *
 * @param utc the UTCTime value to convert.
 *
 * @return the date.
 */


asn1.utcTimeToDate = function (utc) {
  /* The following formats can be used:
     YYMMDDhhmmZ
    YYMMDDhhmm+hh'mm'
    YYMMDDhhmm-hh'mm'
    YYMMDDhhmmssZ
    YYMMDDhhmmss+hh'mm'
    YYMMDDhhmmss-hh'mm'
     Where:
     YY is the least significant two digits of the year
    MM is the month (01 to 12)
    DD is the day (01 to 31)
    hh is the hour (00 to 23)
    mm are the minutes (00 to 59)
    ss are the seconds (00 to 59)
    Z indicates that local time is GMT, + indicates that local time is
    later than GMT, and - indicates that local time is earlier than GMT
    hh' is the absolute value of the offset from GMT in hours
    mm' is the absolute value of the offset from GMT in minutes */
  var date = new Date(); // if YY >= 50 use 19xx, if YY < 50 use 20xx

  var year = parseInt(utc.substr(0, 2), 10);
  year = year >= 50 ? 1900 + year : 2000 + year;
  var MM = parseInt(utc.substr(2, 2), 10) - 1; // use 0-11 for month

  var DD = parseInt(utc.substr(4, 2), 10);
  var hh = parseInt(utc.substr(6, 2), 10);
  var mm = parseInt(utc.substr(8, 2), 10);
  var ss = 0; // not just YYMMDDhhmmZ

  if (utc.length > 11) {
    // get character after minutes
    var c = utc.charAt(10);
    var end = 10; // see if seconds are present

    if (c !== '+' && c !== '-') {
      // get seconds
      ss = parseInt(utc.substr(10, 2), 10);
      end += 2;
    }
  } // update date


  date.setUTCFullYear(year, MM, DD);
  date.setUTCHours(hh, mm, ss, 0);

  if (end) {
    // get +/- after end of time
    c = utc.charAt(end);

    if (c === '+' || c === '-') {
      // get hours+minutes offset
      var hhoffset = parseInt(utc.substr(end + 1, 2), 10);
      var mmoffset = parseInt(utc.substr(end + 4, 2), 10); // calculate offset in milliseconds

      var offset = hhoffset * 60 + mmoffset;
      offset *= 60000; // apply offset

      if (c === '+') {
        date.setTime(+date - offset);
      } else {
        date.setTime(+date + offset);
      }
    }
  }

  return date;
};
/**
 * Converts a GeneralizedTime value to a date.
 *
 * @param gentime the GeneralizedTime value to convert.
 *
 * @return the date.
 */


asn1.generalizedTimeToDate = function (gentime) {
  /* The following formats can be used:
     YYYYMMDDHHMMSS
    YYYYMMDDHHMMSS.fff
    YYYYMMDDHHMMSSZ
    YYYYMMDDHHMMSS.fffZ
    YYYYMMDDHHMMSS+hh'mm'
    YYYYMMDDHHMMSS.fff+hh'mm'
    YYYYMMDDHHMMSS-hh'mm'
    YYYYMMDDHHMMSS.fff-hh'mm'
     Where:
     YYYY is the year
    MM is the month (01 to 12)
    DD is the day (01 to 31)
    hh is the hour (00 to 23)
    mm are the minutes (00 to 59)
    ss are the seconds (00 to 59)
    .fff is the second fraction, accurate to three decimal places
    Z indicates that local time is GMT, + indicates that local time is
    later than GMT, and - indicates that local time is earlier than GMT
    hh' is the absolute value of the offset from GMT in hours
    mm' is the absolute value of the offset from GMT in minutes */
  var date = new Date();
  var YYYY = parseInt(gentime.substr(0, 4), 10);
  var MM = parseInt(gentime.substr(4, 2), 10) - 1; // use 0-11 for month

  var DD = parseInt(gentime.substr(6, 2), 10);
  var hh = parseInt(gentime.substr(8, 2), 10);
  var mm = parseInt(gentime.substr(10, 2), 10);
  var ss = parseInt(gentime.substr(12, 2), 10);
  var fff = 0;
  var offset = 0;
  var isUTC = false;

  if (gentime.charAt(gentime.length - 1) === 'Z') {
    isUTC = true;
  }

  var end = gentime.length - 5,
      c = gentime.charAt(end);

  if (c === '+' || c === '-') {
    // get hours+minutes offset
    var hhoffset = parseInt(gentime.substr(end + 1, 2), 10);
    var mmoffset = parseInt(gentime.substr(end + 4, 2), 10); // calculate offset in milliseconds

    offset = hhoffset * 60 + mmoffset;
    offset *= 60000; // apply offset

    if (c === '+') {
      offset *= -1;
    }

    isUTC = true;
  } // check for second fraction


  if (gentime.charAt(14) === '.') {
    fff = parseFloat(gentime.substr(14), 10) * 1000;
  }

  if (isUTC) {
    date.setUTCFullYear(YYYY, MM, DD);
    date.setUTCHours(hh, mm, ss, fff); // apply offset

    date.setTime(+date + offset);
  } else {
    date.setFullYear(YYYY, MM, DD);
    date.setHours(hh, mm, ss, fff);
  }

  return date;
};
/**
 * Converts a date to a UTCTime value.
 *
 * Note: GeneralizedTime has 4 digits for the year and is used for X.509
 * dates past 2049. Converting to a GeneralizedTime hasn't been
 * implemented yet.
 *
 * @param date the date to convert.
 *
 * @return the UTCTime value.
 */


asn1.dateToUtcTime = function (date) {
  // TODO: validate; currently assumes proper format
  if (typeof date === 'string') {
    return date;
  }

  var rval = ''; // create format YYMMDDhhmmssZ

  var format = [];
  format.push(('' + date.getUTCFullYear()).substr(2));
  format.push('' + (date.getUTCMonth() + 1));
  format.push('' + date.getUTCDate());
  format.push('' + date.getUTCHours());
  format.push('' + date.getUTCMinutes());
  format.push('' + date.getUTCSeconds()); // ensure 2 digits are used for each format entry

  for (var i = 0; i < format.length; ++i) {
    if (format[i].length < 2) {
      rval += '0';
    }

    rval += format[i];
  }

  rval += 'Z';
  return rval;
};
/**
 * Converts a date to a GeneralizedTime value.
 *
 * @param date the date to convert.
 *
 * @return the GeneralizedTime value as a string.
 */


asn1.dateToGeneralizedTime = function (date) {
  // TODO: validate; currently assumes proper format
  if (typeof date === 'string') {
    return date;
  }

  var rval = ''; // create format YYYYMMDDHHMMSSZ

  var format = [];
  format.push('' + date.getUTCFullYear());
  format.push('' + (date.getUTCMonth() + 1));
  format.push('' + date.getUTCDate());
  format.push('' + date.getUTCHours());
  format.push('' + date.getUTCMinutes());
  format.push('' + date.getUTCSeconds()); // ensure 2 digits are used for each format entry

  for (var i = 0; i < format.length; ++i) {
    if (format[i].length < 2) {
      rval += '0';
    }

    rval += format[i];
  }

  rval += 'Z';
  return rval;
};
/**
 * Converts a javascript integer to a DER-encoded byte buffer to be used
 * as the value for an INTEGER type.
 *
 * @param x the integer.
 *
 * @return the byte buffer.
 */


asn1.integerToDer = function (x) {
  var rval = forge.util.createBuffer();

  if (x >= -0x80 && x < 0x80) {
    return rval.putSignedInt(x, 8);
  }

  if (x >= -0x8000 && x < 0x8000) {
    return rval.putSignedInt(x, 16);
  }

  if (x >= -0x800000 && x < 0x800000) {
    return rval.putSignedInt(x, 24);
  }

  if (x >= -0x80000000 && x < 0x80000000) {
    return rval.putSignedInt(x, 32);
  }

  var error = new Error('Integer too large; max is 32-bits.');
  error.integer = x;
  throw error;
};
/**
 * Converts a DER-encoded byte buffer to a javascript integer. This is
 * typically used to decode the value of an INTEGER type.
 *
 * @param bytes the byte buffer.
 *
 * @return the integer.
 */


asn1.derToInteger = function (bytes) {
  // wrap in buffer if needed
  if (typeof bytes === 'string') {
    bytes = forge.util.createBuffer(bytes);
  }

  var n = bytes.length() * 8;

  if (n > 32) {
    throw new Error('Integer too large; max is 32-bits.');
  }

  return bytes.getSignedInt(n);
};
/**
 * Validates that the given ASN.1 object is at least a super set of the
 * given ASN.1 structure. Only tag classes and types are checked. An
 * optional map may also be provided to capture ASN.1 values while the
 * structure is checked.
 *
 * To capture an ASN.1 value, set an object in the validator's 'capture'
 * parameter to the key to use in the capture map. To capture the full
 * ASN.1 object, specify 'captureAsn1'. To capture BIT STRING bytes, including
 * the leading unused bits counter byte, specify 'captureBitStringContents'.
 * To capture BIT STRING bytes, without the leading unused bits counter byte,
 * specify 'captureBitStringValue'.
 *
 * Objects in the validator may set a field 'optional' to true to indicate
 * that it isn't necessary to pass validation.
 *
 * @param obj the ASN.1 object to validate.
 * @param v the ASN.1 structure validator.
 * @param capture an optional map to capture values in.
 * @param errors an optional array for storing validation errors.
 *
 * @return true on success, false on failure.
 */


asn1.validate = function (obj, v, capture, errors) {
  var rval = false; // ensure tag class and type are the same if specified

  if ((obj.tagClass === v.tagClass || typeof v.tagClass === 'undefined') && (obj.type === v.type || typeof v.type === 'undefined')) {
    // ensure constructed flag is the same if specified
    if (obj.constructed === v.constructed || typeof v.constructed === 'undefined') {
      rval = true; // handle sub values

      if (v.value && forge.util.isArray(v.value)) {
        var j = 0;

        for (var i = 0; rval && i < v.value.length; ++i) {
          rval = v.value[i].optional || false;

          if (obj.value[j]) {
            rval = asn1.validate(obj.value[j], v.value[i], capture, errors);

            if (rval) {
              ++j;
            } else if (v.value[i].optional) {
              rval = true;
            }
          }

          if (!rval && errors) {
            errors.push('[' + v.name + '] ' + 'Tag class "' + v.tagClass + '", type "' + v.type + '" expected value length "' + v.value.length + '", got "' + obj.value.length + '"');
          }
        }
      }

      if (rval && capture) {
        if (v.capture) {
          capture[v.capture] = obj.value;
        }

        if (v.captureAsn1) {
          capture[v.captureAsn1] = obj;
        }

        if (v.captureBitStringContents && 'bitStringContents' in obj) {
          capture[v.captureBitStringContents] = obj.bitStringContents;
        }

        if (v.captureBitStringValue && 'bitStringContents' in obj) {
          var value;

          if (obj.bitStringContents.length < 2) {
            capture[v.captureBitStringValue] = '';
          } else {
            // FIXME: support unused bits with data shifting
            var unused = obj.bitStringContents.charCodeAt(0);

            if (unused !== 0) {
              throw new Error('captureBitStringValue only supported for zero unused bits');
            }

            capture[v.captureBitStringValue] = obj.bitStringContents.slice(1);
          }
        }
      }
    } else if (errors) {
      errors.push('[' + v.name + '] ' + 'Expected constructed "' + v.constructed + '", got "' + obj.constructed + '"');
    }
  } else if (errors) {
    if (obj.tagClass !== v.tagClass) {
      errors.push('[' + v.name + '] ' + 'Expected tag class "' + v.tagClass + '", got "' + obj.tagClass + '"');
    }

    if (obj.type !== v.type) {
      errors.push('[' + v.name + '] ' + 'Expected type "' + v.type + '", got "' + obj.type + '"');
    }
  }

  return rval;
}; // regex for testing for non-latin characters


var _nonLatinRegex = /[^\\u0000-\\u00ff]/;
/**
 * Pretty prints an ASN.1 object to a string.
 *
 * @param obj the object to write out.
 * @param level the level in the tree.
 * @param indentation the indentation to use.
 *
 * @return the string.
 */

asn1.prettyPrint = function (obj, level, indentation) {
  var rval = ''; // set default level and indentation

  level = level || 0;
  indentation = indentation || 2; // start new line for deep levels

  if (level > 0) {
    rval += '\n';
  } // create indent


  var indent = '';

  for (var i = 0; i < level * indentation; ++i) {
    indent += ' ';
  } // print class:type


  rval += indent + 'Tag: ';

  switch (obj.tagClass) {
    case asn1.Class.UNIVERSAL:
      rval += 'Universal:';
      break;

    case asn1.Class.APPLICATION:
      rval += 'Application:';
      break;

    case asn1.Class.CONTEXT_SPECIFIC:
      rval += 'Context-Specific:';
      break;

    case asn1.Class.PRIVATE:
      rval += 'Private:';
      break;
  }

  if (obj.tagClass === asn1.Class.UNIVERSAL) {
    rval += obj.type; // known types

    switch (obj.type) {
      case asn1.Type.NONE:
        rval += ' (None)';
        break;

      case asn1.Type.BOOLEAN:
        rval += ' (Boolean)';
        break;

      case asn1.Type.INTEGER:
        rval += ' (Integer)';
        break;

      case asn1.Type.BITSTRING:
        rval += ' (Bit string)';
        break;

      case asn1.Type.OCTETSTRING:
        rval += ' (Octet string)';
        break;

      case asn1.Type.NULL:
        rval += ' (Null)';
        break;

      case asn1.Type.OID:
        rval += ' (Object Identifier)';
        break;

      case asn1.Type.ODESC:
        rval += ' (Object Descriptor)';
        break;

      case asn1.Type.EXTERNAL:
        rval += ' (External or Instance of)';
        break;

      case asn1.Type.REAL:
        rval += ' (Real)';
        break;

      case asn1.Type.ENUMERATED:
        rval += ' (Enumerated)';
        break;

      case asn1.Type.EMBEDDED:
        rval += ' (Embedded PDV)';
        break;

      case asn1.Type.UTF8:
        rval += ' (UTF8)';
        break;

      case asn1.Type.ROID:
        rval += ' (Relative Object Identifier)';
        break;

      case asn1.Type.SEQUENCE:
        rval += ' (Sequence)';
        break;

      case asn1.Type.SET:
        rval += ' (Set)';
        break;

      case asn1.Type.PRINTABLESTRING:
        rval += ' (Printable String)';
        break;

      case asn1.Type.IA5String:
        rval += ' (IA5String (ASCII))';
        break;

      case asn1.Type.UTCTIME:
        rval += ' (UTC time)';
        break;

      case asn1.Type.GENERALIZEDTIME:
        rval += ' (Generalized time)';
        break;

      case asn1.Type.BMPSTRING:
        rval += ' (BMP String)';
        break;
    }
  } else {
    rval += obj.type;
  }

  rval += '\n';
  rval += indent + 'Constructed: ' + obj.constructed + '\n';

  if (obj.composed) {
    var subvalues = 0;
    var sub = '';

    for (var i = 0; i < obj.value.length; ++i) {
      if (obj.value[i] !== undefined) {
        subvalues += 1;
        sub += asn1.prettyPrint(obj.value[i], level + 1, indentation);

        if (i + 1 < obj.value.length) {
          sub += ',';
        }
      }
    }

    rval += indent + 'Sub values: ' + subvalues + sub;
  } else {
    rval += indent + 'Value: ';

    if (obj.type === asn1.Type.OID) {
      var oid = asn1.derToOid(obj.value);
      rval += oid;

      if (forge.pki && forge.pki.oids) {
        if (oid in forge.pki.oids) {
          rval += ' (' + forge.pki.oids[oid] + ') ';
        }
      }
    }

    if (obj.type === asn1.Type.INTEGER) {
      try {
        rval += asn1.derToInteger(obj.value);
      } catch (ex) {
        rval += '0x' + forge.util.bytesToHex(obj.value);
      }
    } else if (obj.type === asn1.Type.BITSTRING) {
      // TODO: shift bits as needed to display without padding
      if (obj.value.length > 1) {
        // remove unused bits field
        rval += '0x' + forge.util.bytesToHex(obj.value.slice(1));
      } else {
        rval += '(none)';
      } // show unused bit count


      if (obj.value.length > 0) {
        var unused = obj.value.charCodeAt(0);

        if (unused == 1) {
          rval += ' (1 unused bit shown)';
        } else if (unused > 1) {
          rval += ' (' + unused + ' unused bits shown)';
        }
      }
    } else if (obj.type === asn1.Type.OCTETSTRING) {
      if (!_nonLatinRegex.test(obj.value)) {
        rval += '(' + obj.value + ') ';
      }

      rval += '0x' + forge.util.bytesToHex(obj.value);
    } else if (obj.type === asn1.Type.UTF8) {
      rval += forge.util.decodeUtf8(obj.value);
    } else if (obj.type === asn1.Type.PRINTABLESTRING || obj.type === asn1.Type.IA5String) {
      rval += obj.value;
    } else if (_nonLatinRegex.test(obj.value)) {
      rval += '0x' + forge.util.bytesToHex(obj.value);
    } else if (obj.value.length === 0) {
      rval += '[null]';
    } else {
      rval += obj.value;
    }
  }

  return rval;
};
},{"./forge":"o20S","./util":"lWyh","./oids":"rbLR"}],"XbkJ":[function(require,module,exports) {
/**
 * DES (Data Encryption Standard) implementation.
 *
 * This implementation supports DES as well as 3DES-EDE in ECB and CBC mode.
 * It is based on the BSD-licensed implementation by Paul Tero:
 *
 * Paul Tero, July 2001
 * http://www.tero.co.uk/des/
 *
 * Optimised for performance with large blocks by
 * Michael Hayworth, November 2001
 * http://www.netdealing.com
 *
 * THIS SOFTWARE IS PROVIDED "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 * @author Stefan Siegl
 * @author Dave Longley
 *
 * Copyright (c) 2012 Stefan Siegl <stesie@brokenpipe.de>
 * Copyright (c) 2012-2014 Digital Bazaar, Inc.
 */
var forge = require('./forge');

require('./cipher');

require('./cipherModes');

require('./util');
/* DES API */


module.exports = forge.des = forge.des || {};
/**
 * Deprecated. Instead, use:
 *
 * var cipher = forge.cipher.createCipher('DES-<mode>', key);
 * cipher.start({iv: iv});
 *
 * Creates an DES cipher object to encrypt data using the given symmetric key.
 * The output will be stored in the 'output' member of the returned cipher.
 *
 * The key and iv may be given as binary-encoded strings of bytes or
 * byte buffers.
 *
 * @param key the symmetric key to use (64 or 192 bits).
 * @param iv the initialization vector to use.
 * @param output the buffer to write to, null to create one.
 * @param mode the cipher mode to use (default: 'CBC' if IV is
 *          given, 'ECB' if null).
 *
 * @return the cipher.
 */

forge.des.startEncrypting = function (key, iv, output, mode) {
  var cipher = _createCipher({
    key: key,
    output: output,
    decrypt: false,
    mode: mode || (iv === null ? 'ECB' : 'CBC')
  });

  cipher.start(iv);
  return cipher;
};
/**
 * Deprecated. Instead, use:
 *
 * var cipher = forge.cipher.createCipher('DES-<mode>', key);
 *
 * Creates an DES cipher object to encrypt data using the given symmetric key.
 *
 * The key may be given as a binary-encoded string of bytes or a byte buffer.
 *
 * @param key the symmetric key to use (64 or 192 bits).
 * @param mode the cipher mode to use (default: 'CBC').
 *
 * @return the cipher.
 */


forge.des.createEncryptionCipher = function (key, mode) {
  return _createCipher({
    key: key,
    output: null,
    decrypt: false,
    mode: mode
  });
};
/**
 * Deprecated. Instead, use:
 *
 * var decipher = forge.cipher.createDecipher('DES-<mode>', key);
 * decipher.start({iv: iv});
 *
 * Creates an DES cipher object to decrypt data using the given symmetric key.
 * The output will be stored in the 'output' member of the returned cipher.
 *
 * The key and iv may be given as binary-encoded strings of bytes or
 * byte buffers.
 *
 * @param key the symmetric key to use (64 or 192 bits).
 * @param iv the initialization vector to use.
 * @param output the buffer to write to, null to create one.
 * @param mode the cipher mode to use (default: 'CBC' if IV is
 *          given, 'ECB' if null).
 *
 * @return the cipher.
 */


forge.des.startDecrypting = function (key, iv, output, mode) {
  var cipher = _createCipher({
    key: key,
    output: output,
    decrypt: true,
    mode: mode || (iv === null ? 'ECB' : 'CBC')
  });

  cipher.start(iv);
  return cipher;
};
/**
 * Deprecated. Instead, use:
 *
 * var decipher = forge.cipher.createDecipher('DES-<mode>', key);
 *
 * Creates an DES cipher object to decrypt data using the given symmetric key.
 *
 * The key may be given as a binary-encoded string of bytes or a byte buffer.
 *
 * @param key the symmetric key to use (64 or 192 bits).
 * @param mode the cipher mode to use (default: 'CBC').
 *
 * @return the cipher.
 */


forge.des.createDecryptionCipher = function (key, mode) {
  return _createCipher({
    key: key,
    output: null,
    decrypt: true,
    mode: mode
  });
};
/**
 * Creates a new DES cipher algorithm object.
 *
 * @param name the name of the algorithm.
 * @param mode the mode factory function.
 *
 * @return the DES algorithm object.
 */


forge.des.Algorithm = function (name, mode) {
  var self = this;
  self.name = name;
  self.mode = new mode({
    blockSize: 8,
    cipher: {
      encrypt: function (inBlock, outBlock) {
        return _updateBlock(self._keys, inBlock, outBlock, false);
      },
      decrypt: function (inBlock, outBlock) {
        return _updateBlock(self._keys, inBlock, outBlock, true);
      }
    }
  });
  self._init = false;
};
/**
 * Initializes this DES algorithm by expanding its key.
 *
 * @param options the options to use.
 *          key the key to use with this algorithm.
 *          decrypt true if the algorithm should be initialized for decryption,
 *            false for encryption.
 */


forge.des.Algorithm.prototype.initialize = function (options) {
  if (this._init) {
    return;
  }

  var key = forge.util.createBuffer(options.key);

  if (this.name.indexOf('3DES') === 0) {
    if (key.length() !== 24) {
      throw new Error('Invalid Triple-DES key size: ' + key.length() * 8);
    }
  } // do key expansion to 16 or 48 subkeys (single or triple DES)


  this._keys = _createKeys(key);
  this._init = true;
};
/** Register DES algorithms **/


registerAlgorithm('DES-ECB', forge.cipher.modes.ecb);
registerAlgorithm('DES-CBC', forge.cipher.modes.cbc);
registerAlgorithm('DES-CFB', forge.cipher.modes.cfb);
registerAlgorithm('DES-OFB', forge.cipher.modes.ofb);
registerAlgorithm('DES-CTR', forge.cipher.modes.ctr);
registerAlgorithm('3DES-ECB', forge.cipher.modes.ecb);
registerAlgorithm('3DES-CBC', forge.cipher.modes.cbc);
registerAlgorithm('3DES-CFB', forge.cipher.modes.cfb);
registerAlgorithm('3DES-OFB', forge.cipher.modes.ofb);
registerAlgorithm('3DES-CTR', forge.cipher.modes.ctr);

function registerAlgorithm(name, mode) {
  var factory = function () {
    return new forge.des.Algorithm(name, mode);
  };

  forge.cipher.registerAlgorithm(name, factory);
}
/** DES implementation **/


var spfunction1 = [0x1010400, 0, 0x10000, 0x1010404, 0x1010004, 0x10404, 0x4, 0x10000, 0x400, 0x1010400, 0x1010404, 0x400, 0x1000404, 0x1010004, 0x1000000, 0x4, 0x404, 0x1000400, 0x1000400, 0x10400, 0x10400, 0x1010000, 0x1010000, 0x1000404, 0x10004, 0x1000004, 0x1000004, 0x10004, 0, 0x404, 0x10404, 0x1000000, 0x10000, 0x1010404, 0x4, 0x1010000, 0x1010400, 0x1000000, 0x1000000, 0x400, 0x1010004, 0x10000, 0x10400, 0x1000004, 0x400, 0x4, 0x1000404, 0x10404, 0x1010404, 0x10004, 0x1010000, 0x1000404, 0x1000004, 0x404, 0x10404, 0x1010400, 0x404, 0x1000400, 0x1000400, 0, 0x10004, 0x10400, 0, 0x1010004];
var spfunction2 = [-0x7fef7fe0, -0x7fff8000, 0x8000, 0x108020, 0x100000, 0x20, -0x7fefffe0, -0x7fff7fe0, -0x7fffffe0, -0x7fef7fe0, -0x7fef8000, -0x80000000, -0x7fff8000, 0x100000, 0x20, -0x7fefffe0, 0x108000, 0x100020, -0x7fff7fe0, 0, -0x80000000, 0x8000, 0x108020, -0x7ff00000, 0x100020, -0x7fffffe0, 0, 0x108000, 0x8020, -0x7fef8000, -0x7ff00000, 0x8020, 0, 0x108020, -0x7fefffe0, 0x100000, -0x7fff7fe0, -0x7ff00000, -0x7fef8000, 0x8000, -0x7ff00000, -0x7fff8000, 0x20, -0x7fef7fe0, 0x108020, 0x20, 0x8000, -0x80000000, 0x8020, -0x7fef8000, 0x100000, -0x7fffffe0, 0x100020, -0x7fff7fe0, -0x7fffffe0, 0x100020, 0x108000, 0, -0x7fff8000, 0x8020, -0x80000000, -0x7fefffe0, -0x7fef7fe0, 0x108000];
var spfunction3 = [0x208, 0x8020200, 0, 0x8020008, 0x8000200, 0, 0x20208, 0x8000200, 0x20008, 0x8000008, 0x8000008, 0x20000, 0x8020208, 0x20008, 0x8020000, 0x208, 0x8000000, 0x8, 0x8020200, 0x200, 0x20200, 0x8020000, 0x8020008, 0x20208, 0x8000208, 0x20200, 0x20000, 0x8000208, 0x8, 0x8020208, 0x200, 0x8000000, 0x8020200, 0x8000000, 0x20008, 0x208, 0x20000, 0x8020200, 0x8000200, 0, 0x200, 0x20008, 0x8020208, 0x8000200, 0x8000008, 0x200, 0, 0x8020008, 0x8000208, 0x20000, 0x8000000, 0x8020208, 0x8, 0x20208, 0x20200, 0x8000008, 0x8020000, 0x8000208, 0x208, 0x8020000, 0x20208, 0x8, 0x8020008, 0x20200];
var spfunction4 = [0x802001, 0x2081, 0x2081, 0x80, 0x802080, 0x800081, 0x800001, 0x2001, 0, 0x802000, 0x802000, 0x802081, 0x81, 0, 0x800080, 0x800001, 0x1, 0x2000, 0x800000, 0x802001, 0x80, 0x800000, 0x2001, 0x2080, 0x800081, 0x1, 0x2080, 0x800080, 0x2000, 0x802080, 0x802081, 0x81, 0x800080, 0x800001, 0x802000, 0x802081, 0x81, 0, 0, 0x802000, 0x2080, 0x800080, 0x800081, 0x1, 0x802001, 0x2081, 0x2081, 0x80, 0x802081, 0x81, 0x1, 0x2000, 0x800001, 0x2001, 0x802080, 0x800081, 0x2001, 0x2080, 0x800000, 0x802001, 0x80, 0x800000, 0x2000, 0x802080];
var spfunction5 = [0x100, 0x2080100, 0x2080000, 0x42000100, 0x80000, 0x100, 0x40000000, 0x2080000, 0x40080100, 0x80000, 0x2000100, 0x40080100, 0x42000100, 0x42080000, 0x80100, 0x40000000, 0x2000000, 0x40080000, 0x40080000, 0, 0x40000100, 0x42080100, 0x42080100, 0x2000100, 0x42080000, 0x40000100, 0, 0x42000000, 0x2080100, 0x2000000, 0x42000000, 0x80100, 0x80000, 0x42000100, 0x100, 0x2000000, 0x40000000, 0x2080000, 0x42000100, 0x40080100, 0x2000100, 0x40000000, 0x42080000, 0x2080100, 0x40080100, 0x100, 0x2000000, 0x42080000, 0x42080100, 0x80100, 0x42000000, 0x42080100, 0x2080000, 0, 0x40080000, 0x42000000, 0x80100, 0x2000100, 0x40000100, 0x80000, 0, 0x40080000, 0x2080100, 0x40000100];
var spfunction6 = [0x20000010, 0x20400000, 0x4000, 0x20404010, 0x20400000, 0x10, 0x20404010, 0x400000, 0x20004000, 0x404010, 0x400000, 0x20000010, 0x400010, 0x20004000, 0x20000000, 0x4010, 0, 0x400010, 0x20004010, 0x4000, 0x404000, 0x20004010, 0x10, 0x20400010, 0x20400010, 0, 0x404010, 0x20404000, 0x4010, 0x404000, 0x20404000, 0x20000000, 0x20004000, 0x10, 0x20400010, 0x404000, 0x20404010, 0x400000, 0x4010, 0x20000010, 0x400000, 0x20004000, 0x20000000, 0x4010, 0x20000010, 0x20404010, 0x404000, 0x20400000, 0x404010, 0x20404000, 0, 0x20400010, 0x10, 0x4000, 0x20400000, 0x404010, 0x4000, 0x400010, 0x20004010, 0, 0x20404000, 0x20000000, 0x400010, 0x20004010];
var spfunction7 = [0x200000, 0x4200002, 0x4000802, 0, 0x800, 0x4000802, 0x200802, 0x4200800, 0x4200802, 0x200000, 0, 0x4000002, 0x2, 0x4000000, 0x4200002, 0x802, 0x4000800, 0x200802, 0x200002, 0x4000800, 0x4000002, 0x4200000, 0x4200800, 0x200002, 0x4200000, 0x800, 0x802, 0x4200802, 0x200800, 0x2, 0x4000000, 0x200800, 0x4000000, 0x200800, 0x200000, 0x4000802, 0x4000802, 0x4200002, 0x4200002, 0x2, 0x200002, 0x4000000, 0x4000800, 0x200000, 0x4200800, 0x802, 0x200802, 0x4200800, 0x802, 0x4000002, 0x4200802, 0x4200000, 0x200800, 0, 0x2, 0x4200802, 0, 0x200802, 0x4200000, 0x800, 0x4000002, 0x4000800, 0x800, 0x200002];
var spfunction8 = [0x10001040, 0x1000, 0x40000, 0x10041040, 0x10000000, 0x10001040, 0x40, 0x10000000, 0x40040, 0x10040000, 0x10041040, 0x41000, 0x10041000, 0x41040, 0x1000, 0x40, 0x10040000, 0x10000040, 0x10001000, 0x1040, 0x41000, 0x40040, 0x10040040, 0x10041000, 0x1040, 0, 0, 0x10040040, 0x10000040, 0x10001000, 0x41040, 0x40000, 0x41040, 0x40000, 0x10041000, 0x1000, 0x40, 0x10040040, 0x1000, 0x41040, 0x10001000, 0x40, 0x10000040, 0x10040000, 0x10040040, 0x10000000, 0x40000, 0x10001040, 0, 0x10041040, 0x40040, 0x10000040, 0x10040000, 0x10001000, 0x10001040, 0, 0x10041040, 0x41000, 0x41000, 0x1040, 0x1040, 0x40040, 0x10000000, 0x10041000];
/**
 * Create necessary sub keys.
 *
 * @param key the 64-bit or 192-bit key.
 *
 * @return the expanded keys.
 */

function _createKeys(key) {
  var pc2bytes0 = [0, 0x4, 0x20000000, 0x20000004, 0x10000, 0x10004, 0x20010000, 0x20010004, 0x200, 0x204, 0x20000200, 0x20000204, 0x10200, 0x10204, 0x20010200, 0x20010204],
      pc2bytes1 = [0, 0x1, 0x100000, 0x100001, 0x4000000, 0x4000001, 0x4100000, 0x4100001, 0x100, 0x101, 0x100100, 0x100101, 0x4000100, 0x4000101, 0x4100100, 0x4100101],
      pc2bytes2 = [0, 0x8, 0x800, 0x808, 0x1000000, 0x1000008, 0x1000800, 0x1000808, 0, 0x8, 0x800, 0x808, 0x1000000, 0x1000008, 0x1000800, 0x1000808],
      pc2bytes3 = [0, 0x200000, 0x8000000, 0x8200000, 0x2000, 0x202000, 0x8002000, 0x8202000, 0x20000, 0x220000, 0x8020000, 0x8220000, 0x22000, 0x222000, 0x8022000, 0x8222000],
      pc2bytes4 = [0, 0x40000, 0x10, 0x40010, 0, 0x40000, 0x10, 0x40010, 0x1000, 0x41000, 0x1010, 0x41010, 0x1000, 0x41000, 0x1010, 0x41010],
      pc2bytes5 = [0, 0x400, 0x20, 0x420, 0, 0x400, 0x20, 0x420, 0x2000000, 0x2000400, 0x2000020, 0x2000420, 0x2000000, 0x2000400, 0x2000020, 0x2000420],
      pc2bytes6 = [0, 0x10000000, 0x80000, 0x10080000, 0x2, 0x10000002, 0x80002, 0x10080002, 0, 0x10000000, 0x80000, 0x10080000, 0x2, 0x10000002, 0x80002, 0x10080002],
      pc2bytes7 = [0, 0x10000, 0x800, 0x10800, 0x20000000, 0x20010000, 0x20000800, 0x20010800, 0x20000, 0x30000, 0x20800, 0x30800, 0x20020000, 0x20030000, 0x20020800, 0x20030800],
      pc2bytes8 = [0, 0x40000, 0, 0x40000, 0x2, 0x40002, 0x2, 0x40002, 0x2000000, 0x2040000, 0x2000000, 0x2040000, 0x2000002, 0x2040002, 0x2000002, 0x2040002],
      pc2bytes9 = [0, 0x10000000, 0x8, 0x10000008, 0, 0x10000000, 0x8, 0x10000008, 0x400, 0x10000400, 0x408, 0x10000408, 0x400, 0x10000400, 0x408, 0x10000408],
      pc2bytes10 = [0, 0x20, 0, 0x20, 0x100000, 0x100020, 0x100000, 0x100020, 0x2000, 0x2020, 0x2000, 0x2020, 0x102000, 0x102020, 0x102000, 0x102020],
      pc2bytes11 = [0, 0x1000000, 0x200, 0x1000200, 0x200000, 0x1200000, 0x200200, 0x1200200, 0x4000000, 0x5000000, 0x4000200, 0x5000200, 0x4200000, 0x5200000, 0x4200200, 0x5200200],
      pc2bytes12 = [0, 0x1000, 0x8000000, 0x8001000, 0x80000, 0x81000, 0x8080000, 0x8081000, 0x10, 0x1010, 0x8000010, 0x8001010, 0x80010, 0x81010, 0x8080010, 0x8081010],
      pc2bytes13 = [0, 0x4, 0x100, 0x104, 0, 0x4, 0x100, 0x104, 0x1, 0x5, 0x101, 0x105, 0x1, 0x5, 0x101, 0x105]; // how many iterations (1 for des, 3 for triple des)
  // changed by Paul 16/6/2007 to use Triple DES for 9+ byte keys

  var iterations = key.length() > 8 ? 3 : 1; // stores the return keys

  var keys = []; // now define the left shifts which need to be done

  var shifts = [0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0];
  var n = 0,
      tmp;

  for (var j = 0; j < iterations; j++) {
    var left = key.getInt32();
    var right = key.getInt32();
    tmp = (left >>> 4 ^ right) & 0x0f0f0f0f;
    right ^= tmp;
    left ^= tmp << 4;
    tmp = (right >>> -16 ^ left) & 0x0000ffff;
    left ^= tmp;
    right ^= tmp << -16;
    tmp = (left >>> 2 ^ right) & 0x33333333;
    right ^= tmp;
    left ^= tmp << 2;
    tmp = (right >>> -16 ^ left) & 0x0000ffff;
    left ^= tmp;
    right ^= tmp << -16;
    tmp = (left >>> 1 ^ right) & 0x55555555;
    right ^= tmp;
    left ^= tmp << 1;
    tmp = (right >>> 8 ^ left) & 0x00ff00ff;
    left ^= tmp;
    right ^= tmp << 8;
    tmp = (left >>> 1 ^ right) & 0x55555555;
    right ^= tmp;
    left ^= tmp << 1; // right needs to be shifted and OR'd with last four bits of left

    tmp = left << 8 | right >>> 20 & 0x000000f0; // left needs to be put upside down

    left = right << 24 | right << 8 & 0xff0000 | right >>> 8 & 0xff00 | right >>> 24 & 0xf0;
    right = tmp; // now go through and perform these shifts on the left and right keys

    for (var i = 0; i < shifts.length; ++i) {
      //shift the keys either one or two bits to the left
      if (shifts[i]) {
        left = left << 2 | left >>> 26;
        right = right << 2 | right >>> 26;
      } else {
        left = left << 1 | left >>> 27;
        right = right << 1 | right >>> 27;
      }

      left &= -0xf;
      right &= -0xf; // now apply PC-2, in such a way that E is easier when encrypting or
      // decrypting this conversion will look like PC-2 except only the last 6
      // bits of each byte are used rather than 48 consecutive bits and the
      // order of lines will be according to how the S selection functions will
      // be applied: S2, S4, S6, S8, S1, S3, S5, S7

      var lefttmp = pc2bytes0[left >>> 28] | pc2bytes1[left >>> 24 & 0xf] | pc2bytes2[left >>> 20 & 0xf] | pc2bytes3[left >>> 16 & 0xf] | pc2bytes4[left >>> 12 & 0xf] | pc2bytes5[left >>> 8 & 0xf] | pc2bytes6[left >>> 4 & 0xf];
      var righttmp = pc2bytes7[right >>> 28] | pc2bytes8[right >>> 24 & 0xf] | pc2bytes9[right >>> 20 & 0xf] | pc2bytes10[right >>> 16 & 0xf] | pc2bytes11[right >>> 12 & 0xf] | pc2bytes12[right >>> 8 & 0xf] | pc2bytes13[right >>> 4 & 0xf];
      tmp = (righttmp >>> 16 ^ lefttmp) & 0x0000ffff;
      keys[n++] = lefttmp ^ tmp;
      keys[n++] = righttmp ^ tmp << 16;
    }
  }

  return keys;
}
/**
 * Updates a single block (1 byte) using DES. The update will either
 * encrypt or decrypt the block.
 *
 * @param keys the expanded keys.
 * @param input the input block (an array of 32-bit words).
 * @param output the updated output block.
 * @param decrypt true to decrypt the block, false to encrypt it.
 */


function _updateBlock(keys, input, output, decrypt) {
  // set up loops for single or triple DES
  var iterations = keys.length === 32 ? 3 : 9;
  var looping;

  if (iterations === 3) {
    looping = decrypt ? [30, -2, -2] : [0, 32, 2];
  } else {
    looping = decrypt ? [94, 62, -2, 32, 64, 2, 30, -2, -2] : [0, 32, 2, 62, 30, -2, 64, 96, 2];
  }

  var tmp;
  var left = input[0];
  var right = input[1]; // first each 64 bit chunk of the message must be permuted according to IP

  tmp = (left >>> 4 ^ right) & 0x0f0f0f0f;
  right ^= tmp;
  left ^= tmp << 4;
  tmp = (left >>> 16 ^ right) & 0x0000ffff;
  right ^= tmp;
  left ^= tmp << 16;
  tmp = (right >>> 2 ^ left) & 0x33333333;
  left ^= tmp;
  right ^= tmp << 2;
  tmp = (right >>> 8 ^ left) & 0x00ff00ff;
  left ^= tmp;
  right ^= tmp << 8;
  tmp = (left >>> 1 ^ right) & 0x55555555;
  right ^= tmp;
  left ^= tmp << 1; // rotate left 1 bit

  left = left << 1 | left >>> 31;
  right = right << 1 | right >>> 31;

  for (var j = 0; j < iterations; j += 3) {
    var endloop = looping[j + 1];
    var loopinc = looping[j + 2]; // now go through and perform the encryption or decryption

    for (var i = looping[j]; i != endloop; i += loopinc) {
      var right1 = right ^ keys[i];
      var right2 = (right >>> 4 | right << 28) ^ keys[i + 1]; // passing these bytes through the S selection functions

      tmp = left;
      left = right;
      right = tmp ^ (spfunction2[right1 >>> 24 & 0x3f] | spfunction4[right1 >>> 16 & 0x3f] | spfunction6[right1 >>> 8 & 0x3f] | spfunction8[right1 & 0x3f] | spfunction1[right2 >>> 24 & 0x3f] | spfunction3[right2 >>> 16 & 0x3f] | spfunction5[right2 >>> 8 & 0x3f] | spfunction7[right2 & 0x3f]);
    } // unreverse left and right


    tmp = left;
    left = right;
    right = tmp;
  } // rotate right 1 bit


  left = left >>> 1 | left << 31;
  right = right >>> 1 | right << 31; // now perform IP-1, which is IP in the opposite direction

  tmp = (left >>> 1 ^ right) & 0x55555555;
  right ^= tmp;
  left ^= tmp << 1;
  tmp = (right >>> 8 ^ left) & 0x00ff00ff;
  left ^= tmp;
  right ^= tmp << 8;
  tmp = (right >>> 2 ^ left) & 0x33333333;
  left ^= tmp;
  right ^= tmp << 2;
  tmp = (left >>> 16 ^ right) & 0x0000ffff;
  right ^= tmp;
  left ^= tmp << 16;
  tmp = (left >>> 4 ^ right) & 0x0f0f0f0f;
  right ^= tmp;
  left ^= tmp << 4;
  output[0] = left;
  output[1] = right;
}
/**
 * Deprecated. Instead, use:
 *
 * forge.cipher.createCipher('DES-<mode>', key);
 * forge.cipher.createDecipher('DES-<mode>', key);
 *
 * Creates a deprecated DES cipher object. This object's mode will default to
 * CBC (cipher-block-chaining).
 *
 * The key may be given as a binary-encoded string of bytes or a byte buffer.
 *
 * @param options the options to use.
 *          key the symmetric key to use (64 or 192 bits).
 *          output the buffer to write to.
 *          decrypt true for decryption, false for encryption.
 *          mode the cipher mode to use (default: 'CBC').
 *
 * @return the cipher.
 */


function _createCipher(options) {
  options = options || {};
  var mode = (options.mode || 'CBC').toUpperCase();
  var algorithm = 'DES-' + mode;
  var cipher;

  if (options.decrypt) {
    cipher = forge.cipher.createDecipher(algorithm, options.key);
  } else {
    cipher = forge.cipher.createCipher(algorithm, options.key);
  } // backwards compatible start API


  var start = cipher.start;

  cipher.start = function (iv, options) {
    // backwards compatibility: support second arg as output buffer
    var output = null;

    if (options instanceof forge.util.ByteBuffer) {
      output = options;
      options = {};
    }

    options = options || {};
    options.output = output;
    options.iv = iv;
    start.call(cipher, options);
  };

  return cipher;
}
},{"./forge":"o20S","./cipher":"UdiU","./cipherModes":"PpVb","./util":"lWyh"}],"Uyyi":[function(require,module,exports) {
var Buffer = require("buffer").Buffer;
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

/**
 * Password-Based Key-Derivation Function #2 implementation.
 *
 * See RFC 2898 for details.
 *
 * @author Dave Longley
 *
 * Copyright (c) 2010-2013 Digital Bazaar, Inc.
 */
var forge = require('./forge');

require('./hmac');

require('./md');

require('./util');

var pkcs5 = forge.pkcs5 = forge.pkcs5 || {};
var crypto;

if (forge.util.isNodejs && !forge.options.usePureJavaScript) {
  crypto = require('crypto');
}
/**
 * Derives a key from a password.
 *
 * @param p the password as a binary-encoded string of bytes.
 * @param s the salt as a binary-encoded string of bytes.
 * @param c the iteration count, a positive integer.
 * @param dkLen the intended length, in bytes, of the derived key,
 *          (max: 2^32 - 1) * hash length of the PRF.
 * @param [md] the message digest (or algorithm identifier as a string) to use
 *          in the PRF, defaults to SHA-1.
 * @param [callback(err, key)] presence triggers asynchronous version, called
 *          once the operation completes.
 *
 * @return the derived key, as a binary-encoded string of bytes, for the
 *           synchronous version (if no callback is specified).
 */


module.exports = forge.pbkdf2 = pkcs5.pbkdf2 = function (p, s, c, dkLen, md, callback) {
  if (typeof md === 'function') {
    callback = md;
    md = null;
  } // use native implementation if possible and not disabled, note that
  // some node versions only support SHA-1, others allow digest to be changed


  if (forge.util.isNodejs && !forge.options.usePureJavaScript && crypto.pbkdf2 && (md === null || _typeof(md) !== 'object') && (crypto.pbkdf2Sync.length > 4 || !md || md === 'sha1')) {
    if (typeof md !== 'string') {
      // default prf to SHA-1
      md = 'sha1';
    }

    p = Buffer.from(p, 'binary');
    s = Buffer.from(s, 'binary');

    if (!callback) {
      if (crypto.pbkdf2Sync.length === 4) {
        return crypto.pbkdf2Sync(p, s, c, dkLen).toString('binary');
      }

      return crypto.pbkdf2Sync(p, s, c, dkLen, md).toString('binary');
    }

    if (crypto.pbkdf2Sync.length === 4) {
      return crypto.pbkdf2(p, s, c, dkLen, function (err, key) {
        if (err) {
          return callback(err);
        }

        callback(null, key.toString('binary'));
      });
    }

    return crypto.pbkdf2(p, s, c, dkLen, md, function (err, key) {
      if (err) {
        return callback(err);
      }

      callback(null, key.toString('binary'));
    });
  }

  if (typeof md === 'undefined' || md === null) {
    // default prf to SHA-1
    md = 'sha1';
  }

  if (typeof md === 'string') {
    if (!(md in forge.md.algorithms)) {
      throw new Error('Unknown hash algorithm: ' + md);
    }

    md = forge.md[md].create();
  }

  var hLen = md.digestLength;
  /* 1. If dkLen > (2^32 - 1) * hLen, output "derived key too long" and
    stop. */

  if (dkLen > 0xFFFFFFFF * hLen) {
    var err = new Error('Derived key is too long.');

    if (callback) {
      return callback(err);
    }

    throw err;
  }
  /* 2. Let len be the number of hLen-octet blocks in the derived key,
    rounding up, and let r be the number of octets in the last
    block:
     len = CEIL(dkLen / hLen),
    r = dkLen - (len - 1) * hLen. */


  var len = Math.ceil(dkLen / hLen);
  var r = dkLen - (len - 1) * hLen;
  /* 3. For each block of the derived key apply the function F defined
    below to the password P, the salt S, the iteration count c, and
    the block index to compute the block:
     T_1 = F(P, S, c, 1),
    T_2 = F(P, S, c, 2),
    ...
    T_len = F(P, S, c, len),
     where the function F is defined as the exclusive-or sum of the
    first c iterates of the underlying pseudorandom function PRF
    applied to the password P and the concatenation of the salt S
    and the block index i:
     F(P, S, c, i) = u_1 XOR u_2 XOR ... XOR u_c
     where
     u_1 = PRF(P, S || INT(i)),
    u_2 = PRF(P, u_1),
    ...
    u_c = PRF(P, u_{c-1}).
     Here, INT(i) is a four-octet encoding of the integer i, most
    significant octet first. */

  var prf = forge.hmac.create();
  prf.start(md, p);
  var dk = '';
  var xor, u_c, u_c1; // sync version

  if (!callback) {
    for (var i = 1; i <= len; ++i) {
      // PRF(P, S || INT(i)) (first iteration)
      prf.start(null, null);
      prf.update(s);
      prf.update(forge.util.int32ToBytes(i));
      xor = u_c1 = prf.digest().getBytes(); // PRF(P, u_{c-1}) (other iterations)

      for (var j = 2; j <= c; ++j) {
        prf.start(null, null);
        prf.update(u_c1);
        u_c = prf.digest().getBytes(); // F(p, s, c, i)

        xor = forge.util.xorBytes(xor, u_c, hLen);
        u_c1 = u_c;
      }
      /* 4. Concatenate the blocks and extract the first dkLen octets to
        produce a derived key DK:
         DK = T_1 || T_2 ||  ...  || T_len<0..r-1> */


      dk += i < len ? xor : xor.substr(0, r);
    }
    /* 5. Output the derived key DK. */


    return dk;
  } // async version


  var i = 1,
      j;

  function outer() {
    if (i > len) {
      // done
      return callback(null, dk);
    } // PRF(P, S || INT(i)) (first iteration)


    prf.start(null, null);
    prf.update(s);
    prf.update(forge.util.int32ToBytes(i));
    xor = u_c1 = prf.digest().getBytes(); // PRF(P, u_{c-1}) (other iterations)

    j = 2;
    inner();
  }

  function inner() {
    if (j <= c) {
      prf.start(null, null);
      prf.update(u_c1);
      u_c = prf.digest().getBytes(); // F(p, s, c, i)

      xor = forge.util.xorBytes(xor, u_c, hLen);
      u_c1 = u_c;
      ++j;
      return forge.util.setImmediate(inner);
    }
    /* 4. Concatenate the blocks and extract the first dkLen octets to
      produce a derived key DK:
       DK = T_1 || T_2 ||  ...  || T_len<0..r-1> */


    dk += i < len ? xor : xor.substr(0, r);
    ++i;
    outer();
  }

  outer();
};
},{"./forge":"o20S","./hmac":"NYQx","./md":"Tsiu","./util":"lWyh","crypto":"vpK4","buffer":"vpK4"}],"ClqA":[function(require,module,exports) {
/**
 * Javascript implementation of basic PEM (Privacy Enhanced Mail) algorithms.
 *
 * See: RFC 1421.
 *
 * @author Dave Longley
 *
 * Copyright (c) 2013-2014 Digital Bazaar, Inc.
 *
 * A Forge PEM object has the following fields:
 *
 * type: identifies the type of message (eg: "RSA PRIVATE KEY").
 *
 * procType: identifies the type of processing performed on the message,
 *   it has two subfields: version and type, eg: 4,ENCRYPTED.
 *
 * contentDomain: identifies the type of content in the message, typically
 *   only uses the value: "RFC822".
 *
 * dekInfo: identifies the message encryption algorithm and mode and includes
 *   any parameters for the algorithm, it has two subfields: algorithm and
 *   parameters, eg: DES-CBC,F8143EDE5960C597.
 *
 * headers: contains all other PEM encapsulated headers -- where order is
 *   significant (for pairing data like recipient ID + key info).
 *
 * body: the binary-encoded body.
 */
var forge = require('./forge');

require('./util'); // shortcut for pem API


var pem = module.exports = forge.pem = forge.pem || {};
/**
 * Encodes (serializes) the given PEM object.
 *
 * @param msg the PEM message object to encode.
 * @param options the options to use:
 *          maxline the maximum characters per line for the body, (default: 64).
 *
 * @return the PEM-formatted string.
 */

pem.encode = function (msg, options) {
  options = options || {};
  var rval = '-----BEGIN ' + msg.type + '-----\r\n'; // encode special headers

  var header;

  if (msg.procType) {
    header = {
      name: 'Proc-Type',
      values: [String(msg.procType.version), msg.procType.type]
    };
    rval += foldHeader(header);
  }

  if (msg.contentDomain) {
    header = {
      name: 'Content-Domain',
      values: [msg.contentDomain]
    };
    rval += foldHeader(header);
  }

  if (msg.dekInfo) {
    header = {
      name: 'DEK-Info',
      values: [msg.dekInfo.algorithm]
    };

    if (msg.dekInfo.parameters) {
      header.values.push(msg.dekInfo.parameters);
    }

    rval += foldHeader(header);
  }

  if (msg.headers) {
    // encode all other headers
    for (var i = 0; i < msg.headers.length; ++i) {
      rval += foldHeader(msg.headers[i]);
    }
  } // terminate header


  if (msg.procType) {
    rval += '\r\n';
  } // add body


  rval += forge.util.encode64(msg.body, options.maxline || 64) + '\r\n';
  rval += '-----END ' + msg.type + '-----\r\n';
  return rval;
};
/**
 * Decodes (deserializes) all PEM messages found in the given string.
 *
 * @param str the PEM-formatted string to decode.
 *
 * @return the PEM message objects in an array.
 */


pem.decode = function (str) {
  var rval = []; // split string into PEM messages (be lenient w/EOF on BEGIN line)

  var rMessage = /\s*-----BEGIN ([A-Z0-9- ]+)-----\r?\n?([\x21-\x7e\s]+?(?:\r?\n\r?\n))?([:A-Za-z0-9+\/=\s]+?)-----END \1-----/g;
  var rHeader = /([\x21-\x7e]+):\s*([\x21-\x7e\s^:]+)/;
  var rCRLF = /\r?\n/;
  var match;

  while (true) {
    match = rMessage.exec(str);

    if (!match) {
      break;
    }

    var msg = {
      type: match[1],
      procType: null,
      contentDomain: null,
      dekInfo: null,
      headers: [],
      body: forge.util.decode64(match[3])
    };
    rval.push(msg); // no headers

    if (!match[2]) {
      continue;
    } // parse headers


    var lines = match[2].split(rCRLF);
    var li = 0;

    while (match && li < lines.length) {
      // get line, trim any rhs whitespace
      var line = lines[li].replace(/\s+$/, ''); // RFC2822 unfold any following folded lines

      for (var nl = li + 1; nl < lines.length; ++nl) {
        var next = lines[nl];

        if (!/\s/.test(next[0])) {
          break;
        }

        line += next;
        li = nl;
      } // parse header


      match = line.match(rHeader);

      if (match) {
        var header = {
          name: match[1],
          values: []
        };
        var values = match[2].split(',');

        for (var vi = 0; vi < values.length; ++vi) {
          header.values.push(ltrim(values[vi]));
        } // Proc-Type must be the first header


        if (!msg.procType) {
          if (header.name !== 'Proc-Type') {
            throw new Error('Invalid PEM formatted message. The first ' + 'encapsulated header must be "Proc-Type".');
          } else if (header.values.length !== 2) {
            throw new Error('Invalid PEM formatted message. The "Proc-Type" ' + 'header must have two subfields.');
          }

          msg.procType = {
            version: values[0],
            type: values[1]
          };
        } else if (!msg.contentDomain && header.name === 'Content-Domain') {
          // special-case Content-Domain
          msg.contentDomain = values[0] || '';
        } else if (!msg.dekInfo && header.name === 'DEK-Info') {
          // special-case DEK-Info
          if (header.values.length === 0) {
            throw new Error('Invalid PEM formatted message. The "DEK-Info" ' + 'header must have at least one subfield.');
          }

          msg.dekInfo = {
            algorithm: values[0],
            parameters: values[1] || null
          };
        } else {
          msg.headers.push(header);
        }
      }

      ++li;
    }

    if (msg.procType === 'ENCRYPTED' && !msg.dekInfo) {
      throw new Error('Invalid PEM formatted message. The "DEK-Info" ' + 'header must be present if "Proc-Type" is "ENCRYPTED".');
    }
  }

  if (rval.length === 0) {
    throw new Error('Invalid PEM formatted message.');
  }

  return rval;
};

function foldHeader(header) {
  var rval = header.name + ': '; // ensure values with CRLF are folded

  var values = [];

  var insertSpace = function (match, $1) {
    return ' ' + $1;
  };

  for (var i = 0; i < header.values.length; ++i) {
    values.push(header.values[i].replace(/^(\S+\r\n)/, insertSpace));
  }

  rval += values.join(',') + '\r\n'; // do folding

  var length = 0;
  var candidate = -1;

  for (var i = 0; i < rval.length; ++i, ++length) {
    if (length > 65 && candidate !== -1) {
      var insert = rval[candidate];

      if (insert === ',') {
        ++candidate;
        rval = rval.substr(0, candidate) + '\r\n ' + rval.substr(candidate);
      } else {
        rval = rval.substr(0, candidate) + '\r\n' + insert + rval.substr(candidate + 1);
      }

      length = i - candidate - 1;
      candidate = -1;
      ++i;
    } else if (rval[i] === ' ' || rval[i] === '\t' || rval[i] === ',') {
      candidate = i;
    }
  }

  return rval;
}

function ltrim(str) {
  return str.replace(/^\s+/, '');
}
},{"./forge":"o20S","./util":"lWyh"}],"M1Ai":[function(require,module,exports) {
/**
 * RC2 implementation.
 *
 * @author Stefan Siegl
 *
 * Copyright (c) 2012 Stefan Siegl <stesie@brokenpipe.de>
 *
 * Information on the RC2 cipher is available from RFC #2268,
 * http://www.ietf.org/rfc/rfc2268.txt
 */
var forge = require('./forge');

require('./util');

var piTable = [0xd9, 0x78, 0xf9, 0xc4, 0x19, 0xdd, 0xb5, 0xed, 0x28, 0xe9, 0xfd, 0x79, 0x4a, 0xa0, 0xd8, 0x9d, 0xc6, 0x7e, 0x37, 0x83, 0x2b, 0x76, 0x53, 0x8e, 0x62, 0x4c, 0x64, 0x88, 0x44, 0x8b, 0xfb, 0xa2, 0x17, 0x9a, 0x59, 0xf5, 0x87, 0xb3, 0x4f, 0x13, 0x61, 0x45, 0x6d, 0x8d, 0x09, 0x81, 0x7d, 0x32, 0xbd, 0x8f, 0x40, 0xeb, 0x86, 0xb7, 0x7b, 0x0b, 0xf0, 0x95, 0x21, 0x22, 0x5c, 0x6b, 0x4e, 0x82, 0x54, 0xd6, 0x65, 0x93, 0xce, 0x60, 0xb2, 0x1c, 0x73, 0x56, 0xc0, 0x14, 0xa7, 0x8c, 0xf1, 0xdc, 0x12, 0x75, 0xca, 0x1f, 0x3b, 0xbe, 0xe4, 0xd1, 0x42, 0x3d, 0xd4, 0x30, 0xa3, 0x3c, 0xb6, 0x26, 0x6f, 0xbf, 0x0e, 0xda, 0x46, 0x69, 0x07, 0x57, 0x27, 0xf2, 0x1d, 0x9b, 0xbc, 0x94, 0x43, 0x03, 0xf8, 0x11, 0xc7, 0xf6, 0x90, 0xef, 0x3e, 0xe7, 0x06, 0xc3, 0xd5, 0x2f, 0xc8, 0x66, 0x1e, 0xd7, 0x08, 0xe8, 0xea, 0xde, 0x80, 0x52, 0xee, 0xf7, 0x84, 0xaa, 0x72, 0xac, 0x35, 0x4d, 0x6a, 0x2a, 0x96, 0x1a, 0xd2, 0x71, 0x5a, 0x15, 0x49, 0x74, 0x4b, 0x9f, 0xd0, 0x5e, 0x04, 0x18, 0xa4, 0xec, 0xc2, 0xe0, 0x41, 0x6e, 0x0f, 0x51, 0xcb, 0xcc, 0x24, 0x91, 0xaf, 0x50, 0xa1, 0xf4, 0x70, 0x39, 0x99, 0x7c, 0x3a, 0x85, 0x23, 0xb8, 0xb4, 0x7a, 0xfc, 0x02, 0x36, 0x5b, 0x25, 0x55, 0x97, 0x31, 0x2d, 0x5d, 0xfa, 0x98, 0xe3, 0x8a, 0x92, 0xae, 0x05, 0xdf, 0x29, 0x10, 0x67, 0x6c, 0xba, 0xc9, 0xd3, 0x00, 0xe6, 0xcf, 0xe1, 0x9e, 0xa8, 0x2c, 0x63, 0x16, 0x01, 0x3f, 0x58, 0xe2, 0x89, 0xa9, 0x0d, 0x38, 0x34, 0x1b, 0xab, 0x33, 0xff, 0xb0, 0xbb, 0x48, 0x0c, 0x5f, 0xb9, 0xb1, 0xcd, 0x2e, 0xc5, 0xf3, 0xdb, 0x47, 0xe5, 0xa5, 0x9c, 0x77, 0x0a, 0xa6, 0x20, 0x68, 0xfe, 0x7f, 0xc1, 0xad];
var s = [1, 2, 3, 5];
/**
 * Rotate a word left by given number of bits.
 *
 * Bits that are shifted out on the left are put back in on the right
 * hand side.
 *
 * @param word The word to shift left.
 * @param bits The number of bits to shift by.
 * @return The rotated word.
 */

var rol = function (word, bits) {
  return word << bits & 0xffff | (word & 0xffff) >> 16 - bits;
};
/**
 * Rotate a word right by given number of bits.
 *
 * Bits that are shifted out on the right are put back in on the left
 * hand side.
 *
 * @param word The word to shift right.
 * @param bits The number of bits to shift by.
 * @return The rotated word.
 */


var ror = function (word, bits) {
  return (word & 0xffff) >> bits | word << 16 - bits & 0xffff;
};
/* RC2 API */


module.exports = forge.rc2 = forge.rc2 || {};
/**
 * Perform RC2 key expansion as per RFC #2268, section 2.
 *
 * @param key variable-length user key (between 1 and 128 bytes)
 * @param effKeyBits number of effective key bits (default: 128)
 * @return the expanded RC2 key (ByteBuffer of 128 bytes)
 */

forge.rc2.expandKey = function (key, effKeyBits) {
  if (typeof key === 'string') {
    key = forge.util.createBuffer(key);
  }

  effKeyBits = effKeyBits || 128;
  /* introduce variables that match the names used in RFC #2268 */

  var L = key;
  var T = key.length();
  var T1 = effKeyBits;
  var T8 = Math.ceil(T1 / 8);
  var TM = 0xff >> (T1 & 0x07);
  var i;

  for (i = T; i < 128; i++) {
    L.putByte(piTable[L.at(i - 1) + L.at(i - T) & 0xff]);
  }

  L.setAt(128 - T8, piTable[L.at(128 - T8) & TM]);

  for (i = 127 - T8; i >= 0; i--) {
    L.setAt(i, piTable[L.at(i + 1) ^ L.at(i + T8)]);
  }

  return L;
};
/**
 * Creates a RC2 cipher object.
 *
 * @param key the symmetric key to use (as base for key generation).
 * @param bits the number of effective key bits.
 * @param encrypt false for decryption, true for encryption.
 *
 * @return the cipher.
 */


var createCipher = function (key, bits, encrypt) {
  var _finish = false,
      _input = null,
      _output = null,
      _iv = null;
  var mixRound, mashRound;
  var i,
      j,
      K = [];
  /* Expand key and fill into K[] Array */

  key = forge.rc2.expandKey(key, bits);

  for (i = 0; i < 64; i++) {
    K.push(key.getInt16Le());
  }

  if (encrypt) {
    /**
     * Perform one mixing round "in place".
     *
     * @param R Array of four words to perform mixing on.
     */
    mixRound = function (R) {
      for (i = 0; i < 4; i++) {
        R[i] += K[j] + (R[(i + 3) % 4] & R[(i + 2) % 4]) + (~R[(i + 3) % 4] & R[(i + 1) % 4]);
        R[i] = rol(R[i], s[i]);
        j++;
      }
    };
    /**
     * Perform one mashing round "in place".
     *
     * @param R Array of four words to perform mashing on.
     */


    mashRound = function (R) {
      for (i = 0; i < 4; i++) {
        R[i] += K[R[(i + 3) % 4] & 63];
      }
    };
  } else {
    /**
     * Perform one r-mixing round "in place".
     *
     * @param R Array of four words to perform mixing on.
     */
    mixRound = function (R) {
      for (i = 3; i >= 0; i--) {
        R[i] = ror(R[i], s[i]);
        R[i] -= K[j] + (R[(i + 3) % 4] & R[(i + 2) % 4]) + (~R[(i + 3) % 4] & R[(i + 1) % 4]);
        j--;
      }
    };
    /**
     * Perform one r-mashing round "in place".
     *
     * @param R Array of four words to perform mashing on.
     */


    mashRound = function (R) {
      for (i = 3; i >= 0; i--) {
        R[i] -= K[R[(i + 3) % 4] & 63];
      }
    };
  }
  /**
   * Run the specified cipher execution plan.
   *
   * This function takes four words from the input buffer, applies the IV on
   * it (if requested) and runs the provided execution plan.
   *
   * The plan must be put together in form of a array of arrays.  Where the
   * outer one is simply a list of steps to perform and the inner one needs
   * to have two elements: the first one telling how many rounds to perform,
   * the second one telling what to do (i.e. the function to call).
   *
   * @param {Array} plan The plan to execute.
   */


  var runPlan = function (plan) {
    var R = [];
    /* Get data from input buffer and fill the four words into R */

    for (i = 0; i < 4; i++) {
      var val = _input.getInt16Le();

      if (_iv !== null) {
        if (encrypt) {
          /* We're encrypting, apply the IV first. */
          val ^= _iv.getInt16Le();
        } else {
          /* We're decryption, keep cipher text for next block. */
          _iv.putInt16Le(val);
        }
      }

      R.push(val & 0xffff);
    }
    /* Reset global "j" variable as per spec. */


    j = encrypt ? 0 : 63;
    /* Run execution plan. */

    for (var ptr = 0; ptr < plan.length; ptr++) {
      for (var ctr = 0; ctr < plan[ptr][0]; ctr++) {
        plan[ptr][1](R);
      }
    }
    /* Write back result to output buffer. */


    for (i = 0; i < 4; i++) {
      if (_iv !== null) {
        if (encrypt) {
          /* We're encrypting in CBC-mode, feed back encrypted bytes into
             IV buffer to carry it forward to next block. */
          _iv.putInt16Le(R[i]);
        } else {
          R[i] ^= _iv.getInt16Le();
        }
      }

      _output.putInt16Le(R[i]);
    }
  };
  /* Create cipher object */


  var cipher = null;
  cipher = {
    /**
     * Starts or restarts the encryption or decryption process, whichever
     * was previously configured.
     *
     * To use the cipher in CBC mode, iv may be given either as a string
     * of bytes, or as a byte buffer.  For ECB mode, give null as iv.
     *
     * @param iv the initialization vector to use, null for ECB mode.
     * @param output the output the buffer to write to, null to create one.
     */
    start: function (iv, output) {
      if (iv) {
        /* CBC mode */
        if (typeof iv === 'string') {
          iv = forge.util.createBuffer(iv);
        }
      }

      _finish = false;
      _input = forge.util.createBuffer();
      _output = output || new forge.util.createBuffer();
      _iv = iv;
      cipher.output = _output;
    },

    /**
     * Updates the next block.
     *
     * @param input the buffer to read from.
     */
    update: function (input) {
      if (!_finish) {
        // not finishing, so fill the input buffer with more input
        _input.putBuffer(input);
      }

      while (_input.length() >= 8) {
        runPlan([[5, mixRound], [1, mashRound], [6, mixRound], [1, mashRound], [5, mixRound]]);
      }
    },

    /**
     * Finishes encrypting or decrypting.
     *
     * @param pad a padding function to use, null for PKCS#7 padding,
     *           signature(blockSize, buffer, decrypt).
     *
     * @return true if successful, false on error.
     */
    finish: function (pad) {
      var rval = true;

      if (encrypt) {
        if (pad) {
          rval = pad(8, _input, !encrypt);
        } else {
          // add PKCS#7 padding to block (each pad byte is the
          // value of the number of pad bytes)
          var padding = _input.length() === 8 ? 8 : 8 - _input.length();

          _input.fillWithByte(padding, padding);
        }
      }

      if (rval) {
        // do final update
        _finish = true;
        cipher.update();
      }

      if (!encrypt) {
        // check for error: input data not a multiple of block size
        rval = _input.length() === 0;

        if (rval) {
          if (pad) {
            rval = pad(8, _output, !encrypt);
          } else {
            // ensure padding byte count is valid
            var len = _output.length();

            var count = _output.at(len - 1);

            if (count > len) {
              rval = false;
            } else {
              // trim off padding bytes
              _output.truncate(count);
            }
          }
        }
      }

      return rval;
    }
  };
  return cipher;
};
/**
 * Creates an RC2 cipher object to encrypt data in ECB or CBC mode using the
 * given symmetric key. The output will be stored in the 'output' member
 * of the returned cipher.
 *
 * The key and iv may be given as a string of bytes or a byte buffer.
 * The cipher is initialized to use 128 effective key bits.
 *
 * @param key the symmetric key to use.
 * @param iv the initialization vector to use.
 * @param output the buffer to write to, null to create one.
 *
 * @return the cipher.
 */


forge.rc2.startEncrypting = function (key, iv, output) {
  var cipher = forge.rc2.createEncryptionCipher(key, 128);
  cipher.start(iv, output);
  return cipher;
};
/**
 * Creates an RC2 cipher object to encrypt data in ECB or CBC mode using the
 * given symmetric key.
 *
 * The key may be given as a string of bytes or a byte buffer.
 *
 * To start encrypting call start() on the cipher with an iv and optional
 * output buffer.
 *
 * @param key the symmetric key to use.
 *
 * @return the cipher.
 */


forge.rc2.createEncryptionCipher = function (key, bits) {
  return createCipher(key, bits, true);
};
/**
 * Creates an RC2 cipher object to decrypt data in ECB or CBC mode using the
 * given symmetric key. The output will be stored in the 'output' member
 * of the returned cipher.
 *
 * The key and iv may be given as a string of bytes or a byte buffer.
 * The cipher is initialized to use 128 effective key bits.
 *
 * @param key the symmetric key to use.
 * @param iv the initialization vector to use.
 * @param output the buffer to write to, null to create one.
 *
 * @return the cipher.
 */


forge.rc2.startDecrypting = function (key, iv, output) {
  var cipher = forge.rc2.createDecryptionCipher(key, 128);
  cipher.start(iv, output);
  return cipher;
};
/**
 * Creates an RC2 cipher object to decrypt data in ECB or CBC mode using the
 * given symmetric key.
 *
 * The key may be given as a string of bytes or a byte buffer.
 *
 * To start decrypting call start() on the cipher with an iv and optional
 * output buffer.
 *
 * @param key the symmetric key to use.
 *
 * @return the cipher.
 */


forge.rc2.createDecryptionCipher = function (key, bits) {
  return createCipher(key, bits, false);
};
},{"./forge":"o20S","./util":"lWyh"}],"tFuv":[function(require,module,exports) {
// Copyright (c) 2005  Tom Wu
// All Rights Reserved.
// See "LICENSE" for details.
// Basic JavaScript BN library - subset useful for RSA encryption.

/*
Licensing (LICENSE)
-------------------

This software is covered under the following copyright:
*/

/*
 * Copyright (c) 2003-2005  Tom Wu
 * All Rights Reserved.
 *
 * Permission is hereby granted, free of charge, to any person obtaining
 * a copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sublicense, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS-IS" AND WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS, IMPLIED OR OTHERWISE, INCLUDING WITHOUT LIMITATION, ANY
 * WARRANTY OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.
 *
 * IN NO EVENT SHALL TOM WU BE LIABLE FOR ANY SPECIAL, INCIDENTAL,
 * INDIRECT OR CONSEQUENTIAL DAMAGES OF ANY KIND, OR ANY DAMAGES WHATSOEVER
 * RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER OR NOT ADVISED OF
 * THE POSSIBILITY OF DAMAGE, AND ON ANY THEORY OF LIABILITY, ARISING OUT
 * OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 *
 * In addition, the following condition applies:
 *
 * All redistributions must retain an intact copy of this copyright notice
 * and disclaimer.
 */

/*
Address all questions regarding this license to:

  Tom Wu
  tjw@cs.Stanford.EDU
*/
var forge = require('./forge');

module.exports = forge.jsbn = forge.jsbn || {}; // Bits per digit

var dbits; // JavaScript engine analysis

var canary = 0xdeadbeefcafe;
var j_lm = (canary & 0xffffff) == 0xefcafe; // (public) Constructor

function BigInteger(a, b, c) {
  this.data = [];
  if (a != null) if ("number" == typeof a) this.fromNumber(a, b, c);else if (b == null && "string" != typeof a) this.fromString(a, 256);else this.fromString(a, b);
}

forge.jsbn.BigInteger = BigInteger; // return new, unset BigInteger

function nbi() {
  return new BigInteger(null);
} // am: Compute w_j += (x*this_i), propagate carries,
// c is initial carry, returns final carry.
// c < 3*dvalue, x < 2*dvalue, this_i < dvalue
// We need to select the fastest one that works in this environment.
// am1: use a single mult and divide to get the high bits,
// max digit bits should be 26 because
// max internal value = 2*dvalue^2-2*dvalue (< 2^53)


function am1(i, x, w, j, c, n) {
  while (--n >= 0) {
    var v = x * this.data[i++] + w.data[j] + c;
    c = Math.floor(v / 0x4000000);
    w.data[j++] = v & 0x3ffffff;
  }

  return c;
} // am2 avoids a big mult-and-extract completely.
// Max digit bits should be <= 30 because we do bitwise ops
// on values up to 2*hdvalue^2-hdvalue-1 (< 2^31)


function am2(i, x, w, j, c, n) {
  var xl = x & 0x7fff,
      xh = x >> 15;

  while (--n >= 0) {
    var l = this.data[i] & 0x7fff;
    var h = this.data[i++] >> 15;
    var m = xh * l + h * xl;
    l = xl * l + ((m & 0x7fff) << 15) + w.data[j] + (c & 0x3fffffff);
    c = (l >>> 30) + (m >>> 15) + xh * h + (c >>> 30);
    w.data[j++] = l & 0x3fffffff;
  }

  return c;
} // Alternately, set max digit bits to 28 since some
// browsers slow down when dealing with 32-bit numbers.


function am3(i, x, w, j, c, n) {
  var xl = x & 0x3fff,
      xh = x >> 14;

  while (--n >= 0) {
    var l = this.data[i] & 0x3fff;
    var h = this.data[i++] >> 14;
    var m = xh * l + h * xl;
    l = xl * l + ((m & 0x3fff) << 14) + w.data[j] + c;
    c = (l >> 28) + (m >> 14) + xh * h;
    w.data[j++] = l & 0xfffffff;
  }

  return c;
} // node.js (no browser)


if (typeof navigator === 'undefined') {
  BigInteger.prototype.am = am3;
  dbits = 28;
} else if (j_lm && navigator.appName == "Microsoft Internet Explorer") {
  BigInteger.prototype.am = am2;
  dbits = 30;
} else if (j_lm && navigator.appName != "Netscape") {
  BigInteger.prototype.am = am1;
  dbits = 26;
} else {
  // Mozilla/Netscape seems to prefer am3
  BigInteger.prototype.am = am3;
  dbits = 28;
}

BigInteger.prototype.DB = dbits;
BigInteger.prototype.DM = (1 << dbits) - 1;
BigInteger.prototype.DV = 1 << dbits;
var BI_FP = 52;
BigInteger.prototype.FV = Math.pow(2, BI_FP);
BigInteger.prototype.F1 = BI_FP - dbits;
BigInteger.prototype.F2 = 2 * dbits - BI_FP; // Digit conversions

var BI_RM = "0123456789abcdefghijklmnopqrstuvwxyz";
var BI_RC = new Array();
var rr, vv;
rr = "0".charCodeAt(0);

for (vv = 0; vv <= 9; ++vv) BI_RC[rr++] = vv;

rr = "a".charCodeAt(0);

for (vv = 10; vv < 36; ++vv) BI_RC[rr++] = vv;

rr = "A".charCodeAt(0);

for (vv = 10; vv < 36; ++vv) BI_RC[rr++] = vv;

function int2char(n) {
  return BI_RM.charAt(n);
}

function intAt(s, i) {
  var c = BI_RC[s.charCodeAt(i)];
  return c == null ? -1 : c;
} // (protected) copy this to r


function bnpCopyTo(r) {
  for (var i = this.t - 1; i >= 0; --i) r.data[i] = this.data[i];

  r.t = this.t;
  r.s = this.s;
} // (protected) set from integer value x, -DV <= x < DV


function bnpFromInt(x) {
  this.t = 1;
  this.s = x < 0 ? -1 : 0;
  if (x > 0) this.data[0] = x;else if (x < -1) this.data[0] = x + this.DV;else this.t = 0;
} // return bigint initialized to value


function nbv(i) {
  var r = nbi();
  r.fromInt(i);
  return r;
} // (protected) set from string and radix


function bnpFromString(s, b) {
  var k;
  if (b == 16) k = 4;else if (b == 8) k = 3;else if (b == 256) k = 8; // byte array
  else if (b == 2) k = 1;else if (b == 32) k = 5;else if (b == 4) k = 2;else {
    this.fromRadix(s, b);
    return;
  }
  this.t = 0;
  this.s = 0;
  var i = s.length,
      mi = false,
      sh = 0;

  while (--i >= 0) {
    var x = k == 8 ? s[i] & 0xff : intAt(s, i);

    if (x < 0) {
      if (s.charAt(i) == "-") mi = true;
      continue;
    }

    mi = false;
    if (sh == 0) this.data[this.t++] = x;else if (sh + k > this.DB) {
      this.data[this.t - 1] |= (x & (1 << this.DB - sh) - 1) << sh;
      this.data[this.t++] = x >> this.DB - sh;
    } else this.data[this.t - 1] |= x << sh;
    sh += k;
    if (sh >= this.DB) sh -= this.DB;
  }

  if (k == 8 && (s[0] & 0x80) != 0) {
    this.s = -1;
    if (sh > 0) this.data[this.t - 1] |= (1 << this.DB - sh) - 1 << sh;
  }

  this.clamp();
  if (mi) BigInteger.ZERO.subTo(this, this);
} // (protected) clamp off excess high words


function bnpClamp() {
  var c = this.s & this.DM;

  while (this.t > 0 && this.data[this.t - 1] == c) --this.t;
} // (public) return string representation in given radix


function bnToString(b) {
  if (this.s < 0) return "-" + this.negate().toString(b);
  var k;
  if (b == 16) k = 4;else if (b == 8) k = 3;else if (b == 2) k = 1;else if (b == 32) k = 5;else if (b == 4) k = 2;else return this.toRadix(b);
  var km = (1 << k) - 1,
      d,
      m = false,
      r = "",
      i = this.t;
  var p = this.DB - i * this.DB % k;

  if (i-- > 0) {
    if (p < this.DB && (d = this.data[i] >> p) > 0) {
      m = true;
      r = int2char(d);
    }

    while (i >= 0) {
      if (p < k) {
        d = (this.data[i] & (1 << p) - 1) << k - p;
        d |= this.data[--i] >> (p += this.DB - k);
      } else {
        d = this.data[i] >> (p -= k) & km;

        if (p <= 0) {
          p += this.DB;
          --i;
        }
      }

      if (d > 0) m = true;
      if (m) r += int2char(d);
    }
  }

  return m ? r : "0";
} // (public) -this


function bnNegate() {
  var r = nbi();
  BigInteger.ZERO.subTo(this, r);
  return r;
} // (public) |this|


function bnAbs() {
  return this.s < 0 ? this.negate() : this;
} // (public) return + if this > a, - if this < a, 0 if equal


function bnCompareTo(a) {
  var r = this.s - a.s;
  if (r != 0) return r;
  var i = this.t;
  r = i - a.t;
  if (r != 0) return this.s < 0 ? -r : r;

  while (--i >= 0) if ((r = this.data[i] - a.data[i]) != 0) return r;

  return 0;
} // returns bit length of the integer x


function nbits(x) {
  var r = 1,
      t;

  if ((t = x >>> 16) != 0) {
    x = t;
    r += 16;
  }

  if ((t = x >> 8) != 0) {
    x = t;
    r += 8;
  }

  if ((t = x >> 4) != 0) {
    x = t;
    r += 4;
  }

  if ((t = x >> 2) != 0) {
    x = t;
    r += 2;
  }

  if ((t = x >> 1) != 0) {
    x = t;
    r += 1;
  }

  return r;
} // (public) return the number of bits in "this"


function bnBitLength() {
  if (this.t <= 0) return 0;
  return this.DB * (this.t - 1) + nbits(this.data[this.t - 1] ^ this.s & this.DM);
} // (protected) r = this << n*DB


function bnpDLShiftTo(n, r) {
  var i;

  for (i = this.t - 1; i >= 0; --i) r.data[i + n] = this.data[i];

  for (i = n - 1; i >= 0; --i) r.data[i] = 0;

  r.t = this.t + n;
  r.s = this.s;
} // (protected) r = this >> n*DB


function bnpDRShiftTo(n, r) {
  for (var i = n; i < this.t; ++i) r.data[i - n] = this.data[i];

  r.t = Math.max(this.t - n, 0);
  r.s = this.s;
} // (protected) r = this << n


function bnpLShiftTo(n, r) {
  var bs = n % this.DB;
  var cbs = this.DB - bs;
  var bm = (1 << cbs) - 1;
  var ds = Math.floor(n / this.DB),
      c = this.s << bs & this.DM,
      i;

  for (i = this.t - 1; i >= 0; --i) {
    r.data[i + ds + 1] = this.data[i] >> cbs | c;
    c = (this.data[i] & bm) << bs;
  }

  for (i = ds - 1; i >= 0; --i) r.data[i] = 0;

  r.data[ds] = c;
  r.t = this.t + ds + 1;
  r.s = this.s;
  r.clamp();
} // (protected) r = this >> n


function bnpRShiftTo(n, r) {
  r.s = this.s;
  var ds = Math.floor(n / this.DB);

  if (ds >= this.t) {
    r.t = 0;
    return;
  }

  var bs = n % this.DB;
  var cbs = this.DB - bs;
  var bm = (1 << bs) - 1;
  r.data[0] = this.data[ds] >> bs;

  for (var i = ds + 1; i < this.t; ++i) {
    r.data[i - ds - 1] |= (this.data[i] & bm) << cbs;
    r.data[i - ds] = this.data[i] >> bs;
  }

  if (bs > 0) r.data[this.t - ds - 1] |= (this.s & bm) << cbs;
  r.t = this.t - ds;
  r.clamp();
} // (protected) r = this - a


function bnpSubTo(a, r) {
  var i = 0,
      c = 0,
      m = Math.min(a.t, this.t);

  while (i < m) {
    c += this.data[i] - a.data[i];
    r.data[i++] = c & this.DM;
    c >>= this.DB;
  }

  if (a.t < this.t) {
    c -= a.s;

    while (i < this.t) {
      c += this.data[i];
      r.data[i++] = c & this.DM;
      c >>= this.DB;
    }

    c += this.s;
  } else {
    c += this.s;

    while (i < a.t) {
      c -= a.data[i];
      r.data[i++] = c & this.DM;
      c >>= this.DB;
    }

    c -= a.s;
  }

  r.s = c < 0 ? -1 : 0;
  if (c < -1) r.data[i++] = this.DV + c;else if (c > 0) r.data[i++] = c;
  r.t = i;
  r.clamp();
} // (protected) r = this * a, r != this,a (HAC 14.12)
// "this" should be the larger one if appropriate.


function bnpMultiplyTo(a, r) {
  var x = this.abs(),
      y = a.abs();
  var i = x.t;
  r.t = i + y.t;

  while (--i >= 0) r.data[i] = 0;

  for (i = 0; i < y.t; ++i) r.data[i + x.t] = x.am(0, y.data[i], r, i, 0, x.t);

  r.s = 0;
  r.clamp();
  if (this.s != a.s) BigInteger.ZERO.subTo(r, r);
} // (protected) r = this^2, r != this (HAC 14.16)


function bnpSquareTo(r) {
  var x = this.abs();
  var i = r.t = 2 * x.t;

  while (--i >= 0) r.data[i] = 0;

  for (i = 0; i < x.t - 1; ++i) {
    var c = x.am(i, x.data[i], r, 2 * i, 0, 1);

    if ((r.data[i + x.t] += x.am(i + 1, 2 * x.data[i], r, 2 * i + 1, c, x.t - i - 1)) >= x.DV) {
      r.data[i + x.t] -= x.DV;
      r.data[i + x.t + 1] = 1;
    }
  }

  if (r.t > 0) r.data[r.t - 1] += x.am(i, x.data[i], r, 2 * i, 0, 1);
  r.s = 0;
  r.clamp();
} // (protected) divide this by m, quotient and remainder to q, r (HAC 14.20)
// r != q, this != m.  q or r may be null.


function bnpDivRemTo(m, q, r) {
  var pm = m.abs();
  if (pm.t <= 0) return;
  var pt = this.abs();

  if (pt.t < pm.t) {
    if (q != null) q.fromInt(0);
    if (r != null) this.copyTo(r);
    return;
  }

  if (r == null) r = nbi();
  var y = nbi(),
      ts = this.s,
      ms = m.s;
  var nsh = this.DB - nbits(pm.data[pm.t - 1]); // normalize modulus

  if (nsh > 0) {
    pm.lShiftTo(nsh, y);
    pt.lShiftTo(nsh, r);
  } else {
    pm.copyTo(y);
    pt.copyTo(r);
  }

  var ys = y.t;
  var y0 = y.data[ys - 1];
  if (y0 == 0) return;
  var yt = y0 * (1 << this.F1) + (ys > 1 ? y.data[ys - 2] >> this.F2 : 0);
  var d1 = this.FV / yt,
      d2 = (1 << this.F1) / yt,
      e = 1 << this.F2;
  var i = r.t,
      j = i - ys,
      t = q == null ? nbi() : q;
  y.dlShiftTo(j, t);

  if (r.compareTo(t) >= 0) {
    r.data[r.t++] = 1;
    r.subTo(t, r);
  }

  BigInteger.ONE.dlShiftTo(ys, t);
  t.subTo(y, y); // "negative" y so we can replace sub with am later

  while (y.t < ys) y.data[y.t++] = 0;

  while (--j >= 0) {
    // Estimate quotient digit
    var qd = r.data[--i] == y0 ? this.DM : Math.floor(r.data[i] * d1 + (r.data[i - 1] + e) * d2);

    if ((r.data[i] += y.am(0, qd, r, j, 0, ys)) < qd) {
      // Try it out
      y.dlShiftTo(j, t);
      r.subTo(t, r);

      while (r.data[i] < --qd) r.subTo(t, r);
    }
  }

  if (q != null) {
    r.drShiftTo(ys, q);
    if (ts != ms) BigInteger.ZERO.subTo(q, q);
  }

  r.t = ys;
  r.clamp();
  if (nsh > 0) r.rShiftTo(nsh, r); // Denormalize remainder

  if (ts < 0) BigInteger.ZERO.subTo(r, r);
} // (public) this mod a


function bnMod(a) {
  var r = nbi();
  this.abs().divRemTo(a, null, r);
  if (this.s < 0 && r.compareTo(BigInteger.ZERO) > 0) a.subTo(r, r);
  return r;
} // Modular reduction using "classic" algorithm


function Classic(m) {
  this.m = m;
}

function cConvert(x) {
  if (x.s < 0 || x.compareTo(this.m) >= 0) return x.mod(this.m);else return x;
}

function cRevert(x) {
  return x;
}

function cReduce(x) {
  x.divRemTo(this.m, null, x);
}

function cMulTo(x, y, r) {
  x.multiplyTo(y, r);
  this.reduce(r);
}

function cSqrTo(x, r) {
  x.squareTo(r);
  this.reduce(r);
}

Classic.prototype.convert = cConvert;
Classic.prototype.revert = cRevert;
Classic.prototype.reduce = cReduce;
Classic.prototype.mulTo = cMulTo;
Classic.prototype.sqrTo = cSqrTo; // (protected) return "-1/this % 2^DB"; useful for Mont. reduction
// justification:
//         xy == 1 (mod m)
//         xy =  1+km
//   xy(2-xy) = (1+km)(1-km)
// x[y(2-xy)] = 1-k^2m^2
// x[y(2-xy)] == 1 (mod m^2)
// if y is 1/x mod m, then y(2-xy) is 1/x mod m^2
// should reduce x and y(2-xy) by m^2 at each step to keep size bounded.
// JS multiply "overflows" differently from C/C++, so care is needed here.

function bnpInvDigit() {
  if (this.t < 1) return 0;
  var x = this.data[0];
  if ((x & 1) == 0) return 0;
  var y = x & 3; // y == 1/x mod 2^2

  y = y * (2 - (x & 0xf) * y) & 0xf; // y == 1/x mod 2^4

  y = y * (2 - (x & 0xff) * y) & 0xff; // y == 1/x mod 2^8

  y = y * (2 - ((x & 0xffff) * y & 0xffff)) & 0xffff; // y == 1/x mod 2^16
  // last step - calculate inverse mod DV directly;
  // assumes 16 < DB <= 32 and assumes ability to handle 48-bit ints

  y = y * (2 - x * y % this.DV) % this.DV; // y == 1/x mod 2^dbits
  // we really want the negative inverse, and -DV < y < DV

  return y > 0 ? this.DV - y : -y;
} // Montgomery reduction


function Montgomery(m) {
  this.m = m;
  this.mp = m.invDigit();
  this.mpl = this.mp & 0x7fff;
  this.mph = this.mp >> 15;
  this.um = (1 << m.DB - 15) - 1;
  this.mt2 = 2 * m.t;
} // xR mod m


function montConvert(x) {
  var r = nbi();
  x.abs().dlShiftTo(this.m.t, r);
  r.divRemTo(this.m, null, r);
  if (x.s < 0 && r.compareTo(BigInteger.ZERO) > 0) this.m.subTo(r, r);
  return r;
} // x/R mod m


function montRevert(x) {
  var r = nbi();
  x.copyTo(r);
  this.reduce(r);
  return r;
} // x = x/R mod m (HAC 14.32)


function montReduce(x) {
  while (x.t <= this.mt2) // pad x so am has enough room later
  x.data[x.t++] = 0;

  for (var i = 0; i < this.m.t; ++i) {
    // faster way of calculating u0 = x.data[i]*mp mod DV
    var j = x.data[i] & 0x7fff;
    var u0 = j * this.mpl + ((j * this.mph + (x.data[i] >> 15) * this.mpl & this.um) << 15) & x.DM; // use am to combine the multiply-shift-add into one call

    j = i + this.m.t;
    x.data[j] += this.m.am(0, u0, x, i, 0, this.m.t); // propagate carry

    while (x.data[j] >= x.DV) {
      x.data[j] -= x.DV;
      x.data[++j]++;
    }
  }

  x.clamp();
  x.drShiftTo(this.m.t, x);
  if (x.compareTo(this.m) >= 0) x.subTo(this.m, x);
} // r = "x^2/R mod m"; x != r


function montSqrTo(x, r) {
  x.squareTo(r);
  this.reduce(r);
} // r = "xy/R mod m"; x,y != r


function montMulTo(x, y, r) {
  x.multiplyTo(y, r);
  this.reduce(r);
}

Montgomery.prototype.convert = montConvert;
Montgomery.prototype.revert = montRevert;
Montgomery.prototype.reduce = montReduce;
Montgomery.prototype.mulTo = montMulTo;
Montgomery.prototype.sqrTo = montSqrTo; // (protected) true iff this is even

function bnpIsEven() {
  return (this.t > 0 ? this.data[0] & 1 : this.s) == 0;
} // (protected) this^e, e < 2^32, doing sqr and mul with "r" (HAC 14.79)


function bnpExp(e, z) {
  if (e > 0xffffffff || e < 1) return BigInteger.ONE;
  var r = nbi(),
      r2 = nbi(),
      g = z.convert(this),
      i = nbits(e) - 1;
  g.copyTo(r);

  while (--i >= 0) {
    z.sqrTo(r, r2);
    if ((e & 1 << i) > 0) z.mulTo(r2, g, r);else {
      var t = r;
      r = r2;
      r2 = t;
    }
  }

  return z.revert(r);
} // (public) this^e % m, 0 <= e < 2^32


function bnModPowInt(e, m) {
  var z;
  if (e < 256 || m.isEven()) z = new Classic(m);else z = new Montgomery(m);
  return this.exp(e, z);
} // protected


BigInteger.prototype.copyTo = bnpCopyTo;
BigInteger.prototype.fromInt = bnpFromInt;
BigInteger.prototype.fromString = bnpFromString;
BigInteger.prototype.clamp = bnpClamp;
BigInteger.prototype.dlShiftTo = bnpDLShiftTo;
BigInteger.prototype.drShiftTo = bnpDRShiftTo;
BigInteger.prototype.lShiftTo = bnpLShiftTo;
BigInteger.prototype.rShiftTo = bnpRShiftTo;
BigInteger.prototype.subTo = bnpSubTo;
BigInteger.prototype.multiplyTo = bnpMultiplyTo;
BigInteger.prototype.squareTo = bnpSquareTo;
BigInteger.prototype.divRemTo = bnpDivRemTo;
BigInteger.prototype.invDigit = bnpInvDigit;
BigInteger.prototype.isEven = bnpIsEven;
BigInteger.prototype.exp = bnpExp; // public

BigInteger.prototype.toString = bnToString;
BigInteger.prototype.negate = bnNegate;
BigInteger.prototype.abs = bnAbs;
BigInteger.prototype.compareTo = bnCompareTo;
BigInteger.prototype.bitLength = bnBitLength;
BigInteger.prototype.mod = bnMod;
BigInteger.prototype.modPowInt = bnModPowInt; // "constants"

BigInteger.ZERO = nbv(0);
BigInteger.ONE = nbv(1); // jsbn2 lib
//Copyright (c) 2005-2009  Tom Wu
//All Rights Reserved.
//See "LICENSE" for details (See jsbn.js for LICENSE).
//Extended JavaScript BN functions, required for RSA private ops.
//Version 1.1: new BigInteger("0", 10) returns "proper" zero
//(public)

function bnClone() {
  var r = nbi();
  this.copyTo(r);
  return r;
} //(public) return value as integer


function bnIntValue() {
  if (this.s < 0) {
    if (this.t == 1) return this.data[0] - this.DV;else if (this.t == 0) return -1;
  } else if (this.t == 1) return this.data[0];else if (this.t == 0) return 0; // assumes 16 < DB < 32


  return (this.data[1] & (1 << 32 - this.DB) - 1) << this.DB | this.data[0];
} //(public) return value as byte


function bnByteValue() {
  return this.t == 0 ? this.s : this.data[0] << 24 >> 24;
} //(public) return value as short (assumes DB>=16)


function bnShortValue() {
  return this.t == 0 ? this.s : this.data[0] << 16 >> 16;
} //(protected) return x s.t. r^x < DV


function bnpChunkSize(r) {
  return Math.floor(Math.LN2 * this.DB / Math.log(r));
} //(public) 0 if this == 0, 1 if this > 0


function bnSigNum() {
  if (this.s < 0) return -1;else if (this.t <= 0 || this.t == 1 && this.data[0] <= 0) return 0;else return 1;
} //(protected) convert to radix string


function bnpToRadix(b) {
  if (b == null) b = 10;
  if (this.signum() == 0 || b < 2 || b > 36) return "0";
  var cs = this.chunkSize(b);
  var a = Math.pow(b, cs);
  var d = nbv(a),
      y = nbi(),
      z = nbi(),
      r = "";
  this.divRemTo(d, y, z);

  while (y.signum() > 0) {
    r = (a + z.intValue()).toString(b).substr(1) + r;
    y.divRemTo(d, y, z);
  }

  return z.intValue().toString(b) + r;
} //(protected) convert from radix string


function bnpFromRadix(s, b) {
  this.fromInt(0);
  if (b == null) b = 10;
  var cs = this.chunkSize(b);
  var d = Math.pow(b, cs),
      mi = false,
      j = 0,
      w = 0;

  for (var i = 0; i < s.length; ++i) {
    var x = intAt(s, i);

    if (x < 0) {
      if (s.charAt(i) == "-" && this.signum() == 0) mi = true;
      continue;
    }

    w = b * w + x;

    if (++j >= cs) {
      this.dMultiply(d);
      this.dAddOffset(w, 0);
      j = 0;
      w = 0;
    }
  }

  if (j > 0) {
    this.dMultiply(Math.pow(b, j));
    this.dAddOffset(w, 0);
  }

  if (mi) BigInteger.ZERO.subTo(this, this);
} //(protected) alternate constructor


function bnpFromNumber(a, b, c) {
  if ("number" == typeof b) {
    // new BigInteger(int,int,RNG)
    if (a < 2) this.fromInt(1);else {
      this.fromNumber(a, c);
      if (!this.testBit(a - 1)) // force MSB set
        this.bitwiseTo(BigInteger.ONE.shiftLeft(a - 1), op_or, this);
      if (this.isEven()) this.dAddOffset(1, 0); // force odd

      while (!this.isProbablePrime(b)) {
        this.dAddOffset(2, 0);
        if (this.bitLength() > a) this.subTo(BigInteger.ONE.shiftLeft(a - 1), this);
      }
    }
  } else {
    // new BigInteger(int,RNG)
    var x = new Array(),
        t = a & 7;
    x.length = (a >> 3) + 1;
    b.nextBytes(x);
    if (t > 0) x[0] &= (1 << t) - 1;else x[0] = 0;
    this.fromString(x, 256);
  }
} //(public) convert to bigendian byte array


function bnToByteArray() {
  var i = this.t,
      r = new Array();
  r[0] = this.s;
  var p = this.DB - i * this.DB % 8,
      d,
      k = 0;

  if (i-- > 0) {
    if (p < this.DB && (d = this.data[i] >> p) != (this.s & this.DM) >> p) r[k++] = d | this.s << this.DB - p;

    while (i >= 0) {
      if (p < 8) {
        d = (this.data[i] & (1 << p) - 1) << 8 - p;
        d |= this.data[--i] >> (p += this.DB - 8);
      } else {
        d = this.data[i] >> (p -= 8) & 0xff;

        if (p <= 0) {
          p += this.DB;
          --i;
        }
      }

      if ((d & 0x80) != 0) d |= -256;
      if (k == 0 && (this.s & 0x80) != (d & 0x80)) ++k;
      if (k > 0 || d != this.s) r[k++] = d;
    }
  }

  return r;
}

function bnEquals(a) {
  return this.compareTo(a) == 0;
}

function bnMin(a) {
  return this.compareTo(a) < 0 ? this : a;
}

function bnMax(a) {
  return this.compareTo(a) > 0 ? this : a;
} //(protected) r = this op a (bitwise)


function bnpBitwiseTo(a, op, r) {
  var i,
      f,
      m = Math.min(a.t, this.t);

  for (i = 0; i < m; ++i) r.data[i] = op(this.data[i], a.data[i]);

  if (a.t < this.t) {
    f = a.s & this.DM;

    for (i = m; i < this.t; ++i) r.data[i] = op(this.data[i], f);

    r.t = this.t;
  } else {
    f = this.s & this.DM;

    for (i = m; i < a.t; ++i) r.data[i] = op(f, a.data[i]);

    r.t = a.t;
  }

  r.s = op(this.s, a.s);
  r.clamp();
} //(public) this & a


function op_and(x, y) {
  return x & y;
}

function bnAnd(a) {
  var r = nbi();
  this.bitwiseTo(a, op_and, r);
  return r;
} //(public) this | a


function op_or(x, y) {
  return x | y;
}

function bnOr(a) {
  var r = nbi();
  this.bitwiseTo(a, op_or, r);
  return r;
} //(public) this ^ a


function op_xor(x, y) {
  return x ^ y;
}

function bnXor(a) {
  var r = nbi();
  this.bitwiseTo(a, op_xor, r);
  return r;
} //(public) this & ~a


function op_andnot(x, y) {
  return x & ~y;
}

function bnAndNot(a) {
  var r = nbi();
  this.bitwiseTo(a, op_andnot, r);
  return r;
} //(public) ~this


function bnNot() {
  var r = nbi();

  for (var i = 0; i < this.t; ++i) r.data[i] = this.DM & ~this.data[i];

  r.t = this.t;
  r.s = ~this.s;
  return r;
} //(public) this << n


function bnShiftLeft(n) {
  var r = nbi();
  if (n < 0) this.rShiftTo(-n, r);else this.lShiftTo(n, r);
  return r;
} //(public) this >> n


function bnShiftRight(n) {
  var r = nbi();
  if (n < 0) this.lShiftTo(-n, r);else this.rShiftTo(n, r);
  return r;
} //return index of lowest 1-bit in x, x < 2^31


function lbit(x) {
  if (x == 0) return -1;
  var r = 0;

  if ((x & 0xffff) == 0) {
    x >>= 16;
    r += 16;
  }

  if ((x & 0xff) == 0) {
    x >>= 8;
    r += 8;
  }

  if ((x & 0xf) == 0) {
    x >>= 4;
    r += 4;
  }

  if ((x & 3) == 0) {
    x >>= 2;
    r += 2;
  }

  if ((x & 1) == 0) ++r;
  return r;
} //(public) returns index of lowest 1-bit (or -1 if none)


function bnGetLowestSetBit() {
  for (var i = 0; i < this.t; ++i) if (this.data[i] != 0) return i * this.DB + lbit(this.data[i]);

  if (this.s < 0) return this.t * this.DB;
  return -1;
} //return number of 1 bits in x


function cbit(x) {
  var r = 0;

  while (x != 0) {
    x &= x - 1;
    ++r;
  }

  return r;
} //(public) return number of set bits


function bnBitCount() {
  var r = 0,
      x = this.s & this.DM;

  for (var i = 0; i < this.t; ++i) r += cbit(this.data[i] ^ x);

  return r;
} //(public) true iff nth bit is set


function bnTestBit(n) {
  var j = Math.floor(n / this.DB);
  if (j >= this.t) return this.s != 0;
  return (this.data[j] & 1 << n % this.DB) != 0;
} //(protected) this op (1<<n)


function bnpChangeBit(n, op) {
  var r = BigInteger.ONE.shiftLeft(n);
  this.bitwiseTo(r, op, r);
  return r;
} //(public) this | (1<<n)


function bnSetBit(n) {
  return this.changeBit(n, op_or);
} //(public) this & ~(1<<n)


function bnClearBit(n) {
  return this.changeBit(n, op_andnot);
} //(public) this ^ (1<<n)


function bnFlipBit(n) {
  return this.changeBit(n, op_xor);
} //(protected) r = this + a


function bnpAddTo(a, r) {
  var i = 0,
      c = 0,
      m = Math.min(a.t, this.t);

  while (i < m) {
    c += this.data[i] + a.data[i];
    r.data[i++] = c & this.DM;
    c >>= this.DB;
  }

  if (a.t < this.t) {
    c += a.s;

    while (i < this.t) {
      c += this.data[i];
      r.data[i++] = c & this.DM;
      c >>= this.DB;
    }

    c += this.s;
  } else {
    c += this.s;

    while (i < a.t) {
      c += a.data[i];
      r.data[i++] = c & this.DM;
      c >>= this.DB;
    }

    c += a.s;
  }

  r.s = c < 0 ? -1 : 0;
  if (c > 0) r.data[i++] = c;else if (c < -1) r.data[i++] = this.DV + c;
  r.t = i;
  r.clamp();
} //(public) this + a


function bnAdd(a) {
  var r = nbi();
  this.addTo(a, r);
  return r;
} //(public) this - a


function bnSubtract(a) {
  var r = nbi();
  this.subTo(a, r);
  return r;
} //(public) this * a


function bnMultiply(a) {
  var r = nbi();
  this.multiplyTo(a, r);
  return r;
} //(public) this / a


function bnDivide(a) {
  var r = nbi();
  this.divRemTo(a, r, null);
  return r;
} //(public) this % a


function bnRemainder(a) {
  var r = nbi();
  this.divRemTo(a, null, r);
  return r;
} //(public) [this/a,this%a]


function bnDivideAndRemainder(a) {
  var q = nbi(),
      r = nbi();
  this.divRemTo(a, q, r);
  return new Array(q, r);
} //(protected) this *= n, this >= 0, 1 < n < DV


function bnpDMultiply(n) {
  this.data[this.t] = this.am(0, n - 1, this, 0, 0, this.t);
  ++this.t;
  this.clamp();
} //(protected) this += n << w words, this >= 0


function bnpDAddOffset(n, w) {
  if (n == 0) return;

  while (this.t <= w) this.data[this.t++] = 0;

  this.data[w] += n;

  while (this.data[w] >= this.DV) {
    this.data[w] -= this.DV;
    if (++w >= this.t) this.data[this.t++] = 0;
    ++this.data[w];
  }
} //A "null" reducer


function NullExp() {}

function nNop(x) {
  return x;
}

function nMulTo(x, y, r) {
  x.multiplyTo(y, r);
}

function nSqrTo(x, r) {
  x.squareTo(r);
}

NullExp.prototype.convert = nNop;
NullExp.prototype.revert = nNop;
NullExp.prototype.mulTo = nMulTo;
NullExp.prototype.sqrTo = nSqrTo; //(public) this^e

function bnPow(e) {
  return this.exp(e, new NullExp());
} //(protected) r = lower n words of "this * a", a.t <= n
//"this" should be the larger one if appropriate.


function bnpMultiplyLowerTo(a, n, r) {
  var i = Math.min(this.t + a.t, n);
  r.s = 0; // assumes a,this >= 0

  r.t = i;

  while (i > 0) r.data[--i] = 0;

  var j;

  for (j = r.t - this.t; i < j; ++i) r.data[i + this.t] = this.am(0, a.data[i], r, i, 0, this.t);

  for (j = Math.min(a.t, n); i < j; ++i) this.am(0, a.data[i], r, i, 0, n - i);

  r.clamp();
} //(protected) r = "this * a" without lower n words, n > 0
//"this" should be the larger one if appropriate.


function bnpMultiplyUpperTo(a, n, r) {
  --n;
  var i = r.t = this.t + a.t - n;
  r.s = 0; // assumes a,this >= 0

  while (--i >= 0) r.data[i] = 0;

  for (i = Math.max(n - this.t, 0); i < a.t; ++i) r.data[this.t + i - n] = this.am(n - i, a.data[i], r, 0, 0, this.t + i - n);

  r.clamp();
  r.drShiftTo(1, r);
} //Barrett modular reduction


function Barrett(m) {
  // setup Barrett
  this.r2 = nbi();
  this.q3 = nbi();
  BigInteger.ONE.dlShiftTo(2 * m.t, this.r2);
  this.mu = this.r2.divide(m);
  this.m = m;
}

function barrettConvert(x) {
  if (x.s < 0 || x.t > 2 * this.m.t) return x.mod(this.m);else if (x.compareTo(this.m) < 0) return x;else {
    var r = nbi();
    x.copyTo(r);
    this.reduce(r);
    return r;
  }
}

function barrettRevert(x) {
  return x;
} //x = x mod m (HAC 14.42)


function barrettReduce(x) {
  x.drShiftTo(this.m.t - 1, this.r2);

  if (x.t > this.m.t + 1) {
    x.t = this.m.t + 1;
    x.clamp();
  }

  this.mu.multiplyUpperTo(this.r2, this.m.t + 1, this.q3);
  this.m.multiplyLowerTo(this.q3, this.m.t + 1, this.r2);

  while (x.compareTo(this.r2) < 0) x.dAddOffset(1, this.m.t + 1);

  x.subTo(this.r2, x);

  while (x.compareTo(this.m) >= 0) x.subTo(this.m, x);
} //r = x^2 mod m; x != r


function barrettSqrTo(x, r) {
  x.squareTo(r);
  this.reduce(r);
} //r = x*y mod m; x,y != r


function barrettMulTo(x, y, r) {
  x.multiplyTo(y, r);
  this.reduce(r);
}

Barrett.prototype.convert = barrettConvert;
Barrett.prototype.revert = barrettRevert;
Barrett.prototype.reduce = barrettReduce;
Barrett.prototype.mulTo = barrettMulTo;
Barrett.prototype.sqrTo = barrettSqrTo; //(public) this^e % m (HAC 14.85)

function bnModPow(e, m) {
  var i = e.bitLength(),
      k,
      r = nbv(1),
      z;
  if (i <= 0) return r;else if (i < 18) k = 1;else if (i < 48) k = 3;else if (i < 144) k = 4;else if (i < 768) k = 5;else k = 6;
  if (i < 8) z = new Classic(m);else if (m.isEven()) z = new Barrett(m);else z = new Montgomery(m); // precomputation

  var g = new Array(),
      n = 3,
      k1 = k - 1,
      km = (1 << k) - 1;
  g[1] = z.convert(this);

  if (k > 1) {
    var g2 = nbi();
    z.sqrTo(g[1], g2);

    while (n <= km) {
      g[n] = nbi();
      z.mulTo(g2, g[n - 2], g[n]);
      n += 2;
    }
  }

  var j = e.t - 1,
      w,
      is1 = true,
      r2 = nbi(),
      t;
  i = nbits(e.data[j]) - 1;

  while (j >= 0) {
    if (i >= k1) w = e.data[j] >> i - k1 & km;else {
      w = (e.data[j] & (1 << i + 1) - 1) << k1 - i;
      if (j > 0) w |= e.data[j - 1] >> this.DB + i - k1;
    }
    n = k;

    while ((w & 1) == 0) {
      w >>= 1;
      --n;
    }

    if ((i -= n) < 0) {
      i += this.DB;
      --j;
    }

    if (is1) {
      // ret == 1, don't bother squaring or multiplying it
      g[w].copyTo(r);
      is1 = false;
    } else {
      while (n > 1) {
        z.sqrTo(r, r2);
        z.sqrTo(r2, r);
        n -= 2;
      }

      if (n > 0) z.sqrTo(r, r2);else {
        t = r;
        r = r2;
        r2 = t;
      }
      z.mulTo(r2, g[w], r);
    }

    while (j >= 0 && (e.data[j] & 1 << i) == 0) {
      z.sqrTo(r, r2);
      t = r;
      r = r2;
      r2 = t;

      if (--i < 0) {
        i = this.DB - 1;
        --j;
      }
    }
  }

  return z.revert(r);
} //(public) gcd(this,a) (HAC 14.54)


function bnGCD(a) {
  var x = this.s < 0 ? this.negate() : this.clone();
  var y = a.s < 0 ? a.negate() : a.clone();

  if (x.compareTo(y) < 0) {
    var t = x;
    x = y;
    y = t;
  }

  var i = x.getLowestSetBit(),
      g = y.getLowestSetBit();
  if (g < 0) return x;
  if (i < g) g = i;

  if (g > 0) {
    x.rShiftTo(g, x);
    y.rShiftTo(g, y);
  }

  while (x.signum() > 0) {
    if ((i = x.getLowestSetBit()) > 0) x.rShiftTo(i, x);
    if ((i = y.getLowestSetBit()) > 0) y.rShiftTo(i, y);

    if (x.compareTo(y) >= 0) {
      x.subTo(y, x);
      x.rShiftTo(1, x);
    } else {
      y.subTo(x, y);
      y.rShiftTo(1, y);
    }
  }

  if (g > 0) y.lShiftTo(g, y);
  return y;
} //(protected) this % n, n < 2^26


function bnpModInt(n) {
  if (n <= 0) return 0;
  var d = this.DV % n,
      r = this.s < 0 ? n - 1 : 0;
  if (this.t > 0) if (d == 0) r = this.data[0] % n;else for (var i = this.t - 1; i >= 0; --i) r = (d * r + this.data[i]) % n;
  return r;
} //(public) 1/this % m (HAC 14.61)


function bnModInverse(m) {
  var ac = m.isEven();
  if (this.isEven() && ac || m.signum() == 0) return BigInteger.ZERO;
  var u = m.clone(),
      v = this.clone();
  var a = nbv(1),
      b = nbv(0),
      c = nbv(0),
      d = nbv(1);

  while (u.signum() != 0) {
    while (u.isEven()) {
      u.rShiftTo(1, u);

      if (ac) {
        if (!a.isEven() || !b.isEven()) {
          a.addTo(this, a);
          b.subTo(m, b);
        }

        a.rShiftTo(1, a);
      } else if (!b.isEven()) b.subTo(m, b);

      b.rShiftTo(1, b);
    }

    while (v.isEven()) {
      v.rShiftTo(1, v);

      if (ac) {
        if (!c.isEven() || !d.isEven()) {
          c.addTo(this, c);
          d.subTo(m, d);
        }

        c.rShiftTo(1, c);
      } else if (!d.isEven()) d.subTo(m, d);

      d.rShiftTo(1, d);
    }

    if (u.compareTo(v) >= 0) {
      u.subTo(v, u);
      if (ac) a.subTo(c, a);
      b.subTo(d, b);
    } else {
      v.subTo(u, v);
      if (ac) c.subTo(a, c);
      d.subTo(b, d);
    }
  }

  if (v.compareTo(BigInteger.ONE) != 0) return BigInteger.ZERO;
  if (d.compareTo(m) >= 0) return d.subtract(m);
  if (d.signum() < 0) d.addTo(m, d);else return d;
  if (d.signum() < 0) return d.add(m);else return d;
}

var lowprimes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509];
var lplim = (1 << 26) / lowprimes[lowprimes.length - 1]; //(public) test primality with certainty >= 1-.5^t

function bnIsProbablePrime(t) {
  var i,
      x = this.abs();

  if (x.t == 1 && x.data[0] <= lowprimes[lowprimes.length - 1]) {
    for (i = 0; i < lowprimes.length; ++i) if (x.data[0] == lowprimes[i]) return true;

    return false;
  }

  if (x.isEven()) return false;
  i = 1;

  while (i < lowprimes.length) {
    var m = lowprimes[i],
        j = i + 1;

    while (j < lowprimes.length && m < lplim) m *= lowprimes[j++];

    m = x.modInt(m);

    while (i < j) if (m % lowprimes[i++] == 0) return false;
  }

  return x.millerRabin(t);
} //(protected) true if probably prime (HAC 4.24, Miller-Rabin)


function bnpMillerRabin(t) {
  var n1 = this.subtract(BigInteger.ONE);
  var k = n1.getLowestSetBit();
  if (k <= 0) return false;
  var r = n1.shiftRight(k);
  var prng = bnGetPrng();
  var a;

  for (var i = 0; i < t; ++i) {
    // select witness 'a' at random from between 1 and n1
    do {
      a = new BigInteger(this.bitLength(), prng);
    } while (a.compareTo(BigInteger.ONE) <= 0 || a.compareTo(n1) >= 0);

    var y = a.modPow(r, this);

    if (y.compareTo(BigInteger.ONE) != 0 && y.compareTo(n1) != 0) {
      var j = 1;

      while (j++ < k && y.compareTo(n1) != 0) {
        y = y.modPowInt(2, this);
        if (y.compareTo(BigInteger.ONE) == 0) return false;
      }

      if (y.compareTo(n1) != 0) return false;
    }
  }

  return true;
} // get pseudo random number generator


function bnGetPrng() {
  // create prng with api that matches BigInteger secure random
  return {
    // x is an array to fill with bytes
    nextBytes: function (x) {
      for (var i = 0; i < x.length; ++i) {
        x[i] = Math.floor(Math.random() * 0x0100);
      }
    }
  };
} //protected


BigInteger.prototype.chunkSize = bnpChunkSize;
BigInteger.prototype.toRadix = bnpToRadix;
BigInteger.prototype.fromRadix = bnpFromRadix;
BigInteger.prototype.fromNumber = bnpFromNumber;
BigInteger.prototype.bitwiseTo = bnpBitwiseTo;
BigInteger.prototype.changeBit = bnpChangeBit;
BigInteger.prototype.addTo = bnpAddTo;
BigInteger.prototype.dMultiply = bnpDMultiply;
BigInteger.prototype.dAddOffset = bnpDAddOffset;
BigInteger.prototype.multiplyLowerTo = bnpMultiplyLowerTo;
BigInteger.prototype.multiplyUpperTo = bnpMultiplyUpperTo;
BigInteger.prototype.modInt = bnpModInt;
BigInteger.prototype.millerRabin = bnpMillerRabin; //public

BigInteger.prototype.clone = bnClone;
BigInteger.prototype.intValue = bnIntValue;
BigInteger.prototype.byteValue = bnByteValue;
BigInteger.prototype.shortValue = bnShortValue;
BigInteger.prototype.signum = bnSigNum;
BigInteger.prototype.toByteArray = bnToByteArray;
BigInteger.prototype.equals = bnEquals;
BigInteger.prototype.min = bnMin;
BigInteger.prototype.max = bnMax;
BigInteger.prototype.and = bnAnd;
BigInteger.prototype.or = bnOr;
BigInteger.prototype.xor = bnXor;
BigInteger.prototype.andNot = bnAndNot;
BigInteger.prototype.not = bnNot;
BigInteger.prototype.shiftLeft = bnShiftLeft;
BigInteger.prototype.shiftRight = bnShiftRight;
BigInteger.prototype.getLowestSetBit = bnGetLowestSetBit;
BigInteger.prototype.bitCount = bnBitCount;
BigInteger.prototype.testBit = bnTestBit;
BigInteger.prototype.setBit = bnSetBit;
BigInteger.prototype.clearBit = bnClearBit;
BigInteger.prototype.flipBit = bnFlipBit;
BigInteger.prototype.add = bnAdd;
BigInteger.prototype.subtract = bnSubtract;
BigInteger.prototype.multiply = bnMultiply;
BigInteger.prototype.divide = bnDivide;
BigInteger.prototype.remainder = bnRemainder;
BigInteger.prototype.divideAndRemainder = bnDivideAndRemainder;
BigInteger.prototype.modPow = bnModPow;
BigInteger.prototype.modInverse = bnModInverse;
BigInteger.prototype.pow = bnPow;
BigInteger.prototype.gcd = bnGCD;
BigInteger.prototype.isProbablePrime = bnIsProbablePrime; //BigInteger interfaces not implemented in jsbn:
//BigInteger(int signum, byte[] magnitude)
//double doubleValue()
//float floatValue()
//int hashCode()
//long longValue()
//static BigInteger valueOf(long val)
},{"./forge":"o20S"}],"a9m4":[function(require,module,exports) {
/**
 * Secure Hash Algorithm with 160-bit digest (SHA-1) implementation.
 *
 * @author Dave Longley
 *
 * Copyright (c) 2010-2015 Digital Bazaar, Inc.
 */
var forge = require('./forge');

require('./md');

require('./util');

var sha1 = module.exports = forge.sha1 = forge.sha1 || {};
forge.md.sha1 = forge.md.algorithms.sha1 = sha1;
/**
 * Creates a SHA-1 message digest object.
 *
 * @return a message digest object.
 */

sha1.create = function () {
  // do initialization as necessary
  if (!_initialized) {
    _init();
  } // SHA-1 state contains five 32-bit integers


  var _state = null; // input buffer

  var _input = forge.util.createBuffer(); // used for word storage


  var _w = new Array(80); // message digest object


  var md = {
    algorithm: 'sha1',
    blockLength: 64,
    digestLength: 20,
    // 56-bit length of message so far (does not including padding)
    messageLength: 0,
    // true message length
    fullMessageLength: null,
    // size of message length in bytes
    messageLengthSize: 8
  };
  /**
   * Starts the digest.
   *
   * @return this digest object.
   */

  md.start = function () {
    // up to 56-bit message length for convenience
    md.messageLength = 0; // full message length (set md.messageLength64 for backwards-compatibility)

    md.fullMessageLength = md.messageLength64 = [];
    var int32s = md.messageLengthSize / 4;

    for (var i = 0; i < int32s; ++i) {
      md.fullMessageLength.push(0);
    }

    _input = forge.util.createBuffer();
    _state = {
      h0: 0x67452301,
      h1: 0xEFCDAB89,
      h2: 0x98BADCFE,
      h3: 0x10325476,
      h4: 0xC3D2E1F0
    };
    return md;
  }; // start digest automatically for first time


  md.start();
  /**
   * Updates the digest with the given message input. The given input can
   * treated as raw input (no encoding will be applied) or an encoding of
   * 'utf8' maybe given to encode the input using UTF-8.
   *
   * @param msg the message input to update with.
   * @param encoding the encoding to use (default: 'raw', other: 'utf8').
   *
   * @return this digest object.
   */

  md.update = function (msg, encoding) {
    if (encoding === 'utf8') {
      msg = forge.util.encodeUtf8(msg);
    } // update message length


    var len = msg.length;
    md.messageLength += len;
    len = [len / 0x100000000 >>> 0, len >>> 0];

    for (var i = md.fullMessageLength.length - 1; i >= 0; --i) {
      md.fullMessageLength[i] += len[1];
      len[1] = len[0] + (md.fullMessageLength[i] / 0x100000000 >>> 0);
      md.fullMessageLength[i] = md.fullMessageLength[i] >>> 0;
      len[0] = len[1] / 0x100000000 >>> 0;
    } // add bytes to input buffer


    _input.putBytes(msg); // process bytes


    _update(_state, _w, _input); // compact input buffer every 2K or if empty


    if (_input.read > 2048 || _input.length() === 0) {
      _input.compact();
    }

    return md;
  };
  /**
   * Produces the digest.
   *
   * @return a byte buffer containing the digest value.
   */


  md.digest = function () {
    /* Note: Here we copy the remaining bytes in the input buffer and
    add the appropriate SHA-1 padding. Then we do the final update
    on a copy of the state so that if the user wants to get
    intermediate digests they can do so. */

    /* Determine the number of bytes that must be added to the message
    to ensure its length is congruent to 448 mod 512. In other words,
    the data to be digested must be a multiple of 512 bits (or 128 bytes).
    This data includes the message, some padding, and the length of the
    message. Since the length of the message will be encoded as 8 bytes (64
    bits), that means that the last segment of the data must have 56 bytes
    (448 bits) of message and padding. Therefore, the length of the message
    plus the padding must be congruent to 448 mod 512 because
    512 - 128 = 448.
     In order to fill up the message length it must be filled with
    padding that begins with 1 bit followed by all 0 bits. Padding
    must *always* be present, so if the message length is already
    congruent to 448 mod 512, then 512 padding bits must be added. */
    var finalBlock = forge.util.createBuffer();
    finalBlock.putBytes(_input.bytes()); // compute remaining size to be digested (include message length size)

    var remaining = md.fullMessageLength[md.fullMessageLength.length - 1] + md.messageLengthSize; // add padding for overflow blockSize - overflow
    // _padding starts with 1 byte with first bit is set (byte value 128), then
    // there may be up to (blockSize - 1) other pad bytes

    var overflow = remaining & md.blockLength - 1;
    finalBlock.putBytes(_padding.substr(0, md.blockLength - overflow)); // serialize message length in bits in big-endian order; since length
    // is stored in bytes we multiply by 8 and add carry from next int

    var next, carry;
    var bits = md.fullMessageLength[0] * 8;

    for (var i = 0; i < md.fullMessageLength.length - 1; ++i) {
      next = md.fullMessageLength[i + 1] * 8;
      carry = next / 0x100000000 >>> 0;
      bits += carry;
      finalBlock.putInt32(bits >>> 0);
      bits = next >>> 0;
    }

    finalBlock.putInt32(bits);
    var s2 = {
      h0: _state.h0,
      h1: _state.h1,
      h2: _state.h2,
      h3: _state.h3,
      h4: _state.h4
    };

    _update(s2, _w, finalBlock);

    var rval = forge.util.createBuffer();
    rval.putInt32(s2.h0);
    rval.putInt32(s2.h1);
    rval.putInt32(s2.h2);
    rval.putInt32(s2.h3);
    rval.putInt32(s2.h4);
    return rval;
  };

  return md;
}; // sha-1 padding bytes not initialized yet


var _padding = null;
var _initialized = false;
/**
 * Initializes the constant tables.
 */

function _init() {
  // create padding
  _padding = String.fromCharCode(128);
  _padding += forge.util.fillString(String.fromCharCode(0x00), 64); // now initialized

  _initialized = true;
}
/**
 * Updates a SHA-1 state with the given byte buffer.
 *
 * @param s the SHA-1 state to update.
 * @param w the array to use to store words.
 * @param bytes the byte buffer to update with.
 */


function _update(s, w, bytes) {
  // consume 512 bit (64 byte) chunks
  var t, a, b, c, d, e, f, i;
  var len = bytes.length();

  while (len >= 64) {
    // the w array will be populated with sixteen 32-bit big-endian words
    // and then extended into 80 32-bit words according to SHA-1 algorithm
    // and for 32-79 using Max Locktyukhin's optimization
    // initialize hash value for this chunk
    a = s.h0;
    b = s.h1;
    c = s.h2;
    d = s.h3;
    e = s.h4; // round 1

    for (i = 0; i < 16; ++i) {
      t = bytes.getInt32();
      w[i] = t;
      f = d ^ b & (c ^ d);
      t = (a << 5 | a >>> 27) + f + e + 0x5A827999 + t;
      e = d;
      d = c; // `>>> 0` necessary to avoid iOS/Safari 10 optimization bug

      c = (b << 30 | b >>> 2) >>> 0;
      b = a;
      a = t;
    }

    for (; i < 20; ++i) {
      t = w[i - 3] ^ w[i - 8] ^ w[i - 14] ^ w[i - 16];
      t = t << 1 | t >>> 31;
      w[i] = t;
      f = d ^ b & (c ^ d);
      t = (a << 5 | a >>> 27) + f + e + 0x5A827999 + t;
      e = d;
      d = c; // `>>> 0` necessary to avoid iOS/Safari 10 optimization bug

      c = (b << 30 | b >>> 2) >>> 0;
      b = a;
      a = t;
    } // round 2


    for (; i < 32; ++i) {
      t = w[i - 3] ^ w[i - 8] ^ w[i - 14] ^ w[i - 16];
      t = t << 1 | t >>> 31;
      w[i] = t;
      f = b ^ c ^ d;
      t = (a << 5 | a >>> 27) + f + e + 0x6ED9EBA1 + t;
      e = d;
      d = c; // `>>> 0` necessary to avoid iOS/Safari 10 optimization bug

      c = (b << 30 | b >>> 2) >>> 0;
      b = a;
      a = t;
    }

    for (; i < 40; ++i) {
      t = w[i - 6] ^ w[i - 16] ^ w[i - 28] ^ w[i - 32];
      t = t << 2 | t >>> 30;
      w[i] = t;
      f = b ^ c ^ d;
      t = (a << 5 | a >>> 27) + f + e + 0x6ED9EBA1 + t;
      e = d;
      d = c; // `>>> 0` necessary to avoid iOS/Safari 10 optimization bug

      c = (b << 30 | b >>> 2) >>> 0;
      b = a;
      a = t;
    } // round 3


    for (; i < 60; ++i) {
      t = w[i - 6] ^ w[i - 16] ^ w[i - 28] ^ w[i - 32];
      t = t << 2 | t >>> 30;
      w[i] = t;
      f = b & c | d & (b ^ c);
      t = (a << 5 | a >>> 27) + f + e + 0x8F1BBCDC + t;
      e = d;
      d = c; // `>>> 0` necessary to avoid iOS/Safari 10 optimization bug

      c = (b << 30 | b >>> 2) >>> 0;
      b = a;
      a = t;
    } // round 4


    for (; i < 80; ++i) {
      t = w[i - 6] ^ w[i - 16] ^ w[i - 28] ^ w[i - 32];
      t = t << 2 | t >>> 30;
      w[i] = t;
      f = b ^ c ^ d;
      t = (a << 5 | a >>> 27) + f + e + 0xCA62C1D6 + t;
      e = d;
      d = c; // `>>> 0` necessary to avoid iOS/Safari 10 optimization bug

      c = (b << 30 | b >>> 2) >>> 0;
      b = a;
      a = t;
    } // update hash state


    s.h0 = s.h0 + a | 0;
    s.h1 = s.h1 + b | 0;
    s.h2 = s.h2 + c | 0;
    s.h3 = s.h3 + d | 0;
    s.h4 = s.h4 + e | 0;
    len -= 64;
  }
}
},{"./forge":"o20S","./md":"Tsiu","./util":"lWyh"}],"PZSV":[function(require,module,exports) {
/**
 * Partial implementation of PKCS#1 v2.2: RSA-OEAP
 *
 * Modified but based on the following MIT and BSD licensed code:
 *
 * https://github.com/kjur/jsjws/blob/master/rsa.js:
 *
 * The 'jsjws'(JSON Web Signature JavaScript Library) License
 *
 * Copyright (c) 2012 Kenji Urushima
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 *
 * http://webrsa.cvs.sourceforge.net/viewvc/webrsa/Client/RSAES-OAEP.js?content-type=text%2Fplain:
 *
 * RSAES-OAEP.js
 * $Id: RSAES-OAEP.js,v 1.1.1.1 2003/03/19 15:37:20 ellispritchard Exp $
 * JavaScript Implementation of PKCS #1 v2.1 RSA CRYPTOGRAPHY STANDARD (RSA Laboratories, June 14, 2002)
 * Copyright (C) Ellis Pritchard, Guardian Unlimited 2003.
 * Contact: ellis@nukinetics.com
 * Distributed under the BSD License.
 *
 * Official documentation: http://www.rsa.com/rsalabs/node.asp?id=2125
 *
 * @author Evan Jones (http://evanjones.ca/)
 * @author Dave Longley
 *
 * Copyright (c) 2013-2014 Digital Bazaar, Inc.
 */
var forge = require('./forge');

require('./util');

require('./random');

require('./sha1'); // shortcut for PKCS#1 API


var pkcs1 = module.exports = forge.pkcs1 = forge.pkcs1 || {};
/**
 * Encode the given RSAES-OAEP message (M) using key, with optional label (L)
 * and seed.
 *
 * This method does not perform RSA encryption, it only encodes the message
 * using RSAES-OAEP.
 *
 * @param key the RSA key to use.
 * @param message the message to encode.
 * @param options the options to use:
 *          label an optional label to use.
 *          seed the seed to use.
 *          md the message digest object to use, undefined for SHA-1.
 *          mgf1 optional mgf1 parameters:
 *            md the message digest object to use for MGF1.
 *
 * @return the encoded message bytes.
 */

pkcs1.encode_rsa_oaep = function (key, message, options) {
  // parse arguments
  var label;
  var seed;
  var md;
  var mgf1Md; // legacy args (label, seed, md)

  if (typeof options === 'string') {
    label = options;
    seed = arguments[3] || undefined;
    md = arguments[4] || undefined;
  } else if (options) {
    label = options.label || undefined;
    seed = options.seed || undefined;
    md = options.md || undefined;

    if (options.mgf1 && options.mgf1.md) {
      mgf1Md = options.mgf1.md;
    }
  } // default OAEP to SHA-1 message digest


  if (!md) {
    md = forge.md.sha1.create();
  } else {
    md.start();
  } // default MGF-1 to same as OAEP


  if (!mgf1Md) {
    mgf1Md = md;
  } // compute length in bytes and check output


  var keyLength = Math.ceil(key.n.bitLength() / 8);
  var maxLength = keyLength - 2 * md.digestLength - 2;

  if (message.length > maxLength) {
    var error = new Error('RSAES-OAEP input message length is too long.');
    error.length = message.length;
    error.maxLength = maxLength;
    throw error;
  }

  if (!label) {
    label = '';
  }

  md.update(label, 'raw');
  var lHash = md.digest();
  var PS = '';
  var PS_length = maxLength - message.length;

  for (var i = 0; i < PS_length; i++) {
    PS += '\x00';
  }

  var DB = lHash.getBytes() + PS + '\x01' + message;

  if (!seed) {
    seed = forge.random.getBytes(md.digestLength);
  } else if (seed.length !== md.digestLength) {
    var error = new Error('Invalid RSAES-OAEP seed. The seed length must ' + 'match the digest length.');
    error.seedLength = seed.length;
    error.digestLength = md.digestLength;
    throw error;
  }

  var dbMask = rsa_mgf1(seed, keyLength - md.digestLength - 1, mgf1Md);
  var maskedDB = forge.util.xorBytes(DB, dbMask, DB.length);
  var seedMask = rsa_mgf1(maskedDB, md.digestLength, mgf1Md);
  var maskedSeed = forge.util.xorBytes(seed, seedMask, seed.length); // return encoded message

  return '\x00' + maskedSeed + maskedDB;
};
/**
 * Decode the given RSAES-OAEP encoded message (EM) using key, with optional
 * label (L).
 *
 * This method does not perform RSA decryption, it only decodes the message
 * using RSAES-OAEP.
 *
 * @param key the RSA key to use.
 * @param em the encoded message to decode.
 * @param options the options to use:
 *          label an optional label to use.
 *          md the message digest object to use for OAEP, undefined for SHA-1.
 *          mgf1 optional mgf1 parameters:
 *            md the message digest object to use for MGF1.
 *
 * @return the decoded message bytes.
 */


pkcs1.decode_rsa_oaep = function (key, em, options) {
  // parse args
  var label;
  var md;
  var mgf1Md; // legacy args

  if (typeof options === 'string') {
    label = options;
    md = arguments[3] || undefined;
  } else if (options) {
    label = options.label || undefined;
    md = options.md || undefined;

    if (options.mgf1 && options.mgf1.md) {
      mgf1Md = options.mgf1.md;
    }
  } // compute length in bytes


  var keyLength = Math.ceil(key.n.bitLength() / 8);

  if (em.length !== keyLength) {
    var error = new Error('RSAES-OAEP encoded message length is invalid.');
    error.length = em.length;
    error.expectedLength = keyLength;
    throw error;
  } // default OAEP to SHA-1 message digest


  if (md === undefined) {
    md = forge.md.sha1.create();
  } else {
    md.start();
  } // default MGF-1 to same as OAEP


  if (!mgf1Md) {
    mgf1Md = md;
  }

  if (keyLength < 2 * md.digestLength + 2) {
    throw new Error('RSAES-OAEP key is too short for the hash function.');
  }

  if (!label) {
    label = '';
  }

  md.update(label, 'raw');
  var lHash = md.digest().getBytes(); // split the message into its parts

  var y = em.charAt(0);
  var maskedSeed = em.substring(1, md.digestLength + 1);
  var maskedDB = em.substring(1 + md.digestLength);
  var seedMask = rsa_mgf1(maskedDB, md.digestLength, mgf1Md);
  var seed = forge.util.xorBytes(maskedSeed, seedMask, maskedSeed.length);
  var dbMask = rsa_mgf1(seed, keyLength - md.digestLength - 1, mgf1Md);
  var db = forge.util.xorBytes(maskedDB, dbMask, maskedDB.length);
  var lHashPrime = db.substring(0, md.digestLength); // constant time check that all values match what is expected

  var error = y !== '\x00'; // constant time check lHash vs lHashPrime

  for (var i = 0; i < md.digestLength; ++i) {
    error |= lHash.charAt(i) !== lHashPrime.charAt(i);
  } // "constant time" find the 0x1 byte separating the padding (zeros) from the
  // message
  // TODO: It must be possible to do this in a better/smarter way?


  var in_ps = 1;
  var index = md.digestLength;

  for (var j = md.digestLength; j < db.length; j++) {
    var code = db.charCodeAt(j);
    var is_0 = code & 0x1 ^ 0x1; // non-zero if not 0 or 1 in the ps section

    var error_mask = in_ps ? 0xfffe : 0x0000;
    error |= code & error_mask; // latch in_ps to zero after we find 0x1

    in_ps = in_ps & is_0;
    index += in_ps;
  }

  if (error || db.charCodeAt(index) !== 0x1) {
    throw new Error('Invalid RSAES-OAEP padding.');
  }

  return db.substring(index + 1);
};

function rsa_mgf1(seed, maskLength, hash) {
  // default to SHA-1 message digest
  if (!hash) {
    hash = forge.md.sha1.create();
  }

  var t = '';
  var count = Math.ceil(maskLength / hash.digestLength);

  for (var i = 0; i < count; ++i) {
    var c = String.fromCharCode(i >> 24 & 0xFF, i >> 16 & 0xFF, i >> 8 & 0xFF, i & 0xFF);
    hash.start();
    hash.update(seed + c);
    t += hash.digest().getBytes();
  }

  return t.substring(0, maskLength);
}
},{"./forge":"o20S","./util":"lWyh","./random":"Gfwb","./sha1":"a9m4"}],"CDV4":[function(require,module,exports) {
/**
 * Prime number generation API.
 *
 * @author Dave Longley
 *
 * Copyright (c) 2014 Digital Bazaar, Inc.
 */
var forge = require('./forge');

require('./util');

require('./jsbn');

require('./random');

(function () {
  // forge.prime already defined
  if (forge.prime) {
    module.exports = forge.prime;
    return;
  }
  /* PRIME API */


  var prime = module.exports = forge.prime = forge.prime || {};
  var BigInteger = forge.jsbn.BigInteger; // primes are 30k+i for i = 1, 7, 11, 13, 17, 19, 23, 29

  var GCD_30_DELTA = [6, 4, 2, 4, 2, 4, 6, 2];
  var THIRTY = new BigInteger(null);
  THIRTY.fromInt(30);

  var op_or = function (x, y) {
    return x | y;
  };
  /**
   * Generates a random probable prime with the given number of bits.
   *
   * Alternative algorithms can be specified by name as a string or as an
   * object with custom options like so:
   *
   * {
   *   name: 'PRIMEINC',
   *   options: {
   *     maxBlockTime: <the maximum amount of time to block the main
   *       thread before allowing I/O other JS to run>,
   *     millerRabinTests: <the number of miller-rabin tests to run>,
   *     workerScript: <the worker script URL>,
   *     workers: <the number of web workers (if supported) to use,
   *       -1 to use estimated cores minus one>.
   *     workLoad: the size of the work load, ie: number of possible prime
   *       numbers for each web worker to check per work assignment,
   *       (default: 100).
   *   }
   * }
   *
   * @param bits the number of bits for the prime number.
   * @param options the options to use.
   *          [algorithm] the algorithm to use (default: 'PRIMEINC').
   *          [prng] a custom crypto-secure pseudo-random number generator to use,
   *            that must define "getBytesSync".
   *
   * @return callback(err, num) called once the operation completes.
   */


  prime.generateProbablePrime = function (bits, options, callback) {
    if (typeof options === 'function') {
      callback = options;
      options = {};
    }

    options = options || {}; // default to PRIMEINC algorithm

    var algorithm = options.algorithm || 'PRIMEINC';

    if (typeof algorithm === 'string') {
      algorithm = {
        name: algorithm
      };
    }

    algorithm.options = algorithm.options || {}; // create prng with api that matches BigInteger secure random

    var prng = options.prng || forge.random;
    var rng = {
      // x is an array to fill with bytes
      nextBytes: function (x) {
        var b = prng.getBytesSync(x.length);

        for (var i = 0; i < x.length; ++i) {
          x[i] = b.charCodeAt(i);
        }
      }
    };

    if (algorithm.name === 'PRIMEINC') {
      return primeincFindPrime(bits, rng, algorithm.options, callback);
    }

    throw new Error('Invalid prime generation algorithm: ' + algorithm.name);
  };

  function primeincFindPrime(bits, rng, options, callback) {
    if ('workers' in options) {
      return primeincFindPrimeWithWorkers(bits, rng, options, callback);
    }

    return primeincFindPrimeWithoutWorkers(bits, rng, options, callback);
  }

  function primeincFindPrimeWithoutWorkers(bits, rng, options, callback) {
    // initialize random number
    var num = generateRandom(bits, rng);
    /* Note: All primes are of the form 30k+i for i < 30 and gcd(30, i)=1. The
    number we are given is always aligned at 30k + 1. Each time the number is
    determined not to be prime we add to get to the next 'i', eg: if the number
    was at 30k + 1 we add 6. */

    var deltaIdx = 0; // get required number of MR tests

    var mrTests = getMillerRabinTests(num.bitLength());

    if ('millerRabinTests' in options) {
      mrTests = options.millerRabinTests;
    } // find prime nearest to 'num' for maxBlockTime ms
    // 10 ms gives 5ms of leeway for other calculations before dropping
    // below 60fps (1000/60 == 16.67), but in reality, the number will
    // likely be higher due to an 'atomic' big int modPow


    var maxBlockTime = 10;

    if ('maxBlockTime' in options) {
      maxBlockTime = options.maxBlockTime;
    }

    _primeinc(num, bits, rng, deltaIdx, mrTests, maxBlockTime, callback);
  }

  function _primeinc(num, bits, rng, deltaIdx, mrTests, maxBlockTime, callback) {
    var start = +new Date();

    do {
      // overflow, regenerate random number
      if (num.bitLength() > bits) {
        num = generateRandom(bits, rng);
      } // do primality test


      if (num.isProbablePrime(mrTests)) {
        return callback(null, num);
      } // get next potential prime


      num.dAddOffset(GCD_30_DELTA[deltaIdx++ % 8], 0);
    } while (maxBlockTime < 0 || +new Date() - start < maxBlockTime); // keep trying later


    forge.util.setImmediate(function () {
      _primeinc(num, bits, rng, deltaIdx, mrTests, maxBlockTime, callback);
    });
  } // NOTE: This algorithm is indeterminate in nature because workers
  // run in parallel looking at different segments of numbers. Even if this
  // algorithm is run twice with the same input from a predictable RNG, it
  // may produce different outputs.


  function primeincFindPrimeWithWorkers(bits, rng, options, callback) {
    // web workers unavailable
    if (typeof Worker === 'undefined') {
      return primeincFindPrimeWithoutWorkers(bits, rng, options, callback);
    } // initialize random number


    var num = generateRandom(bits, rng); // use web workers to generate keys

    var numWorkers = options.workers;
    var workLoad = options.workLoad || 100;
    var range = workLoad * 30 / 8;
    var workerScript = options.workerScript || 'forge/prime.worker.js';

    if (numWorkers === -1) {
      return forge.util.estimateCores(function (err, cores) {
        if (err) {
          // default to 2
          cores = 2;
        }

        numWorkers = cores - 1;
        generate();
      });
    }

    generate();

    function generate() {
      // require at least 1 worker
      numWorkers = Math.max(1, numWorkers); // TODO: consider optimizing by starting workers outside getPrime() ...
      // note that in order to clean up they will have to be made internally
      // asynchronous which may actually be slower
      // start workers immediately

      var workers = [];

      for (var i = 0; i < numWorkers; ++i) {
        // FIXME: fix path or use blob URLs
        workers[i] = new Worker(workerScript);
      }

      var running = numWorkers; // listen for requests from workers and assign ranges to find prime

      for (var i = 0; i < numWorkers; ++i) {
        workers[i].addEventListener('message', workerMessage);
      }
      /* Note: The distribution of random numbers is unknown. Therefore, each
      web worker is continuously allocated a range of numbers to check for a
      random number until one is found.
       Every 30 numbers will be checked just 8 times, because prime numbers
      have the form:
       30k+i, for i < 30 and gcd(30, i)=1 (there are 8 values of i for this)
       Therefore, if we want a web worker to run N checks before asking for
      a new range of numbers, each range must contain N*30/8 numbers.
       For 100 checks (workLoad), this is a range of 375. */


      var found = false;

      function workerMessage(e) {
        // ignore message, prime already found
        if (found) {
          return;
        }

        --running;
        var data = e.data;

        if (data.found) {
          // terminate all workers
          for (var i = 0; i < workers.length; ++i) {
            workers[i].terminate();
          }

          found = true;
          return callback(null, new BigInteger(data.prime, 16));
        } // overflow, regenerate random number


        if (num.bitLength() > bits) {
          num = generateRandom(bits, rng);
        } // assign new range to check


        var hex = num.toString(16); // start prime search

        e.target.postMessage({
          hex: hex,
          workLoad: workLoad
        });
        num.dAddOffset(range, 0);
      }
    }
  }
  /**
   * Generates a random number using the given number of bits and RNG.
   *
   * @param bits the number of bits for the number.
   * @param rng the random number generator to use.
   *
   * @return the random number.
   */


  function generateRandom(bits, rng) {
    var num = new BigInteger(bits, rng); // force MSB set

    var bits1 = bits - 1;

    if (!num.testBit(bits1)) {
      num.bitwiseTo(BigInteger.ONE.shiftLeft(bits1), op_or, num);
    } // align number on 30k+1 boundary


    num.dAddOffset(31 - num.mod(THIRTY).byteValue(), 0);
    return num;
  }
  /**
   * Returns the required number of Miller-Rabin tests to generate a
   * prime with an error probability of (1/2)^80.
   *
   * See Handbook of Applied Cryptography Chapter 4, Table 4.4.
   *
   * @param bits the bit size.
   *
   * @return the required number of iterations.
   */


  function getMillerRabinTests(bits) {
    if (bits <= 100) return 27;
    if (bits <= 150) return 18;
    if (bits <= 200) return 15;
    if (bits <= 250) return 12;
    if (bits <= 300) return 9;
    if (bits <= 350) return 8;
    if (bits <= 400) return 7;
    if (bits <= 500) return 6;
    if (bits <= 600) return 5;
    if (bits <= 800) return 4;
    if (bits <= 1250) return 3;
    return 2;
  }
})();
},{"./forge":"o20S","./util":"lWyh","./jsbn":"tFuv","./random":"Gfwb"}],"HL1S":[function(require,module,exports) {
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

/**
 * Javascript implementation of basic RSA algorithms.
 *
 * @author Dave Longley
 *
 * Copyright (c) 2010-2014 Digital Bazaar, Inc.
 *
 * The only algorithm currently supported for PKI is RSA.
 *
 * An RSA key is often stored in ASN.1 DER format. The SubjectPublicKeyInfo
 * ASN.1 structure is composed of an algorithm of type AlgorithmIdentifier
 * and a subjectPublicKey of type bit string.
 *
 * The AlgorithmIdentifier contains an Object Identifier (OID) and parameters
 * for the algorithm, if any. In the case of RSA, there aren't any.
 *
 * SubjectPublicKeyInfo ::= SEQUENCE {
 *   algorithm AlgorithmIdentifier,
 *   subjectPublicKey BIT STRING
 * }
 *
 * AlgorithmIdentifer ::= SEQUENCE {
 *   algorithm OBJECT IDENTIFIER,
 *   parameters ANY DEFINED BY algorithm OPTIONAL
 * }
 *
 * For an RSA public key, the subjectPublicKey is:
 *
 * RSAPublicKey ::= SEQUENCE {
 *   modulus            INTEGER,    -- n
 *   publicExponent     INTEGER     -- e
 * }
 *
 * PrivateKeyInfo ::= SEQUENCE {
 *   version                   Version,
 *   privateKeyAlgorithm       PrivateKeyAlgorithmIdentifier,
 *   privateKey                PrivateKey,
 *   attributes           [0]  IMPLICIT Attributes OPTIONAL
 * }
 *
 * Version ::= INTEGER
 * PrivateKeyAlgorithmIdentifier ::= AlgorithmIdentifier
 * PrivateKey ::= OCTET STRING
 * Attributes ::= SET OF Attribute
 *
 * An RSA private key as the following structure:
 *
 * RSAPrivateKey ::= SEQUENCE {
 *   version Version,
 *   modulus INTEGER, -- n
 *   publicExponent INTEGER, -- e
 *   privateExponent INTEGER, -- d
 *   prime1 INTEGER, -- p
 *   prime2 INTEGER, -- q
 *   exponent1 INTEGER, -- d mod (p-1)
 *   exponent2 INTEGER, -- d mod (q-1)
 *   coefficient INTEGER -- (inverse of q) mod p
 * }
 *
 * Version ::= INTEGER
 *
 * The OID for the RSA key algorithm is: 1.2.840.113549.1.1.1
 */
var forge = require('./forge');

require('./asn1');

require('./jsbn');

require('./oids');

require('./pkcs1');

require('./prime');

require('./random');

require('./util');

if (typeof BigInteger === 'undefined') {
  var BigInteger = forge.jsbn.BigInteger;
}

var _crypto = forge.util.isNodejs ? require('crypto') : null; // shortcut for asn.1 API


var asn1 = forge.asn1; // shortcut for util API

var util = forge.util;
/*
 * RSA encryption and decryption, see RFC 2313.
 */

forge.pki = forge.pki || {};
module.exports = forge.pki.rsa = forge.rsa = forge.rsa || {};
var pki = forge.pki; // for finding primes, which are 30k+i for i = 1, 7, 11, 13, 17, 19, 23, 29

var GCD_30_DELTA = [6, 4, 2, 4, 2, 4, 6, 2]; // validator for a PrivateKeyInfo structure

var privateKeyValidator = {
  // PrivateKeyInfo
  name: 'PrivateKeyInfo',
  tagClass: asn1.Class.UNIVERSAL,
  type: asn1.Type.SEQUENCE,
  constructed: true,
  value: [{
    // Version (INTEGER)
    name: 'PrivateKeyInfo.version',
    tagClass: asn1.Class.UNIVERSAL,
    type: asn1.Type.INTEGER,
    constructed: false,
    capture: 'privateKeyVersion'
  }, {
    // privateKeyAlgorithm
    name: 'PrivateKeyInfo.privateKeyAlgorithm',
    tagClass: asn1.Class.UNIVERSAL,
    type: asn1.Type.SEQUENCE,
    constructed: true,
    value: [{
      name: 'AlgorithmIdentifier.algorithm',
      tagClass: asn1.Class.UNIVERSAL,
      type: asn1.Type.OID,
      constructed: false,
      capture: 'privateKeyOid'
    }]
  }, {
    // PrivateKey
    name: 'PrivateKeyInfo',
    tagClass: asn1.Class.UNIVERSAL,
    type: asn1.Type.OCTETSTRING,
    constructed: false,
    capture: 'privateKey'
  }]
}; // validator for an RSA private key

var rsaPrivateKeyValidator = {
  // RSAPrivateKey
  name: 'RSAPrivateKey',
  tagClass: asn1.Class.UNIVERSAL,
  type: asn1.Type.SEQUENCE,
  constructed: true,
  value: [{
    // Version (INTEGER)
    name: 'RSAPrivateKey.version',
    tagClass: asn1.Class.UNIVERSAL,
    type: asn1.Type.INTEGER,
    constructed: false,
    capture: 'privateKeyVersion'
  }, {
    // modulus (n)
    name: 'RSAPrivateKey.modulus',
    tagClass: asn1.Class.UNIVERSAL,
    type: asn1.Type.INTEGER,
    constructed: false,
    capture: 'privateKeyModulus'
  }, {
    // publicExponent (e)
    name: 'RSAPrivateKey.publicExponent',
    tagClass: asn1.Class.UNIVERSAL,
    type: asn1.Type.INTEGER,
    constructed: false,
    capture: 'privateKeyPublicExponent'
  }, {
    // privateExponent (d)
    name: 'RSAPrivateKey.privateExponent',
    tagClass: asn1.Class.UNIVERSAL,
    type: asn1.Type.INTEGER,
    constructed: false,
    capture: 'privateKeyPrivateExponent'
  }, {
    // prime1 (p)
    name: 'RSAPrivateKey.prime1',
    tagClass: asn1.Class.UNIVERSAL,
    type: asn1.Type.INTEGER,
    constructed: false,
    capture: 'privateKeyPrime1'
  }, {
    // prime2 (q)
    name: 'RSAPrivateKey.prime2',
    tagClass: asn1.Class.UNIVERSAL,
    type: asn1.Type.INTEGER,
    constructed: false,
    capture: 'privateKeyPrime2'
  }, {
    // exponent1 (d mod (p-1))
    name: 'RSAPrivateKey.exponent1',
    tagClass: asn1.Class.UNIVERSAL,
    type: asn1.Type.INTEGER,
    constructed: false,
    capture: 'privateKeyExponent1'
  }, {
    // exponent2 (d mod (q-1))
    name: 'RSAPrivateKey.exponent2',
    tagClass: asn1.Class.UNIVERSAL,
    type: asn1.Type.INTEGER,
    constructed: false,
    capture: 'privateKeyExponent2'
  }, {
    // coefficient ((inverse of q) mod p)
    name: 'RSAPrivateKey.coefficient',
    tagClass: asn1.Class.UNIVERSAL,
    type: asn1.Type.INTEGER,
    constructed: false,
    capture: 'privateKeyCoefficient'
  }]
}; // validator for an RSA public key

var rsaPublicKeyValidator = {
  // RSAPublicKey
  name: 'RSAPublicKey',
  tagClass: asn1.Class.UNIVERSAL,
  type: asn1.Type.SEQUENCE,
  constructed: true,
  value: [{
    // modulus (n)
    name: 'RSAPublicKey.modulus',
    tagClass: asn1.Class.UNIVERSAL,
    type: asn1.Type.INTEGER,
    constructed: false,
    capture: 'publicKeyModulus'
  }, {
    // publicExponent (e)
    name: 'RSAPublicKey.exponent',
    tagClass: asn1.Class.UNIVERSAL,
    type: asn1.Type.INTEGER,
    constructed: false,
    capture: 'publicKeyExponent'
  }]
}; // validator for an SubjectPublicKeyInfo structure
// Note: Currently only works with an RSA public key

var publicKeyValidator = forge.pki.rsa.publicKeyValidator = {
  name: 'SubjectPublicKeyInfo',
  tagClass: asn1.Class.UNIVERSAL,
  type: asn1.Type.SEQUENCE,
  constructed: true,
  captureAsn1: 'subjectPublicKeyInfo',
  value: [{
    name: 'SubjectPublicKeyInfo.AlgorithmIdentifier',
    tagClass: asn1.Class.UNIVERSAL,
    type: asn1.Type.SEQUENCE,
    constructed: true,
    value: [{
      name: 'AlgorithmIdentifier.algorithm',
      tagClass: asn1.Class.UNIVERSAL,
      type: asn1.Type.OID,
      constructed: false,
      capture: 'publicKeyOid'
    }]
  }, {
    // subjectPublicKey
    name: 'SubjectPublicKeyInfo.subjectPublicKey',
    tagClass: asn1.Class.UNIVERSAL,
    type: asn1.Type.BITSTRING,
    constructed: false,
    value: [{
      // RSAPublicKey
      name: 'SubjectPublicKeyInfo.subjectPublicKey.RSAPublicKey',
      tagClass: asn1.Class.UNIVERSAL,
      type: asn1.Type.SEQUENCE,
      constructed: true,
      optional: true,
      captureAsn1: 'rsaPublicKey'
    }]
  }]
};
/**
 * Wrap digest in DigestInfo object.
 *
 * This function implements EMSA-PKCS1-v1_5-ENCODE as per RFC 3447.
 *
 * DigestInfo ::= SEQUENCE {
 *   digestAlgorithm DigestAlgorithmIdentifier,
 *   digest Digest
 * }
 *
 * DigestAlgorithmIdentifier ::= AlgorithmIdentifier
 * Digest ::= OCTET STRING
 *
 * @param md the message digest object with the hash to sign.
 *
 * @return the encoded message (ready for RSA encrytion)
 */

var emsaPkcs1v15encode = function (md) {
  // get the oid for the algorithm
  var oid;

  if (md.algorithm in pki.oids) {
    oid = pki.oids[md.algorithm];
  } else {
    var error = new Error('Unknown message digest algorithm.');
    error.algorithm = md.algorithm;
    throw error;
  }

  var oidBytes = asn1.oidToDer(oid).getBytes(); // create the digest info

  var digestInfo = asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, []);
  var digestAlgorithm = asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, []);
  digestAlgorithm.value.push(asn1.create(asn1.Class.UNIVERSAL, asn1.Type.OID, false, oidBytes));
  digestAlgorithm.value.push(asn1.create(asn1.Class.UNIVERSAL, asn1.Type.NULL, false, ''));
  var digest = asn1.create(asn1.Class.UNIVERSAL, asn1.Type.OCTETSTRING, false, md.digest().getBytes());
  digestInfo.value.push(digestAlgorithm);
  digestInfo.value.push(digest); // encode digest info

  return asn1.toDer(digestInfo).getBytes();
};
/**
 * Performs x^c mod n (RSA encryption or decryption operation).
 *
 * @param x the number to raise and mod.
 * @param key the key to use.
 * @param pub true if the key is public, false if private.
 *
 * @return the result of x^c mod n.
 */


var _modPow = function (x, key, pub) {
  if (pub) {
    return x.modPow(key.e, key.n);
  }

  if (!key.p || !key.q) {
    // allow calculation without CRT params (slow)
    return x.modPow(key.d, key.n);
  } // pre-compute dP, dQ, and qInv if necessary


  if (!key.dP) {
    key.dP = key.d.mod(key.p.subtract(BigInteger.ONE));
  }

  if (!key.dQ) {
    key.dQ = key.d.mod(key.q.subtract(BigInteger.ONE));
  }

  if (!key.qInv) {
    key.qInv = key.q.modInverse(key.p);
  }
  /* Chinese remainder theorem (CRT) states:
     Suppose n1, n2, ..., nk are positive integers which are pairwise
    coprime (n1 and n2 have no common factors other than 1). For any
    integers x1, x2, ..., xk there exists an integer x solving the
    system of simultaneous congruences (where ~= means modularly
    congruent so a ~= b mod n means a mod n = b mod n):
     x ~= x1 mod n1
    x ~= x2 mod n2
    ...
    x ~= xk mod nk
     This system of congruences has a single simultaneous solution x
    between 0 and n - 1. Furthermore, each xk solution and x itself
    is congruent modulo the product n = n1*n2*...*nk.
    So x1 mod n = x2 mod n = xk mod n = x mod n.
     The single simultaneous solution x can be solved with the following
    equation:
     x = sum(xi*ri*si) mod n where ri = n/ni and si = ri^-1 mod ni.
     Where x is less than n, xi = x mod ni.
     For RSA we are only concerned with k = 2. The modulus n = pq, where
    p and q are coprime. The RSA decryption algorithm is:
     y = x^d mod n
     Given the above:
     x1 = x^d mod p
    r1 = n/p = q
    s1 = q^-1 mod p
    x2 = x^d mod q
    r2 = n/q = p
    s2 = p^-1 mod q
     So y = (x1r1s1 + x2r2s2) mod n
         = ((x^d mod p)q(q^-1 mod p) + (x^d mod q)p(p^-1 mod q)) mod n
     According to Fermat's Little Theorem, if the modulus P is prime,
    for any integer A not evenly divisible by P, A^(P-1) ~= 1 mod P.
    Since A is not divisible by P it follows that if:
    N ~= M mod (P - 1), then A^N mod P = A^M mod P. Therefore:
     A^N mod P = A^(M mod (P - 1)) mod P. (The latter takes less effort
    to calculate). In order to calculate x^d mod p more quickly the
    exponent d mod (p - 1) is stored in the RSA private key (the same
    is done for x^d mod q). These values are referred to as dP and dQ
    respectively. Therefore we now have:
     y = ((x^dP mod p)q(q^-1 mod p) + (x^dQ mod q)p(p^-1 mod q)) mod n
     Since we'll be reducing x^dP by modulo p (same for q) we can also
    reduce x by p (and q respectively) before hand. Therefore, let
     xp = ((x mod p)^dP mod p), and
    xq = ((x mod q)^dQ mod q), yielding:
     y = (xp*q*(q^-1 mod p) + xq*p*(p^-1 mod q)) mod n
     This can be further reduced to a simple algorithm that only
    requires 1 inverse (the q inverse is used) to be used and stored.
    The algorithm is called Garner's algorithm. If qInv is the
    inverse of q, we simply calculate:
     y = (qInv*(xp - xq) mod p) * q + xq
     However, there are two further complications. First, we need to
    ensure that xp > xq to prevent signed BigIntegers from being used
    so we add p until this is true (since we will be mod'ing with
    p anyway). Then, there is a known timing attack on algorithms
    using the CRT. To mitigate this risk, "cryptographic blinding"
    should be used. This requires simply generating a random number r
    between 0 and n-1 and its inverse and multiplying x by r^e before
    calculating y and then multiplying y by r^-1 afterwards. Note that
    r must be coprime with n (gcd(r, n) === 1) in order to have an
    inverse.
  */
  // cryptographic blinding


  var r;

  do {
    r = new BigInteger(forge.util.bytesToHex(forge.random.getBytes(key.n.bitLength() / 8)), 16);
  } while (r.compareTo(key.n) >= 0 || !r.gcd(key.n).equals(BigInteger.ONE));

  x = x.multiply(r.modPow(key.e, key.n)).mod(key.n); // calculate xp and xq

  var xp = x.mod(key.p).modPow(key.dP, key.p);
  var xq = x.mod(key.q).modPow(key.dQ, key.q); // xp must be larger than xq to avoid signed bit usage

  while (xp.compareTo(xq) < 0) {
    xp = xp.add(key.p);
  } // do last step


  var y = xp.subtract(xq).multiply(key.qInv).mod(key.p).multiply(key.q).add(xq); // remove effect of random for cryptographic blinding

  y = y.multiply(r.modInverse(key.n)).mod(key.n);
  return y;
};
/**
 * NOTE: THIS METHOD IS DEPRECATED, use 'sign' on a private key object or
 * 'encrypt' on a public key object instead.
 *
 * Performs RSA encryption.
 *
 * The parameter bt controls whether to put padding bytes before the
 * message passed in. Set bt to either true or false to disable padding
 * completely (in order to handle e.g. EMSA-PSS encoding seperately before),
 * signaling whether the encryption operation is a public key operation
 * (i.e. encrypting data) or not, i.e. private key operation (data signing).
 *
 * For PKCS#1 v1.5 padding pass in the block type to use, i.e. either 0x01
 * (for signing) or 0x02 (for encryption). The key operation mode (private
 * or public) is derived from this flag in that case).
 *
 * @param m the message to encrypt as a byte string.
 * @param key the RSA key to use.
 * @param bt for PKCS#1 v1.5 padding, the block type to use
 *   (0x01 for private key, 0x02 for public),
 *   to disable padding: true = public key, false = private key.
 *
 * @return the encrypted bytes as a string.
 */


pki.rsa.encrypt = function (m, key, bt) {
  var pub = bt;
  var eb; // get the length of the modulus in bytes

  var k = Math.ceil(key.n.bitLength() / 8);

  if (bt !== false && bt !== true) {
    // legacy, default to PKCS#1 v1.5 padding
    pub = bt === 0x02;
    eb = _encodePkcs1_v1_5(m, key, bt);
  } else {
    eb = forge.util.createBuffer();
    eb.putBytes(m);
  } // load encryption block as big integer 'x'
  // FIXME: hex conversion inefficient, get BigInteger w/byte strings


  var x = new BigInteger(eb.toHex(), 16); // do RSA encryption

  var y = _modPow(x, key, pub); // convert y into the encrypted data byte string, if y is shorter in
  // bytes than k, then prepend zero bytes to fill up ed
  // FIXME: hex conversion inefficient, get BigInteger w/byte strings


  var yhex = y.toString(16);
  var ed = forge.util.createBuffer();
  var zeros = k - Math.ceil(yhex.length / 2);

  while (zeros > 0) {
    ed.putByte(0x00);
    --zeros;
  }

  ed.putBytes(forge.util.hexToBytes(yhex));
  return ed.getBytes();
};
/**
 * NOTE: THIS METHOD IS DEPRECATED, use 'decrypt' on a private key object or
 * 'verify' on a public key object instead.
 *
 * Performs RSA decryption.
 *
 * The parameter ml controls whether to apply PKCS#1 v1.5 padding
 * or not.  Set ml = false to disable padding removal completely
 * (in order to handle e.g. EMSA-PSS later on) and simply pass back
 * the RSA encryption block.
 *
 * @param ed the encrypted data to decrypt in as a byte string.
 * @param key the RSA key to use.
 * @param pub true for a public key operation, false for private.
 * @param ml the message length, if known, false to disable padding.
 *
 * @return the decrypted message as a byte string.
 */


pki.rsa.decrypt = function (ed, key, pub, ml) {
  // get the length of the modulus in bytes
  var k = Math.ceil(key.n.bitLength() / 8); // error if the length of the encrypted data ED is not k

  if (ed.length !== k) {
    var error = new Error('Encrypted message length is invalid.');
    error.length = ed.length;
    error.expected = k;
    throw error;
  } // convert encrypted data into a big integer
  // FIXME: hex conversion inefficient, get BigInteger w/byte strings


  var y = new BigInteger(forge.util.createBuffer(ed).toHex(), 16); // y must be less than the modulus or it wasn't the result of
  // a previous mod operation (encryption) using that modulus

  if (y.compareTo(key.n) >= 0) {
    throw new Error('Encrypted message is invalid.');
  } // do RSA decryption


  var x = _modPow(y, key, pub); // create the encryption block, if x is shorter in bytes than k, then
  // prepend zero bytes to fill up eb
  // FIXME: hex conversion inefficient, get BigInteger w/byte strings


  var xhex = x.toString(16);
  var eb = forge.util.createBuffer();
  var zeros = k - Math.ceil(xhex.length / 2);

  while (zeros > 0) {
    eb.putByte(0x00);
    --zeros;
  }

  eb.putBytes(forge.util.hexToBytes(xhex));

  if (ml !== false) {
    // legacy, default to PKCS#1 v1.5 padding
    return _decodePkcs1_v1_5(eb.getBytes(), key, pub);
  } // return message


  return eb.getBytes();
};
/**
 * Creates an RSA key-pair generation state object. It is used to allow
 * key-generation to be performed in steps. It also allows for a UI to
 * display progress updates.
 *
 * @param bits the size for the private key in bits, defaults to 2048.
 * @param e the public exponent to use, defaults to 65537 (0x10001).
 * @param [options] the options to use.
 *          prng a custom crypto-secure pseudo-random number generator to use,
 *            that must define "getBytesSync".
 *          algorithm the algorithm to use (default: 'PRIMEINC').
 *
 * @return the state object to use to generate the key-pair.
 */


pki.rsa.createKeyPairGenerationState = function (bits, e, options) {
  // TODO: migrate step-based prime generation code to forge.prime
  // set default bits
  if (typeof bits === 'string') {
    bits = parseInt(bits, 10);
  }

  bits = bits || 2048; // create prng with api that matches BigInteger secure random

  options = options || {};
  var prng = options.prng || forge.random;
  var rng = {
    // x is an array to fill with bytes
    nextBytes: function (x) {
      var b = prng.getBytesSync(x.length);

      for (var i = 0; i < x.length; ++i) {
        x[i] = b.charCodeAt(i);
      }
    }
  };
  var algorithm = options.algorithm || 'PRIMEINC'; // create PRIMEINC algorithm state

  var rval;

  if (algorithm === 'PRIMEINC') {
    rval = {
      algorithm: algorithm,
      state: 0,
      bits: bits,
      rng: rng,
      eInt: e || 65537,
      e: new BigInteger(null),
      p: null,
      q: null,
      qBits: bits >> 1,
      pBits: bits - (bits >> 1),
      pqState: 0,
      num: null,
      keys: null
    };
    rval.e.fromInt(rval.eInt);
  } else {
    throw new Error('Invalid key generation algorithm: ' + algorithm);
  }

  return rval;
};
/**
 * Attempts to runs the key-generation algorithm for at most n seconds
 * (approximately) using the given state. When key-generation has completed,
 * the keys will be stored in state.keys.
 *
 * To use this function to update a UI while generating a key or to prevent
 * causing browser lockups/warnings, set "n" to a value other than 0. A
 * simple pattern for generating a key and showing a progress indicator is:
 *
 * var state = pki.rsa.createKeyPairGenerationState(2048);
 * var step = function() {
 *   // step key-generation, run algorithm for 100 ms, repeat
 *   if(!forge.pki.rsa.stepKeyPairGenerationState(state, 100)) {
 *     setTimeout(step, 1);
 *   } else {
 *     // key-generation complete
 *     // TODO: turn off progress indicator here
 *     // TODO: use the generated key-pair in "state.keys"
 *   }
 * };
 * // TODO: turn on progress indicator here
 * setTimeout(step, 0);
 *
 * @param state the state to use.
 * @param n the maximum number of milliseconds to run the algorithm for, 0
 *          to run the algorithm to completion.
 *
 * @return true if the key-generation completed, false if not.
 */


pki.rsa.stepKeyPairGenerationState = function (state, n) {
  // set default algorithm if not set
  if (!('algorithm' in state)) {
    state.algorithm = 'PRIMEINC';
  } // TODO: migrate step-based prime generation code to forge.prime
  // TODO: abstract as PRIMEINC algorithm
  // do key generation (based on Tom Wu's rsa.js, see jsbn.js license)
  // with some minor optimizations and designed to run in steps
  // local state vars


  var THIRTY = new BigInteger(null);
  THIRTY.fromInt(30);
  var deltaIdx = 0;

  var op_or = function (x, y) {
    return x | y;
  }; // keep stepping until time limit is reached or done


  var t1 = +new Date();
  var t2;
  var total = 0;

  while (state.keys === null && (n <= 0 || total < n)) {
    // generate p or q
    if (state.state === 0) {
      /* Note: All primes are of the form:
         30k+i, for i < 30 and gcd(30, i)=1, where there are 8 values for i
         When we generate a random number, we always align it at 30k + 1. Each
        time the number is determined not to be prime we add to get to the
        next 'i', eg: if the number was at 30k + 1 we add 6. */
      var bits = state.p === null ? state.pBits : state.qBits;
      var bits1 = bits - 1; // get a random number

      if (state.pqState === 0) {
        state.num = new BigInteger(bits, state.rng); // force MSB set

        if (!state.num.testBit(bits1)) {
          state.num.bitwiseTo(BigInteger.ONE.shiftLeft(bits1), op_or, state.num);
        } // align number on 30k+1 boundary


        state.num.dAddOffset(31 - state.num.mod(THIRTY).byteValue(), 0);
        deltaIdx = 0;
        ++state.pqState;
      } else if (state.pqState === 1) {
        // try to make the number a prime
        if (state.num.bitLength() > bits) {
          // overflow, try again
          state.pqState = 0; // do primality test
        } else if (state.num.isProbablePrime(_getMillerRabinTests(state.num.bitLength()))) {
          ++state.pqState;
        } else {
          // get next potential prime
          state.num.dAddOffset(GCD_30_DELTA[deltaIdx++ % 8], 0);
        }
      } else if (state.pqState === 2) {
        // ensure number is coprime with e
        state.pqState = state.num.subtract(BigInteger.ONE).gcd(state.e).compareTo(BigInteger.ONE) === 0 ? 3 : 0;
      } else if (state.pqState === 3) {
        // store p or q
        state.pqState = 0;

        if (state.p === null) {
          state.p = state.num;
        } else {
          state.q = state.num;
        } // advance state if both p and q are ready


        if (state.p !== null && state.q !== null) {
          ++state.state;
        }

        state.num = null;
      }
    } else if (state.state === 1) {
      // ensure p is larger than q (swap them if not)
      if (state.p.compareTo(state.q) < 0) {
        state.num = state.p;
        state.p = state.q;
        state.q = state.num;
      }

      ++state.state;
    } else if (state.state === 2) {
      // compute phi: (p - 1)(q - 1) (Euler's totient function)
      state.p1 = state.p.subtract(BigInteger.ONE);
      state.q1 = state.q.subtract(BigInteger.ONE);
      state.phi = state.p1.multiply(state.q1);
      ++state.state;
    } else if (state.state === 3) {
      // ensure e and phi are coprime
      if (state.phi.gcd(state.e).compareTo(BigInteger.ONE) === 0) {
        // phi and e are coprime, advance
        ++state.state;
      } else {
        // phi and e aren't coprime, so generate a new p and q
        state.p = null;
        state.q = null;
        state.state = 0;
      }
    } else if (state.state === 4) {
      // create n, ensure n is has the right number of bits
      state.n = state.p.multiply(state.q); // ensure n is right number of bits

      if (state.n.bitLength() === state.bits) {
        // success, advance
        ++state.state;
      } else {
        // failed, get new q
        state.q = null;
        state.state = 0;
      }
    } else if (state.state === 5) {
      // set keys
      var d = state.e.modInverse(state.phi);
      state.keys = {
        privateKey: pki.rsa.setPrivateKey(state.n, state.e, d, state.p, state.q, d.mod(state.p1), d.mod(state.q1), state.q.modInverse(state.p)),
        publicKey: pki.rsa.setPublicKey(state.n, state.e)
      };
    } // update timing


    t2 = +new Date();
    total += t2 - t1;
    t1 = t2;
  }

  return state.keys !== null;
};
/**
 * Generates an RSA public-private key pair in a single call.
 *
 * To generate a key-pair in steps (to allow for progress updates and to
 * prevent blocking or warnings in slow browsers) then use the key-pair
 * generation state functions.
 *
 * To generate a key-pair asynchronously (either through web-workers, if
 * available, or by breaking up the work on the main thread), pass a
 * callback function.
 *
 * @param [bits] the size for the private key in bits, defaults to 2048.
 * @param [e] the public exponent to use, defaults to 65537.
 * @param [options] options for key-pair generation, if given then 'bits'
 *            and 'e' must *not* be given:
 *          bits the size for the private key in bits, (default: 2048).
 *          e the public exponent to use, (default: 65537 (0x10001)).
 *          workerScript the worker script URL.
 *          workers the number of web workers (if supported) to use,
 *            (default: 2).
 *          workLoad the size of the work load, ie: number of possible prime
 *            numbers for each web worker to check per work assignment,
 *            (default: 100).
 *          prng a custom crypto-secure pseudo-random number generator to use,
 *            that must define "getBytesSync". Disables use of native APIs.
 *          algorithm the algorithm to use (default: 'PRIMEINC').
 * @param [callback(err, keypair)] called once the operation completes.
 *
 * @return an object with privateKey and publicKey properties.
 */


pki.rsa.generateKeyPair = function (bits, e, options, callback) {
  // (bits), (options), (callback)
  if (arguments.length === 1) {
    if (_typeof(bits) === 'object') {
      options = bits;
      bits = undefined;
    } else if (typeof bits === 'function') {
      callback = bits;
      bits = undefined;
    }
  } else if (arguments.length === 2) {
    // (bits, e), (bits, options), (bits, callback), (options, callback)
    if (typeof bits === 'number') {
      if (typeof e === 'function') {
        callback = e;
        e = undefined;
      } else if (typeof e !== 'number') {
        options = e;
        e = undefined;
      }
    } else {
      options = bits;
      callback = e;
      bits = undefined;
      e = undefined;
    }
  } else if (arguments.length === 3) {
    // (bits, e, options), (bits, e, callback), (bits, options, callback)
    if (typeof e === 'number') {
      if (typeof options === 'function') {
        callback = options;
        options = undefined;
      }
    } else {
      callback = options;
      options = e;
      e = undefined;
    }
  }

  options = options || {};

  if (bits === undefined) {
    bits = options.bits || 2048;
  }

  if (e === undefined) {
    e = options.e || 0x10001;
  } // use native code if permitted, available, and parameters are acceptable


  if (!forge.options.usePureJavaScript && !options.prng && bits >= 256 && bits <= 16384 && (e === 0x10001 || e === 3)) {
    if (callback) {
      // try native async
      if (_detectNodeCrypto('generateKeyPair')) {
        return _crypto.generateKeyPair('rsa', {
          modulusLength: bits,
          publicExponent: e,
          publicKeyEncoding: {
            type: 'spki',
            format: 'pem'
          },
          privateKeyEncoding: {
            type: 'pkcs8',
            format: 'pem'
          }
        }, function (err, pub, priv) {
          if (err) {
            return callback(err);
          }

          callback(null, {
            privateKey: pki.privateKeyFromPem(priv),
            publicKey: pki.publicKeyFromPem(pub)
          });
        });
      }

      if (_detectSubtleCrypto('generateKey') && _detectSubtleCrypto('exportKey')) {
        // use standard native generateKey
        return util.globalScope.crypto.subtle.generateKey({
          name: 'RSASSA-PKCS1-v1_5',
          modulusLength: bits,
          publicExponent: _intToUint8Array(e),
          hash: {
            name: 'SHA-256'
          }
        }, true
        /* key can be exported*/
        , ['sign', 'verify']).then(function (pair) {
          return util.globalScope.crypto.subtle.exportKey('pkcs8', pair.privateKey); // avoiding catch(function(err) {...}) to support IE <= 8
        }).then(undefined, function (err) {
          callback(err);
        }).then(function (pkcs8) {
          if (pkcs8) {
            var privateKey = pki.privateKeyFromAsn1(asn1.fromDer(forge.util.createBuffer(pkcs8)));
            callback(null, {
              privateKey: privateKey,
              publicKey: pki.setRsaPublicKey(privateKey.n, privateKey.e)
            });
          }
        });
      }

      if (_detectSubtleMsCrypto('generateKey') && _detectSubtleMsCrypto('exportKey')) {
        var genOp = util.globalScope.msCrypto.subtle.generateKey({
          name: 'RSASSA-PKCS1-v1_5',
          modulusLength: bits,
          publicExponent: _intToUint8Array(e),
          hash: {
            name: 'SHA-256'
          }
        }, true
        /* key can be exported*/
        , ['sign', 'verify']);

        genOp.oncomplete = function (e) {
          var pair = e.target.result;
          var exportOp = util.globalScope.msCrypto.subtle.exportKey('pkcs8', pair.privateKey);

          exportOp.oncomplete = function (e) {
            var pkcs8 = e.target.result;
            var privateKey = pki.privateKeyFromAsn1(asn1.fromDer(forge.util.createBuffer(pkcs8)));
            callback(null, {
              privateKey: privateKey,
              publicKey: pki.setRsaPublicKey(privateKey.n, privateKey.e)
            });
          };

          exportOp.onerror = function (err) {
            callback(err);
          };
        };

        genOp.onerror = function (err) {
          callback(err);
        };

        return;
      }
    } else {
      // try native sync
      if (_detectNodeCrypto('generateKeyPairSync')) {
        var keypair = _crypto.generateKeyPairSync('rsa', {
          modulusLength: bits,
          publicExponent: e,
          publicKeyEncoding: {
            type: 'spki',
            format: 'pem'
          },
          privateKeyEncoding: {
            type: 'pkcs8',
            format: 'pem'
          }
        });

        return {
          privateKey: pki.privateKeyFromPem(keypair.privateKey),
          publicKey: pki.publicKeyFromPem(keypair.publicKey)
        };
      }
    }
  } // use JavaScript implementation


  var state = pki.rsa.createKeyPairGenerationState(bits, e, options);

  if (!callback) {
    pki.rsa.stepKeyPairGenerationState(state, 0);
    return state.keys;
  }

  _generateKeyPair(state, options, callback);
};
/**
 * Sets an RSA public key from BigIntegers modulus and exponent.
 *
 * @param n the modulus.
 * @param e the exponent.
 *
 * @return the public key.
 */


pki.setRsaPublicKey = pki.rsa.setPublicKey = function (n, e) {
  var key = {
    n: n,
    e: e
  };
  /**
   * Encrypts the given data with this public key. Newer applications
   * should use the 'RSA-OAEP' decryption scheme, 'RSAES-PKCS1-V1_5' is for
   * legacy applications.
   *
   * @param data the byte string to encrypt.
   * @param scheme the encryption scheme to use:
   *          'RSAES-PKCS1-V1_5' (default),
   *          'RSA-OAEP',
   *          'RAW', 'NONE', or null to perform raw RSA encryption,
   *          an object with an 'encode' property set to a function
   *          with the signature 'function(data, key)' that returns
   *          a binary-encoded string representing the encoded data.
   * @param schemeOptions any scheme-specific options.
   *
   * @return the encrypted byte string.
   */

  key.encrypt = function (data, scheme, schemeOptions) {
    if (typeof scheme === 'string') {
      scheme = scheme.toUpperCase();
    } else if (scheme === undefined) {
      scheme = 'RSAES-PKCS1-V1_5';
    }

    if (scheme === 'RSAES-PKCS1-V1_5') {
      scheme = {
        encode: function (m, key, pub) {
          return _encodePkcs1_v1_5(m, key, 0x02).getBytes();
        }
      };
    } else if (scheme === 'RSA-OAEP' || scheme === 'RSAES-OAEP') {
      scheme = {
        encode: function (m, key) {
          return forge.pkcs1.encode_rsa_oaep(key, m, schemeOptions);
        }
      };
    } else if (['RAW', 'NONE', 'NULL', null].indexOf(scheme) !== -1) {
      scheme = {
        encode: function (e) {
          return e;
        }
      };
    } else if (typeof scheme === 'string') {
      throw new Error('Unsupported encryption scheme: "' + scheme + '".');
    } // do scheme-based encoding then rsa encryption


    var e = scheme.encode(data, key, true);
    return pki.rsa.encrypt(e, key, true);
  };
  /**
   * Verifies the given signature against the given digest.
   *
   * PKCS#1 supports multiple (currently two) signature schemes:
   * RSASSA-PKCS1-V1_5 and RSASSA-PSS.
   *
   * By default this implementation uses the "old scheme", i.e.
   * RSASSA-PKCS1-V1_5, in which case once RSA-decrypted, the
   * signature is an OCTET STRING that holds a DigestInfo.
   *
   * DigestInfo ::= SEQUENCE {
   *   digestAlgorithm DigestAlgorithmIdentifier,
   *   digest Digest
   * }
   * DigestAlgorithmIdentifier ::= AlgorithmIdentifier
   * Digest ::= OCTET STRING
   *
   * To perform PSS signature verification, provide an instance
   * of Forge PSS object as the scheme parameter.
   *
   * @param digest the message digest hash to compare against the signature,
   *          as a binary-encoded string.
   * @param signature the signature to verify, as a binary-encoded string.
   * @param scheme signature verification scheme to use:
   *          'RSASSA-PKCS1-V1_5' or undefined for RSASSA PKCS#1 v1.5,
   *          a Forge PSS object for RSASSA-PSS,
   *          'NONE' or null for none, DigestInfo will not be expected, but
   *            PKCS#1 v1.5 padding will still be used.
   *
   * @return true if the signature was verified, false if not.
   */


  key.verify = function (digest, signature, scheme) {
    if (typeof scheme === 'string') {
      scheme = scheme.toUpperCase();
    } else if (scheme === undefined) {
      scheme = 'RSASSA-PKCS1-V1_5';
    }

    if (scheme === 'RSASSA-PKCS1-V1_5') {
      scheme = {
        verify: function (digest, d) {
          // remove padding
          d = _decodePkcs1_v1_5(d, key, true); // d is ASN.1 BER-encoded DigestInfo

          var obj = asn1.fromDer(d); // compare the given digest to the decrypted one

          return digest === obj.value[1].value;
        }
      };
    } else if (scheme === 'NONE' || scheme === 'NULL' || scheme === null) {
      scheme = {
        verify: function (digest, d) {
          // remove padding
          d = _decodePkcs1_v1_5(d, key, true);
          return digest === d;
        }
      };
    } // do rsa decryption w/o any decoding, then verify -- which does decoding


    var d = pki.rsa.decrypt(signature, key, true, false);
    return scheme.verify(digest, d, key.n.bitLength());
  };

  return key;
};
/**
 * Sets an RSA private key from BigIntegers modulus, exponent, primes,
 * prime exponents, and modular multiplicative inverse.
 *
 * @param n the modulus.
 * @param e the public exponent.
 * @param d the private exponent ((inverse of e) mod n).
 * @param p the first prime.
 * @param q the second prime.
 * @param dP exponent1 (d mod (p-1)).
 * @param dQ exponent2 (d mod (q-1)).
 * @param qInv ((inverse of q) mod p)
 *
 * @return the private key.
 */


pki.setRsaPrivateKey = pki.rsa.setPrivateKey = function (n, e, d, p, q, dP, dQ, qInv) {
  var key = {
    n: n,
    e: e,
    d: d,
    p: p,
    q: q,
    dP: dP,
    dQ: dQ,
    qInv: qInv
  };
  /**
   * Decrypts the given data with this private key. The decryption scheme
   * must match the one used to encrypt the data.
   *
   * @param data the byte string to decrypt.
   * @param scheme the decryption scheme to use:
   *          'RSAES-PKCS1-V1_5' (default),
   *          'RSA-OAEP',
   *          'RAW', 'NONE', or null to perform raw RSA decryption.
   * @param schemeOptions any scheme-specific options.
   *
   * @return the decrypted byte string.
   */

  key.decrypt = function (data, scheme, schemeOptions) {
    if (typeof scheme === 'string') {
      scheme = scheme.toUpperCase();
    } else if (scheme === undefined) {
      scheme = 'RSAES-PKCS1-V1_5';
    } // do rsa decryption w/o any decoding


    var d = pki.rsa.decrypt(data, key, false, false);

    if (scheme === 'RSAES-PKCS1-V1_5') {
      scheme = {
        decode: _decodePkcs1_v1_5
      };
    } else if (scheme === 'RSA-OAEP' || scheme === 'RSAES-OAEP') {
      scheme = {
        decode: function (d, key) {
          return forge.pkcs1.decode_rsa_oaep(key, d, schemeOptions);
        }
      };
    } else if (['RAW', 'NONE', 'NULL', null].indexOf(scheme) !== -1) {
      scheme = {
        decode: function (d) {
          return d;
        }
      };
    } else {
      throw new Error('Unsupported encryption scheme: "' + scheme + '".');
    } // decode according to scheme


    return scheme.decode(d, key, false);
  };
  /**
   * Signs the given digest, producing a signature.
   *
   * PKCS#1 supports multiple (currently two) signature schemes:
   * RSASSA-PKCS1-V1_5 and RSASSA-PSS.
   *
   * By default this implementation uses the "old scheme", i.e.
   * RSASSA-PKCS1-V1_5. In order to generate a PSS signature, provide
   * an instance of Forge PSS object as the scheme parameter.
   *
   * @param md the message digest object with the hash to sign.
   * @param scheme the signature scheme to use:
   *          'RSASSA-PKCS1-V1_5' or undefined for RSASSA PKCS#1 v1.5,
   *          a Forge PSS object for RSASSA-PSS,
   *          'NONE' or null for none, DigestInfo will not be used but
   *            PKCS#1 v1.5 padding will still be used.
   *
   * @return the signature as a byte string.
   */


  key.sign = function (md, scheme) {
    /* Note: The internal implementation of RSA operations is being
      transitioned away from a PKCS#1 v1.5 hard-coded scheme. Some legacy
      code like the use of an encoding block identifier 'bt' will eventually
      be removed. */
    // private key operation
    var bt = false;

    if (typeof scheme === 'string') {
      scheme = scheme.toUpperCase();
    }

    if (scheme === undefined || scheme === 'RSASSA-PKCS1-V1_5') {
      scheme = {
        encode: emsaPkcs1v15encode
      };
      bt = 0x01;
    } else if (scheme === 'NONE' || scheme === 'NULL' || scheme === null) {
      scheme = {
        encode: function () {
          return md;
        }
      };
      bt = 0x01;
    } // encode and then encrypt


    var d = scheme.encode(md, key.n.bitLength());
    return pki.rsa.encrypt(d, key, bt);
  };

  return key;
};
/**
 * Wraps an RSAPrivateKey ASN.1 object in an ASN.1 PrivateKeyInfo object.
 *
 * @param rsaKey the ASN.1 RSAPrivateKey.
 *
 * @return the ASN.1 PrivateKeyInfo.
 */


pki.wrapRsaPrivateKey = function (rsaKey) {
  // PrivateKeyInfo
  return asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [// version (0)
  asn1.create(asn1.Class.UNIVERSAL, asn1.Type.INTEGER, false, asn1.integerToDer(0).getBytes()), // privateKeyAlgorithm
  asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [asn1.create(asn1.Class.UNIVERSAL, asn1.Type.OID, false, asn1.oidToDer(pki.oids.rsaEncryption).getBytes()), asn1.create(asn1.Class.UNIVERSAL, asn1.Type.NULL, false, '')]), // PrivateKey
  asn1.create(asn1.Class.UNIVERSAL, asn1.Type.OCTETSTRING, false, asn1.toDer(rsaKey).getBytes())]);
};
/**
 * Converts a private key from an ASN.1 object.
 *
 * @param obj the ASN.1 representation of a PrivateKeyInfo containing an
 *          RSAPrivateKey or an RSAPrivateKey.
 *
 * @return the private key.
 */


pki.privateKeyFromAsn1 = function (obj) {
  // get PrivateKeyInfo
  var capture = {};
  var errors = [];

  if (asn1.validate(obj, privateKeyValidator, capture, errors)) {
    obj = asn1.fromDer(forge.util.createBuffer(capture.privateKey));
  } // get RSAPrivateKey


  capture = {};
  errors = [];

  if (!asn1.validate(obj, rsaPrivateKeyValidator, capture, errors)) {
    var error = new Error('Cannot read private key. ' + 'ASN.1 object does not contain an RSAPrivateKey.');
    error.errors = errors;
    throw error;
  } // Note: Version is currently ignored.
  // capture.privateKeyVersion
  // FIXME: inefficient, get a BigInteger that uses byte strings


  var n, e, d, p, q, dP, dQ, qInv;
  n = forge.util.createBuffer(capture.privateKeyModulus).toHex();
  e = forge.util.createBuffer(capture.privateKeyPublicExponent).toHex();
  d = forge.util.createBuffer(capture.privateKeyPrivateExponent).toHex();
  p = forge.util.createBuffer(capture.privateKeyPrime1).toHex();
  q = forge.util.createBuffer(capture.privateKeyPrime2).toHex();
  dP = forge.util.createBuffer(capture.privateKeyExponent1).toHex();
  dQ = forge.util.createBuffer(capture.privateKeyExponent2).toHex();
  qInv = forge.util.createBuffer(capture.privateKeyCoefficient).toHex(); // set private key

  return pki.setRsaPrivateKey(new BigInteger(n, 16), new BigInteger(e, 16), new BigInteger(d, 16), new BigInteger(p, 16), new BigInteger(q, 16), new BigInteger(dP, 16), new BigInteger(dQ, 16), new BigInteger(qInv, 16));
};
/**
 * Converts a private key to an ASN.1 RSAPrivateKey.
 *
 * @param key the private key.
 *
 * @return the ASN.1 representation of an RSAPrivateKey.
 */


pki.privateKeyToAsn1 = pki.privateKeyToRSAPrivateKey = function (key) {
  // RSAPrivateKey
  return asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [// version (0 = only 2 primes, 1 multiple primes)
  asn1.create(asn1.Class.UNIVERSAL, asn1.Type.INTEGER, false, asn1.integerToDer(0).getBytes()), // modulus (n)
  asn1.create(asn1.Class.UNIVERSAL, asn1.Type.INTEGER, false, _bnToBytes(key.n)), // publicExponent (e)
  asn1.create(asn1.Class.UNIVERSAL, asn1.Type.INTEGER, false, _bnToBytes(key.e)), // privateExponent (d)
  asn1.create(asn1.Class.UNIVERSAL, asn1.Type.INTEGER, false, _bnToBytes(key.d)), // privateKeyPrime1 (p)
  asn1.create(asn1.Class.UNIVERSAL, asn1.Type.INTEGER, false, _bnToBytes(key.p)), // privateKeyPrime2 (q)
  asn1.create(asn1.Class.UNIVERSAL, asn1.Type.INTEGER, false, _bnToBytes(key.q)), // privateKeyExponent1 (dP)
  asn1.create(asn1.Class.UNIVERSAL, asn1.Type.INTEGER, false, _bnToBytes(key.dP)), // privateKeyExponent2 (dQ)
  asn1.create(asn1.Class.UNIVERSAL, asn1.Type.INTEGER, false, _bnToBytes(key.dQ)), // coefficient (qInv)
  asn1.create(asn1.Class.UNIVERSAL, asn1.Type.INTEGER, false, _bnToBytes(key.qInv))]);
};
/**
 * Converts a public key from an ASN.1 SubjectPublicKeyInfo or RSAPublicKey.
 *
 * @param obj the asn1 representation of a SubjectPublicKeyInfo or RSAPublicKey.
 *
 * @return the public key.
 */


pki.publicKeyFromAsn1 = function (obj) {
  // get SubjectPublicKeyInfo
  var capture = {};
  var errors = [];

  if (asn1.validate(obj, publicKeyValidator, capture, errors)) {
    // get oid
    var oid = asn1.derToOid(capture.publicKeyOid);

    if (oid !== pki.oids.rsaEncryption) {
      var error = new Error('Cannot read public key. Unknown OID.');
      error.oid = oid;
      throw error;
    }

    obj = capture.rsaPublicKey;
  } // get RSA params


  errors = [];

  if (!asn1.validate(obj, rsaPublicKeyValidator, capture, errors)) {
    var error = new Error('Cannot read public key. ' + 'ASN.1 object does not contain an RSAPublicKey.');
    error.errors = errors;
    throw error;
  } // FIXME: inefficient, get a BigInteger that uses byte strings


  var n = forge.util.createBuffer(capture.publicKeyModulus).toHex();
  var e = forge.util.createBuffer(capture.publicKeyExponent).toHex(); // set public key

  return pki.setRsaPublicKey(new BigInteger(n, 16), new BigInteger(e, 16));
};
/**
 * Converts a public key to an ASN.1 SubjectPublicKeyInfo.
 *
 * @param key the public key.
 *
 * @return the asn1 representation of a SubjectPublicKeyInfo.
 */


pki.publicKeyToAsn1 = pki.publicKeyToSubjectPublicKeyInfo = function (key) {
  // SubjectPublicKeyInfo
  return asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [// AlgorithmIdentifier
  asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [// algorithm
  asn1.create(asn1.Class.UNIVERSAL, asn1.Type.OID, false, asn1.oidToDer(pki.oids.rsaEncryption).getBytes()), // parameters (null)
  asn1.create(asn1.Class.UNIVERSAL, asn1.Type.NULL, false, '')]), // subjectPublicKey
  asn1.create(asn1.Class.UNIVERSAL, asn1.Type.BITSTRING, false, [pki.publicKeyToRSAPublicKey(key)])]);
};
/**
 * Converts a public key to an ASN.1 RSAPublicKey.
 *
 * @param key the public key.
 *
 * @return the asn1 representation of a RSAPublicKey.
 */


pki.publicKeyToRSAPublicKey = function (key) {
  // RSAPublicKey
  return asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [// modulus (n)
  asn1.create(asn1.Class.UNIVERSAL, asn1.Type.INTEGER, false, _bnToBytes(key.n)), // publicExponent (e)
  asn1.create(asn1.Class.UNIVERSAL, asn1.Type.INTEGER, false, _bnToBytes(key.e))]);
};
/**
 * Encodes a message using PKCS#1 v1.5 padding.
 *
 * @param m the message to encode.
 * @param key the RSA key to use.
 * @param bt the block type to use, i.e. either 0x01 (for signing) or 0x02
 *          (for encryption).
 *
 * @return the padded byte buffer.
 */


function _encodePkcs1_v1_5(m, key, bt) {
  var eb = forge.util.createBuffer(); // get the length of the modulus in bytes

  var k = Math.ceil(key.n.bitLength() / 8);
  /* use PKCS#1 v1.5 padding */

  if (m.length > k - 11) {
    var error = new Error('Message is too long for PKCS#1 v1.5 padding.');
    error.length = m.length;
    error.max = k - 11;
    throw error;
  }
  /* A block type BT, a padding string PS, and the data D shall be
    formatted into an octet string EB, the encryption block:
     EB = 00 || BT || PS || 00 || D
     The block type BT shall be a single octet indicating the structure of
    the encryption block. For this version of the document it shall have
    value 00, 01, or 02. For a private-key operation, the block type
    shall be 00 or 01. For a public-key operation, it shall be 02.
     The padding string PS shall consist of k-3-||D|| octets. For block
    type 00, the octets shall have value 00; for block type 01, they
    shall have value FF; and for block type 02, they shall be
    pseudorandomly generated and nonzero. This makes the length of the
    encryption block EB equal to k. */
  // build the encryption block


  eb.putByte(0x00);
  eb.putByte(bt); // create the padding

  var padNum = k - 3 - m.length;
  var padByte; // private key op

  if (bt === 0x00 || bt === 0x01) {
    padByte = bt === 0x00 ? 0x00 : 0xFF;

    for (var i = 0; i < padNum; ++i) {
      eb.putByte(padByte);
    }
  } else {
    // public key op
    // pad with random non-zero values
    while (padNum > 0) {
      var numZeros = 0;
      var padBytes = forge.random.getBytes(padNum);

      for (var i = 0; i < padNum; ++i) {
        padByte = padBytes.charCodeAt(i);

        if (padByte === 0) {
          ++numZeros;
        } else {
          eb.putByte(padByte);
        }
      }

      padNum = numZeros;
    }
  } // zero followed by message


  eb.putByte(0x00);
  eb.putBytes(m);
  return eb;
}
/**
 * Decodes a message using PKCS#1 v1.5 padding.
 *
 * @param em the message to decode.
 * @param key the RSA key to use.
 * @param pub true if the key is a public key, false if it is private.
 * @param ml the message length, if specified.
 *
 * @return the decoded bytes.
 */


function _decodePkcs1_v1_5(em, key, pub, ml) {
  // get the length of the modulus in bytes
  var k = Math.ceil(key.n.bitLength() / 8);
  /* It is an error if any of the following conditions occurs:
     1. The encryption block EB cannot be parsed unambiguously.
    2. The padding string PS consists of fewer than eight octets
      or is inconsisent with the block type BT.
    3. The decryption process is a public-key operation and the block
      type BT is not 00 or 01, or the decryption process is a
      private-key operation and the block type is not 02.
   */
  // parse the encryption block

  var eb = forge.util.createBuffer(em);
  var first = eb.getByte();
  var bt = eb.getByte();

  if (first !== 0x00 || pub && bt !== 0x00 && bt !== 0x01 || !pub && bt != 0x02 || pub && bt === 0x00 && typeof ml === 'undefined') {
    throw new Error('Encryption block is invalid.');
  }

  var padNum = 0;

  if (bt === 0x00) {
    // check all padding bytes for 0x00
    padNum = k - 3 - ml;

    for (var i = 0; i < padNum; ++i) {
      if (eb.getByte() !== 0x00) {
        throw new Error('Encryption block is invalid.');
      }
    }
  } else if (bt === 0x01) {
    // find the first byte that isn't 0xFF, should be after all padding
    padNum = 0;

    while (eb.length() > 1) {
      if (eb.getByte() !== 0xFF) {
        --eb.read;
        break;
      }

      ++padNum;
    }
  } else if (bt === 0x02) {
    // look for 0x00 byte
    padNum = 0;

    while (eb.length() > 1) {
      if (eb.getByte() === 0x00) {
        --eb.read;
        break;
      }

      ++padNum;
    }
  } // zero must be 0x00 and padNum must be (k - 3 - message length)


  var zero = eb.getByte();

  if (zero !== 0x00 || padNum !== k - 3 - eb.length()) {
    throw new Error('Encryption block is invalid.');
  }

  return eb.getBytes();
}
/**
 * Runs the key-generation algorithm asynchronously, either in the background
 * via Web Workers, or using the main thread and setImmediate.
 *
 * @param state the key-pair generation state.
 * @param [options] options for key-pair generation:
 *          workerScript the worker script URL.
 *          workers the number of web workers (if supported) to use,
 *            (default: 2, -1 to use estimated cores minus one).
 *          workLoad the size of the work load, ie: number of possible prime
 *            numbers for each web worker to check per work assignment,
 *            (default: 100).
 * @param callback(err, keypair) called once the operation completes.
 */


function _generateKeyPair(state, options, callback) {
  if (typeof options === 'function') {
    callback = options;
    options = {};
  }

  options = options || {};
  var opts = {
    algorithm: {
      name: options.algorithm || 'PRIMEINC',
      options: {
        workers: options.workers || 2,
        workLoad: options.workLoad || 100,
        workerScript: options.workerScript
      }
    }
  };

  if ('prng' in options) {
    opts.prng = options.prng;
  }

  generate();

  function generate() {
    // find p and then q (done in series to simplify)
    getPrime(state.pBits, function (err, num) {
      if (err) {
        return callback(err);
      }

      state.p = num;

      if (state.q !== null) {
        return finish(err, state.q);
      }

      getPrime(state.qBits, finish);
    });
  }

  function getPrime(bits, callback) {
    forge.prime.generateProbablePrime(bits, opts, callback);
  }

  function finish(err, num) {
    if (err) {
      return callback(err);
    } // set q


    state.q = num; // ensure p is larger than q (swap them if not)

    if (state.p.compareTo(state.q) < 0) {
      var tmp = state.p;
      state.p = state.q;
      state.q = tmp;
    } // ensure p is coprime with e


    if (state.p.subtract(BigInteger.ONE).gcd(state.e).compareTo(BigInteger.ONE) !== 0) {
      state.p = null;
      generate();
      return;
    } // ensure q is coprime with e


    if (state.q.subtract(BigInteger.ONE).gcd(state.e).compareTo(BigInteger.ONE) !== 0) {
      state.q = null;
      getPrime(state.qBits, finish);
      return;
    } // compute phi: (p - 1)(q - 1) (Euler's totient function)


    state.p1 = state.p.subtract(BigInteger.ONE);
    state.q1 = state.q.subtract(BigInteger.ONE);
    state.phi = state.p1.multiply(state.q1); // ensure e and phi are coprime

    if (state.phi.gcd(state.e).compareTo(BigInteger.ONE) !== 0) {
      // phi and e aren't coprime, so generate a new p and q
      state.p = state.q = null;
      generate();
      return;
    } // create n, ensure n is has the right number of bits


    state.n = state.p.multiply(state.q);

    if (state.n.bitLength() !== state.bits) {
      // failed, get new q
      state.q = null;
      getPrime(state.qBits, finish);
      return;
    } // set keys


    var d = state.e.modInverse(state.phi);
    state.keys = {
      privateKey: pki.rsa.setPrivateKey(state.n, state.e, d, state.p, state.q, d.mod(state.p1), d.mod(state.q1), state.q.modInverse(state.p)),
      publicKey: pki.rsa.setPublicKey(state.n, state.e)
    };
    callback(null, state.keys);
  }
}
/**
 * Converts a positive BigInteger into 2's-complement big-endian bytes.
 *
 * @param b the big integer to convert.
 *
 * @return the bytes.
 */


function _bnToBytes(b) {
  // prepend 0x00 if first byte >= 0x80
  var hex = b.toString(16);

  if (hex[0] >= '8') {
    hex = '00' + hex;
  }

  var bytes = forge.util.hexToBytes(hex); // ensure integer is minimally-encoded

  if (bytes.length > 1 && ( // leading 0x00 for positive integer
  bytes.charCodeAt(0) === 0 && (bytes.charCodeAt(1) & 0x80) === 0 || // leading 0xFF for negative integer
  bytes.charCodeAt(0) === 0xFF && (bytes.charCodeAt(1) & 0x80) === 0x80)) {
    return bytes.substr(1);
  }

  return bytes;
}
/**
 * Returns the required number of Miller-Rabin tests to generate a
 * prime with an error probability of (1/2)^80.
 *
 * See Handbook of Applied Cryptography Chapter 4, Table 4.4.
 *
 * @param bits the bit size.
 *
 * @return the required number of iterations.
 */


function _getMillerRabinTests(bits) {
  if (bits <= 100) return 27;
  if (bits <= 150) return 18;
  if (bits <= 200) return 15;
  if (bits <= 250) return 12;
  if (bits <= 300) return 9;
  if (bits <= 350) return 8;
  if (bits <= 400) return 7;
  if (bits <= 500) return 6;
  if (bits <= 600) return 5;
  if (bits <= 800) return 4;
  if (bits <= 1250) return 3;
  return 2;
}
/**
 * Performs feature detection on the Node crypto interface.
 *
 * @param fn the feature (function) to detect.
 *
 * @return true if detected, false if not.
 */


function _detectNodeCrypto(fn) {
  return forge.util.isNodejs && typeof _crypto[fn] === 'function';
}
/**
 * Performs feature detection on the SubtleCrypto interface.
 *
 * @param fn the feature (function) to detect.
 *
 * @return true if detected, false if not.
 */


function _detectSubtleCrypto(fn) {
  return typeof util.globalScope !== 'undefined' && _typeof(util.globalScope.crypto) === 'object' && _typeof(util.globalScope.crypto.subtle) === 'object' && typeof util.globalScope.crypto.subtle[fn] === 'function';
}
/**
 * Performs feature detection on the deprecated Microsoft Internet Explorer
 * outdated SubtleCrypto interface. This function should only be used after
 * checking for the modern, standard SubtleCrypto interface.
 *
 * @param fn the feature (function) to detect.
 *
 * @return true if detected, false if not.
 */


function _detectSubtleMsCrypto(fn) {
  return typeof util.globalScope !== 'undefined' && _typeof(util.globalScope.msCrypto) === 'object' && _typeof(util.globalScope.msCrypto.subtle) === 'object' && typeof util.globalScope.msCrypto.subtle[fn] === 'function';
}

function _intToUint8Array(x) {
  var bytes = forge.util.hexToBytes(x.toString(16));
  var buffer = new Uint8Array(bytes.length);

  for (var i = 0; i < bytes.length; ++i) {
    buffer[i] = bytes.charCodeAt(i);
  }

  return buffer;
}

function _privateKeyFromJwk(jwk) {
  if (jwk.kty !== 'RSA') {
    throw new Error('Unsupported key algorithm "' + jwk.kty + '"; algorithm must be "RSA".');
  }

  return pki.setRsaPrivateKey(_base64ToBigInt(jwk.n), _base64ToBigInt(jwk.e), _base64ToBigInt(jwk.d), _base64ToBigInt(jwk.p), _base64ToBigInt(jwk.q), _base64ToBigInt(jwk.dp), _base64ToBigInt(jwk.dq), _base64ToBigInt(jwk.qi));
}

function _publicKeyFromJwk(jwk) {
  if (jwk.kty !== 'RSA') {
    throw new Error('Key algorithm must be "RSA".');
  }

  return pki.setRsaPublicKey(_base64ToBigInt(jwk.n), _base64ToBigInt(jwk.e));
}

function _base64ToBigInt(b64) {
  return new BigInteger(forge.util.bytesToHex(forge.util.decode64(b64)), 16);
}
},{"./forge":"o20S","./asn1":"BA5j","./jsbn":"tFuv","./oids":"rbLR","./pkcs1":"PZSV","./prime":"CDV4","./random":"Gfwb","./util":"lWyh","crypto":"vpK4"}],"DWC4":[function(require,module,exports) {
/**
 * Password-based encryption functions.
 *
 * @author Dave Longley
 * @author Stefan Siegl <stesie@brokenpipe.de>
 *
 * Copyright (c) 2010-2013 Digital Bazaar, Inc.
 * Copyright (c) 2012 Stefan Siegl <stesie@brokenpipe.de>
 *
 * An EncryptedPrivateKeyInfo:
 *
 * EncryptedPrivateKeyInfo ::= SEQUENCE {
 *   encryptionAlgorithm  EncryptionAlgorithmIdentifier,
 *   encryptedData        EncryptedData }
 *
 * EncryptionAlgorithmIdentifier ::= AlgorithmIdentifier
 *
 * EncryptedData ::= OCTET STRING
 */
var forge = require('./forge');

require('./aes');

require('./asn1');

require('./des');

require('./md');

require('./oids');

require('./pbkdf2');

require('./pem');

require('./random');

require('./rc2');

require('./rsa');

require('./util');

if (typeof BigInteger === 'undefined') {
  var BigInteger = forge.jsbn.BigInteger;
} // shortcut for asn.1 API


var asn1 = forge.asn1;
/* Password-based encryption implementation. */

var pki = forge.pki = forge.pki || {};
module.exports = pki.pbe = forge.pbe = forge.pbe || {};
var oids = pki.oids; // validator for an EncryptedPrivateKeyInfo structure
// Note: Currently only works w/algorithm params

var encryptedPrivateKeyValidator = {
  name: 'EncryptedPrivateKeyInfo',
  tagClass: asn1.Class.UNIVERSAL,
  type: asn1.Type.SEQUENCE,
  constructed: true,
  value: [{
    name: 'EncryptedPrivateKeyInfo.encryptionAlgorithm',
    tagClass: asn1.Class.UNIVERSAL,
    type: asn1.Type.SEQUENCE,
    constructed: true,
    value: [{
      name: 'AlgorithmIdentifier.algorithm',
      tagClass: asn1.Class.UNIVERSAL,
      type: asn1.Type.OID,
      constructed: false,
      capture: 'encryptionOid'
    }, {
      name: 'AlgorithmIdentifier.parameters',
      tagClass: asn1.Class.UNIVERSAL,
      type: asn1.Type.SEQUENCE,
      constructed: true,
      captureAsn1: 'encryptionParams'
    }]
  }, {
    // encryptedData
    name: 'EncryptedPrivateKeyInfo.encryptedData',
    tagClass: asn1.Class.UNIVERSAL,
    type: asn1.Type.OCTETSTRING,
    constructed: false,
    capture: 'encryptedData'
  }]
}; // validator for a PBES2Algorithms structure
// Note: Currently only works w/PBKDF2 + AES encryption schemes

var PBES2AlgorithmsValidator = {
  name: 'PBES2Algorithms',
  tagClass: asn1.Class.UNIVERSAL,
  type: asn1.Type.SEQUENCE,
  constructed: true,
  value: [{
    name: 'PBES2Algorithms.keyDerivationFunc',
    tagClass: asn1.Class.UNIVERSAL,
    type: asn1.Type.SEQUENCE,
    constructed: true,
    value: [{
      name: 'PBES2Algorithms.keyDerivationFunc.oid',
      tagClass: asn1.Class.UNIVERSAL,
      type: asn1.Type.OID,
      constructed: false,
      capture: 'kdfOid'
    }, {
      name: 'PBES2Algorithms.params',
      tagClass: asn1.Class.UNIVERSAL,
      type: asn1.Type.SEQUENCE,
      constructed: true,
      value: [{
        name: 'PBES2Algorithms.params.salt',
        tagClass: asn1.Class.UNIVERSAL,
        type: asn1.Type.OCTETSTRING,
        constructed: false,
        capture: 'kdfSalt'
      }, {
        name: 'PBES2Algorithms.params.iterationCount',
        tagClass: asn1.Class.UNIVERSAL,
        type: asn1.Type.INTEGER,
        constructed: false,
        capture: 'kdfIterationCount'
      }, {
        name: 'PBES2Algorithms.params.keyLength',
        tagClass: asn1.Class.UNIVERSAL,
        type: asn1.Type.INTEGER,
        constructed: false,
        optional: true,
        capture: 'keyLength'
      }, {
        // prf
        name: 'PBES2Algorithms.params.prf',
        tagClass: asn1.Class.UNIVERSAL,
        type: asn1.Type.SEQUENCE,
        constructed: true,
        optional: true,
        value: [{
          name: 'PBES2Algorithms.params.prf.algorithm',
          tagClass: asn1.Class.UNIVERSAL,
          type: asn1.Type.OID,
          constructed: false,
          capture: 'prfOid'
        }]
      }]
    }]
  }, {
    name: 'PBES2Algorithms.encryptionScheme',
    tagClass: asn1.Class.UNIVERSAL,
    type: asn1.Type.SEQUENCE,
    constructed: true,
    value: [{
      name: 'PBES2Algorithms.encryptionScheme.oid',
      tagClass: asn1.Class.UNIVERSAL,
      type: asn1.Type.OID,
      constructed: false,
      capture: 'encOid'
    }, {
      name: 'PBES2Algorithms.encryptionScheme.iv',
      tagClass: asn1.Class.UNIVERSAL,
      type: asn1.Type.OCTETSTRING,
      constructed: false,
      capture: 'encIv'
    }]
  }]
};
var pkcs12PbeParamsValidator = {
  name: 'pkcs-12PbeParams',
  tagClass: asn1.Class.UNIVERSAL,
  type: asn1.Type.SEQUENCE,
  constructed: true,
  value: [{
    name: 'pkcs-12PbeParams.salt',
    tagClass: asn1.Class.UNIVERSAL,
    type: asn1.Type.OCTETSTRING,
    constructed: false,
    capture: 'salt'
  }, {
    name: 'pkcs-12PbeParams.iterations',
    tagClass: asn1.Class.UNIVERSAL,
    type: asn1.Type.INTEGER,
    constructed: false,
    capture: 'iterations'
  }]
};
/**
 * Encrypts a ASN.1 PrivateKeyInfo object, producing an EncryptedPrivateKeyInfo.
 *
 * PBES2Algorithms ALGORITHM-IDENTIFIER ::=
 *   { {PBES2-params IDENTIFIED BY id-PBES2}, ...}
 *
 * id-PBES2 OBJECT IDENTIFIER ::= {pkcs-5 13}
 *
 * PBES2-params ::= SEQUENCE {
 *   keyDerivationFunc AlgorithmIdentifier {{PBES2-KDFs}},
 *   encryptionScheme AlgorithmIdentifier {{PBES2-Encs}}
 * }
 *
 * PBES2-KDFs ALGORITHM-IDENTIFIER ::=
 *   { {PBKDF2-params IDENTIFIED BY id-PBKDF2}, ... }
 *
 * PBES2-Encs ALGORITHM-IDENTIFIER ::= { ... }
 *
 * PBKDF2-params ::= SEQUENCE {
 *   salt CHOICE {
 *     specified OCTET STRING,
 *     otherSource AlgorithmIdentifier {{PBKDF2-SaltSources}}
 *   },
 *   iterationCount INTEGER (1..MAX),
 *   keyLength INTEGER (1..MAX) OPTIONAL,
 *   prf AlgorithmIdentifier {{PBKDF2-PRFs}} DEFAULT algid-hmacWithSHA1
 * }
 *
 * @param obj the ASN.1 PrivateKeyInfo object.
 * @param password the password to encrypt with.
 * @param options:
 *          algorithm the encryption algorithm to use
 *            ('aes128', 'aes192', 'aes256', '3des'), defaults to 'aes128'.
 *          count the iteration count to use.
 *          saltSize the salt size to use.
 *          prfAlgorithm the PRF message digest algorithm to use
 *            ('sha1', 'sha224', 'sha256', 'sha384', 'sha512')
 *
 * @return the ASN.1 EncryptedPrivateKeyInfo.
 */

pki.encryptPrivateKeyInfo = function (obj, password, options) {
  // set default options
  options = options || {};
  options.saltSize = options.saltSize || 8;
  options.count = options.count || 2048;
  options.algorithm = options.algorithm || 'aes128';
  options.prfAlgorithm = options.prfAlgorithm || 'sha1'; // generate PBE params

  var salt = forge.random.getBytesSync(options.saltSize);
  var count = options.count;
  var countBytes = asn1.integerToDer(count);
  var dkLen;
  var encryptionAlgorithm;
  var encryptedData;

  if (options.algorithm.indexOf('aes') === 0 || options.algorithm === 'des') {
    // do PBES2
    var ivLen, encOid, cipherFn;

    switch (options.algorithm) {
      case 'aes128':
        dkLen = 16;
        ivLen = 16;
        encOid = oids['aes128-CBC'];
        cipherFn = forge.aes.createEncryptionCipher;
        break;

      case 'aes192':
        dkLen = 24;
        ivLen = 16;
        encOid = oids['aes192-CBC'];
        cipherFn = forge.aes.createEncryptionCipher;
        break;

      case 'aes256':
        dkLen = 32;
        ivLen = 16;
        encOid = oids['aes256-CBC'];
        cipherFn = forge.aes.createEncryptionCipher;
        break;

      case 'des':
        dkLen = 8;
        ivLen = 8;
        encOid = oids['desCBC'];
        cipherFn = forge.des.createEncryptionCipher;
        break;

      default:
        var error = new Error('Cannot encrypt private key. Unknown encryption algorithm.');
        error.algorithm = options.algorithm;
        throw error;
    } // get PRF message digest


    var prfAlgorithm = 'hmacWith' + options.prfAlgorithm.toUpperCase();
    var md = prfAlgorithmToMessageDigest(prfAlgorithm); // encrypt private key using pbe SHA-1 and AES/DES

    var dk = forge.pkcs5.pbkdf2(password, salt, count, dkLen, md);
    var iv = forge.random.getBytesSync(ivLen);
    var cipher = cipherFn(dk);
    cipher.start(iv);
    cipher.update(asn1.toDer(obj));
    cipher.finish();
    encryptedData = cipher.output.getBytes(); // get PBKDF2-params

    var params = createPbkdf2Params(salt, countBytes, dkLen, prfAlgorithm);
    encryptionAlgorithm = asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [asn1.create(asn1.Class.UNIVERSAL, asn1.Type.OID, false, asn1.oidToDer(oids['pkcs5PBES2']).getBytes()), asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [// keyDerivationFunc
    asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [asn1.create(asn1.Class.UNIVERSAL, asn1.Type.OID, false, asn1.oidToDer(oids['pkcs5PBKDF2']).getBytes()), // PBKDF2-params
    params]), // encryptionScheme
    asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [asn1.create(asn1.Class.UNIVERSAL, asn1.Type.OID, false, asn1.oidToDer(encOid).getBytes()), // iv
    asn1.create(asn1.Class.UNIVERSAL, asn1.Type.OCTETSTRING, false, iv)])])]);
  } else if (options.algorithm === '3des') {
    // Do PKCS12 PBE
    dkLen = 24;
    var saltBytes = new forge.util.ByteBuffer(salt);
    var dk = pki.pbe.generatePkcs12Key(password, saltBytes, 1, count, dkLen);
    var iv = pki.pbe.generatePkcs12Key(password, saltBytes, 2, count, dkLen);
    var cipher = forge.des.createEncryptionCipher(dk);
    cipher.start(iv);
    cipher.update(asn1.toDer(obj));
    cipher.finish();
    encryptedData = cipher.output.getBytes();
    encryptionAlgorithm = asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [asn1.create(asn1.Class.UNIVERSAL, asn1.Type.OID, false, asn1.oidToDer(oids['pbeWithSHAAnd3-KeyTripleDES-CBC']).getBytes()), // pkcs-12PbeParams
    asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [// salt
    asn1.create(asn1.Class.UNIVERSAL, asn1.Type.OCTETSTRING, false, salt), // iteration count
    asn1.create(asn1.Class.UNIVERSAL, asn1.Type.INTEGER, false, countBytes.getBytes())])]);
  } else {
    var error = new Error('Cannot encrypt private key. Unknown encryption algorithm.');
    error.algorithm = options.algorithm;
    throw error;
  } // EncryptedPrivateKeyInfo


  var rval = asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [// encryptionAlgorithm
  encryptionAlgorithm, // encryptedData
  asn1.create(asn1.Class.UNIVERSAL, asn1.Type.OCTETSTRING, false, encryptedData)]);
  return rval;
};
/**
 * Decrypts a ASN.1 PrivateKeyInfo object.
 *
 * @param obj the ASN.1 EncryptedPrivateKeyInfo object.
 * @param password the password to decrypt with.
 *
 * @return the ASN.1 PrivateKeyInfo on success, null on failure.
 */


pki.decryptPrivateKeyInfo = function (obj, password) {
  var rval = null; // get PBE params

  var capture = {};
  var errors = [];

  if (!asn1.validate(obj, encryptedPrivateKeyValidator, capture, errors)) {
    var error = new Error('Cannot read encrypted private key. ' + 'ASN.1 object is not a supported EncryptedPrivateKeyInfo.');
    error.errors = errors;
    throw error;
  } // get cipher


  var oid = asn1.derToOid(capture.encryptionOid);
  var cipher = pki.pbe.getCipher(oid, capture.encryptionParams, password); // get encrypted data

  var encrypted = forge.util.createBuffer(capture.encryptedData);
  cipher.update(encrypted);

  if (cipher.finish()) {
    rval = asn1.fromDer(cipher.output);
  }

  return rval;
};
/**
 * Converts a EncryptedPrivateKeyInfo to PEM format.
 *
 * @param epki the EncryptedPrivateKeyInfo.
 * @param maxline the maximum characters per line, defaults to 64.
 *
 * @return the PEM-formatted encrypted private key.
 */


pki.encryptedPrivateKeyToPem = function (epki, maxline) {
  // convert to DER, then PEM-encode
  var msg = {
    type: 'ENCRYPTED PRIVATE KEY',
    body: asn1.toDer(epki).getBytes()
  };
  return forge.pem.encode(msg, {
    maxline: maxline
  });
};
/**
 * Converts a PEM-encoded EncryptedPrivateKeyInfo to ASN.1 format. Decryption
 * is not performed.
 *
 * @param pem the EncryptedPrivateKeyInfo in PEM-format.
 *
 * @return the ASN.1 EncryptedPrivateKeyInfo.
 */


pki.encryptedPrivateKeyFromPem = function (pem) {
  var msg = forge.pem.decode(pem)[0];

  if (msg.type !== 'ENCRYPTED PRIVATE KEY') {
    var error = new Error('Could not convert encrypted private key from PEM; ' + 'PEM header type is "ENCRYPTED PRIVATE KEY".');
    error.headerType = msg.type;
    throw error;
  }

  if (msg.procType && msg.procType.type === 'ENCRYPTED') {
    throw new Error('Could not convert encrypted private key from PEM; ' + 'PEM is encrypted.');
  } // convert DER to ASN.1 object


  return asn1.fromDer(msg.body);
};
/**
 * Encrypts an RSA private key. By default, the key will be wrapped in
 * a PrivateKeyInfo and encrypted to produce a PKCS#8 EncryptedPrivateKeyInfo.
 * This is the standard, preferred way to encrypt a private key.
 *
 * To produce a non-standard PEM-encrypted private key that uses encapsulated
 * headers to indicate the encryption algorithm (old-style non-PKCS#8 OpenSSL
 * private key encryption), set the 'legacy' option to true. Note: Using this
 * option will cause the iteration count to be forced to 1.
 *
 * Note: The 'des' algorithm is supported, but it is not considered to be
 * secure because it only uses a single 56-bit key. If possible, it is highly
 * recommended that a different algorithm be used.
 *
 * @param rsaKey the RSA key to encrypt.
 * @param password the password to use.
 * @param options:
 *          algorithm: the encryption algorithm to use
 *            ('aes128', 'aes192', 'aes256', '3des', 'des').
 *          count: the iteration count to use.
 *          saltSize: the salt size to use.
 *          legacy: output an old non-PKCS#8 PEM-encrypted+encapsulated
 *            headers (DEK-Info) private key.
 *
 * @return the PEM-encoded ASN.1 EncryptedPrivateKeyInfo.
 */


pki.encryptRsaPrivateKey = function (rsaKey, password, options) {
  // standard PKCS#8
  options = options || {};

  if (!options.legacy) {
    // encrypt PrivateKeyInfo
    var rval = pki.wrapRsaPrivateKey(pki.privateKeyToAsn1(rsaKey));
    rval = pki.encryptPrivateKeyInfo(rval, password, options);
    return pki.encryptedPrivateKeyToPem(rval);
  } // legacy non-PKCS#8


  var algorithm;
  var iv;
  var dkLen;
  var cipherFn;

  switch (options.algorithm) {
    case 'aes128':
      algorithm = 'AES-128-CBC';
      dkLen = 16;
      iv = forge.random.getBytesSync(16);
      cipherFn = forge.aes.createEncryptionCipher;
      break;

    case 'aes192':
      algorithm = 'AES-192-CBC';
      dkLen = 24;
      iv = forge.random.getBytesSync(16);
      cipherFn = forge.aes.createEncryptionCipher;
      break;

    case 'aes256':
      algorithm = 'AES-256-CBC';
      dkLen = 32;
      iv = forge.random.getBytesSync(16);
      cipherFn = forge.aes.createEncryptionCipher;
      break;

    case '3des':
      algorithm = 'DES-EDE3-CBC';
      dkLen = 24;
      iv = forge.random.getBytesSync(8);
      cipherFn = forge.des.createEncryptionCipher;
      break;

    case 'des':
      algorithm = 'DES-CBC';
      dkLen = 8;
      iv = forge.random.getBytesSync(8);
      cipherFn = forge.des.createEncryptionCipher;
      break;

    default:
      var error = new Error('Could not encrypt RSA private key; unsupported ' + 'encryption algorithm "' + options.algorithm + '".');
      error.algorithm = options.algorithm;
      throw error;
  } // encrypt private key using OpenSSL legacy key derivation


  var dk = forge.pbe.opensslDeriveBytes(password, iv.substr(0, 8), dkLen);
  var cipher = cipherFn(dk);
  cipher.start(iv);
  cipher.update(asn1.toDer(pki.privateKeyToAsn1(rsaKey)));
  cipher.finish();
  var msg = {
    type: 'RSA PRIVATE KEY',
    procType: {
      version: '4',
      type: 'ENCRYPTED'
    },
    dekInfo: {
      algorithm: algorithm,
      parameters: forge.util.bytesToHex(iv).toUpperCase()
    },
    body: cipher.output.getBytes()
  };
  return forge.pem.encode(msg);
};
/**
 * Decrypts an RSA private key.
 *
 * @param pem the PEM-formatted EncryptedPrivateKeyInfo to decrypt.
 * @param password the password to use.
 *
 * @return the RSA key on success, null on failure.
 */


pki.decryptRsaPrivateKey = function (pem, password) {
  var rval = null;
  var msg = forge.pem.decode(pem)[0];

  if (msg.type !== 'ENCRYPTED PRIVATE KEY' && msg.type !== 'PRIVATE KEY' && msg.type !== 'RSA PRIVATE KEY') {
    var error = new Error('Could not convert private key from PEM; PEM header type ' + 'is not "ENCRYPTED PRIVATE KEY", "PRIVATE KEY", or "RSA PRIVATE KEY".');
    error.headerType = error;
    throw error;
  }

  if (msg.procType && msg.procType.type === 'ENCRYPTED') {
    var dkLen;
    var cipherFn;

    switch (msg.dekInfo.algorithm) {
      case 'DES-CBC':
        dkLen = 8;
        cipherFn = forge.des.createDecryptionCipher;
        break;

      case 'DES-EDE3-CBC':
        dkLen = 24;
        cipherFn = forge.des.createDecryptionCipher;
        break;

      case 'AES-128-CBC':
        dkLen = 16;
        cipherFn = forge.aes.createDecryptionCipher;
        break;

      case 'AES-192-CBC':
        dkLen = 24;
        cipherFn = forge.aes.createDecryptionCipher;
        break;

      case 'AES-256-CBC':
        dkLen = 32;
        cipherFn = forge.aes.createDecryptionCipher;
        break;

      case 'RC2-40-CBC':
        dkLen = 5;

        cipherFn = function (key) {
          return forge.rc2.createDecryptionCipher(key, 40);
        };

        break;

      case 'RC2-64-CBC':
        dkLen = 8;

        cipherFn = function (key) {
          return forge.rc2.createDecryptionCipher(key, 64);
        };

        break;

      case 'RC2-128-CBC':
        dkLen = 16;

        cipherFn = function (key) {
          return forge.rc2.createDecryptionCipher(key, 128);
        };

        break;

      default:
        var error = new Error('Could not decrypt private key; unsupported ' + 'encryption algorithm "' + msg.dekInfo.algorithm + '".');
        error.algorithm = msg.dekInfo.algorithm;
        throw error;
    } // use OpenSSL legacy key derivation


    var iv = forge.util.hexToBytes(msg.dekInfo.parameters);
    var dk = forge.pbe.opensslDeriveBytes(password, iv.substr(0, 8), dkLen);
    var cipher = cipherFn(dk);
    cipher.start(iv);
    cipher.update(forge.util.createBuffer(msg.body));

    if (cipher.finish()) {
      rval = cipher.output.getBytes();
    } else {
      return rval;
    }
  } else {
    rval = msg.body;
  }

  if (msg.type === 'ENCRYPTED PRIVATE KEY') {
    rval = pki.decryptPrivateKeyInfo(asn1.fromDer(rval), password);
  } else {
    // decryption already performed above
    rval = asn1.fromDer(rval);
  }

  if (rval !== null) {
    rval = pki.privateKeyFromAsn1(rval);
  }

  return rval;
};
/**
 * Derives a PKCS#12 key.
 *
 * @param password the password to derive the key material from, null or
 *          undefined for none.
 * @param salt the salt, as a ByteBuffer, to use.
 * @param id the PKCS#12 ID byte (1 = key material, 2 = IV, 3 = MAC).
 * @param iter the iteration count.
 * @param n the number of bytes to derive from the password.
 * @param md the message digest to use, defaults to SHA-1.
 *
 * @return a ByteBuffer with the bytes derived from the password.
 */


pki.pbe.generatePkcs12Key = function (password, salt, id, iter, n, md) {
  var j, l;

  if (typeof md === 'undefined' || md === null) {
    if (!('sha1' in forge.md)) {
      throw new Error('"sha1" hash algorithm unavailable.');
    }

    md = forge.md.sha1.create();
  }

  var u = md.digestLength;
  var v = md.blockLength;
  var result = new forge.util.ByteBuffer();
  /* Convert password to Unicode byte buffer + trailing 0-byte. */

  var passBuf = new forge.util.ByteBuffer();

  if (password !== null && password !== undefined) {
    for (l = 0; l < password.length; l++) {
      passBuf.putInt16(password.charCodeAt(l));
    }

    passBuf.putInt16(0);
  }
  /* Length of salt and password in BYTES. */


  var p = passBuf.length();
  var s = salt.length();
  /* 1. Construct a string, D (the "diversifier"), by concatenating
        v copies of ID. */

  var D = new forge.util.ByteBuffer();
  D.fillWithByte(id, v);
  /* 2. Concatenate copies of the salt together to create a string S of length
        v * ceil(s / v) bytes (the final copy of the salt may be trunacted
        to create S).
        Note that if the salt is the empty string, then so is S. */

  var Slen = v * Math.ceil(s / v);
  var S = new forge.util.ByteBuffer();

  for (l = 0; l < Slen; l++) {
    S.putByte(salt.at(l % s));
  }
  /* 3. Concatenate copies of the password together to create a string P of
        length v * ceil(p / v) bytes (the final copy of the password may be
        truncated to create P).
        Note that if the password is the empty string, then so is P. */


  var Plen = v * Math.ceil(p / v);
  var P = new forge.util.ByteBuffer();

  for (l = 0; l < Plen; l++) {
    P.putByte(passBuf.at(l % p));
  }
  /* 4. Set I=S||P to be the concatenation of S and P. */


  var I = S;
  I.putBuffer(P);
  /* 5. Set c=ceil(n / u). */

  var c = Math.ceil(n / u);
  /* 6. For i=1, 2, ..., c, do the following: */

  for (var i = 1; i <= c; i++) {
    /* a) Set Ai=H^r(D||I). (l.e. the rth hash of D||I, H(H(H(...H(D||I)))) */
    var buf = new forge.util.ByteBuffer();
    buf.putBytes(D.bytes());
    buf.putBytes(I.bytes());

    for (var round = 0; round < iter; round++) {
      md.start();
      md.update(buf.getBytes());
      buf = md.digest();
    }
    /* b) Concatenate copies of Ai to create a string B of length v bytes (the
          final copy of Ai may be truncated to create B). */


    var B = new forge.util.ByteBuffer();

    for (l = 0; l < v; l++) {
      B.putByte(buf.at(l % u));
    }
    /* c) Treating I as a concatenation I0, I1, ..., Ik-1 of v-byte blocks,
          where k=ceil(s / v) + ceil(p / v), modify I by setting
          Ij=(Ij+B+1) mod 2v for each j.  */


    var k = Math.ceil(s / v) + Math.ceil(p / v);
    var Inew = new forge.util.ByteBuffer();

    for (j = 0; j < k; j++) {
      var chunk = new forge.util.ByteBuffer(I.getBytes(v));
      var x = 0x1ff;

      for (l = B.length() - 1; l >= 0; l--) {
        x = x >> 8;
        x += B.at(l) + chunk.at(l);
        chunk.setAt(l, x & 0xff);
      }

      Inew.putBuffer(chunk);
    }

    I = Inew;
    /* Add Ai to A. */

    result.putBuffer(buf);
  }

  result.truncate(result.length() - n);
  return result;
};
/**
 * Get new Forge cipher object instance.
 *
 * @param oid the OID (in string notation).
 * @param params the ASN.1 params object.
 * @param password the password to decrypt with.
 *
 * @return new cipher object instance.
 */


pki.pbe.getCipher = function (oid, params, password) {
  switch (oid) {
    case pki.oids['pkcs5PBES2']:
      return pki.pbe.getCipherForPBES2(oid, params, password);

    case pki.oids['pbeWithSHAAnd3-KeyTripleDES-CBC']:
    case pki.oids['pbewithSHAAnd40BitRC2-CBC']:
      return pki.pbe.getCipherForPKCS12PBE(oid, params, password);

    default:
      var error = new Error('Cannot read encrypted PBE data block. Unsupported OID.');
      error.oid = oid;
      error.supportedOids = ['pkcs5PBES2', 'pbeWithSHAAnd3-KeyTripleDES-CBC', 'pbewithSHAAnd40BitRC2-CBC'];
      throw error;
  }
};
/**
 * Get new Forge cipher object instance according to PBES2 params block.
 *
 * The returned cipher instance is already started using the IV
 * from PBES2 parameter block.
 *
 * @param oid the PKCS#5 PBKDF2 OID (in string notation).
 * @param params the ASN.1 PBES2-params object.
 * @param password the password to decrypt with.
 *
 * @return new cipher object instance.
 */


pki.pbe.getCipherForPBES2 = function (oid, params, password) {
  // get PBE params
  var capture = {};
  var errors = [];

  if (!asn1.validate(params, PBES2AlgorithmsValidator, capture, errors)) {
    var error = new Error('Cannot read password-based-encryption algorithm ' + 'parameters. ASN.1 object is not a supported EncryptedPrivateKeyInfo.');
    error.errors = errors;
    throw error;
  } // check oids


  oid = asn1.derToOid(capture.kdfOid);

  if (oid !== pki.oids['pkcs5PBKDF2']) {
    var error = new Error('Cannot read encrypted private key. ' + 'Unsupported key derivation function OID.');
    error.oid = oid;
    error.supportedOids = ['pkcs5PBKDF2'];
    throw error;
  }

  oid = asn1.derToOid(capture.encOid);

  if (oid !== pki.oids['aes128-CBC'] && oid !== pki.oids['aes192-CBC'] && oid !== pki.oids['aes256-CBC'] && oid !== pki.oids['des-EDE3-CBC'] && oid !== pki.oids['desCBC']) {
    var error = new Error('Cannot read encrypted private key. ' + 'Unsupported encryption scheme OID.');
    error.oid = oid;
    error.supportedOids = ['aes128-CBC', 'aes192-CBC', 'aes256-CBC', 'des-EDE3-CBC', 'desCBC'];
    throw error;
  } // set PBE params


  var salt = capture.kdfSalt;
  var count = forge.util.createBuffer(capture.kdfIterationCount);
  count = count.getInt(count.length() << 3);
  var dkLen;
  var cipherFn;

  switch (pki.oids[oid]) {
    case 'aes128-CBC':
      dkLen = 16;
      cipherFn = forge.aes.createDecryptionCipher;
      break;

    case 'aes192-CBC':
      dkLen = 24;
      cipherFn = forge.aes.createDecryptionCipher;
      break;

    case 'aes256-CBC':
      dkLen = 32;
      cipherFn = forge.aes.createDecryptionCipher;
      break;

    case 'des-EDE3-CBC':
      dkLen = 24;
      cipherFn = forge.des.createDecryptionCipher;
      break;

    case 'desCBC':
      dkLen = 8;
      cipherFn = forge.des.createDecryptionCipher;
      break;
  } // get PRF message digest


  var md = prfOidToMessageDigest(capture.prfOid); // decrypt private key using pbe with chosen PRF and AES/DES

  var dk = forge.pkcs5.pbkdf2(password, salt, count, dkLen, md);
  var iv = capture.encIv;
  var cipher = cipherFn(dk);
  cipher.start(iv);
  return cipher;
};
/**
 * Get new Forge cipher object instance for PKCS#12 PBE.
 *
 * The returned cipher instance is already started using the key & IV
 * derived from the provided password and PKCS#12 PBE salt.
 *
 * @param oid The PKCS#12 PBE OID (in string notation).
 * @param params The ASN.1 PKCS#12 PBE-params object.
 * @param password The password to decrypt with.
 *
 * @return the new cipher object instance.
 */


pki.pbe.getCipherForPKCS12PBE = function (oid, params, password) {
  // get PBE params
  var capture = {};
  var errors = [];

  if (!asn1.validate(params, pkcs12PbeParamsValidator, capture, errors)) {
    var error = new Error('Cannot read password-based-encryption algorithm ' + 'parameters. ASN.1 object is not a supported EncryptedPrivateKeyInfo.');
    error.errors = errors;
    throw error;
  }

  var salt = forge.util.createBuffer(capture.salt);
  var count = forge.util.createBuffer(capture.iterations);
  count = count.getInt(count.length() << 3);
  var dkLen, dIvLen, cipherFn;

  switch (oid) {
    case pki.oids['pbeWithSHAAnd3-KeyTripleDES-CBC']:
      dkLen = 24;
      dIvLen = 8;
      cipherFn = forge.des.startDecrypting;
      break;

    case pki.oids['pbewithSHAAnd40BitRC2-CBC']:
      dkLen = 5;
      dIvLen = 8;

      cipherFn = function (key, iv) {
        var cipher = forge.rc2.createDecryptionCipher(key, 40);
        cipher.start(iv, null);
        return cipher;
      };

      break;

    default:
      var error = new Error('Cannot read PKCS #12 PBE data block. Unsupported OID.');
      error.oid = oid;
      throw error;
  } // get PRF message digest


  var md = prfOidToMessageDigest(capture.prfOid);
  var key = pki.pbe.generatePkcs12Key(password, salt, 1, count, dkLen, md);
  md.start();
  var iv = pki.pbe.generatePkcs12Key(password, salt, 2, count, dIvLen, md);
  return cipherFn(key, iv);
};
/**
 * OpenSSL's legacy key derivation function.
 *
 * See: http://www.openssl.org/docs/crypto/EVP_BytesToKey.html
 *
 * @param password the password to derive the key from.
 * @param salt the salt to use, null for none.
 * @param dkLen the number of bytes needed for the derived key.
 * @param [options] the options to use:
 *          [md] an optional message digest object to use.
 */


pki.pbe.opensslDeriveBytes = function (password, salt, dkLen, md) {
  if (typeof md === 'undefined' || md === null) {
    if (!('md5' in forge.md)) {
      throw new Error('"md5" hash algorithm unavailable.');
    }

    md = forge.md.md5.create();
  }

  if (salt === null) {
    salt = '';
  }

  var digests = [hash(md, password + salt)];

  for (var length = 16, i = 1; length < dkLen; ++i, length += 16) {
    digests.push(hash(md, digests[i - 1] + password + salt));
  }

  return digests.join('').substr(0, dkLen);
};

function hash(md, bytes) {
  return md.start().update(bytes).digest().getBytes();
}

function prfOidToMessageDigest(prfOid) {
  // get PRF algorithm, default to SHA-1
  var prfAlgorithm;

  if (!prfOid) {
    prfAlgorithm = 'hmacWithSHA1';
  } else {
    prfAlgorithm = pki.oids[asn1.derToOid(prfOid)];

    if (!prfAlgorithm) {
      var error = new Error('Unsupported PRF OID.');
      error.oid = prfOid;
      error.supported = ['hmacWithSHA1', 'hmacWithSHA224', 'hmacWithSHA256', 'hmacWithSHA384', 'hmacWithSHA512'];
      throw error;
    }
  }

  return prfAlgorithmToMessageDigest(prfAlgorithm);
}

function prfAlgorithmToMessageDigest(prfAlgorithm) {
  var factory = forge.md;

  switch (prfAlgorithm) {
    case 'hmacWithSHA224':
      factory = forge.md.sha512;

    case 'hmacWithSHA1':
    case 'hmacWithSHA256':
    case 'hmacWithSHA384':
    case 'hmacWithSHA512':
      prfAlgorithm = prfAlgorithm.substr(8).toLowerCase();
      break;

    default:
      var error = new Error('Unsupported PRF algorithm.');
      error.algorithm = prfAlgorithm;
      error.supported = ['hmacWithSHA1', 'hmacWithSHA224', 'hmacWithSHA256', 'hmacWithSHA384', 'hmacWithSHA512'];
      throw error;
  }

  if (!factory || !(prfAlgorithm in factory)) {
    throw new Error('Unknown hash algorithm: ' + prfAlgorithm);
  }

  return factory[prfAlgorithm].create();
}

function createPbkdf2Params(salt, countBytes, dkLen, prfAlgorithm) {
  var params = asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [// salt
  asn1.create(asn1.Class.UNIVERSAL, asn1.Type.OCTETSTRING, false, salt), // iteration count
  asn1.create(asn1.Class.UNIVERSAL, asn1.Type.INTEGER, false, countBytes.getBytes())]); // when PRF algorithm is not SHA-1 default, add key length and PRF algorithm

  if (prfAlgorithm !== 'hmacWithSHA1') {
    params.value.push( // key length
    asn1.create(asn1.Class.UNIVERSAL, asn1.Type.INTEGER, false, forge.util.hexToBytes(dkLen.toString(16))), // AlgorithmIdentifier
    asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [// algorithm
    asn1.create(asn1.Class.UNIVERSAL, asn1.Type.OID, false, asn1.oidToDer(pki.oids[prfAlgorithm]).getBytes()), // parameters (null)
    asn1.create(asn1.Class.UNIVERSAL, asn1.Type.NULL, false, '')]));
  }

  return params;
}
},{"./forge":"o20S","./aes":"EkQ3","./asn1":"BA5j","./des":"XbkJ","./md":"Tsiu","./oids":"rbLR","./pbkdf2":"Uyyi","./pem":"ClqA","./random":"Gfwb","./rc2":"M1Ai","./rsa":"HL1S","./util":"lWyh"}],"Z3HL":[function(require,module,exports) {
/**
 * Javascript implementation of ASN.1 validators for PKCS#7 v1.5.
 *
 * @author Dave Longley
 * @author Stefan Siegl
 *
 * Copyright (c) 2012-2015 Digital Bazaar, Inc.
 * Copyright (c) 2012 Stefan Siegl <stesie@brokenpipe.de>
 *
 * The ASN.1 representation of PKCS#7 is as follows
 * (see RFC #2315 for details, http://www.ietf.org/rfc/rfc2315.txt):
 *
 * A PKCS#7 message consists of a ContentInfo on root level, which may
 * contain any number of further ContentInfo nested into it.
 *
 * ContentInfo ::= SEQUENCE {
 *   contentType                ContentType,
 *   content               [0]  EXPLICIT ANY DEFINED BY contentType OPTIONAL
 * }
 *
 * ContentType ::= OBJECT IDENTIFIER
 *
 * EnvelopedData ::= SEQUENCE {
 *   version                    Version,
 *   recipientInfos             RecipientInfos,
 *   encryptedContentInfo       EncryptedContentInfo
 * }
 *
 * EncryptedData ::= SEQUENCE {
 *   version                    Version,
 *   encryptedContentInfo       EncryptedContentInfo
 * }
 *
 * id-signedData OBJECT IDENTIFIER ::= { iso(1) member-body(2)
 *   us(840) rsadsi(113549) pkcs(1) pkcs7(7) 2 }
 *
 * SignedData ::= SEQUENCE {
 *   version           INTEGER,
 *   digestAlgorithms  DigestAlgorithmIdentifiers,
 *   contentInfo       ContentInfo,
 *   certificates      [0] IMPLICIT Certificates OPTIONAL,
 *   crls              [1] IMPLICIT CertificateRevocationLists OPTIONAL,
 *   signerInfos       SignerInfos
 * }
 *
 * SignerInfos ::= SET OF SignerInfo
 *
 * SignerInfo ::= SEQUENCE {
 *   version                    Version,
 *   issuerAndSerialNumber      IssuerAndSerialNumber,
 *   digestAlgorithm            DigestAlgorithmIdentifier,
 *   authenticatedAttributes    [0] IMPLICIT Attributes OPTIONAL,
 *   digestEncryptionAlgorithm  DigestEncryptionAlgorithmIdentifier,
 *   encryptedDigest            EncryptedDigest,
 *   unauthenticatedAttributes  [1] IMPLICIT Attributes OPTIONAL
 * }
 *
 * EncryptedDigest ::= OCTET STRING
 *
 * Attributes ::= SET OF Attribute
 *
 * Attribute ::= SEQUENCE {
 *   attrType    OBJECT IDENTIFIER,
 *   attrValues  SET OF AttributeValue
 * }
 *
 * AttributeValue ::= ANY
 *
 * Version ::= INTEGER
 *
 * RecipientInfos ::= SET OF RecipientInfo
 *
 * EncryptedContentInfo ::= SEQUENCE {
 *   contentType                 ContentType,
 *   contentEncryptionAlgorithm  ContentEncryptionAlgorithmIdentifier,
 *   encryptedContent       [0]  IMPLICIT EncryptedContent OPTIONAL
 * }
 *
 * ContentEncryptionAlgorithmIdentifier ::= AlgorithmIdentifier
 *
 * The AlgorithmIdentifier contains an Object Identifier (OID) and parameters
 * for the algorithm, if any. In the case of AES and DES3, there is only one,
 * the IV.
 *
 * AlgorithmIdentifer ::= SEQUENCE {
 *    algorithm OBJECT IDENTIFIER,
 *    parameters ANY DEFINED BY algorithm OPTIONAL
 * }
 *
 * EncryptedContent ::= OCTET STRING
 *
 * RecipientInfo ::= SEQUENCE {
 *   version                     Version,
 *   issuerAndSerialNumber       IssuerAndSerialNumber,
 *   keyEncryptionAlgorithm      KeyEncryptionAlgorithmIdentifier,
 *   encryptedKey                EncryptedKey
 * }
 *
 * IssuerAndSerialNumber ::= SEQUENCE {
 *   issuer                      Name,
 *   serialNumber                CertificateSerialNumber
 * }
 *
 * CertificateSerialNumber ::= INTEGER
 *
 * KeyEncryptionAlgorithmIdentifier ::= AlgorithmIdentifier
 *
 * EncryptedKey ::= OCTET STRING
 */
var forge = require('./forge');

require('./asn1');

require('./util'); // shortcut for ASN.1 API


var asn1 = forge.asn1; // shortcut for PKCS#7 API

var p7v = module.exports = forge.pkcs7asn1 = forge.pkcs7asn1 || {};
forge.pkcs7 = forge.pkcs7 || {};
forge.pkcs7.asn1 = p7v;
var contentInfoValidator = {
  name: 'ContentInfo',
  tagClass: asn1.Class.UNIVERSAL,
  type: asn1.Type.SEQUENCE,
  constructed: true,
  value: [{
    name: 'ContentInfo.ContentType',
    tagClass: asn1.Class.UNIVERSAL,
    type: asn1.Type.OID,
    constructed: false,
    capture: 'contentType'
  }, {
    name: 'ContentInfo.content',
    tagClass: asn1.Class.CONTEXT_SPECIFIC,
    type: 0,
    constructed: true,
    optional: true,
    captureAsn1: 'content'
  }]
};
p7v.contentInfoValidator = contentInfoValidator;
var encryptedContentInfoValidator = {
  name: 'EncryptedContentInfo',
  tagClass: asn1.Class.UNIVERSAL,
  type: asn1.Type.SEQUENCE,
  constructed: true,
  value: [{
    name: 'EncryptedContentInfo.contentType',
    tagClass: asn1.Class.UNIVERSAL,
    type: asn1.Type.OID,
    constructed: false,
    capture: 'contentType'
  }, {
    name: 'EncryptedContentInfo.contentEncryptionAlgorithm',
    tagClass: asn1.Class.UNIVERSAL,
    type: asn1.Type.SEQUENCE,
    constructed: true,
    value: [{
      name: 'EncryptedContentInfo.contentEncryptionAlgorithm.algorithm',
      tagClass: asn1.Class.UNIVERSAL,
      type: asn1.Type.OID,
      constructed: false,
      capture: 'encAlgorithm'
    }, {
      name: 'EncryptedContentInfo.contentEncryptionAlgorithm.parameter',
      tagClass: asn1.Class.UNIVERSAL,
      captureAsn1: 'encParameter'
    }]
  }, {
    name: 'EncryptedContentInfo.encryptedContent',
    tagClass: asn1.Class.CONTEXT_SPECIFIC,
    type: 0,

    /* The PKCS#7 structure output by OpenSSL somewhat differs from what
     * other implementations do generate.
     *
     * OpenSSL generates a structure like this:
     * SEQUENCE {
     *    ...
     *    [0]
     *       26 DA 67 D2 17 9C 45 3C B1 2A A8 59 2F 29 33 38
     *       C3 C3 DF 86 71 74 7A 19 9F 40 D0 29 BE 85 90 45
     *       ...
     * }
     *
     * Whereas other implementations (and this PKCS#7 module) generate:
     * SEQUENCE {
     *    ...
     *    [0] {
     *       OCTET STRING
     *          26 DA 67 D2 17 9C 45 3C B1 2A A8 59 2F 29 33 38
     *          C3 C3 DF 86 71 74 7A 19 9F 40 D0 29 BE 85 90 45
     *          ...
     *    }
     * }
     *
     * In order to support both, we just capture the context specific
     * field here.  The OCTET STRING bit is removed below.
     */
    capture: 'encryptedContent',
    captureAsn1: 'encryptedContentAsn1'
  }]
};
p7v.envelopedDataValidator = {
  name: 'EnvelopedData',
  tagClass: asn1.Class.UNIVERSAL,
  type: asn1.Type.SEQUENCE,
  constructed: true,
  value: [{
    name: 'EnvelopedData.Version',
    tagClass: asn1.Class.UNIVERSAL,
    type: asn1.Type.INTEGER,
    constructed: false,
    capture: 'version'
  }, {
    name: 'EnvelopedData.RecipientInfos',
    tagClass: asn1.Class.UNIVERSAL,
    type: asn1.Type.SET,
    constructed: true,
    captureAsn1: 'recipientInfos'
  }].concat(encryptedContentInfoValidator)
};
p7v.encryptedDataValidator = {
  name: 'EncryptedData',
  tagClass: asn1.Class.UNIVERSAL,
  type: asn1.Type.SEQUENCE,
  constructed: true,
  value: [{
    name: 'EncryptedData.Version',
    tagClass: asn1.Class.UNIVERSAL,
    type: asn1.Type.INTEGER,
    constructed: false,
    capture: 'version'
  }].concat(encryptedContentInfoValidator)
};
var signerValidator = {
  name: 'SignerInfo',
  tagClass: asn1.Class.UNIVERSAL,
  type: asn1.Type.SEQUENCE,
  constructed: true,
  value: [{
    name: 'SignerInfo.version',
    tagClass: asn1.Class.UNIVERSAL,
    type: asn1.Type.INTEGER,
    constructed: false
  }, {
    name: 'SignerInfo.issuerAndSerialNumber',
    tagClass: asn1.Class.UNIVERSAL,
    type: asn1.Type.SEQUENCE,
    constructed: true,
    value: [{
      name: 'SignerInfo.issuerAndSerialNumber.issuer',
      tagClass: asn1.Class.UNIVERSAL,
      type: asn1.Type.SEQUENCE,
      constructed: true,
      captureAsn1: 'issuer'
    }, {
      name: 'SignerInfo.issuerAndSerialNumber.serialNumber',
      tagClass: asn1.Class.UNIVERSAL,
      type: asn1.Type.INTEGER,
      constructed: false,
      capture: 'serial'
    }]
  }, {
    name: 'SignerInfo.digestAlgorithm',
    tagClass: asn1.Class.UNIVERSAL,
    type: asn1.Type.SEQUENCE,
    constructed: true,
    value: [{
      name: 'SignerInfo.digestAlgorithm.algorithm',
      tagClass: asn1.Class.UNIVERSAL,
      type: asn1.Type.OID,
      constructed: false,
      capture: 'digestAlgorithm'
    }, {
      name: 'SignerInfo.digestAlgorithm.parameter',
      tagClass: asn1.Class.UNIVERSAL,
      constructed: false,
      captureAsn1: 'digestParameter',
      optional: true
    }]
  }, {
    name: 'SignerInfo.authenticatedAttributes',
    tagClass: asn1.Class.CONTEXT_SPECIFIC,
    type: 0,
    constructed: true,
    optional: true,
    capture: 'authenticatedAttributes'
  }, {
    name: 'SignerInfo.digestEncryptionAlgorithm',
    tagClass: asn1.Class.UNIVERSAL,
    type: asn1.Type.SEQUENCE,
    constructed: true,
    capture: 'signatureAlgorithm'
  }, {
    name: 'SignerInfo.encryptedDigest',
    tagClass: asn1.Class.UNIVERSAL,
    type: asn1.Type.OCTETSTRING,
    constructed: false,
    capture: 'signature'
  }, {
    name: 'SignerInfo.unauthenticatedAttributes',
    tagClass: asn1.Class.CONTEXT_SPECIFIC,
    type: 1,
    constructed: true,
    optional: true,
    capture: 'unauthenticatedAttributes'
  }]
};
p7v.signedDataValidator = {
  name: 'SignedData',
  tagClass: asn1.Class.UNIVERSAL,
  type: asn1.Type.SEQUENCE,
  constructed: true,
  value: [{
    name: 'SignedData.Version',
    tagClass: asn1.Class.UNIVERSAL,
    type: asn1.Type.INTEGER,
    constructed: false,
    capture: 'version'
  }, {
    name: 'SignedData.DigestAlgorithms',
    tagClass: asn1.Class.UNIVERSAL,
    type: asn1.Type.SET,
    constructed: true,
    captureAsn1: 'digestAlgorithms'
  }, contentInfoValidator, {
    name: 'SignedData.Certificates',
    tagClass: asn1.Class.CONTEXT_SPECIFIC,
    type: 0,
    optional: true,
    captureAsn1: 'certificates'
  }, {
    name: 'SignedData.CertificateRevocationLists',
    tagClass: asn1.Class.CONTEXT_SPECIFIC,
    type: 1,
    optional: true,
    captureAsn1: 'crls'
  }, {
    name: 'SignedData.SignerInfos',
    tagClass: asn1.Class.UNIVERSAL,
    type: asn1.Type.SET,
    capture: 'signerInfos',
    optional: true,
    value: [signerValidator]
  }]
};
p7v.recipientInfoValidator = {
  name: 'RecipientInfo',
  tagClass: asn1.Class.UNIVERSAL,
  type: asn1.Type.SEQUENCE,
  constructed: true,
  value: [{
    name: 'RecipientInfo.version',
    tagClass: asn1.Class.UNIVERSAL,
    type: asn1.Type.INTEGER,
    constructed: false,
    capture: 'version'
  }, {
    name: 'RecipientInfo.issuerAndSerial',
    tagClass: asn1.Class.UNIVERSAL,
    type: asn1.Type.SEQUENCE,
    constructed: true,
    value: [{
      name: 'RecipientInfo.issuerAndSerial.issuer',
      tagClass: asn1.Class.UNIVERSAL,
      type: asn1.Type.SEQUENCE,
      constructed: true,
      captureAsn1: 'issuer'
    }, {
      name: 'RecipientInfo.issuerAndSerial.serialNumber',
      tagClass: asn1.Class.UNIVERSAL,
      type: asn1.Type.INTEGER,
      constructed: false,
      capture: 'serial'
    }]
  }, {
    name: 'RecipientInfo.keyEncryptionAlgorithm',
    tagClass: asn1.Class.UNIVERSAL,
    type: asn1.Type.SEQUENCE,
    constructed: true,
    value: [{
      name: 'RecipientInfo.keyEncryptionAlgorithm.algorithm',
      tagClass: asn1.Class.UNIVERSAL,
      type: asn1.Type.OID,
      constructed: false,
      capture: 'encAlgorithm'
    }, {
      name: 'RecipientInfo.keyEncryptionAlgorithm.parameter',
      tagClass: asn1.Class.UNIVERSAL,
      constructed: false,
      captureAsn1: 'encParameter'
    }]
  }, {
    name: 'RecipientInfo.encryptedKey',
    tagClass: asn1.Class.UNIVERSAL,
    type: asn1.Type.OCTETSTRING,
    constructed: false,
    capture: 'encKey'
  }]
};
},{"./forge":"o20S","./asn1":"BA5j","./util":"lWyh"}],"ObGv":[function(require,module,exports) {
/**
 * Javascript implementation of mask generation function MGF1.
 *
 * @author Stefan Siegl
 * @author Dave Longley
 *
 * Copyright (c) 2012 Stefan Siegl <stesie@brokenpipe.de>
 * Copyright (c) 2014 Digital Bazaar, Inc.
 */
var forge = require('./forge');

require('./util');

forge.mgf = forge.mgf || {};
var mgf1 = module.exports = forge.mgf.mgf1 = forge.mgf1 = forge.mgf1 || {};
/**
 * Creates a MGF1 mask generation function object.
 *
 * @param md the message digest API to use (eg: forge.md.sha1.create()).
 *
 * @return a mask generation function object.
 */

mgf1.create = function (md) {
  var mgf = {
    /**
     * Generate mask of specified length.
     *
     * @param {String} seed The seed for mask generation.
     * @param maskLen Number of bytes to generate.
     * @return {String} The generated mask.
     */
    generate: function (seed, maskLen) {
      /* 2. Let T be the empty octet string. */
      var t = new forge.util.ByteBuffer();
      /* 3. For counter from 0 to ceil(maskLen / hLen), do the following: */

      var len = Math.ceil(maskLen / md.digestLength);

      for (var i = 0; i < len; i++) {
        /* a. Convert counter to an octet string C of length 4 octets */
        var c = new forge.util.ByteBuffer();
        c.putInt32(i);
        /* b. Concatenate the hash of the seed mgfSeed and C to the octet
         * string T: */

        md.start();
        md.update(seed + c.getBytes());
        t.putBuffer(md.digest());
      }
      /* Output the leading maskLen octets of T as the octet string mask. */


      t.truncate(t.length() - maskLen);
      return t.getBytes();
    }
  };
  return mgf;
};
},{"./forge":"o20S","./util":"lWyh"}],"j9lk":[function(require,module,exports) {
/**
 * Node.js module for Forge mask generation functions.
 *
 * @author Stefan Siegl
 *
 * Copyright 2012 Stefan Siegl <stesie@brokenpipe.de>
 */
var forge = require('./forge');

require('./mgf1');

module.exports = forge.mgf = forge.mgf || {};
forge.mgf.mgf1 = forge.mgf1;
},{"./forge":"o20S","./mgf1":"ObGv"}],"cVuL":[function(require,module,exports) {
/**
 * Javascript implementation of PKCS#1 PSS signature padding.
 *
 * @author Stefan Siegl
 *
 * Copyright (c) 2012 Stefan Siegl <stesie@brokenpipe.de>
 */
var forge = require('./forge');

require('./random');

require('./util'); // shortcut for PSS API


var pss = module.exports = forge.pss = forge.pss || {};
/**
 * Creates a PSS signature scheme object.
 *
 * There are several ways to provide a salt for encoding:
 *
 * 1. Specify the saltLength only and the built-in PRNG will generate it.
 * 2. Specify the saltLength and a custom PRNG with 'getBytesSync' defined that
 *   will be used.
 * 3. Specify the salt itself as a forge.util.ByteBuffer.
 *
 * @param options the options to use:
 *          md the message digest object to use, a forge md instance.
 *          mgf the mask generation function to use, a forge mgf instance.
 *          [saltLength] the length of the salt in octets.
 *          [prng] the pseudo-random number generator to use to produce a salt.
 *          [salt] the salt to use when encoding.
 *
 * @return a signature scheme object.
 */

pss.create = function (options) {
  // backwards compatibility w/legacy args: hash, mgf, sLen
  if (arguments.length === 3) {
    options = {
      md: arguments[0],
      mgf: arguments[1],
      saltLength: arguments[2]
    };
  }

  var hash = options.md;
  var mgf = options.mgf;
  var hLen = hash.digestLength;
  var salt_ = options.salt || null;

  if (typeof salt_ === 'string') {
    // assume binary-encoded string
    salt_ = forge.util.createBuffer(salt_);
  }

  var sLen;

  if ('saltLength' in options) {
    sLen = options.saltLength;
  } else if (salt_ !== null) {
    sLen = salt_.length();
  } else {
    throw new Error('Salt length not specified or specific salt not given.');
  }

  if (salt_ !== null && salt_.length() !== sLen) {
    throw new Error('Given salt length does not match length of given salt.');
  }

  var prng = options.prng || forge.random;
  var pssobj = {};
  /**
   * Encodes a PSS signature.
   *
   * This function implements EMSA-PSS-ENCODE as per RFC 3447, section 9.1.1.
   *
   * @param md the message digest object with the hash to sign.
   * @param modsBits the length of the RSA modulus in bits.
   *
   * @return the encoded message as a binary-encoded string of length
   *           ceil((modBits - 1) / 8).
   */

  pssobj.encode = function (md, modBits) {
    var i;
    var emBits = modBits - 1;
    var emLen = Math.ceil(emBits / 8);
    /* 2. Let mHash = Hash(M), an octet string of length hLen. */

    var mHash = md.digest().getBytes();
    /* 3. If emLen < hLen + sLen + 2, output "encoding error" and stop. */

    if (emLen < hLen + sLen + 2) {
      throw new Error('Message is too long to encrypt.');
    }
    /* 4. Generate a random octet string salt of length sLen; if sLen = 0,
     *    then salt is the empty string. */


    var salt;

    if (salt_ === null) {
      salt = prng.getBytesSync(sLen);
    } else {
      salt = salt_.bytes();
    }
    /* 5. Let M' = (0x)00 00 00 00 00 00 00 00 || mHash || salt; */


    var m_ = new forge.util.ByteBuffer();
    m_.fillWithByte(0, 8);
    m_.putBytes(mHash);
    m_.putBytes(salt);
    /* 6. Let H = Hash(M'), an octet string of length hLen. */

    hash.start();
    hash.update(m_.getBytes());
    var h = hash.digest().getBytes();
    /* 7. Generate an octet string PS consisting of emLen - sLen - hLen - 2
     *    zero octets.  The length of PS may be 0. */

    var ps = new forge.util.ByteBuffer();
    ps.fillWithByte(0, emLen - sLen - hLen - 2);
    /* 8. Let DB = PS || 0x01 || salt; DB is an octet string of length
     *    emLen - hLen - 1. */

    ps.putByte(0x01);
    ps.putBytes(salt);
    var db = ps.getBytes();
    /* 9. Let dbMask = MGF(H, emLen - hLen - 1). */

    var maskLen = emLen - hLen - 1;
    var dbMask = mgf.generate(h, maskLen);
    /* 10. Let maskedDB = DB \xor dbMask. */

    var maskedDB = '';

    for (i = 0; i < maskLen; i++) {
      maskedDB += String.fromCharCode(db.charCodeAt(i) ^ dbMask.charCodeAt(i));
    }
    /* 11. Set the leftmost 8emLen - emBits bits of the leftmost octet in
     *     maskedDB to zero. */


    var mask = 0xFF00 >> 8 * emLen - emBits & 0xFF;
    maskedDB = String.fromCharCode(maskedDB.charCodeAt(0) & ~mask) + maskedDB.substr(1);
    /* 12. Let EM = maskedDB || H || 0xbc.
     * 13. Output EM. */

    return maskedDB + h + String.fromCharCode(0xbc);
  };
  /**
   * Verifies a PSS signature.
   *
   * This function implements EMSA-PSS-VERIFY as per RFC 3447, section 9.1.2.
   *
   * @param mHash the message digest hash, as a binary-encoded string, to
   *         compare against the signature.
   * @param em the encoded message, as a binary-encoded string
   *          (RSA decryption result).
   * @param modsBits the length of the RSA modulus in bits.
   *
   * @return true if the signature was verified, false if not.
   */


  pssobj.verify = function (mHash, em, modBits) {
    var i;
    var emBits = modBits - 1;
    var emLen = Math.ceil(emBits / 8);
    /* c. Convert the message representative m to an encoded message EM
     *    of length emLen = ceil((modBits - 1) / 8) octets, where modBits
     *    is the length in bits of the RSA modulus n */

    em = em.substr(-emLen);
    /* 3. If emLen < hLen + sLen + 2, output "inconsistent" and stop. */

    if (emLen < hLen + sLen + 2) {
      throw new Error('Inconsistent parameters to PSS signature verification.');
    }
    /* 4. If the rightmost octet of EM does not have hexadecimal value
     *    0xbc, output "inconsistent" and stop. */


    if (em.charCodeAt(emLen - 1) !== 0xbc) {
      throw new Error('Encoded message does not end in 0xBC.');
    }
    /* 5. Let maskedDB be the leftmost emLen - hLen - 1 octets of EM, and
     *    let H be the next hLen octets. */


    var maskLen = emLen - hLen - 1;
    var maskedDB = em.substr(0, maskLen);
    var h = em.substr(maskLen, hLen);
    /* 6. If the leftmost 8emLen - emBits bits of the leftmost octet in
     *    maskedDB are not all equal to zero, output "inconsistent" and stop. */

    var mask = 0xFF00 >> 8 * emLen - emBits & 0xFF;

    if ((maskedDB.charCodeAt(0) & mask) !== 0) {
      throw new Error('Bits beyond keysize not zero as expected.');
    }
    /* 7. Let dbMask = MGF(H, emLen - hLen - 1). */


    var dbMask = mgf.generate(h, maskLen);
    /* 8. Let DB = maskedDB \xor dbMask. */

    var db = '';

    for (i = 0; i < maskLen; i++) {
      db += String.fromCharCode(maskedDB.charCodeAt(i) ^ dbMask.charCodeAt(i));
    }
    /* 9. Set the leftmost 8emLen - emBits bits of the leftmost octet
     * in DB to zero. */


    db = String.fromCharCode(db.charCodeAt(0) & ~mask) + db.substr(1);
    /* 10. If the emLen - hLen - sLen - 2 leftmost octets of DB are not zero
     * or if the octet at position emLen - hLen - sLen - 1 (the leftmost
     * position is "position 1") does not have hexadecimal value 0x01,
     * output "inconsistent" and stop. */

    var checkLen = emLen - hLen - sLen - 2;

    for (i = 0; i < checkLen; i++) {
      if (db.charCodeAt(i) !== 0x00) {
        throw new Error('Leftmost octets not zero as expected');
      }
    }

    if (db.charCodeAt(checkLen) !== 0x01) {
      throw new Error('Inconsistent PSS signature, 0x01 marker not found');
    }
    /* 11. Let salt be the last sLen octets of DB. */


    var salt = db.substr(-sLen);
    /* 12.  Let M' = (0x)00 00 00 00 00 00 00 00 || mHash || salt */

    var m_ = new forge.util.ByteBuffer();
    m_.fillWithByte(0, 8);
    m_.putBytes(mHash);
    m_.putBytes(salt);
    /* 13. Let H' = Hash(M'), an octet string of length hLen. */

    hash.start();
    hash.update(m_.getBytes());
    var h_ = hash.digest().getBytes();
    /* 14. If H = H', output "consistent." Otherwise, output "inconsistent." */

    return h === h_;
  };

  return pssobj;
};
},{"./forge":"o20S","./random":"Gfwb","./util":"lWyh"}],"CJHG":[function(require,module,exports) {
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

/**
 * Javascript implementation of X.509 and related components (such as
 * Certification Signing Requests) of a Public Key Infrastructure.
 *
 * @author Dave Longley
 *
 * Copyright (c) 2010-2014 Digital Bazaar, Inc.
 *
 * The ASN.1 representation of an X.509v3 certificate is as follows
 * (see RFC 2459):
 *
 * Certificate ::= SEQUENCE {
 *   tbsCertificate       TBSCertificate,
 *   signatureAlgorithm   AlgorithmIdentifier,
 *   signatureValue       BIT STRING
 * }
 *
 * TBSCertificate ::= SEQUENCE {
 *   version         [0]  EXPLICIT Version DEFAULT v1,
 *   serialNumber         CertificateSerialNumber,
 *   signature            AlgorithmIdentifier,
 *   issuer               Name,
 *   validity             Validity,
 *   subject              Name,
 *   subjectPublicKeyInfo SubjectPublicKeyInfo,
 *   issuerUniqueID  [1]  IMPLICIT UniqueIdentifier OPTIONAL,
 *                        -- If present, version shall be v2 or v3
 *   subjectUniqueID [2]  IMPLICIT UniqueIdentifier OPTIONAL,
 *                        -- If present, version shall be v2 or v3
 *   extensions      [3]  EXPLICIT Extensions OPTIONAL
 *                        -- If present, version shall be v3
 * }
 *
 * Version ::= INTEGER  { v1(0), v2(1), v3(2) }
 *
 * CertificateSerialNumber ::= INTEGER
 *
 * Name ::= CHOICE {
 *   // only one possible choice for now
 *   RDNSequence
 * }
 *
 * RDNSequence ::= SEQUENCE OF RelativeDistinguishedName
 *
 * RelativeDistinguishedName ::= SET OF AttributeTypeAndValue
 *
 * AttributeTypeAndValue ::= SEQUENCE {
 *   type     AttributeType,
 *   value    AttributeValue
 * }
 * AttributeType ::= OBJECT IDENTIFIER
 * AttributeValue ::= ANY DEFINED BY AttributeType
 *
 * Validity ::= SEQUENCE {
 *   notBefore      Time,
 *   notAfter       Time
 * }
 *
 * Time ::= CHOICE {
 *   utcTime        UTCTime,
 *   generalTime    GeneralizedTime
 * }
 *
 * UniqueIdentifier ::= BIT STRING
 *
 * SubjectPublicKeyInfo ::= SEQUENCE {
 *   algorithm            AlgorithmIdentifier,
 *   subjectPublicKey     BIT STRING
 * }
 *
 * Extensions ::= SEQUENCE SIZE (1..MAX) OF Extension
 *
 * Extension ::= SEQUENCE {
 *   extnID      OBJECT IDENTIFIER,
 *   critical    BOOLEAN DEFAULT FALSE,
 *   extnValue   OCTET STRING
 * }
 *
 * The only key algorithm currently supported for PKI is RSA.
 *
 * RSASSA-PSS signatures are described in RFC 3447 and RFC 4055.
 *
 * PKCS#10 v1.7 describes certificate signing requests:
 *
 * CertificationRequestInfo:
 *
 * CertificationRequestInfo ::= SEQUENCE {
 *   version       INTEGER { v1(0) } (v1,...),
 *   subject       Name,
 *   subjectPKInfo SubjectPublicKeyInfo{{ PKInfoAlgorithms }},
 *   attributes    [0] Attributes{{ CRIAttributes }}
 * }
 *
 * Attributes { ATTRIBUTE:IOSet } ::= SET OF Attribute{{ IOSet }}
 *
 * CRIAttributes  ATTRIBUTE  ::= {
 *   ... -- add any locally defined attributes here -- }
 *
 * Attribute { ATTRIBUTE:IOSet } ::= SEQUENCE {
 *   type   ATTRIBUTE.&id({IOSet}),
 *   values SET SIZE(1..MAX) OF ATTRIBUTE.&Type({IOSet}{@type})
 * }
 *
 * CertificationRequest ::= SEQUENCE {
 *   certificationRequestInfo CertificationRequestInfo,
 *   signatureAlgorithm AlgorithmIdentifier{{ SignatureAlgorithms }},
 *   signature          BIT STRING
 * }
 */
var forge = require('./forge');

require('./aes');

require('./asn1');

require('./des');

require('./md');

require('./mgf');

require('./oids');

require('./pem');

require('./pss');

require('./rsa');

require('./util'); // shortcut for asn.1 API


var asn1 = forge.asn1;
/* Public Key Infrastructure (PKI) implementation. */

var pki = module.exports = forge.pki = forge.pki || {};
var oids = pki.oids; // short name OID mappings

var _shortNames = {};
_shortNames['CN'] = oids['commonName'];
_shortNames['commonName'] = 'CN';
_shortNames['C'] = oids['countryName'];
_shortNames['countryName'] = 'C';
_shortNames['L'] = oids['localityName'];
_shortNames['localityName'] = 'L';
_shortNames['ST'] = oids['stateOrProvinceName'];
_shortNames['stateOrProvinceName'] = 'ST';
_shortNames['O'] = oids['organizationName'];
_shortNames['organizationName'] = 'O';
_shortNames['OU'] = oids['organizationalUnitName'];
_shortNames['organizationalUnitName'] = 'OU';
_shortNames['E'] = oids['emailAddress'];
_shortNames['emailAddress'] = 'E'; // validator for an SubjectPublicKeyInfo structure
// Note: Currently only works with an RSA public key

var publicKeyValidator = forge.pki.rsa.publicKeyValidator; // validator for an X.509v3 certificate

var x509CertificateValidator = {
  name: 'Certificate',
  tagClass: asn1.Class.UNIVERSAL,
  type: asn1.Type.SEQUENCE,
  constructed: true,
  value: [{
    name: 'Certificate.TBSCertificate',
    tagClass: asn1.Class.UNIVERSAL,
    type: asn1.Type.SEQUENCE,
    constructed: true,
    captureAsn1: 'tbsCertificate',
    value: [{
      name: 'Certificate.TBSCertificate.version',
      tagClass: asn1.Class.CONTEXT_SPECIFIC,
      type: 0,
      constructed: true,
      optional: true,
      value: [{
        name: 'Certificate.TBSCertificate.version.integer',
        tagClass: asn1.Class.UNIVERSAL,
        type: asn1.Type.INTEGER,
        constructed: false,
        capture: 'certVersion'
      }]
    }, {
      name: 'Certificate.TBSCertificate.serialNumber',
      tagClass: asn1.Class.UNIVERSAL,
      type: asn1.Type.INTEGER,
      constructed: false,
      capture: 'certSerialNumber'
    }, {
      name: 'Certificate.TBSCertificate.signature',
      tagClass: asn1.Class.UNIVERSAL,
      type: asn1.Type.SEQUENCE,
      constructed: true,
      value: [{
        name: 'Certificate.TBSCertificate.signature.algorithm',
        tagClass: asn1.Class.UNIVERSAL,
        type: asn1.Type.OID,
        constructed: false,
        capture: 'certinfoSignatureOid'
      }, {
        name: 'Certificate.TBSCertificate.signature.parameters',
        tagClass: asn1.Class.UNIVERSAL,
        optional: true,
        captureAsn1: 'certinfoSignatureParams'
      }]
    }, {
      name: 'Certificate.TBSCertificate.issuer',
      tagClass: asn1.Class.UNIVERSAL,
      type: asn1.Type.SEQUENCE,
      constructed: true,
      captureAsn1: 'certIssuer'
    }, {
      name: 'Certificate.TBSCertificate.validity',
      tagClass: asn1.Class.UNIVERSAL,
      type: asn1.Type.SEQUENCE,
      constructed: true,
      // Note: UTC and generalized times may both appear so the capture
      // names are based on their detected order, the names used below
      // are only for the common case, which validity time really means
      // "notBefore" and which means "notAfter" will be determined by order
      value: [{
        // notBefore (Time) (UTC time case)
        name: 'Certificate.TBSCertificate.validity.notBefore (utc)',
        tagClass: asn1.Class.UNIVERSAL,
        type: asn1.Type.UTCTIME,
        constructed: false,
        optional: true,
        capture: 'certValidity1UTCTime'
      }, {
        // notBefore (Time) (generalized time case)
        name: 'Certificate.TBSCertificate.validity.notBefore (generalized)',
        tagClass: asn1.Class.UNIVERSAL,
        type: asn1.Type.GENERALIZEDTIME,
        constructed: false,
        optional: true,
        capture: 'certValidity2GeneralizedTime'
      }, {
        // notAfter (Time) (only UTC time is supported)
        name: 'Certificate.TBSCertificate.validity.notAfter (utc)',
        tagClass: asn1.Class.UNIVERSAL,
        type: asn1.Type.UTCTIME,
        constructed: false,
        optional: true,
        capture: 'certValidity3UTCTime'
      }, {
        // notAfter (Time) (only UTC time is supported)
        name: 'Certificate.TBSCertificate.validity.notAfter (generalized)',
        tagClass: asn1.Class.UNIVERSAL,
        type: asn1.Type.GENERALIZEDTIME,
        constructed: false,
        optional: true,
        capture: 'certValidity4GeneralizedTime'
      }]
    }, {
      // Name (subject) (RDNSequence)
      name: 'Certificate.TBSCertificate.subject',
      tagClass: asn1.Class.UNIVERSAL,
      type: asn1.Type.SEQUENCE,
      constructed: true,
      captureAsn1: 'certSubject'
    }, // SubjectPublicKeyInfo
    publicKeyValidator, {
      // issuerUniqueID (optional)
      name: 'Certificate.TBSCertificate.issuerUniqueID',
      tagClass: asn1.Class.CONTEXT_SPECIFIC,
      type: 1,
      constructed: true,
      optional: true,
      value: [{
        name: 'Certificate.TBSCertificate.issuerUniqueID.id',
        tagClass: asn1.Class.UNIVERSAL,
        type: asn1.Type.BITSTRING,
        constructed: false,
        // TODO: support arbitrary bit length ids
        captureBitStringValue: 'certIssuerUniqueId'
      }]
    }, {
      // subjectUniqueID (optional)
      name: 'Certificate.TBSCertificate.subjectUniqueID',
      tagClass: asn1.Class.CONTEXT_SPECIFIC,
      type: 2,
      constructed: true,
      optional: true,
      value: [{
        name: 'Certificate.TBSCertificate.subjectUniqueID.id',
        tagClass: asn1.Class.UNIVERSAL,
        type: asn1.Type.BITSTRING,
        constructed: false,
        // TODO: support arbitrary bit length ids
        captureBitStringValue: 'certSubjectUniqueId'
      }]
    }, {
      // Extensions (optional)
      name: 'Certificate.TBSCertificate.extensions',
      tagClass: asn1.Class.CONTEXT_SPECIFIC,
      type: 3,
      constructed: true,
      captureAsn1: 'certExtensions',
      optional: true
    }]
  }, {
    // AlgorithmIdentifier (signature algorithm)
    name: 'Certificate.signatureAlgorithm',
    tagClass: asn1.Class.UNIVERSAL,
    type: asn1.Type.SEQUENCE,
    constructed: true,
    value: [{
      // algorithm
      name: 'Certificate.signatureAlgorithm.algorithm',
      tagClass: asn1.Class.UNIVERSAL,
      type: asn1.Type.OID,
      constructed: false,
      capture: 'certSignatureOid'
    }, {
      name: 'Certificate.TBSCertificate.signature.parameters',
      tagClass: asn1.Class.UNIVERSAL,
      optional: true,
      captureAsn1: 'certSignatureParams'
    }]
  }, {
    // SignatureValue
    name: 'Certificate.signatureValue',
    tagClass: asn1.Class.UNIVERSAL,
    type: asn1.Type.BITSTRING,
    constructed: false,
    captureBitStringValue: 'certSignature'
  }]
};
var rsassaPssParameterValidator = {
  name: 'rsapss',
  tagClass: asn1.Class.UNIVERSAL,
  type: asn1.Type.SEQUENCE,
  constructed: true,
  value: [{
    name: 'rsapss.hashAlgorithm',
    tagClass: asn1.Class.CONTEXT_SPECIFIC,
    type: 0,
    constructed: true,
    value: [{
      name: 'rsapss.hashAlgorithm.AlgorithmIdentifier',
      tagClass: asn1.Class.UNIVERSAL,
      type: asn1.Class.SEQUENCE,
      constructed: true,
      optional: true,
      value: [{
        name: 'rsapss.hashAlgorithm.AlgorithmIdentifier.algorithm',
        tagClass: asn1.Class.UNIVERSAL,
        type: asn1.Type.OID,
        constructed: false,
        capture: 'hashOid'
        /* parameter block omitted, for SHA1 NULL anyhow. */

      }]
    }]
  }, {
    name: 'rsapss.maskGenAlgorithm',
    tagClass: asn1.Class.CONTEXT_SPECIFIC,
    type: 1,
    constructed: true,
    value: [{
      name: 'rsapss.maskGenAlgorithm.AlgorithmIdentifier',
      tagClass: asn1.Class.UNIVERSAL,
      type: asn1.Class.SEQUENCE,
      constructed: true,
      optional: true,
      value: [{
        name: 'rsapss.maskGenAlgorithm.AlgorithmIdentifier.algorithm',
        tagClass: asn1.Class.UNIVERSAL,
        type: asn1.Type.OID,
        constructed: false,
        capture: 'maskGenOid'
      }, {
        name: 'rsapss.maskGenAlgorithm.AlgorithmIdentifier.params',
        tagClass: asn1.Class.UNIVERSAL,
        type: asn1.Type.SEQUENCE,
        constructed: true,
        value: [{
          name: 'rsapss.maskGenAlgorithm.AlgorithmIdentifier.params.algorithm',
          tagClass: asn1.Class.UNIVERSAL,
          type: asn1.Type.OID,
          constructed: false,
          capture: 'maskGenHashOid'
          /* parameter block omitted, for SHA1 NULL anyhow. */

        }]
      }]
    }]
  }, {
    name: 'rsapss.saltLength',
    tagClass: asn1.Class.CONTEXT_SPECIFIC,
    type: 2,
    optional: true,
    value: [{
      name: 'rsapss.saltLength.saltLength',
      tagClass: asn1.Class.UNIVERSAL,
      type: asn1.Class.INTEGER,
      constructed: false,
      capture: 'saltLength'
    }]
  }, {
    name: 'rsapss.trailerField',
    tagClass: asn1.Class.CONTEXT_SPECIFIC,
    type: 3,
    optional: true,
    value: [{
      name: 'rsapss.trailer.trailer',
      tagClass: asn1.Class.UNIVERSAL,
      type: asn1.Class.INTEGER,
      constructed: false,
      capture: 'trailer'
    }]
  }]
}; // validator for a CertificationRequestInfo structure

var certificationRequestInfoValidator = {
  name: 'CertificationRequestInfo',
  tagClass: asn1.Class.UNIVERSAL,
  type: asn1.Type.SEQUENCE,
  constructed: true,
  captureAsn1: 'certificationRequestInfo',
  value: [{
    name: 'CertificationRequestInfo.integer',
    tagClass: asn1.Class.UNIVERSAL,
    type: asn1.Type.INTEGER,
    constructed: false,
    capture: 'certificationRequestInfoVersion'
  }, {
    // Name (subject) (RDNSequence)
    name: 'CertificationRequestInfo.subject',
    tagClass: asn1.Class.UNIVERSAL,
    type: asn1.Type.SEQUENCE,
    constructed: true,
    captureAsn1: 'certificationRequestInfoSubject'
  }, // SubjectPublicKeyInfo
  publicKeyValidator, {
    name: 'CertificationRequestInfo.attributes',
    tagClass: asn1.Class.CONTEXT_SPECIFIC,
    type: 0,
    constructed: true,
    optional: true,
    capture: 'certificationRequestInfoAttributes',
    value: [{
      name: 'CertificationRequestInfo.attributes',
      tagClass: asn1.Class.UNIVERSAL,
      type: asn1.Type.SEQUENCE,
      constructed: true,
      value: [{
        name: 'CertificationRequestInfo.attributes.type',
        tagClass: asn1.Class.UNIVERSAL,
        type: asn1.Type.OID,
        constructed: false
      }, {
        name: 'CertificationRequestInfo.attributes.value',
        tagClass: asn1.Class.UNIVERSAL,
        type: asn1.Type.SET,
        constructed: true
      }]
    }]
  }]
}; // validator for a CertificationRequest structure

var certificationRequestValidator = {
  name: 'CertificationRequest',
  tagClass: asn1.Class.UNIVERSAL,
  type: asn1.Type.SEQUENCE,
  constructed: true,
  captureAsn1: 'csr',
  value: [certificationRequestInfoValidator, {
    // AlgorithmIdentifier (signature algorithm)
    name: 'CertificationRequest.signatureAlgorithm',
    tagClass: asn1.Class.UNIVERSAL,
    type: asn1.Type.SEQUENCE,
    constructed: true,
    value: [{
      // algorithm
      name: 'CertificationRequest.signatureAlgorithm.algorithm',
      tagClass: asn1.Class.UNIVERSAL,
      type: asn1.Type.OID,
      constructed: false,
      capture: 'csrSignatureOid'
    }, {
      name: 'CertificationRequest.signatureAlgorithm.parameters',
      tagClass: asn1.Class.UNIVERSAL,
      optional: true,
      captureAsn1: 'csrSignatureParams'
    }]
  }, {
    // signature
    name: 'CertificationRequest.signature',
    tagClass: asn1.Class.UNIVERSAL,
    type: asn1.Type.BITSTRING,
    constructed: false,
    captureBitStringValue: 'csrSignature'
  }]
};
/**
 * Converts an RDNSequence of ASN.1 DER-encoded RelativeDistinguishedName
 * sets into an array with objects that have type and value properties.
 *
 * @param rdn the RDNSequence to convert.
 * @param md a message digest to append type and value to if provided.
 */

pki.RDNAttributesAsArray = function (rdn, md) {
  var rval = []; // each value in 'rdn' in is a SET of RelativeDistinguishedName

  var set, attr, obj;

  for (var si = 0; si < rdn.value.length; ++si) {
    // get the RelativeDistinguishedName set
    set = rdn.value[si]; // each value in the SET is an AttributeTypeAndValue sequence
    // containing first a type (an OID) and second a value (defined by
    // the OID)

    for (var i = 0; i < set.value.length; ++i) {
      obj = {};
      attr = set.value[i];
      obj.type = asn1.derToOid(attr.value[0].value);
      obj.value = attr.value[1].value;
      obj.valueTagClass = attr.value[1].type; // if the OID is known, get its name and short name

      if (obj.type in oids) {
        obj.name = oids[obj.type];

        if (obj.name in _shortNames) {
          obj.shortName = _shortNames[obj.name];
        }
      }

      if (md) {
        md.update(obj.type);
        md.update(obj.value);
      }

      rval.push(obj);
    }
  }

  return rval;
};
/**
 * Converts ASN.1 CRIAttributes into an array with objects that have type and
 * value properties.
 *
 * @param attributes the CRIAttributes to convert.
 */


pki.CRIAttributesAsArray = function (attributes) {
  var rval = []; // each value in 'attributes' in is a SEQUENCE with an OID and a SET

  for (var si = 0; si < attributes.length; ++si) {
    // get the attribute sequence
    var seq = attributes[si]; // each value in the SEQUENCE containing first a type (an OID) and
    // second a set of values (defined by the OID)

    var type = asn1.derToOid(seq.value[0].value);
    var values = seq.value[1].value;

    for (var vi = 0; vi < values.length; ++vi) {
      var obj = {};
      obj.type = type;
      obj.value = values[vi].value;
      obj.valueTagClass = values[vi].type; // if the OID is known, get its name and short name

      if (obj.type in oids) {
        obj.name = oids[obj.type];

        if (obj.name in _shortNames) {
          obj.shortName = _shortNames[obj.name];
        }
      } // parse extensions


      if (obj.type === oids.extensionRequest) {
        obj.extensions = [];

        for (var ei = 0; ei < obj.value.length; ++ei) {
          obj.extensions.push(pki.certificateExtensionFromAsn1(obj.value[ei]));
        }
      }

      rval.push(obj);
    }
  }

  return rval;
};
/**
 * Gets an issuer or subject attribute from its name, type, or short name.
 *
 * @param obj the issuer or subject object.
 * @param options a short name string or an object with:
 *          shortName the short name for the attribute.
 *          name the name for the attribute.
 *          type the type for the attribute.
 *
 * @return the attribute.
 */


function _getAttribute(obj, options) {
  if (typeof options === 'string') {
    options = {
      shortName: options
    };
  }

  var rval = null;
  var attr;

  for (var i = 0; rval === null && i < obj.attributes.length; ++i) {
    attr = obj.attributes[i];

    if (options.type && options.type === attr.type) {
      rval = attr;
    } else if (options.name && options.name === attr.name) {
      rval = attr;
    } else if (options.shortName && options.shortName === attr.shortName) {
      rval = attr;
    }
  }

  return rval;
}
/**
 * Converts signature parameters from ASN.1 structure.
 *
 * Currently only RSASSA-PSS supported.  The PKCS#1 v1.5 signature scheme had
 * no parameters.
 *
 * RSASSA-PSS-params  ::=  SEQUENCE  {
 *   hashAlgorithm      [0] HashAlgorithm DEFAULT
 *                             sha1Identifier,
 *   maskGenAlgorithm   [1] MaskGenAlgorithm DEFAULT
 *                             mgf1SHA1Identifier,
 *   saltLength         [2] INTEGER DEFAULT 20,
 *   trailerField       [3] INTEGER DEFAULT 1
 * }
 *
 * HashAlgorithm  ::=  AlgorithmIdentifier
 *
 * MaskGenAlgorithm  ::=  AlgorithmIdentifier
 *
 * AlgorithmIdentifer ::= SEQUENCE {
 *   algorithm OBJECT IDENTIFIER,
 *   parameters ANY DEFINED BY algorithm OPTIONAL
 * }
 *
 * @param oid The OID specifying the signature algorithm
 * @param obj The ASN.1 structure holding the parameters
 * @param fillDefaults Whether to use return default values where omitted
 * @return signature parameter object
 */


var _readSignatureParameters = function (oid, obj, fillDefaults) {
  var params = {};

  if (oid !== oids['RSASSA-PSS']) {
    return params;
  }

  if (fillDefaults) {
    params = {
      hash: {
        algorithmOid: oids['sha1']
      },
      mgf: {
        algorithmOid: oids['mgf1'],
        hash: {
          algorithmOid: oids['sha1']
        }
      },
      saltLength: 20
    };
  }

  var capture = {};
  var errors = [];

  if (!asn1.validate(obj, rsassaPssParameterValidator, capture, errors)) {
    var error = new Error('Cannot read RSASSA-PSS parameter block.');
    error.errors = errors;
    throw error;
  }

  if (capture.hashOid !== undefined) {
    params.hash = params.hash || {};
    params.hash.algorithmOid = asn1.derToOid(capture.hashOid);
  }

  if (capture.maskGenOid !== undefined) {
    params.mgf = params.mgf || {};
    params.mgf.algorithmOid = asn1.derToOid(capture.maskGenOid);
    params.mgf.hash = params.mgf.hash || {};
    params.mgf.hash.algorithmOid = asn1.derToOid(capture.maskGenHashOid);
  }

  if (capture.saltLength !== undefined) {
    params.saltLength = capture.saltLength.charCodeAt(0);
  }

  return params;
};
/**
 * Converts an X.509 certificate from PEM format.
 *
 * Note: If the certificate is to be verified then compute hash should
 * be set to true. This will scan the TBSCertificate part of the ASN.1
 * object while it is converted so it doesn't need to be converted back
 * to ASN.1-DER-encoding later.
 *
 * @param pem the PEM-formatted certificate.
 * @param computeHash true to compute the hash for verification.
 * @param strict true to be strict when checking ASN.1 value lengths, false to
 *          allow truncated values (default: true).
 *
 * @return the certificate.
 */


pki.certificateFromPem = function (pem, computeHash, strict) {
  var msg = forge.pem.decode(pem)[0];

  if (msg.type !== 'CERTIFICATE' && msg.type !== 'X509 CERTIFICATE' && msg.type !== 'TRUSTED CERTIFICATE') {
    var error = new Error('Could not convert certificate from PEM; PEM header type ' + 'is not "CERTIFICATE", "X509 CERTIFICATE", or "TRUSTED CERTIFICATE".');
    error.headerType = msg.type;
    throw error;
  }

  if (msg.procType && msg.procType.type === 'ENCRYPTED') {
    throw new Error('Could not convert certificate from PEM; PEM is encrypted.');
  } // convert DER to ASN.1 object


  var obj = asn1.fromDer(msg.body, strict);
  return pki.certificateFromAsn1(obj, computeHash);
};
/**
 * Converts an X.509 certificate to PEM format.
 *
 * @param cert the certificate.
 * @param maxline the maximum characters per line, defaults to 64.
 *
 * @return the PEM-formatted certificate.
 */


pki.certificateToPem = function (cert, maxline) {
  // convert to ASN.1, then DER, then PEM-encode
  var msg = {
    type: 'CERTIFICATE',
    body: asn1.toDer(pki.certificateToAsn1(cert)).getBytes()
  };
  return forge.pem.encode(msg, {
    maxline: maxline
  });
};
/**
 * Converts an RSA public key from PEM format.
 *
 * @param pem the PEM-formatted public key.
 *
 * @return the public key.
 */


pki.publicKeyFromPem = function (pem) {
  var msg = forge.pem.decode(pem)[0];

  if (msg.type !== 'PUBLIC KEY' && msg.type !== 'RSA PUBLIC KEY') {
    var error = new Error('Could not convert public key from PEM; PEM header ' + 'type is not "PUBLIC KEY" or "RSA PUBLIC KEY".');
    error.headerType = msg.type;
    throw error;
  }

  if (msg.procType && msg.procType.type === 'ENCRYPTED') {
    throw new Error('Could not convert public key from PEM; PEM is encrypted.');
  } // convert DER to ASN.1 object


  var obj = asn1.fromDer(msg.body);
  return pki.publicKeyFromAsn1(obj);
};
/**
 * Converts an RSA public key to PEM format (using a SubjectPublicKeyInfo).
 *
 * @param key the public key.
 * @param maxline the maximum characters per line, defaults to 64.
 *
 * @return the PEM-formatted public key.
 */


pki.publicKeyToPem = function (key, maxline) {
  // convert to ASN.1, then DER, then PEM-encode
  var msg = {
    type: 'PUBLIC KEY',
    body: asn1.toDer(pki.publicKeyToAsn1(key)).getBytes()
  };
  return forge.pem.encode(msg, {
    maxline: maxline
  });
};
/**
 * Converts an RSA public key to PEM format (using an RSAPublicKey).
 *
 * @param key the public key.
 * @param maxline the maximum characters per line, defaults to 64.
 *
 * @return the PEM-formatted public key.
 */


pki.publicKeyToRSAPublicKeyPem = function (key, maxline) {
  // convert to ASN.1, then DER, then PEM-encode
  var msg = {
    type: 'RSA PUBLIC KEY',
    body: asn1.toDer(pki.publicKeyToRSAPublicKey(key)).getBytes()
  };
  return forge.pem.encode(msg, {
    maxline: maxline
  });
};
/**
 * Gets a fingerprint for the given public key.
 *
 * @param options the options to use.
 *          [md] the message digest object to use (defaults to forge.md.sha1).
 *          [type] the type of fingerprint, such as 'RSAPublicKey',
 *            'SubjectPublicKeyInfo' (defaults to 'RSAPublicKey').
 *          [encoding] an alternative output encoding, such as 'hex'
 *            (defaults to none, outputs a byte buffer).
 *          [delimiter] the delimiter to use between bytes for 'hex' encoded
 *            output, eg: ':' (defaults to none).
 *
 * @return the fingerprint as a byte buffer or other encoding based on options.
 */


pki.getPublicKeyFingerprint = function (key, options) {
  options = options || {};
  var md = options.md || forge.md.sha1.create();
  var type = options.type || 'RSAPublicKey';
  var bytes;

  switch (type) {
    case 'RSAPublicKey':
      bytes = asn1.toDer(pki.publicKeyToRSAPublicKey(key)).getBytes();
      break;

    case 'SubjectPublicKeyInfo':
      bytes = asn1.toDer(pki.publicKeyToAsn1(key)).getBytes();
      break;

    default:
      throw new Error('Unknown fingerprint type "' + options.type + '".');
  } // hash public key bytes


  md.start();
  md.update(bytes);
  var digest = md.digest();

  if (options.encoding === 'hex') {
    var hex = digest.toHex();

    if (options.delimiter) {
      return hex.match(/.{2}/g).join(options.delimiter);
    }

    return hex;
  } else if (options.encoding === 'binary') {
    return digest.getBytes();
  } else if (options.encoding) {
    throw new Error('Unknown encoding "' + options.encoding + '".');
  }

  return digest;
};
/**
 * Converts a PKCS#10 certification request (CSR) from PEM format.
 *
 * Note: If the certification request is to be verified then compute hash
 * should be set to true. This will scan the CertificationRequestInfo part of
 * the ASN.1 object while it is converted so it doesn't need to be converted
 * back to ASN.1-DER-encoding later.
 *
 * @param pem the PEM-formatted certificate.
 * @param computeHash true to compute the hash for verification.
 * @param strict true to be strict when checking ASN.1 value lengths, false to
 *          allow truncated values (default: true).
 *
 * @return the certification request (CSR).
 */


pki.certificationRequestFromPem = function (pem, computeHash, strict) {
  var msg = forge.pem.decode(pem)[0];

  if (msg.type !== 'CERTIFICATE REQUEST') {
    var error = new Error('Could not convert certification request from PEM; ' + 'PEM header type is not "CERTIFICATE REQUEST".');
    error.headerType = msg.type;
    throw error;
  }

  if (msg.procType && msg.procType.type === 'ENCRYPTED') {
    throw new Error('Could not convert certification request from PEM; ' + 'PEM is encrypted.');
  } // convert DER to ASN.1 object


  var obj = asn1.fromDer(msg.body, strict);
  return pki.certificationRequestFromAsn1(obj, computeHash);
};
/**
 * Converts a PKCS#10 certification request (CSR) to PEM format.
 *
 * @param csr the certification request.
 * @param maxline the maximum characters per line, defaults to 64.
 *
 * @return the PEM-formatted certification request.
 */


pki.certificationRequestToPem = function (csr, maxline) {
  // convert to ASN.1, then DER, then PEM-encode
  var msg = {
    type: 'CERTIFICATE REQUEST',
    body: asn1.toDer(pki.certificationRequestToAsn1(csr)).getBytes()
  };
  return forge.pem.encode(msg, {
    maxline: maxline
  });
};
/**
 * Creates an empty X.509v3 RSA certificate.
 *
 * @return the certificate.
 */


pki.createCertificate = function () {
  var cert = {};
  cert.version = 0x02;
  cert.serialNumber = '00';
  cert.signatureOid = null;
  cert.signature = null;
  cert.siginfo = {};
  cert.siginfo.algorithmOid = null;
  cert.validity = {};
  cert.validity.notBefore = new Date();
  cert.validity.notAfter = new Date();
  cert.issuer = {};

  cert.issuer.getField = function (sn) {
    return _getAttribute(cert.issuer, sn);
  };

  cert.issuer.addField = function (attr) {
    _fillMissingFields([attr]);

    cert.issuer.attributes.push(attr);
  };

  cert.issuer.attributes = [];
  cert.issuer.hash = null;
  cert.subject = {};

  cert.subject.getField = function (sn) {
    return _getAttribute(cert.subject, sn);
  };

  cert.subject.addField = function (attr) {
    _fillMissingFields([attr]);

    cert.subject.attributes.push(attr);
  };

  cert.subject.attributes = [];
  cert.subject.hash = null;
  cert.extensions = [];
  cert.publicKey = null;
  cert.md = null;
  /**
   * Sets the subject of this certificate.
   *
   * @param attrs the array of subject attributes to use.
   * @param uniqueId an optional a unique ID to use.
   */

  cert.setSubject = function (attrs, uniqueId) {
    // set new attributes, clear hash
    _fillMissingFields(attrs);

    cert.subject.attributes = attrs;
    delete cert.subject.uniqueId;

    if (uniqueId) {
      // TODO: support arbitrary bit length ids
      cert.subject.uniqueId = uniqueId;
    }

    cert.subject.hash = null;
  };
  /**
   * Sets the issuer of this certificate.
   *
   * @param attrs the array of issuer attributes to use.
   * @param uniqueId an optional a unique ID to use.
   */


  cert.setIssuer = function (attrs, uniqueId) {
    // set new attributes, clear hash
    _fillMissingFields(attrs);

    cert.issuer.attributes = attrs;
    delete cert.issuer.uniqueId;

    if (uniqueId) {
      // TODO: support arbitrary bit length ids
      cert.issuer.uniqueId = uniqueId;
    }

    cert.issuer.hash = null;
  };
  /**
   * Sets the extensions of this certificate.
   *
   * @param exts the array of extensions to use.
   */


  cert.setExtensions = function (exts) {
    for (var i = 0; i < exts.length; ++i) {
      _fillMissingExtensionFields(exts[i], {
        cert: cert
      });
    } // set new extensions


    cert.extensions = exts;
  };
  /**
   * Gets an extension by its name or id.
   *
   * @param options the name to use or an object with:
   *          name the name to use.
   *          id the id to use.
   *
   * @return the extension or null if not found.
   */


  cert.getExtension = function (options) {
    if (typeof options === 'string') {
      options = {
        name: options
      };
    }

    var rval = null;
    var ext;

    for (var i = 0; rval === null && i < cert.extensions.length; ++i) {
      ext = cert.extensions[i];

      if (options.id && ext.id === options.id) {
        rval = ext;
      } else if (options.name && ext.name === options.name) {
        rval = ext;
      }
    }

    return rval;
  };
  /**
   * Signs this certificate using the given private key.
   *
   * @param key the private key to sign with.
   * @param md the message digest object to use (defaults to forge.md.sha1).
   */


  cert.sign = function (key, md) {
    // TODO: get signature OID from private key
    cert.md = md || forge.md.sha1.create();
    var algorithmOid = oids[cert.md.algorithm + 'WithRSAEncryption'];

    if (!algorithmOid) {
      var error = new Error('Could not compute certificate digest. ' + 'Unknown message digest algorithm OID.');
      error.algorithm = cert.md.algorithm;
      throw error;
    }

    cert.signatureOid = cert.siginfo.algorithmOid = algorithmOid; // get TBSCertificate, convert to DER

    cert.tbsCertificate = pki.getTBSCertificate(cert);
    var bytes = asn1.toDer(cert.tbsCertificate); // digest and sign

    cert.md.update(bytes.getBytes());
    cert.signature = key.sign(cert.md);
  };
  /**
   * Attempts verify the signature on the passed certificate using this
   * certificate's public key.
   *
   * @param child the certificate to verify.
   *
   * @return true if verified, false if not.
   */


  cert.verify = function (child) {
    var rval = false;

    if (!cert.issued(child)) {
      var issuer = child.issuer;
      var subject = cert.subject;
      var error = new Error('The parent certificate did not issue the given child ' + 'certificate; the child certificate\'s issuer does not match the ' + 'parent\'s subject.');
      error.expectedIssuer = issuer.attributes;
      error.actualIssuer = subject.attributes;
      throw error;
    }

    var md = child.md;

    if (md === null) {
      // check signature OID for supported signature types
      if (child.signatureOid in oids) {
        var oid = oids[child.signatureOid];

        switch (oid) {
          case 'sha1WithRSAEncryption':
            md = forge.md.sha1.create();
            break;

          case 'md5WithRSAEncryption':
            md = forge.md.md5.create();
            break;

          case 'sha256WithRSAEncryption':
            md = forge.md.sha256.create();
            break;

          case 'sha384WithRSAEncryption':
            md = forge.md.sha384.create();
            break;

          case 'sha512WithRSAEncryption':
            md = forge.md.sha512.create();
            break;

          case 'RSASSA-PSS':
            md = forge.md.sha256.create();
            break;
        }
      }

      if (md === null) {
        var error = new Error('Could not compute certificate digest. ' + 'Unknown signature OID.');
        error.signatureOid = child.signatureOid;
        throw error;
      } // produce DER formatted TBSCertificate and digest it


      var tbsCertificate = child.tbsCertificate || pki.getTBSCertificate(child);
      var bytes = asn1.toDer(tbsCertificate);
      md.update(bytes.getBytes());
    }

    if (md !== null) {
      var scheme;

      switch (child.signatureOid) {
        case oids.sha1WithRSAEncryption:
          scheme = undefined;
          /* use PKCS#1 v1.5 padding scheme */

          break;

        case oids['RSASSA-PSS']:
          var hash, mgf;
          /* initialize mgf */

          hash = oids[child.signatureParameters.mgf.hash.algorithmOid];

          if (hash === undefined || forge.md[hash] === undefined) {
            var error = new Error('Unsupported MGF hash function.');
            error.oid = child.signatureParameters.mgf.hash.algorithmOid;
            error.name = hash;
            throw error;
          }

          mgf = oids[child.signatureParameters.mgf.algorithmOid];

          if (mgf === undefined || forge.mgf[mgf] === undefined) {
            var error = new Error('Unsupported MGF function.');
            error.oid = child.signatureParameters.mgf.algorithmOid;
            error.name = mgf;
            throw error;
          }

          mgf = forge.mgf[mgf].create(forge.md[hash].create());
          /* initialize hash function */

          hash = oids[child.signatureParameters.hash.algorithmOid];

          if (hash === undefined || forge.md[hash] === undefined) {
            throw {
              message: 'Unsupported RSASSA-PSS hash function.',
              oid: child.signatureParameters.hash.algorithmOid,
              name: hash
            };
          }

          scheme = forge.pss.create(forge.md[hash].create(), mgf, child.signatureParameters.saltLength);
          break;
      } // verify signature on cert using public key


      rval = cert.publicKey.verify(md.digest().getBytes(), child.signature, scheme);
    }

    return rval;
  };
  /**
   * Returns true if this certificate's issuer matches the passed
   * certificate's subject. Note that no signature check is performed.
   *
   * @param parent the certificate to check.
   *
   * @return true if this certificate's issuer matches the passed certificate's
   *         subject.
   */


  cert.isIssuer = function (parent) {
    var rval = false;
    var i = cert.issuer;
    var s = parent.subject; // compare hashes if present

    if (i.hash && s.hash) {
      rval = i.hash === s.hash;
    } else if (i.attributes.length === s.attributes.length) {
      // all attributes are the same so issuer matches subject
      rval = true;
      var iattr, sattr;

      for (var n = 0; rval && n < i.attributes.length; ++n) {
        iattr = i.attributes[n];
        sattr = s.attributes[n];

        if (iattr.type !== sattr.type || iattr.value !== sattr.value) {
          // attribute mismatch
          rval = false;
        }
      }
    }

    return rval;
  };
  /**
   * Returns true if this certificate's subject matches the issuer of the
   * given certificate). Note that not signature check is performed.
   *
   * @param child the certificate to check.
   *
   * @return true if this certificate's subject matches the passed
   *         certificate's issuer.
   */


  cert.issued = function (child) {
    return child.isIssuer(cert);
  };
  /**
   * Generates the subjectKeyIdentifier for this certificate as byte buffer.
   *
   * @return the subjectKeyIdentifier for this certificate as byte buffer.
   */


  cert.generateSubjectKeyIdentifier = function () {
    /* See: 4.2.1.2 section of the the RFC3280, keyIdentifier is either:
       (1) The keyIdentifier is composed of the 160-bit SHA-1 hash of the
        value of the BIT STRING subjectPublicKey (excluding the tag,
        length, and number of unused bits).
       (2) The keyIdentifier is composed of a four bit type field with
        the value 0100 followed by the least significant 60 bits of the
        SHA-1 hash of the value of the BIT STRING subjectPublicKey
        (excluding the tag, length, and number of unused bit string bits).
    */
    // skipping the tag, length, and number of unused bits is the same
    // as just using the RSAPublicKey (for RSA keys, which are the
    // only ones supported)
    return pki.getPublicKeyFingerprint(cert.publicKey, {
      type: 'RSAPublicKey'
    });
  };
  /**
   * Verifies the subjectKeyIdentifier extension value for this certificate
   * against its public key. If no extension is found, false will be
   * returned.
   *
   * @return true if verified, false if not.
   */


  cert.verifySubjectKeyIdentifier = function () {
    var oid = oids['subjectKeyIdentifier'];

    for (var i = 0; i < cert.extensions.length; ++i) {
      var ext = cert.extensions[i];

      if (ext.id === oid) {
        var ski = cert.generateSubjectKeyIdentifier().getBytes();
        return forge.util.hexToBytes(ext.subjectKeyIdentifier) === ski;
      }
    }

    return false;
  };

  return cert;
};
/**
 * Converts an X.509v3 RSA certificate from an ASN.1 object.
 *
 * Note: If the certificate is to be verified then compute hash should
 * be set to true. There is currently no implementation for converting
 * a certificate back to ASN.1 so the TBSCertificate part of the ASN.1
 * object needs to be scanned before the cert object is created.
 *
 * @param obj the asn1 representation of an X.509v3 RSA certificate.
 * @param computeHash true to compute the hash for verification.
 *
 * @return the certificate.
 */


pki.certificateFromAsn1 = function (obj, computeHash) {
  // validate certificate and capture data
  var capture = {};
  var errors = [];

  if (!asn1.validate(obj, x509CertificateValidator, capture, errors)) {
    var error = new Error('Cannot read X.509 certificate. ' + 'ASN.1 object is not an X509v3 Certificate.');
    error.errors = errors;
    throw error;
  } // get oid


  var oid = asn1.derToOid(capture.publicKeyOid);

  if (oid !== pki.oids.rsaEncryption) {
    throw new Error('Cannot read public key. OID is not RSA.');
  } // create certificate


  var cert = pki.createCertificate();
  cert.version = capture.certVersion ? capture.certVersion.charCodeAt(0) : 0;
  var serial = forge.util.createBuffer(capture.certSerialNumber);
  cert.serialNumber = serial.toHex();
  cert.signatureOid = forge.asn1.derToOid(capture.certSignatureOid);
  cert.signatureParameters = _readSignatureParameters(cert.signatureOid, capture.certSignatureParams, true);
  cert.siginfo.algorithmOid = forge.asn1.derToOid(capture.certinfoSignatureOid);
  cert.siginfo.parameters = _readSignatureParameters(cert.siginfo.algorithmOid, capture.certinfoSignatureParams, false);
  cert.signature = capture.certSignature;
  var validity = [];

  if (capture.certValidity1UTCTime !== undefined) {
    validity.push(asn1.utcTimeToDate(capture.certValidity1UTCTime));
  }

  if (capture.certValidity2GeneralizedTime !== undefined) {
    validity.push(asn1.generalizedTimeToDate(capture.certValidity2GeneralizedTime));
  }

  if (capture.certValidity3UTCTime !== undefined) {
    validity.push(asn1.utcTimeToDate(capture.certValidity3UTCTime));
  }

  if (capture.certValidity4GeneralizedTime !== undefined) {
    validity.push(asn1.generalizedTimeToDate(capture.certValidity4GeneralizedTime));
  }

  if (validity.length > 2) {
    throw new Error('Cannot read notBefore/notAfter validity times; more ' + 'than two times were provided in the certificate.');
  }

  if (validity.length < 2) {
    throw new Error('Cannot read notBefore/notAfter validity times; they ' + 'were not provided as either UTCTime or GeneralizedTime.');
  }

  cert.validity.notBefore = validity[0];
  cert.validity.notAfter = validity[1]; // keep TBSCertificate to preserve signature when exporting

  cert.tbsCertificate = capture.tbsCertificate;

  if (computeHash) {
    // check signature OID for supported signature types
    cert.md = null;

    if (cert.signatureOid in oids) {
      var oid = oids[cert.signatureOid];

      switch (oid) {
        case 'sha1WithRSAEncryption':
          cert.md = forge.md.sha1.create();
          break;

        case 'md5WithRSAEncryption':
          cert.md = forge.md.md5.create();
          break;

        case 'sha256WithRSAEncryption':
          cert.md = forge.md.sha256.create();
          break;

        case 'sha384WithRSAEncryption':
          cert.md = forge.md.sha384.create();
          break;

        case 'sha512WithRSAEncryption':
          cert.md = forge.md.sha512.create();
          break;

        case 'RSASSA-PSS':
          cert.md = forge.md.sha256.create();
          break;
      }
    }

    if (cert.md === null) {
      var error = new Error('Could not compute certificate digest. ' + 'Unknown signature OID.');
      error.signatureOid = cert.signatureOid;
      throw error;
    } // produce DER formatted TBSCertificate and digest it


    var bytes = asn1.toDer(cert.tbsCertificate);
    cert.md.update(bytes.getBytes());
  } // handle issuer, build issuer message digest


  var imd = forge.md.sha1.create();

  cert.issuer.getField = function (sn) {
    return _getAttribute(cert.issuer, sn);
  };

  cert.issuer.addField = function (attr) {
    _fillMissingFields([attr]);

    cert.issuer.attributes.push(attr);
  };

  cert.issuer.attributes = pki.RDNAttributesAsArray(capture.certIssuer, imd);

  if (capture.certIssuerUniqueId) {
    cert.issuer.uniqueId = capture.certIssuerUniqueId;
  }

  cert.issuer.hash = imd.digest().toHex(); // handle subject, build subject message digest

  var smd = forge.md.sha1.create();

  cert.subject.getField = function (sn) {
    return _getAttribute(cert.subject, sn);
  };

  cert.subject.addField = function (attr) {
    _fillMissingFields([attr]);

    cert.subject.attributes.push(attr);
  };

  cert.subject.attributes = pki.RDNAttributesAsArray(capture.certSubject, smd);

  if (capture.certSubjectUniqueId) {
    cert.subject.uniqueId = capture.certSubjectUniqueId;
  }

  cert.subject.hash = smd.digest().toHex(); // handle extensions

  if (capture.certExtensions) {
    cert.extensions = pki.certificateExtensionsFromAsn1(capture.certExtensions);
  } else {
    cert.extensions = [];
  } // convert RSA public key from ASN.1


  cert.publicKey = pki.publicKeyFromAsn1(capture.subjectPublicKeyInfo);
  return cert;
};
/**
 * Converts an ASN.1 extensions object (with extension sequences as its
 * values) into an array of extension objects with types and values.
 *
 * Supported extensions:
 *
 * id-ce-keyUsage OBJECT IDENTIFIER ::=  { id-ce 15 }
 * KeyUsage ::= BIT STRING {
 *   digitalSignature        (0),
 *   nonRepudiation          (1),
 *   keyEncipherment         (2),
 *   dataEncipherment        (3),
 *   keyAgreement            (4),
 *   keyCertSign             (5),
 *   cRLSign                 (6),
 *   encipherOnly            (7),
 *   decipherOnly            (8)
 * }
 *
 * id-ce-basicConstraints OBJECT IDENTIFIER ::=  { id-ce 19 }
 * BasicConstraints ::= SEQUENCE {
 *   cA                      BOOLEAN DEFAULT FALSE,
 *   pathLenConstraint       INTEGER (0..MAX) OPTIONAL
 * }
 *
 * subjectAltName EXTENSION ::= {
 *   SYNTAX GeneralNames
 *   IDENTIFIED BY id-ce-subjectAltName
 * }
 *
 * GeneralNames ::= SEQUENCE SIZE (1..MAX) OF GeneralName
 *
 * GeneralName ::= CHOICE {
 *   otherName      [0] INSTANCE OF OTHER-NAME,
 *   rfc822Name     [1] IA5String,
 *   dNSName        [2] IA5String,
 *   x400Address    [3] ORAddress,
 *   directoryName  [4] Name,
 *   ediPartyName   [5] EDIPartyName,
 *   uniformResourceIdentifier [6] IA5String,
 *   IPAddress      [7] OCTET STRING,
 *   registeredID   [8] OBJECT IDENTIFIER
 * }
 *
 * OTHER-NAME ::= TYPE-IDENTIFIER
 *
 * EDIPartyName ::= SEQUENCE {
 *   nameAssigner [0] DirectoryString {ub-name} OPTIONAL,
 *   partyName    [1] DirectoryString {ub-name}
 * }
 *
 * @param exts the extensions ASN.1 with extension sequences to parse.
 *
 * @return the array.
 */


pki.certificateExtensionsFromAsn1 = function (exts) {
  var rval = [];

  for (var i = 0; i < exts.value.length; ++i) {
    // get extension sequence
    var extseq = exts.value[i];

    for (var ei = 0; ei < extseq.value.length; ++ei) {
      rval.push(pki.certificateExtensionFromAsn1(extseq.value[ei]));
    }
  }

  return rval;
};
/**
 * Parses a single certificate extension from ASN.1.
 *
 * @param ext the extension in ASN.1 format.
 *
 * @return the parsed extension as an object.
 */


pki.certificateExtensionFromAsn1 = function (ext) {
  // an extension has:
  // [0] extnID      OBJECT IDENTIFIER
  // [1] critical    BOOLEAN DEFAULT FALSE
  // [2] extnValue   OCTET STRING
  var e = {};
  e.id = asn1.derToOid(ext.value[0].value);
  e.critical = false;

  if (ext.value[1].type === asn1.Type.BOOLEAN) {
    e.critical = ext.value[1].value.charCodeAt(0) !== 0x00;
    e.value = ext.value[2].value;
  } else {
    e.value = ext.value[1].value;
  } // if the oid is known, get its name


  if (e.id in oids) {
    e.name = oids[e.id]; // handle key usage

    if (e.name === 'keyUsage') {
      // get value as BIT STRING
      var ev = asn1.fromDer(e.value);
      var b2 = 0x00;
      var b3 = 0x00;

      if (ev.value.length > 1) {
        // skip first byte, just indicates unused bits which
        // will be padded with 0s anyway
        // get bytes with flag bits
        b2 = ev.value.charCodeAt(1);
        b3 = ev.value.length > 2 ? ev.value.charCodeAt(2) : 0;
      } // set flags


      e.digitalSignature = (b2 & 0x80) === 0x80;
      e.nonRepudiation = (b2 & 0x40) === 0x40;
      e.keyEncipherment = (b2 & 0x20) === 0x20;
      e.dataEncipherment = (b2 & 0x10) === 0x10;
      e.keyAgreement = (b2 & 0x08) === 0x08;
      e.keyCertSign = (b2 & 0x04) === 0x04;
      e.cRLSign = (b2 & 0x02) === 0x02;
      e.encipherOnly = (b2 & 0x01) === 0x01;
      e.decipherOnly = (b3 & 0x80) === 0x80;
    } else if (e.name === 'basicConstraints') {
      // handle basic constraints
      // get value as SEQUENCE
      var ev = asn1.fromDer(e.value); // get cA BOOLEAN flag (defaults to false)

      if (ev.value.length > 0 && ev.value[0].type === asn1.Type.BOOLEAN) {
        e.cA = ev.value[0].value.charCodeAt(0) !== 0x00;
      } else {
        e.cA = false;
      } // get path length constraint


      var value = null;

      if (ev.value.length > 0 && ev.value[0].type === asn1.Type.INTEGER) {
        value = ev.value[0].value;
      } else if (ev.value.length > 1) {
        value = ev.value[1].value;
      }

      if (value !== null) {
        e.pathLenConstraint = asn1.derToInteger(value);
      }
    } else if (e.name === 'extKeyUsage') {
      // handle extKeyUsage
      // value is a SEQUENCE of OIDs
      var ev = asn1.fromDer(e.value);

      for (var vi = 0; vi < ev.value.length; ++vi) {
        var oid = asn1.derToOid(ev.value[vi].value);

        if (oid in oids) {
          e[oids[oid]] = true;
        } else {
          e[oid] = true;
        }
      }
    } else if (e.name === 'nsCertType') {
      // handle nsCertType
      // get value as BIT STRING
      var ev = asn1.fromDer(e.value);
      var b2 = 0x00;

      if (ev.value.length > 1) {
        // skip first byte, just indicates unused bits which
        // will be padded with 0s anyway
        // get bytes with flag bits
        b2 = ev.value.charCodeAt(1);
      } // set flags


      e.client = (b2 & 0x80) === 0x80;
      e.server = (b2 & 0x40) === 0x40;
      e.email = (b2 & 0x20) === 0x20;
      e.objsign = (b2 & 0x10) === 0x10;
      e.reserved = (b2 & 0x08) === 0x08;
      e.sslCA = (b2 & 0x04) === 0x04;
      e.emailCA = (b2 & 0x02) === 0x02;
      e.objCA = (b2 & 0x01) === 0x01;
    } else if (e.name === 'subjectAltName' || e.name === 'issuerAltName') {
      // handle subjectAltName/issuerAltName
      e.altNames = []; // ev is a SYNTAX SEQUENCE

      var gn;
      var ev = asn1.fromDer(e.value);

      for (var n = 0; n < ev.value.length; ++n) {
        // get GeneralName
        gn = ev.value[n];
        var altName = {
          type: gn.type,
          value: gn.value
        };
        e.altNames.push(altName); // Note: Support for types 1,2,6,7,8

        switch (gn.type) {
          // rfc822Name
          case 1: // dNSName

          case 2: // uniformResourceIdentifier (URI)

          case 6:
            break;
          // IPAddress

          case 7:
            // convert to IPv4/IPv6 string representation
            altName.ip = forge.util.bytesToIP(gn.value);
            break;
          // registeredID

          case 8:
            altName.oid = asn1.derToOid(gn.value);
            break;

          default: // unsupported

        }
      }
    } else if (e.name === 'subjectKeyIdentifier') {
      // value is an OCTETSTRING w/the hash of the key-type specific
      // public key structure (eg: RSAPublicKey)
      var ev = asn1.fromDer(e.value);
      e.subjectKeyIdentifier = forge.util.bytesToHex(ev.value);
    }
  }

  return e;
};
/**
 * Converts a PKCS#10 certification request (CSR) from an ASN.1 object.
 *
 * Note: If the certification request is to be verified then compute hash
 * should be set to true. There is currently no implementation for converting
 * a certificate back to ASN.1 so the CertificationRequestInfo part of the
 * ASN.1 object needs to be scanned before the csr object is created.
 *
 * @param obj the asn1 representation of a PKCS#10 certification request (CSR).
 * @param computeHash true to compute the hash for verification.
 *
 * @return the certification request (CSR).
 */


pki.certificationRequestFromAsn1 = function (obj, computeHash) {
  // validate certification request and capture data
  var capture = {};
  var errors = [];

  if (!asn1.validate(obj, certificationRequestValidator, capture, errors)) {
    var error = new Error('Cannot read PKCS#10 certificate request. ' + 'ASN.1 object is not a PKCS#10 CertificationRequest.');
    error.errors = errors;
    throw error;
  } // get oid


  var oid = asn1.derToOid(capture.publicKeyOid);

  if (oid !== pki.oids.rsaEncryption) {
    throw new Error('Cannot read public key. OID is not RSA.');
  } // create certification request


  var csr = pki.createCertificationRequest();
  csr.version = capture.csrVersion ? capture.csrVersion.charCodeAt(0) : 0;
  csr.signatureOid = forge.asn1.derToOid(capture.csrSignatureOid);
  csr.signatureParameters = _readSignatureParameters(csr.signatureOid, capture.csrSignatureParams, true);
  csr.siginfo.algorithmOid = forge.asn1.derToOid(capture.csrSignatureOid);
  csr.siginfo.parameters = _readSignatureParameters(csr.siginfo.algorithmOid, capture.csrSignatureParams, false);
  csr.signature = capture.csrSignature; // keep CertificationRequestInfo to preserve signature when exporting

  csr.certificationRequestInfo = capture.certificationRequestInfo;

  if (computeHash) {
    // check signature OID for supported signature types
    csr.md = null;

    if (csr.signatureOid in oids) {
      var oid = oids[csr.signatureOid];

      switch (oid) {
        case 'sha1WithRSAEncryption':
          csr.md = forge.md.sha1.create();
          break;

        case 'md5WithRSAEncryption':
          csr.md = forge.md.md5.create();
          break;

        case 'sha256WithRSAEncryption':
          csr.md = forge.md.sha256.create();
          break;

        case 'sha384WithRSAEncryption':
          csr.md = forge.md.sha384.create();
          break;

        case 'sha512WithRSAEncryption':
          csr.md = forge.md.sha512.create();
          break;

        case 'RSASSA-PSS':
          csr.md = forge.md.sha256.create();
          break;
      }
    }

    if (csr.md === null) {
      var error = new Error('Could not compute certification request digest. ' + 'Unknown signature OID.');
      error.signatureOid = csr.signatureOid;
      throw error;
    } // produce DER formatted CertificationRequestInfo and digest it


    var bytes = asn1.toDer(csr.certificationRequestInfo);
    csr.md.update(bytes.getBytes());
  } // handle subject, build subject message digest


  var smd = forge.md.sha1.create();

  csr.subject.getField = function (sn) {
    return _getAttribute(csr.subject, sn);
  };

  csr.subject.addField = function (attr) {
    _fillMissingFields([attr]);

    csr.subject.attributes.push(attr);
  };

  csr.subject.attributes = pki.RDNAttributesAsArray(capture.certificationRequestInfoSubject, smd);
  csr.subject.hash = smd.digest().toHex(); // convert RSA public key from ASN.1

  csr.publicKey = pki.publicKeyFromAsn1(capture.subjectPublicKeyInfo); // convert attributes from ASN.1

  csr.getAttribute = function (sn) {
    return _getAttribute(csr, sn);
  };

  csr.addAttribute = function (attr) {
    _fillMissingFields([attr]);

    csr.attributes.push(attr);
  };

  csr.attributes = pki.CRIAttributesAsArray(capture.certificationRequestInfoAttributes || []);
  return csr;
};
/**
 * Creates an empty certification request (a CSR or certificate signing
 * request). Once created, its public key and attributes can be set and then
 * it can be signed.
 *
 * @return the empty certification request.
 */


pki.createCertificationRequest = function () {
  var csr = {};
  csr.version = 0x00;
  csr.signatureOid = null;
  csr.signature = null;
  csr.siginfo = {};
  csr.siginfo.algorithmOid = null;
  csr.subject = {};

  csr.subject.getField = function (sn) {
    return _getAttribute(csr.subject, sn);
  };

  csr.subject.addField = function (attr) {
    _fillMissingFields([attr]);

    csr.subject.attributes.push(attr);
  };

  csr.subject.attributes = [];
  csr.subject.hash = null;
  csr.publicKey = null;
  csr.attributes = [];

  csr.getAttribute = function (sn) {
    return _getAttribute(csr, sn);
  };

  csr.addAttribute = function (attr) {
    _fillMissingFields([attr]);

    csr.attributes.push(attr);
  };

  csr.md = null;
  /**
   * Sets the subject of this certification request.
   *
   * @param attrs the array of subject attributes to use.
   */

  csr.setSubject = function (attrs) {
    // set new attributes
    _fillMissingFields(attrs);

    csr.subject.attributes = attrs;
    csr.subject.hash = null;
  };
  /**
   * Sets the attributes of this certification request.
   *
   * @param attrs the array of attributes to use.
   */


  csr.setAttributes = function (attrs) {
    // set new attributes
    _fillMissingFields(attrs);

    csr.attributes = attrs;
  };
  /**
   * Signs this certification request using the given private key.
   *
   * @param key the private key to sign with.
   * @param md the message digest object to use (defaults to forge.md.sha1).
   */


  csr.sign = function (key, md) {
    // TODO: get signature OID from private key
    csr.md = md || forge.md.sha1.create();
    var algorithmOid = oids[csr.md.algorithm + 'WithRSAEncryption'];

    if (!algorithmOid) {
      var error = new Error('Could not compute certification request digest. ' + 'Unknown message digest algorithm OID.');
      error.algorithm = csr.md.algorithm;
      throw error;
    }

    csr.signatureOid = csr.siginfo.algorithmOid = algorithmOid; // get CertificationRequestInfo, convert to DER

    csr.certificationRequestInfo = pki.getCertificationRequestInfo(csr);
    var bytes = asn1.toDer(csr.certificationRequestInfo); // digest and sign

    csr.md.update(bytes.getBytes());
    csr.signature = key.sign(csr.md);
  };
  /**
   * Attempts verify the signature on the passed certification request using
   * its public key.
   *
   * A CSR that has been exported to a file in PEM format can be verified using
   * OpenSSL using this command:
   *
   * openssl req -in <the-csr-pem-file> -verify -noout -text
   *
   * @return true if verified, false if not.
   */


  csr.verify = function () {
    var rval = false;
    var md = csr.md;

    if (md === null) {
      // check signature OID for supported signature types
      if (csr.signatureOid in oids) {
        // TODO: create DRY `OID to md` function
        var oid = oids[csr.signatureOid];

        switch (oid) {
          case 'sha1WithRSAEncryption':
            md = forge.md.sha1.create();
            break;

          case 'md5WithRSAEncryption':
            md = forge.md.md5.create();
            break;

          case 'sha256WithRSAEncryption':
            md = forge.md.sha256.create();
            break;

          case 'sha384WithRSAEncryption':
            md = forge.md.sha384.create();
            break;

          case 'sha512WithRSAEncryption':
            md = forge.md.sha512.create();
            break;

          case 'RSASSA-PSS':
            md = forge.md.sha256.create();
            break;
        }
      }

      if (md === null) {
        var error = new Error('Could not compute certification request digest. ' + 'Unknown signature OID.');
        error.signatureOid = csr.signatureOid;
        throw error;
      } // produce DER formatted CertificationRequestInfo and digest it


      var cri = csr.certificationRequestInfo || pki.getCertificationRequestInfo(csr);
      var bytes = asn1.toDer(cri);
      md.update(bytes.getBytes());
    }

    if (md !== null) {
      var scheme;

      switch (csr.signatureOid) {
        case oids.sha1WithRSAEncryption:
          /* use PKCS#1 v1.5 padding scheme */
          break;

        case oids['RSASSA-PSS']:
          var hash, mgf;
          /* initialize mgf */

          hash = oids[csr.signatureParameters.mgf.hash.algorithmOid];

          if (hash === undefined || forge.md[hash] === undefined) {
            var error = new Error('Unsupported MGF hash function.');
            error.oid = csr.signatureParameters.mgf.hash.algorithmOid;
            error.name = hash;
            throw error;
          }

          mgf = oids[csr.signatureParameters.mgf.algorithmOid];

          if (mgf === undefined || forge.mgf[mgf] === undefined) {
            var error = new Error('Unsupported MGF function.');
            error.oid = csr.signatureParameters.mgf.algorithmOid;
            error.name = mgf;
            throw error;
          }

          mgf = forge.mgf[mgf].create(forge.md[hash].create());
          /* initialize hash function */

          hash = oids[csr.signatureParameters.hash.algorithmOid];

          if (hash === undefined || forge.md[hash] === undefined) {
            var error = new Error('Unsupported RSASSA-PSS hash function.');
            error.oid = csr.signatureParameters.hash.algorithmOid;
            error.name = hash;
            throw error;
          }

          scheme = forge.pss.create(forge.md[hash].create(), mgf, csr.signatureParameters.saltLength);
          break;
      } // verify signature on csr using its public key


      rval = csr.publicKey.verify(md.digest().getBytes(), csr.signature, scheme);
    }

    return rval;
  };

  return csr;
};
/**
 * Converts an X.509 subject or issuer to an ASN.1 RDNSequence.
 *
 * @param obj the subject or issuer (distinguished name).
 *
 * @return the ASN.1 RDNSequence.
 */


function _dnToAsn1(obj) {
  // create an empty RDNSequence
  var rval = asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, []); // iterate over attributes

  var attr, set;
  var attrs = obj.attributes;

  for (var i = 0; i < attrs.length; ++i) {
    attr = attrs[i];
    var value = attr.value; // reuse tag class for attribute value if available

    var valueTagClass = asn1.Type.PRINTABLESTRING;

    if ('valueTagClass' in attr) {
      valueTagClass = attr.valueTagClass;

      if (valueTagClass === asn1.Type.UTF8) {
        value = forge.util.encodeUtf8(value);
      } // FIXME: handle more encodings

    } // create a RelativeDistinguishedName set
    // each value in the set is an AttributeTypeAndValue first
    // containing the type (an OID) and second the value


    set = asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SET, true, [asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [// AttributeType
    asn1.create(asn1.Class.UNIVERSAL, asn1.Type.OID, false, asn1.oidToDer(attr.type).getBytes()), // AttributeValue
    asn1.create(asn1.Class.UNIVERSAL, valueTagClass, false, value)])]);
    rval.value.push(set);
  }

  return rval;
}
/**
 * Gets all printable attributes (typically of an issuer or subject) in a
 * simplified JSON format for display.
 *
 * @param attrs the attributes.
 *
 * @return the JSON for display.
 */


function _getAttributesAsJson(attrs) {
  var rval = {};

  for (var i = 0; i < attrs.length; ++i) {
    var attr = attrs[i];

    if (attr.shortName && (attr.valueTagClass === asn1.Type.UTF8 || attr.valueTagClass === asn1.Type.PRINTABLESTRING || attr.valueTagClass === asn1.Type.IA5STRING)) {
      var value = attr.value;

      if (attr.valueTagClass === asn1.Type.UTF8) {
        value = forge.util.encodeUtf8(attr.value);
      }

      if (!(attr.shortName in rval)) {
        rval[attr.shortName] = value;
      } else if (forge.util.isArray(rval[attr.shortName])) {
        rval[attr.shortName].push(value);
      } else {
        rval[attr.shortName] = [rval[attr.shortName], value];
      }
    }
  }

  return rval;
}
/**
 * Fills in missing fields in attributes.
 *
 * @param attrs the attributes to fill missing fields in.
 */


function _fillMissingFields(attrs) {
  var attr;

  for (var i = 0; i < attrs.length; ++i) {
    attr = attrs[i]; // populate missing name

    if (typeof attr.name === 'undefined') {
      if (attr.type && attr.type in pki.oids) {
        attr.name = pki.oids[attr.type];
      } else if (attr.shortName && attr.shortName in _shortNames) {
        attr.name = pki.oids[_shortNames[attr.shortName]];
      }
    } // populate missing type (OID)


    if (typeof attr.type === 'undefined') {
      if (attr.name && attr.name in pki.oids) {
        attr.type = pki.oids[attr.name];
      } else {
        var error = new Error('Attribute type not specified.');
        error.attribute = attr;
        throw error;
      }
    } // populate missing shortname


    if (typeof attr.shortName === 'undefined') {
      if (attr.name && attr.name in _shortNames) {
        attr.shortName = _shortNames[attr.name];
      }
    } // convert extensions to value


    if (attr.type === oids.extensionRequest) {
      attr.valueConstructed = true;
      attr.valueTagClass = asn1.Type.SEQUENCE;

      if (!attr.value && attr.extensions) {
        attr.value = [];

        for (var ei = 0; ei < attr.extensions.length; ++ei) {
          attr.value.push(pki.certificateExtensionToAsn1(_fillMissingExtensionFields(attr.extensions[ei])));
        }
      }
    }

    if (typeof attr.value === 'undefined') {
      var error = new Error('Attribute value not specified.');
      error.attribute = attr;
      throw error;
    }
  }
}
/**
 * Fills in missing fields in certificate extensions.
 *
 * @param e the extension.
 * @param [options] the options to use.
 *          [cert] the certificate the extensions are for.
 *
 * @return the extension.
 */


function _fillMissingExtensionFields(e, options) {
  options = options || {}; // populate missing name

  if (typeof e.name === 'undefined') {
    if (e.id && e.id in pki.oids) {
      e.name = pki.oids[e.id];
    }
  } // populate missing id


  if (typeof e.id === 'undefined') {
    if (e.name && e.name in pki.oids) {
      e.id = pki.oids[e.name];
    } else {
      var error = new Error('Extension ID not specified.');
      error.extension = e;
      throw error;
    }
  }

  if (typeof e.value !== 'undefined') {
    return e;
  } // handle missing value:
  // value is a BIT STRING


  if (e.name === 'keyUsage') {
    // build flags
    var unused = 0;
    var b2 = 0x00;
    var b3 = 0x00;

    if (e.digitalSignature) {
      b2 |= 0x80;
      unused = 7;
    }

    if (e.nonRepudiation) {
      b2 |= 0x40;
      unused = 6;
    }

    if (e.keyEncipherment) {
      b2 |= 0x20;
      unused = 5;
    }

    if (e.dataEncipherment) {
      b2 |= 0x10;
      unused = 4;
    }

    if (e.keyAgreement) {
      b2 |= 0x08;
      unused = 3;
    }

    if (e.keyCertSign) {
      b2 |= 0x04;
      unused = 2;
    }

    if (e.cRLSign) {
      b2 |= 0x02;
      unused = 1;
    }

    if (e.encipherOnly) {
      b2 |= 0x01;
      unused = 0;
    }

    if (e.decipherOnly) {
      b3 |= 0x80;
      unused = 7;
    } // create bit string


    var value = String.fromCharCode(unused);

    if (b3 !== 0) {
      value += String.fromCharCode(b2) + String.fromCharCode(b3);
    } else if (b2 !== 0) {
      value += String.fromCharCode(b2);
    }

    e.value = asn1.create(asn1.Class.UNIVERSAL, asn1.Type.BITSTRING, false, value);
  } else if (e.name === 'basicConstraints') {
    // basicConstraints is a SEQUENCE
    e.value = asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, []); // cA BOOLEAN flag defaults to false

    if (e.cA) {
      e.value.value.push(asn1.create(asn1.Class.UNIVERSAL, asn1.Type.BOOLEAN, false, String.fromCharCode(0xFF)));
    }

    if ('pathLenConstraint' in e) {
      e.value.value.push(asn1.create(asn1.Class.UNIVERSAL, asn1.Type.INTEGER, false, asn1.integerToDer(e.pathLenConstraint).getBytes()));
    }
  } else if (e.name === 'extKeyUsage') {
    // extKeyUsage is a SEQUENCE of OIDs
    e.value = asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, []);
    var seq = e.value.value;

    for (var key in e) {
      if (e[key] !== true) {
        continue;
      } // key is name in OID map


      if (key in oids) {
        seq.push(asn1.create(asn1.Class.UNIVERSAL, asn1.Type.OID, false, asn1.oidToDer(oids[key]).getBytes()));
      } else if (key.indexOf('.') !== -1) {
        // assume key is an OID
        seq.push(asn1.create(asn1.Class.UNIVERSAL, asn1.Type.OID, false, asn1.oidToDer(key).getBytes()));
      }
    }
  } else if (e.name === 'nsCertType') {
    // nsCertType is a BIT STRING
    // build flags
    var unused = 0;
    var b2 = 0x00;

    if (e.client) {
      b2 |= 0x80;
      unused = 7;
    }

    if (e.server) {
      b2 |= 0x40;
      unused = 6;
    }

    if (e.email) {
      b2 |= 0x20;
      unused = 5;
    }

    if (e.objsign) {
      b2 |= 0x10;
      unused = 4;
    }

    if (e.reserved) {
      b2 |= 0x08;
      unused = 3;
    }

    if (e.sslCA) {
      b2 |= 0x04;
      unused = 2;
    }

    if (e.emailCA) {
      b2 |= 0x02;
      unused = 1;
    }

    if (e.objCA) {
      b2 |= 0x01;
      unused = 0;
    } // create bit string


    var value = String.fromCharCode(unused);

    if (b2 !== 0) {
      value += String.fromCharCode(b2);
    }

    e.value = asn1.create(asn1.Class.UNIVERSAL, asn1.Type.BITSTRING, false, value);
  } else if (e.name === 'subjectAltName' || e.name === 'issuerAltName') {
    // SYNTAX SEQUENCE
    e.value = asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, []);
    var altName;

    for (var n = 0; n < e.altNames.length; ++n) {
      altName = e.altNames[n];
      var value = altName.value; // handle IP

      if (altName.type === 7 && altName.ip) {
        value = forge.util.bytesFromIP(altName.ip);

        if (value === null) {
          var error = new Error('Extension "ip" value is not a valid IPv4 or IPv6 address.');
          error.extension = e;
          throw error;
        }
      } else if (altName.type === 8) {
        // handle OID
        if (altName.oid) {
          value = asn1.oidToDer(asn1.oidToDer(altName.oid));
        } else {
          // deprecated ... convert value to OID
          value = asn1.oidToDer(value);
        }
      }

      e.value.value.push(asn1.create(asn1.Class.CONTEXT_SPECIFIC, altName.type, false, value));
    }
  } else if (e.name === 'nsComment' && options.cert) {
    // sanity check value is ASCII (req'd) and not too big
    if (!/^[\x00-\x7F]*$/.test(e.comment) || e.comment.length < 1 || e.comment.length > 128) {
      throw new Error('Invalid "nsComment" content.');
    } // IA5STRING opaque comment


    e.value = asn1.create(asn1.Class.UNIVERSAL, asn1.Type.IA5STRING, false, e.comment);
  } else if (e.name === 'subjectKeyIdentifier' && options.cert) {
    var ski = options.cert.generateSubjectKeyIdentifier();
    e.subjectKeyIdentifier = ski.toHex(); // OCTETSTRING w/digest

    e.value = asn1.create(asn1.Class.UNIVERSAL, asn1.Type.OCTETSTRING, false, ski.getBytes());
  } else if (e.name === 'authorityKeyIdentifier' && options.cert) {
    // SYNTAX SEQUENCE
    e.value = asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, []);
    var seq = e.value.value;

    if (e.keyIdentifier) {
      var keyIdentifier = e.keyIdentifier === true ? options.cert.generateSubjectKeyIdentifier().getBytes() : e.keyIdentifier;
      seq.push(asn1.create(asn1.Class.CONTEXT_SPECIFIC, 0, false, keyIdentifier));
    }

    if (e.authorityCertIssuer) {
      var authorityCertIssuer = [asn1.create(asn1.Class.CONTEXT_SPECIFIC, 4, true, [_dnToAsn1(e.authorityCertIssuer === true ? options.cert.issuer : e.authorityCertIssuer)])];
      seq.push(asn1.create(asn1.Class.CONTEXT_SPECIFIC, 1, true, authorityCertIssuer));
    }

    if (e.serialNumber) {
      var serialNumber = forge.util.hexToBytes(e.serialNumber === true ? options.cert.serialNumber : e.serialNumber);
      seq.push(asn1.create(asn1.Class.CONTEXT_SPECIFIC, 2, false, serialNumber));
    }
  } else if (e.name === 'cRLDistributionPoints') {
    e.value = asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, []);
    var seq = e.value.value; // Create sub SEQUENCE of DistributionPointName

    var subSeq = asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, []); // Create fullName CHOICE

    var fullNameGeneralNames = asn1.create(asn1.Class.CONTEXT_SPECIFIC, 0, true, []);
    var altName;

    for (var n = 0; n < e.altNames.length; ++n) {
      altName = e.altNames[n];
      var value = altName.value; // handle IP

      if (altName.type === 7 && altName.ip) {
        value = forge.util.bytesFromIP(altName.ip);

        if (value === null) {
          var error = new Error('Extension "ip" value is not a valid IPv4 or IPv6 address.');
          error.extension = e;
          throw error;
        }
      } else if (altName.type === 8) {
        // handle OID
        if (altName.oid) {
          value = asn1.oidToDer(asn1.oidToDer(altName.oid));
        } else {
          // deprecated ... convert value to OID
          value = asn1.oidToDer(value);
        }
      }

      fullNameGeneralNames.value.push(asn1.create(asn1.Class.CONTEXT_SPECIFIC, altName.type, false, value));
    } // Add to the parent SEQUENCE


    subSeq.value.push(asn1.create(asn1.Class.CONTEXT_SPECIFIC, 0, true, [fullNameGeneralNames]));
    seq.push(subSeq);
  } // ensure value has been defined by now


  if (typeof e.value === 'undefined') {
    var error = new Error('Extension value not specified.');
    error.extension = e;
    throw error;
  }

  return e;
}
/**
 * Convert signature parameters object to ASN.1
 *
 * @param {String} oid Signature algorithm OID
 * @param params The signature parametrs object
 * @return ASN.1 object representing signature parameters
 */


function _signatureParametersToAsn1(oid, params) {
  switch (oid) {
    case oids['RSASSA-PSS']:
      var parts = [];

      if (params.hash.algorithmOid !== undefined) {
        parts.push(asn1.create(asn1.Class.CONTEXT_SPECIFIC, 0, true, [asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [asn1.create(asn1.Class.UNIVERSAL, asn1.Type.OID, false, asn1.oidToDer(params.hash.algorithmOid).getBytes()), asn1.create(asn1.Class.UNIVERSAL, asn1.Type.NULL, false, '')])]));
      }

      if (params.mgf.algorithmOid !== undefined) {
        parts.push(asn1.create(asn1.Class.CONTEXT_SPECIFIC, 1, true, [asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [asn1.create(asn1.Class.UNIVERSAL, asn1.Type.OID, false, asn1.oidToDer(params.mgf.algorithmOid).getBytes()), asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [asn1.create(asn1.Class.UNIVERSAL, asn1.Type.OID, false, asn1.oidToDer(params.mgf.hash.algorithmOid).getBytes()), asn1.create(asn1.Class.UNIVERSAL, asn1.Type.NULL, false, '')])])]));
      }

      if (params.saltLength !== undefined) {
        parts.push(asn1.create(asn1.Class.CONTEXT_SPECIFIC, 2, true, [asn1.create(asn1.Class.UNIVERSAL, asn1.Type.INTEGER, false, asn1.integerToDer(params.saltLength).getBytes())]));
      }

      return asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, parts);

    default:
      return asn1.create(asn1.Class.UNIVERSAL, asn1.Type.NULL, false, '');
  }
}
/**
 * Converts a certification request's attributes to an ASN.1 set of
 * CRIAttributes.
 *
 * @param csr certification request.
 *
 * @return the ASN.1 set of CRIAttributes.
 */


function _CRIAttributesToAsn1(csr) {
  // create an empty context-specific container
  var rval = asn1.create(asn1.Class.CONTEXT_SPECIFIC, 0, true, []); // no attributes, return empty container

  if (csr.attributes.length === 0) {
    return rval;
  } // each attribute has a sequence with a type and a set of values


  var attrs = csr.attributes;

  for (var i = 0; i < attrs.length; ++i) {
    var attr = attrs[i];
    var value = attr.value; // reuse tag class for attribute value if available

    var valueTagClass = asn1.Type.UTF8;

    if ('valueTagClass' in attr) {
      valueTagClass = attr.valueTagClass;
    }

    if (valueTagClass === asn1.Type.UTF8) {
      value = forge.util.encodeUtf8(value);
    }

    var valueConstructed = false;

    if ('valueConstructed' in attr) {
      valueConstructed = attr.valueConstructed;
    } // FIXME: handle more encodings
    // create a RelativeDistinguishedName set
    // each value in the set is an AttributeTypeAndValue first
    // containing the type (an OID) and second the value


    var seq = asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [// AttributeType
    asn1.create(asn1.Class.UNIVERSAL, asn1.Type.OID, false, asn1.oidToDer(attr.type).getBytes()), asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SET, true, [// AttributeValue
    asn1.create(asn1.Class.UNIVERSAL, valueTagClass, valueConstructed, value)])]);
    rval.value.push(seq);
  }

  return rval;
}

var jan_1_1950 = new Date('1950-01-01T00:00:00Z');
var jan_1_2050 = new Date('2050-01-01T00:00:00Z');
/**
 * Converts a Date object to ASN.1
 * Handles the different format before and after 1st January 2050
 *
 * @param date date object.
 *
 * @return the ASN.1 object representing the date.
 */

function _dateToAsn1(date) {
  if (date >= jan_1_1950 && date < jan_1_2050) {
    return asn1.create(asn1.Class.UNIVERSAL, asn1.Type.UTCTIME, false, asn1.dateToUtcTime(date));
  } else {
    return asn1.create(asn1.Class.UNIVERSAL, asn1.Type.GENERALIZEDTIME, false, asn1.dateToGeneralizedTime(date));
  }
}
/**
 * Gets the ASN.1 TBSCertificate part of an X.509v3 certificate.
 *
 * @param cert the certificate.
 *
 * @return the asn1 TBSCertificate.
 */


pki.getTBSCertificate = function (cert) {
  // TBSCertificate
  var notBefore = _dateToAsn1(cert.validity.notBefore);

  var notAfter = _dateToAsn1(cert.validity.notAfter);

  var tbs = asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [// version
  asn1.create(asn1.Class.CONTEXT_SPECIFIC, 0, true, [// integer
  asn1.create(asn1.Class.UNIVERSAL, asn1.Type.INTEGER, false, asn1.integerToDer(cert.version).getBytes())]), // serialNumber
  asn1.create(asn1.Class.UNIVERSAL, asn1.Type.INTEGER, false, forge.util.hexToBytes(cert.serialNumber)), // signature
  asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [// algorithm
  asn1.create(asn1.Class.UNIVERSAL, asn1.Type.OID, false, asn1.oidToDer(cert.siginfo.algorithmOid).getBytes()), // parameters
  _signatureParametersToAsn1(cert.siginfo.algorithmOid, cert.siginfo.parameters)]), // issuer
  _dnToAsn1(cert.issuer), // validity
  asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [notBefore, notAfter]), // subject
  _dnToAsn1(cert.subject), // SubjectPublicKeyInfo
  pki.publicKeyToAsn1(cert.publicKey)]);

  if (cert.issuer.uniqueId) {
    // issuerUniqueID (optional)
    tbs.value.push(asn1.create(asn1.Class.CONTEXT_SPECIFIC, 1, true, [asn1.create(asn1.Class.UNIVERSAL, asn1.Type.BITSTRING, false, // TODO: support arbitrary bit length ids
    String.fromCharCode(0x00) + cert.issuer.uniqueId)]));
  }

  if (cert.subject.uniqueId) {
    // subjectUniqueID (optional)
    tbs.value.push(asn1.create(asn1.Class.CONTEXT_SPECIFIC, 2, true, [asn1.create(asn1.Class.UNIVERSAL, asn1.Type.BITSTRING, false, // TODO: support arbitrary bit length ids
    String.fromCharCode(0x00) + cert.subject.uniqueId)]));
  }

  if (cert.extensions.length > 0) {
    // extensions (optional)
    tbs.value.push(pki.certificateExtensionsToAsn1(cert.extensions));
  }

  return tbs;
};
/**
 * Gets the ASN.1 CertificationRequestInfo part of a
 * PKCS#10 CertificationRequest.
 *
 * @param csr the certification request.
 *
 * @return the asn1 CertificationRequestInfo.
 */


pki.getCertificationRequestInfo = function (csr) {
  // CertificationRequestInfo
  var cri = asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [// version
  asn1.create(asn1.Class.UNIVERSAL, asn1.Type.INTEGER, false, asn1.integerToDer(csr.version).getBytes()), // subject
  _dnToAsn1(csr.subject), // SubjectPublicKeyInfo
  pki.publicKeyToAsn1(csr.publicKey), // attributes
  _CRIAttributesToAsn1(csr)]);
  return cri;
};
/**
 * Converts a DistinguishedName (subject or issuer) to an ASN.1 object.
 *
 * @param dn the DistinguishedName.
 *
 * @return the asn1 representation of a DistinguishedName.
 */


pki.distinguishedNameToAsn1 = function (dn) {
  return _dnToAsn1(dn);
};
/**
 * Converts an X.509v3 RSA certificate to an ASN.1 object.
 *
 * @param cert the certificate.
 *
 * @return the asn1 representation of an X.509v3 RSA certificate.
 */


pki.certificateToAsn1 = function (cert) {
  // prefer cached TBSCertificate over generating one
  var tbsCertificate = cert.tbsCertificate || pki.getTBSCertificate(cert); // Certificate

  return asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [// TBSCertificate
  tbsCertificate, // AlgorithmIdentifier (signature algorithm)
  asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [// algorithm
  asn1.create(asn1.Class.UNIVERSAL, asn1.Type.OID, false, asn1.oidToDer(cert.signatureOid).getBytes()), // parameters
  _signatureParametersToAsn1(cert.signatureOid, cert.signatureParameters)]), // SignatureValue
  asn1.create(asn1.Class.UNIVERSAL, asn1.Type.BITSTRING, false, String.fromCharCode(0x00) + cert.signature)]);
};
/**
 * Converts X.509v3 certificate extensions to ASN.1.
 *
 * @param exts the extensions to convert.
 *
 * @return the extensions in ASN.1 format.
 */


pki.certificateExtensionsToAsn1 = function (exts) {
  // create top-level extension container
  var rval = asn1.create(asn1.Class.CONTEXT_SPECIFIC, 3, true, []); // create extension sequence (stores a sequence for each extension)

  var seq = asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, []);
  rval.value.push(seq);

  for (var i = 0; i < exts.length; ++i) {
    seq.value.push(pki.certificateExtensionToAsn1(exts[i]));
  }

  return rval;
};
/**
 * Converts a single certificate extension to ASN.1.
 *
 * @param ext the extension to convert.
 *
 * @return the extension in ASN.1 format.
 */


pki.certificateExtensionToAsn1 = function (ext) {
  // create a sequence for each extension
  var extseq = asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, []); // extnID (OID)

  extseq.value.push(asn1.create(asn1.Class.UNIVERSAL, asn1.Type.OID, false, asn1.oidToDer(ext.id).getBytes())); // critical defaults to false

  if (ext.critical) {
    // critical BOOLEAN DEFAULT FALSE
    extseq.value.push(asn1.create(asn1.Class.UNIVERSAL, asn1.Type.BOOLEAN, false, String.fromCharCode(0xFF)));
  }

  var value = ext.value;

  if (typeof ext.value !== 'string') {
    // value is asn.1
    value = asn1.toDer(value).getBytes();
  } // extnValue (OCTET STRING)


  extseq.value.push(asn1.create(asn1.Class.UNIVERSAL, asn1.Type.OCTETSTRING, false, value));
  return extseq;
};
/**
 * Converts a PKCS#10 certification request to an ASN.1 object.
 *
 * @param csr the certification request.
 *
 * @return the asn1 representation of a certification request.
 */


pki.certificationRequestToAsn1 = function (csr) {
  // prefer cached CertificationRequestInfo over generating one
  var cri = csr.certificationRequestInfo || pki.getCertificationRequestInfo(csr); // Certificate

  return asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [// CertificationRequestInfo
  cri, // AlgorithmIdentifier (signature algorithm)
  asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [// algorithm
  asn1.create(asn1.Class.UNIVERSAL, asn1.Type.OID, false, asn1.oidToDer(csr.signatureOid).getBytes()), // parameters
  _signatureParametersToAsn1(csr.signatureOid, csr.signatureParameters)]), // signature
  asn1.create(asn1.Class.UNIVERSAL, asn1.Type.BITSTRING, false, String.fromCharCode(0x00) + csr.signature)]);
};
/**
 * Creates a CA store.
 *
 * @param certs an optional array of certificate objects or PEM-formatted
 *          certificate strings to add to the CA store.
 *
 * @return the CA store.
 */


pki.createCaStore = function (certs) {
  // create CA store
  var caStore = {
    // stored certificates
    certs: {}
  };
  /**
   * Gets the certificate that issued the passed certificate or its
   * 'parent'.
   *
   * @param cert the certificate to get the parent for.
   *
   * @return the parent certificate or null if none was found.
   */

  caStore.getIssuer = function (cert) {
    var rval = getBySubject(cert.issuer); // see if there are multiple matches

    /*if(forge.util.isArray(rval)) {
      // TODO: resolve multiple matches by checking
      // authorityKey/subjectKey/issuerUniqueID/other identifiers, etc.
      // FIXME: or alternatively do authority key mapping
      // if possible (X.509v1 certs can't work?)
      throw new Error('Resolving multiple issuer matches not implemented yet.');
    }*/

    return rval;
  };
  /**
   * Adds a trusted certificate to the store.
   *
   * @param cert the certificate to add as a trusted certificate (either a
   *          pki.certificate object or a PEM-formatted certificate).
   */


  caStore.addCertificate = function (cert) {
    // convert from pem if necessary
    if (typeof cert === 'string') {
      cert = forge.pki.certificateFromPem(cert);
    }

    ensureSubjectHasHash(cert.subject);

    if (!caStore.hasCertificate(cert)) {
      // avoid duplicate certificates in store
      if (cert.subject.hash in caStore.certs) {
        // subject hash already exists, append to array
        var tmp = caStore.certs[cert.subject.hash];

        if (!forge.util.isArray(tmp)) {
          tmp = [tmp];
        }

        tmp.push(cert);
        caStore.certs[cert.subject.hash] = tmp;
      } else {
        caStore.certs[cert.subject.hash] = cert;
      }
    }
  };
  /**
   * Checks to see if the given certificate is in the store.
   *
   * @param cert the certificate to check (either a pki.certificate or a
   *          PEM-formatted certificate).
   *
   * @return true if the certificate is in the store, false if not.
   */


  caStore.hasCertificate = function (cert) {
    // convert from pem if necessary
    if (typeof cert === 'string') {
      cert = forge.pki.certificateFromPem(cert);
    }

    var match = getBySubject(cert.subject);

    if (!match) {
      return false;
    }

    if (!forge.util.isArray(match)) {
      match = [match];
    } // compare DER-encoding of certificates


    var der1 = asn1.toDer(pki.certificateToAsn1(cert)).getBytes();

    for (var i = 0; i < match.length; ++i) {
      var der2 = asn1.toDer(pki.certificateToAsn1(match[i])).getBytes();

      if (der1 === der2) {
        return true;
      }
    }

    return false;
  };
  /**
   * Lists all of the certificates kept in the store.
   *
   * @return an array of all of the pki.certificate objects in the store.
   */


  caStore.listAllCertificates = function () {
    var certList = [];

    for (var hash in caStore.certs) {
      if (caStore.certs.hasOwnProperty(hash)) {
        var value = caStore.certs[hash];

        if (!forge.util.isArray(value)) {
          certList.push(value);
        } else {
          for (var i = 0; i < value.length; ++i) {
            certList.push(value[i]);
          }
        }
      }
    }

    return certList;
  };
  /**
   * Removes a certificate from the store.
   *
   * @param cert the certificate to remove (either a pki.certificate or a
   *          PEM-formatted certificate).
   *
   * @return the certificate that was removed or null if the certificate
   *           wasn't in store.
   */


  caStore.removeCertificate = function (cert) {
    var result; // convert from pem if necessary

    if (typeof cert === 'string') {
      cert = forge.pki.certificateFromPem(cert);
    }

    ensureSubjectHasHash(cert.subject);

    if (!caStore.hasCertificate(cert)) {
      return null;
    }

    var match = getBySubject(cert.subject);

    if (!forge.util.isArray(match)) {
      result = caStore.certs[cert.subject.hash];
      delete caStore.certs[cert.subject.hash];
      return result;
    } // compare DER-encoding of certificates


    var der1 = asn1.toDer(pki.certificateToAsn1(cert)).getBytes();

    for (var i = 0; i < match.length; ++i) {
      var der2 = asn1.toDer(pki.certificateToAsn1(match[i])).getBytes();

      if (der1 === der2) {
        result = match[i];
        match.splice(i, 1);
      }
    }

    if (match.length === 0) {
      delete caStore.certs[cert.subject.hash];
    }

    return result;
  };

  function getBySubject(subject) {
    ensureSubjectHasHash(subject);
    return caStore.certs[subject.hash] || null;
  }

  function ensureSubjectHasHash(subject) {
    // produce subject hash if it doesn't exist
    if (!subject.hash) {
      var md = forge.md.sha1.create();
      subject.attributes = pki.RDNAttributesAsArray(_dnToAsn1(subject), md);
      subject.hash = md.digest().toHex();
    }
  } // auto-add passed in certs


  if (certs) {
    // parse PEM-formatted certificates as necessary
    for (var i = 0; i < certs.length; ++i) {
      var cert = certs[i];
      caStore.addCertificate(cert);
    }
  }

  return caStore;
};
/**
 * Certificate verification errors, based on TLS.
 */


pki.certificateError = {
  bad_certificate: 'forge.pki.BadCertificate',
  unsupported_certificate: 'forge.pki.UnsupportedCertificate',
  certificate_revoked: 'forge.pki.CertificateRevoked',
  certificate_expired: 'forge.pki.CertificateExpired',
  certificate_unknown: 'forge.pki.CertificateUnknown',
  unknown_ca: 'forge.pki.UnknownCertificateAuthority'
};
/**
 * Verifies a certificate chain against the given Certificate Authority store
 * with an optional custom verify callback.
 *
 * @param caStore a certificate store to verify against.
 * @param chain the certificate chain to verify, with the root or highest
 *          authority at the end (an array of certificates).
 * @param options a callback to be called for every certificate in the chain or
 *                  an object with:
 *                  verify a callback to be called for every certificate in the
 *                    chain
 *                  validityCheckDate the date against which the certificate
 *                    validity period should be checked. Pass null to not check
 *                    the validity period. By default, the current date is used.
 *
 * The verify callback has the following signature:
 *
 * verified - Set to true if certificate was verified, otherwise the
 *   pki.certificateError for why the certificate failed.
 * depth - The current index in the chain, where 0 is the end point's cert.
 * certs - The certificate chain, *NOTE* an empty chain indicates an anonymous
 *   end point.
 *
 * The function returns true on success and on failure either the appropriate
 * pki.certificateError or an object with 'error' set to the appropriate
 * pki.certificateError and 'message' set to a custom error message.
 *
 * @return true if successful, error thrown if not.
 */

pki.verifyCertificateChain = function (caStore, chain, options) {
  /* From: RFC3280 - Internet X.509 Public Key Infrastructure Certificate
    Section 6: Certification Path Validation
    See inline parentheticals related to this particular implementation.
     The primary goal of path validation is to verify the binding between
    a subject distinguished name or a subject alternative name and subject
    public key, as represented in the end entity certificate, based on the
    public key of the trust anchor. This requires obtaining a sequence of
    certificates that support that binding. That sequence should be provided
    in the passed 'chain'. The trust anchor should be in the given CA
    store. The 'end entity' certificate is the certificate provided by the
    end point (typically a server) and is the first in the chain.
     To meet this goal, the path validation process verifies, among other
    things, that a prospective certification path (a sequence of n
    certificates or a 'chain') satisfies the following conditions:
     (a) for all x in {1, ..., n-1}, the subject of certificate x is
          the issuer of certificate x+1;
     (b) certificate 1 is issued by the trust anchor;
     (c) certificate n is the certificate to be validated; and
     (d) for all x in {1, ..., n}, the certificate was valid at the
          time in question.
     Note that here 'n' is index 0 in the chain and 1 is the last certificate
    in the chain and it must be signed by a certificate in the connection's
    CA store.
     The path validation process also determines the set of certificate
    policies that are valid for this path, based on the certificate policies
    extension, policy mapping extension, policy constraints extension, and
    inhibit any-policy extension.
     Note: Policy mapping extension not supported (Not Required).
     Note: If the certificate has an unsupported critical extension, then it
    must be rejected.
     Note: A certificate is self-issued if the DNs that appear in the subject
    and issuer fields are identical and are not empty.
     The path validation algorithm assumes the following seven inputs are
    provided to the path processing logic. What this specific implementation
    will use is provided parenthetically:
     (a) a prospective certification path of length n (the 'chain')
    (b) the current date/time: ('now').
    (c) user-initial-policy-set: A set of certificate policy identifiers
          naming the policies that are acceptable to the certificate user.
          The user-initial-policy-set contains the special value any-policy
          if the user is not concerned about certificate policy
          (Not implemented. Any policy is accepted).
    (d) trust anchor information, describing a CA that serves as a trust
          anchor for the certification path. The trust anchor information
          includes:
       (1)  the trusted issuer name,
      (2)  the trusted public key algorithm,
      (3)  the trusted public key, and
      (4)  optionally, the trusted public key parameters associated
             with the public key.
       (Trust anchors are provided via certificates in the CA store).
       The trust anchor information may be provided to the path processing
      procedure in the form of a self-signed certificate. The trusted anchor
      information is trusted because it was delivered to the path processing
      procedure by some trustworthy out-of-band procedure. If the trusted
      public key algorithm requires parameters, then the parameters are
      provided along with the trusted public key (No parameters used in this
      implementation).
     (e) initial-policy-mapping-inhibit, which indicates if policy mapping is
          allowed in the certification path.
          (Not implemented, no policy checking)
     (f) initial-explicit-policy, which indicates if the path must be valid
          for at least one of the certificate policies in the user-initial-
          policy-set.
          (Not implemented, no policy checking)
     (g) initial-any-policy-inhibit, which indicates whether the
          anyPolicy OID should be processed if it is included in a
          certificate.
          (Not implemented, so any policy is valid provided that it is
          not marked as critical) */

  /* Basic Path Processing:
     For each certificate in the 'chain', the following is checked:
     1. The certificate validity period includes the current time.
    2. The certificate was signed by its parent (where the parent is either
       the next in the chain or from the CA store). Allow processing to
       continue to the next step if no parent is found but the certificate is
       in the CA store.
    3. TODO: The certificate has not been revoked.
    4. The certificate issuer name matches the parent's subject name.
    5. TODO: If the certificate is self-issued and not the final certificate
       in the chain, skip this step, otherwise verify that the subject name
       is within one of the permitted subtrees of X.500 distinguished names
       and that each of the alternative names in the subjectAltName extension
       (critical or non-critical) is within one of the permitted subtrees for
       that name type.
    6. TODO: If the certificate is self-issued and not the final certificate
       in the chain, skip this step, otherwise verify that the subject name
       is not within one of the excluded subtrees for X.500 distinguished
       names and none of the subjectAltName extension names are excluded for
       that name type.
    7. The other steps in the algorithm for basic path processing involve
       handling the policy extension which is not presently supported in this
       implementation. Instead, if a critical policy extension is found, the
       certificate is rejected as not supported.
    8. If the certificate is not the first or if its the only certificate in
       the chain (having no parent from the CA store or is self-signed) and it
       has a critical key usage extension, verify that the keyCertSign bit is
       set. If the key usage extension exists, verify that the basic
       constraints extension exists. If the basic constraints extension exists,
       verify that the cA flag is set. If pathLenConstraint is set, ensure that
       the number of certificates that precede in the chain (come earlier
       in the chain as implemented below), excluding the very first in the
       chain (typically the end-entity one), isn't greater than the
       pathLenConstraint. This constraint limits the number of intermediate
       CAs that may appear below a CA before only end-entity certificates
       may be issued. */
  // if a verify callback is passed as the third parameter, package it within
  // the options object. This is to support a legacy function signature that
  // expected the verify callback as the third parameter.
  if (typeof options === 'function') {
    options = {
      verify: options
    };
  }

  options = options || {}; // copy cert chain references to another array to protect against changes
  // in verify callback

  chain = chain.slice(0);
  var certs = chain.slice(0);
  var validityCheckDate = options.validityCheckDate; // if no validityCheckDate is specified, default to the current date. Make
  // sure to maintain the value null because it indicates that the validity
  // period should not be checked.

  if (typeof validityCheckDate === 'undefined') {
    validityCheckDate = new Date();
  } // verify each cert in the chain using its parent, where the parent
  // is either the next in the chain or from the CA store


  var first = true;
  var error = null;
  var depth = 0;

  do {
    var cert = chain.shift();
    var parent = null;
    var selfSigned = false;

    if (validityCheckDate) {
      // 1. check valid time
      if (validityCheckDate < cert.validity.notBefore || validityCheckDate > cert.validity.notAfter) {
        error = {
          message: 'Certificate is not valid yet or has expired.',
          error: pki.certificateError.certificate_expired,
          notBefore: cert.validity.notBefore,
          notAfter: cert.validity.notAfter,
          // TODO: we might want to reconsider renaming 'now' to
          // 'validityCheckDate' should this API be changed in the future.
          now: validityCheckDate
        };
      }
    } // 2. verify with parent from chain or CA store


    if (error === null) {
      parent = chain[0] || caStore.getIssuer(cert);

      if (parent === null) {
        // check for self-signed cert
        if (cert.isIssuer(cert)) {
          selfSigned = true;
          parent = cert;
        }
      }

      if (parent) {
        // FIXME: current CA store implementation might have multiple
        // certificates where the issuer can't be determined from the
        // certificate (happens rarely with, eg: old certificates) so normalize
        // by always putting parents into an array
        // TODO: there's may be an extreme degenerate case currently uncovered
        // where an old intermediate certificate seems to have a matching parent
        // but none of the parents actually verify ... but the intermediate
        // is in the CA and it should pass this check; needs investigation
        var parents = parent;

        if (!forge.util.isArray(parents)) {
          parents = [parents];
        } // try to verify with each possible parent (typically only one)


        var verified = false;

        while (!verified && parents.length > 0) {
          parent = parents.shift();

          try {
            verified = parent.verify(cert);
          } catch (ex) {// failure to verify, don't care why, try next one
          }
        }

        if (!verified) {
          error = {
            message: 'Certificate signature is invalid.',
            error: pki.certificateError.bad_certificate
          };
        }
      }

      if (error === null && (!parent || selfSigned) && !caStore.hasCertificate(cert)) {
        // no parent issuer and certificate itself is not trusted
        error = {
          message: 'Certificate is not trusted.',
          error: pki.certificateError.unknown_ca
        };
      }
    } // TODO: 3. check revoked
    // 4. check for matching issuer/subject


    if (error === null && parent && !cert.isIssuer(parent)) {
      // parent is not issuer
      error = {
        message: 'Certificate issuer is invalid.',
        error: pki.certificateError.bad_certificate
      };
    } // 5. TODO: check names with permitted names tree
    // 6. TODO: check names against excluded names tree
    // 7. check for unsupported critical extensions


    if (error === null) {
      // supported extensions
      var se = {
        keyUsage: true,
        basicConstraints: true
      };

      for (var i = 0; error === null && i < cert.extensions.length; ++i) {
        var ext = cert.extensions[i];

        if (ext.critical && !(ext.name in se)) {
          error = {
            message: 'Certificate has an unsupported critical extension.',
            error: pki.certificateError.unsupported_certificate
          };
        }
      }
    } // 8. check for CA if cert is not first or is the only certificate
    // remaining in chain with no parent or is self-signed


    if (error === null && (!first || chain.length === 0 && (!parent || selfSigned))) {
      // first check keyUsage extension and then basic constraints
      var bcExt = cert.getExtension('basicConstraints');
      var keyUsageExt = cert.getExtension('keyUsage');

      if (keyUsageExt !== null) {
        // keyCertSign must be true and there must be a basic
        // constraints extension
        if (!keyUsageExt.keyCertSign || bcExt === null) {
          // bad certificate
          error = {
            message: 'Certificate keyUsage or basicConstraints conflict ' + 'or indicate that the certificate is not a CA. ' + 'If the certificate is the only one in the chain or ' + 'isn\'t the first then the certificate must be a ' + 'valid CA.',
            error: pki.certificateError.bad_certificate
          };
        }
      } // basic constraints cA flag must be set


      if (error === null && bcExt !== null && !bcExt.cA) {
        // bad certificate
        error = {
          message: 'Certificate basicConstraints indicates the certificate ' + 'is not a CA.',
          error: pki.certificateError.bad_certificate
        };
      } // if error is not null and keyUsage is available, then we know it
      // has keyCertSign and there is a basic constraints extension too,
      // which means we can check pathLenConstraint (if it exists)


      if (error === null && keyUsageExt !== null && 'pathLenConstraint' in bcExt) {
        // pathLen is the maximum # of intermediate CA certs that can be
        // found between the current certificate and the end-entity (depth 0)
        // certificate; this number does not include the end-entity (depth 0,
        // last in the chain) even if it happens to be a CA certificate itself
        var pathLen = depth - 1;

        if (pathLen > bcExt.pathLenConstraint) {
          // pathLenConstraint violated, bad certificate
          error = {
            message: 'Certificate basicConstraints pathLenConstraint violated.',
            error: pki.certificateError.bad_certificate
          };
        }
      }
    } // call application callback


    var vfd = error === null ? true : error.error;
    var ret = options.verify ? options.verify(vfd, depth, certs) : vfd;

    if (ret === true) {
      // clear any set error
      error = null;
    } else {
      // if passed basic tests, set default message and alert
      if (vfd === true) {
        error = {
          message: 'The application rejected the certificate.',
          error: pki.certificateError.bad_certificate
        };
      } // check for custom error info


      if (ret || ret === 0) {
        // set custom message and error
        if (_typeof(ret) === 'object' && !forge.util.isArray(ret)) {
          if (ret.message) {
            error.message = ret.message;
          }

          if (ret.error) {
            error.error = ret.error;
          }
        } else if (typeof ret === 'string') {
          // set custom error
          error.error = ret;
        }
      } // throw error


      throw error;
    } // no longer first cert in chain


    first = false;
    ++depth;
  } while (chain.length > 0);

  return true;
};
},{"./forge":"o20S","./aes":"EkQ3","./asn1":"BA5j","./des":"XbkJ","./md":"Tsiu","./mgf":"j9lk","./oids":"rbLR","./pem":"ClqA","./pss":"cVuL","./rsa":"HL1S","./util":"lWyh"}],"yHod":[function(require,module,exports) {
/**
 * Javascript implementation of PKCS#12.
 *
 * @author Dave Longley
 * @author Stefan Siegl <stesie@brokenpipe.de>
 *
 * Copyright (c) 2010-2014 Digital Bazaar, Inc.
 * Copyright (c) 2012 Stefan Siegl <stesie@brokenpipe.de>
 *
 * The ASN.1 representation of PKCS#12 is as follows
 * (see ftp://ftp.rsasecurity.com/pub/pkcs/pkcs-12/pkcs-12-tc1.pdf for details)
 *
 * PFX ::= SEQUENCE {
 *   version  INTEGER {v3(3)}(v3,...),
 *   authSafe ContentInfo,
 *   macData  MacData OPTIONAL
 * }
 *
 * MacData ::= SEQUENCE {
 *   mac DigestInfo,
 *   macSalt OCTET STRING,
 *   iterations INTEGER DEFAULT 1
 * }
 * Note: The iterations default is for historical reasons and its use is
 * deprecated. A higher value, like 1024, is recommended.
 *
 * DigestInfo is defined in PKCS#7 as follows:
 *
 * DigestInfo ::= SEQUENCE {
 *   digestAlgorithm DigestAlgorithmIdentifier,
 *   digest Digest
 * }
 *
 * DigestAlgorithmIdentifier ::= AlgorithmIdentifier
 *
 * The AlgorithmIdentifier contains an Object Identifier (OID) and parameters
 * for the algorithm, if any. In the case of SHA1 there is none.
 *
 * AlgorithmIdentifer ::= SEQUENCE {
 *    algorithm OBJECT IDENTIFIER,
 *    parameters ANY DEFINED BY algorithm OPTIONAL
 * }
 *
 * Digest ::= OCTET STRING
 *
 *
 * ContentInfo ::= SEQUENCE {
 *   contentType ContentType,
 *   content     [0] EXPLICIT ANY DEFINED BY contentType OPTIONAL
 * }
 *
 * ContentType ::= OBJECT IDENTIFIER
 *
 * AuthenticatedSafe ::= SEQUENCE OF ContentInfo
 * -- Data if unencrypted
 * -- EncryptedData if password-encrypted
 * -- EnvelopedData if public key-encrypted
 *
 *
 * SafeContents ::= SEQUENCE OF SafeBag
 *
 * SafeBag ::= SEQUENCE {
 *   bagId     BAG-TYPE.&id ({PKCS12BagSet})
 *   bagValue  [0] EXPLICIT BAG-TYPE.&Type({PKCS12BagSet}{@bagId}),
 *   bagAttributes SET OF PKCS12Attribute OPTIONAL
 * }
 *
 * PKCS12Attribute ::= SEQUENCE {
 *   attrId ATTRIBUTE.&id ({PKCS12AttrSet}),
 *   attrValues SET OF ATTRIBUTE.&Type ({PKCS12AttrSet}{@attrId})
 * } -- This type is compatible with the X.500 type 'Attribute'
 *
 * PKCS12AttrSet ATTRIBUTE ::= {
 *   friendlyName | -- from PKCS #9
 *   localKeyId, -- from PKCS #9
 *   ... -- Other attributes are allowed
 * }
 *
 * CertBag ::= SEQUENCE {
 *   certId    BAG-TYPE.&id   ({CertTypes}),
 *   certValue [0] EXPLICIT BAG-TYPE.&Type ({CertTypes}{@certId})
 * }
 *
 * x509Certificate BAG-TYPE ::= {OCTET STRING IDENTIFIED BY {certTypes 1}}
 *   -- DER-encoded X.509 certificate stored in OCTET STRING
 *
 * sdsiCertificate BAG-TYPE ::= {IA5String IDENTIFIED BY {certTypes 2}}
 * -- Base64-encoded SDSI certificate stored in IA5String
 *
 * CertTypes BAG-TYPE ::= {
 *   x509Certificate |
 *   sdsiCertificate,
 *   ... -- For future extensions
 * }
 */
var forge = require('./forge');

require('./asn1');

require('./hmac');

require('./oids');

require('./pkcs7asn1');

require('./pbe');

require('./random');

require('./rsa');

require('./sha1');

require('./util');

require('./x509'); // shortcut for asn.1 & PKI API


var asn1 = forge.asn1;
var pki = forge.pki; // shortcut for PKCS#12 API

var p12 = module.exports = forge.pkcs12 = forge.pkcs12 || {};
var contentInfoValidator = {
  name: 'ContentInfo',
  tagClass: asn1.Class.UNIVERSAL,
  type: asn1.Type.SEQUENCE,
  // a ContentInfo
  constructed: true,
  value: [{
    name: 'ContentInfo.contentType',
    tagClass: asn1.Class.UNIVERSAL,
    type: asn1.Type.OID,
    constructed: false,
    capture: 'contentType'
  }, {
    name: 'ContentInfo.content',
    tagClass: asn1.Class.CONTEXT_SPECIFIC,
    constructed: true,
    captureAsn1: 'content'
  }]
};
var pfxValidator = {
  name: 'PFX',
  tagClass: asn1.Class.UNIVERSAL,
  type: asn1.Type.SEQUENCE,
  constructed: true,
  value: [{
    name: 'PFX.version',
    tagClass: asn1.Class.UNIVERSAL,
    type: asn1.Type.INTEGER,
    constructed: false,
    capture: 'version'
  }, contentInfoValidator, {
    name: 'PFX.macData',
    tagClass: asn1.Class.UNIVERSAL,
    type: asn1.Type.SEQUENCE,
    constructed: true,
    optional: true,
    captureAsn1: 'mac',
    value: [{
      name: 'PFX.macData.mac',
      tagClass: asn1.Class.UNIVERSAL,
      type: asn1.Type.SEQUENCE,
      // DigestInfo
      constructed: true,
      value: [{
        name: 'PFX.macData.mac.digestAlgorithm',
        tagClass: asn1.Class.UNIVERSAL,
        type: asn1.Type.SEQUENCE,
        // DigestAlgorithmIdentifier
        constructed: true,
        value: [{
          name: 'PFX.macData.mac.digestAlgorithm.algorithm',
          tagClass: asn1.Class.UNIVERSAL,
          type: asn1.Type.OID,
          constructed: false,
          capture: 'macAlgorithm'
        }, {
          name: 'PFX.macData.mac.digestAlgorithm.parameters',
          tagClass: asn1.Class.UNIVERSAL,
          captureAsn1: 'macAlgorithmParameters'
        }]
      }, {
        name: 'PFX.macData.mac.digest',
        tagClass: asn1.Class.UNIVERSAL,
        type: asn1.Type.OCTETSTRING,
        constructed: false,
        capture: 'macDigest'
      }]
    }, {
      name: 'PFX.macData.macSalt',
      tagClass: asn1.Class.UNIVERSAL,
      type: asn1.Type.OCTETSTRING,
      constructed: false,
      capture: 'macSalt'
    }, {
      name: 'PFX.macData.iterations',
      tagClass: asn1.Class.UNIVERSAL,
      type: asn1.Type.INTEGER,
      constructed: false,
      optional: true,
      capture: 'macIterations'
    }]
  }]
};
var safeBagValidator = {
  name: 'SafeBag',
  tagClass: asn1.Class.UNIVERSAL,
  type: asn1.Type.SEQUENCE,
  constructed: true,
  value: [{
    name: 'SafeBag.bagId',
    tagClass: asn1.Class.UNIVERSAL,
    type: asn1.Type.OID,
    constructed: false,
    capture: 'bagId'
  }, {
    name: 'SafeBag.bagValue',
    tagClass: asn1.Class.CONTEXT_SPECIFIC,
    constructed: true,
    captureAsn1: 'bagValue'
  }, {
    name: 'SafeBag.bagAttributes',
    tagClass: asn1.Class.UNIVERSAL,
    type: asn1.Type.SET,
    constructed: true,
    optional: true,
    capture: 'bagAttributes'
  }]
};
var attributeValidator = {
  name: 'Attribute',
  tagClass: asn1.Class.UNIVERSAL,
  type: asn1.Type.SEQUENCE,
  constructed: true,
  value: [{
    name: 'Attribute.attrId',
    tagClass: asn1.Class.UNIVERSAL,
    type: asn1.Type.OID,
    constructed: false,
    capture: 'oid'
  }, {
    name: 'Attribute.attrValues',
    tagClass: asn1.Class.UNIVERSAL,
    type: asn1.Type.SET,
    constructed: true,
    capture: 'values'
  }]
};
var certBagValidator = {
  name: 'CertBag',
  tagClass: asn1.Class.UNIVERSAL,
  type: asn1.Type.SEQUENCE,
  constructed: true,
  value: [{
    name: 'CertBag.certId',
    tagClass: asn1.Class.UNIVERSAL,
    type: asn1.Type.OID,
    constructed: false,
    capture: 'certId'
  }, {
    name: 'CertBag.certValue',
    tagClass: asn1.Class.CONTEXT_SPECIFIC,
    constructed: true,

    /* So far we only support X.509 certificates (which are wrapped in
       an OCTET STRING, hence hard code that here). */
    value: [{
      name: 'CertBag.certValue[0]',
      tagClass: asn1.Class.UNIVERSAL,
      type: asn1.Class.OCTETSTRING,
      constructed: false,
      capture: 'cert'
    }]
  }]
};
/**
 * Search SafeContents structure for bags with matching attributes.
 *
 * The search can optionally be narrowed by a certain bag type.
 *
 * @param safeContents the SafeContents structure to search in.
 * @param attrName the name of the attribute to compare against.
 * @param attrValue the attribute value to search for.
 * @param [bagType] bag type to narrow search by.
 *
 * @return an array of matching bags.
 */

function _getBagsByAttribute(safeContents, attrName, attrValue, bagType) {
  var result = [];

  for (var i = 0; i < safeContents.length; i++) {
    for (var j = 0; j < safeContents[i].safeBags.length; j++) {
      var bag = safeContents[i].safeBags[j];

      if (bagType !== undefined && bag.type !== bagType) {
        continue;
      } // only filter by bag type, no attribute specified


      if (attrName === null) {
        result.push(bag);
        continue;
      }

      if (bag.attributes[attrName] !== undefined && bag.attributes[attrName].indexOf(attrValue) >= 0) {
        result.push(bag);
      }
    }
  }

  return result;
}
/**
 * Converts a PKCS#12 PFX in ASN.1 notation into a PFX object.
 *
 * @param obj The PKCS#12 PFX in ASN.1 notation.
 * @param strict true to use strict DER decoding, false not to (default: true).
 * @param {String} password Password to decrypt with (optional).
 *
 * @return PKCS#12 PFX object.
 */


p12.pkcs12FromAsn1 = function (obj, strict, password) {
  // handle args
  if (typeof strict === 'string') {
    password = strict;
    strict = true;
  } else if (strict === undefined) {
    strict = true;
  } // validate PFX and capture data


  var capture = {};
  var errors = [];

  if (!asn1.validate(obj, pfxValidator, capture, errors)) {
    var error = new Error('Cannot read PKCS#12 PFX. ' + 'ASN.1 object is not an PKCS#12 PFX.');
    error.errors = error;
    throw error;
  }

  var pfx = {
    version: capture.version.charCodeAt(0),
    safeContents: [],

    /**
     * Gets bags with matching attributes.
     *
     * @param filter the attributes to filter by:
     *          [localKeyId] the localKeyId to search for.
     *          [localKeyIdHex] the localKeyId in hex to search for.
     *          [friendlyName] the friendly name to search for.
     *          [bagType] bag type to narrow each attribute search by.
     *
     * @return a map of attribute type to an array of matching bags or, if no
     *           attribute was given but a bag type, the map key will be the
     *           bag type.
     */
    getBags: function (filter) {
      var rval = {};
      var localKeyId;

      if ('localKeyId' in filter) {
        localKeyId = filter.localKeyId;
      } else if ('localKeyIdHex' in filter) {
        localKeyId = forge.util.hexToBytes(filter.localKeyIdHex);
      } // filter on bagType only


      if (localKeyId === undefined && !('friendlyName' in filter) && 'bagType' in filter) {
        rval[filter.bagType] = _getBagsByAttribute(pfx.safeContents, null, null, filter.bagType);
      }

      if (localKeyId !== undefined) {
        rval.localKeyId = _getBagsByAttribute(pfx.safeContents, 'localKeyId', localKeyId, filter.bagType);
      }

      if ('friendlyName' in filter) {
        rval.friendlyName = _getBagsByAttribute(pfx.safeContents, 'friendlyName', filter.friendlyName, filter.bagType);
      }

      return rval;
    },

    /**
     * DEPRECATED: use getBags() instead.
     *
     * Get bags with matching friendlyName attribute.
     *
     * @param friendlyName the friendly name to search for.
     * @param [bagType] bag type to narrow search by.
     *
     * @return an array of bags with matching friendlyName attribute.
     */
    getBagsByFriendlyName: function (friendlyName, bagType) {
      return _getBagsByAttribute(pfx.safeContents, 'friendlyName', friendlyName, bagType);
    },

    /**
     * DEPRECATED: use getBags() instead.
     *
     * Get bags with matching localKeyId attribute.
     *
     * @param localKeyId the localKeyId to search for.
     * @param [bagType] bag type to narrow search by.
     *
     * @return an array of bags with matching localKeyId attribute.
     */
    getBagsByLocalKeyId: function (localKeyId, bagType) {
      return _getBagsByAttribute(pfx.safeContents, 'localKeyId', localKeyId, bagType);
    }
  };

  if (capture.version.charCodeAt(0) !== 3) {
    var error = new Error('PKCS#12 PFX of version other than 3 not supported.');
    error.version = capture.version.charCodeAt(0);
    throw error;
  }

  if (asn1.derToOid(capture.contentType) !== pki.oids.data) {
    var error = new Error('Only PKCS#12 PFX in password integrity mode supported.');
    error.oid = asn1.derToOid(capture.contentType);
    throw error;
  }

  var data = capture.content.value[0];

  if (data.tagClass !== asn1.Class.UNIVERSAL || data.type !== asn1.Type.OCTETSTRING) {
    throw new Error('PKCS#12 authSafe content data is not an OCTET STRING.');
  }

  data = _decodePkcs7Data(data); // check for MAC

  if (capture.mac) {
    var md = null;
    var macKeyBytes = 0;
    var macAlgorithm = asn1.derToOid(capture.macAlgorithm);

    switch (macAlgorithm) {
      case pki.oids.sha1:
        md = forge.md.sha1.create();
        macKeyBytes = 20;
        break;

      case pki.oids.sha256:
        md = forge.md.sha256.create();
        macKeyBytes = 32;
        break;

      case pki.oids.sha384:
        md = forge.md.sha384.create();
        macKeyBytes = 48;
        break;

      case pki.oids.sha512:
        md = forge.md.sha512.create();
        macKeyBytes = 64;
        break;

      case pki.oids.md5:
        md = forge.md.md5.create();
        macKeyBytes = 16;
        break;
    }

    if (md === null) {
      throw new Error('PKCS#12 uses unsupported MAC algorithm: ' + macAlgorithm);
    } // verify MAC (iterations default to 1)


    var macSalt = new forge.util.ByteBuffer(capture.macSalt);
    var macIterations = 'macIterations' in capture ? parseInt(forge.util.bytesToHex(capture.macIterations), 16) : 1;
    var macKey = p12.generateKey(password, macSalt, 3, macIterations, macKeyBytes, md);
    var mac = forge.hmac.create();
    mac.start(md, macKey);
    mac.update(data.value);
    var macValue = mac.getMac();

    if (macValue.getBytes() !== capture.macDigest) {
      throw new Error('PKCS#12 MAC could not be verified. Invalid password?');
    }
  }

  _decodeAuthenticatedSafe(pfx, data.value, strict, password);

  return pfx;
};
/**
 * Decodes PKCS#7 Data. PKCS#7 (RFC 2315) defines "Data" as an OCTET STRING,
 * but it is sometimes an OCTET STRING that is composed/constructed of chunks,
 * each its own OCTET STRING. This is BER-encoding vs. DER-encoding. This
 * function transforms this corner-case into the usual simple,
 * non-composed/constructed OCTET STRING.
 *
 * This function may be moved to ASN.1 at some point to better deal with
 * more BER-encoding issues, should they arise.
 *
 * @param data the ASN.1 Data object to transform.
 */


function _decodePkcs7Data(data) {
  // handle special case of "chunked" data content: an octet string composed
  // of other octet strings
  if (data.composed || data.constructed) {
    var value = forge.util.createBuffer();

    for (var i = 0; i < data.value.length; ++i) {
      value.putBytes(data.value[i].value);
    }

    data.composed = data.constructed = false;
    data.value = value.getBytes();
  }

  return data;
}
/**
 * Decode PKCS#12 AuthenticatedSafe (BER encoded) into PFX object.
 *
 * The AuthenticatedSafe is a BER-encoded SEQUENCE OF ContentInfo.
 *
 * @param pfx The PKCS#12 PFX object to fill.
 * @param {String} authSafe BER-encoded AuthenticatedSafe.
 * @param strict true to use strict DER decoding, false not to.
 * @param {String} password Password to decrypt with (optional).
 */


function _decodeAuthenticatedSafe(pfx, authSafe, strict, password) {
  authSafe = asn1.fromDer(authSafe, strict);
  /* actually it's BER encoded */

  if (authSafe.tagClass !== asn1.Class.UNIVERSAL || authSafe.type !== asn1.Type.SEQUENCE || authSafe.constructed !== true) {
    throw new Error('PKCS#12 AuthenticatedSafe expected to be a ' + 'SEQUENCE OF ContentInfo');
  }

  for (var i = 0; i < authSafe.value.length; i++) {
    var contentInfo = authSafe.value[i]; // validate contentInfo and capture data

    var capture = {};
    var errors = [];

    if (!asn1.validate(contentInfo, contentInfoValidator, capture, errors)) {
      var error = new Error('Cannot read ContentInfo.');
      error.errors = errors;
      throw error;
    }

    var obj = {
      encrypted: false
    };
    var safeContents = null;
    var data = capture.content.value[0];

    switch (asn1.derToOid(capture.contentType)) {
      case pki.oids.data:
        if (data.tagClass !== asn1.Class.UNIVERSAL || data.type !== asn1.Type.OCTETSTRING) {
          throw new Error('PKCS#12 SafeContents Data is not an OCTET STRING.');
        }

        safeContents = _decodePkcs7Data(data).value;
        break;

      case pki.oids.encryptedData:
        safeContents = _decryptSafeContents(data, password);
        obj.encrypted = true;
        break;

      default:
        var error = new Error('Unsupported PKCS#12 contentType.');
        error.contentType = asn1.derToOid(capture.contentType);
        throw error;
    }

    obj.safeBags = _decodeSafeContents(safeContents, strict, password);
    pfx.safeContents.push(obj);
  }
}
/**
 * Decrypt PKCS#7 EncryptedData structure.
 *
 * @param data ASN.1 encoded EncryptedContentInfo object.
 * @param password The user-provided password.
 *
 * @return The decrypted SafeContents (ASN.1 object).
 */


function _decryptSafeContents(data, password) {
  var capture = {};
  var errors = [];

  if (!asn1.validate(data, forge.pkcs7.asn1.encryptedDataValidator, capture, errors)) {
    var error = new Error('Cannot read EncryptedContentInfo.');
    error.errors = errors;
    throw error;
  }

  var oid = asn1.derToOid(capture.contentType);

  if (oid !== pki.oids.data) {
    var error = new Error('PKCS#12 EncryptedContentInfo ContentType is not Data.');
    error.oid = oid;
    throw error;
  } // get cipher


  oid = asn1.derToOid(capture.encAlgorithm);
  var cipher = pki.pbe.getCipher(oid, capture.encParameter, password); // get encrypted data

  var encryptedContentAsn1 = _decodePkcs7Data(capture.encryptedContentAsn1);

  var encrypted = forge.util.createBuffer(encryptedContentAsn1.value);
  cipher.update(encrypted);

  if (!cipher.finish()) {
    throw new Error('Failed to decrypt PKCS#12 SafeContents.');
  }

  return cipher.output.getBytes();
}
/**
 * Decode PKCS#12 SafeContents (BER-encoded) into array of Bag objects.
 *
 * The safeContents is a BER-encoded SEQUENCE OF SafeBag.
 *
 * @param {String} safeContents BER-encoded safeContents.
 * @param strict true to use strict DER decoding, false not to.
 * @param {String} password Password to decrypt with (optional).
 *
 * @return {Array} Array of Bag objects.
 */


function _decodeSafeContents(safeContents, strict, password) {
  // if strict and no safe contents, return empty safes
  if (!strict && safeContents.length === 0) {
    return [];
  } // actually it's BER-encoded


  safeContents = asn1.fromDer(safeContents, strict);

  if (safeContents.tagClass !== asn1.Class.UNIVERSAL || safeContents.type !== asn1.Type.SEQUENCE || safeContents.constructed !== true) {
    throw new Error('PKCS#12 SafeContents expected to be a SEQUENCE OF SafeBag.');
  }

  var res = [];

  for (var i = 0; i < safeContents.value.length; i++) {
    var safeBag = safeContents.value[i]; // validate SafeBag and capture data

    var capture = {};
    var errors = [];

    if (!asn1.validate(safeBag, safeBagValidator, capture, errors)) {
      var error = new Error('Cannot read SafeBag.');
      error.errors = errors;
      throw error;
    }
    /* Create bag object and push to result array. */


    var bag = {
      type: asn1.derToOid(capture.bagId),
      attributes: _decodeBagAttributes(capture.bagAttributes)
    };
    res.push(bag);
    var validator, decoder;
    var bagAsn1 = capture.bagValue.value[0];

    switch (bag.type) {
      case pki.oids.pkcs8ShroudedKeyBag:
        /* bagAsn1 has a EncryptedPrivateKeyInfo, which we need to decrypt.
           Afterwards we can handle it like a keyBag,
           which is a PrivateKeyInfo. */
        bagAsn1 = pki.decryptPrivateKeyInfo(bagAsn1, password);

        if (bagAsn1 === null) {
          throw new Error('Unable to decrypt PKCS#8 ShroudedKeyBag, wrong password?');
        }

      /* fall through */

      case pki.oids.keyBag:
        /* A PKCS#12 keyBag is a simple PrivateKeyInfo as understood by our
           PKI module, hence we don't have to do validation/capturing here,
           just pass what we already got. */
        try {
          bag.key = pki.privateKeyFromAsn1(bagAsn1);
        } catch (e) {
          // ignore unknown key type, pass asn1 value
          bag.key = null;
          bag.asn1 = bagAsn1;
        }

        continue;

      /* Nothing more to do. */

      case pki.oids.certBag:
        /* A PKCS#12 certBag can wrap both X.509 and sdsi certificates.
           Therefore put the SafeBag content through another validator to
           capture the fields.  Afterwards check & store the results. */
        validator = certBagValidator;

        decoder = function () {
          if (asn1.derToOid(capture.certId) !== pki.oids.x509Certificate) {
            var error = new Error('Unsupported certificate type, only X.509 supported.');
            error.oid = asn1.derToOid(capture.certId);
            throw error;
          } // true=produce cert hash


          var certAsn1 = asn1.fromDer(capture.cert, strict);

          try {
            bag.cert = pki.certificateFromAsn1(certAsn1, true);
          } catch (e) {
            // ignore unknown cert type, pass asn1 value
            bag.cert = null;
            bag.asn1 = certAsn1;
          }
        };

        break;

      default:
        var error = new Error('Unsupported PKCS#12 SafeBag type.');
        error.oid = bag.type;
        throw error;
    }
    /* Validate SafeBag value (i.e. CertBag, etc.) and capture data if needed. */


    if (validator !== undefined && !asn1.validate(bagAsn1, validator, capture, errors)) {
      var error = new Error('Cannot read PKCS#12 ' + validator.name);
      error.errors = errors;
      throw error;
    }
    /* Call decoder function from above to store the results. */


    decoder();
  }

  return res;
}
/**
 * Decode PKCS#12 SET OF PKCS12Attribute into JavaScript object.
 *
 * @param attributes SET OF PKCS12Attribute (ASN.1 object).
 *
 * @return the decoded attributes.
 */


function _decodeBagAttributes(attributes) {
  var decodedAttrs = {};

  if (attributes !== undefined) {
    for (var i = 0; i < attributes.length; ++i) {
      var capture = {};
      var errors = [];

      if (!asn1.validate(attributes[i], attributeValidator, capture, errors)) {
        var error = new Error('Cannot read PKCS#12 BagAttribute.');
        error.errors = errors;
        throw error;
      }

      var oid = asn1.derToOid(capture.oid);

      if (pki.oids[oid] === undefined) {
        // unsupported attribute type, ignore.
        continue;
      }

      decodedAttrs[pki.oids[oid]] = [];

      for (var j = 0; j < capture.values.length; ++j) {
        decodedAttrs[pki.oids[oid]].push(capture.values[j].value);
      }
    }
  }

  return decodedAttrs;
}
/**
 * Wraps a private key and certificate in a PKCS#12 PFX wrapper. If a
 * password is provided then the private key will be encrypted.
 *
 * An entire certificate chain may also be included. To do this, pass
 * an array for the "cert" parameter where the first certificate is
 * the one that is paired with the private key and each subsequent one
 * verifies the previous one. The certificates may be in PEM format or
 * have been already parsed by Forge.
 *
 * @todo implement password-based-encryption for the whole package
 *
 * @param key the private key.
 * @param cert the certificate (may be an array of certificates in order
 *          to specify a certificate chain).
 * @param password the password to use, null for none.
 * @param options:
 *          algorithm the encryption algorithm to use
 *            ('aes128', 'aes192', 'aes256', '3des'), defaults to 'aes128'.
 *          count the iteration count to use.
 *          saltSize the salt size to use.
 *          useMac true to include a MAC, false not to, defaults to true.
 *          localKeyId the local key ID to use, in hex.
 *          friendlyName the friendly name to use.
 *          generateLocalKeyId true to generate a random local key ID,
 *            false not to, defaults to true.
 *
 * @return the PKCS#12 PFX ASN.1 object.
 */


p12.toPkcs12Asn1 = function (key, cert, password, options) {
  // set default options
  options = options || {};
  options.saltSize = options.saltSize || 8;
  options.count = options.count || 2048;
  options.algorithm = options.algorithm || options.encAlgorithm || 'aes128';

  if (!('useMac' in options)) {
    options.useMac = true;
  }

  if (!('localKeyId' in options)) {
    options.localKeyId = null;
  }

  if (!('generateLocalKeyId' in options)) {
    options.generateLocalKeyId = true;
  }

  var localKeyId = options.localKeyId;
  var bagAttrs;

  if (localKeyId !== null) {
    localKeyId = forge.util.hexToBytes(localKeyId);
  } else if (options.generateLocalKeyId) {
    // use SHA-1 of paired cert, if available
    if (cert) {
      var pairedCert = forge.util.isArray(cert) ? cert[0] : cert;

      if (typeof pairedCert === 'string') {
        pairedCert = pki.certificateFromPem(pairedCert);
      }

      var sha1 = forge.md.sha1.create();
      sha1.update(asn1.toDer(pki.certificateToAsn1(pairedCert)).getBytes());
      localKeyId = sha1.digest().getBytes();
    } else {
      // FIXME: consider using SHA-1 of public key (which can be generated
      // from private key components), see: cert.generateSubjectKeyIdentifier
      // generate random bytes
      localKeyId = forge.random.getBytes(20);
    }
  }

  var attrs = [];

  if (localKeyId !== null) {
    attrs.push( // localKeyID
    asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [// attrId
    asn1.create(asn1.Class.UNIVERSAL, asn1.Type.OID, false, asn1.oidToDer(pki.oids.localKeyId).getBytes()), // attrValues
    asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SET, true, [asn1.create(asn1.Class.UNIVERSAL, asn1.Type.OCTETSTRING, false, localKeyId)])]));
  }

  if ('friendlyName' in options) {
    attrs.push( // friendlyName
    asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [// attrId
    asn1.create(asn1.Class.UNIVERSAL, asn1.Type.OID, false, asn1.oidToDer(pki.oids.friendlyName).getBytes()), // attrValues
    asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SET, true, [asn1.create(asn1.Class.UNIVERSAL, asn1.Type.BMPSTRING, false, options.friendlyName)])]));
  }

  if (attrs.length > 0) {
    bagAttrs = asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SET, true, attrs);
  } // collect contents for AuthenticatedSafe


  var contents = []; // create safe bag(s) for certificate chain

  var chain = [];

  if (cert !== null) {
    if (forge.util.isArray(cert)) {
      chain = cert;
    } else {
      chain = [cert];
    }
  }

  var certSafeBags = [];

  for (var i = 0; i < chain.length; ++i) {
    // convert cert from PEM as necessary
    cert = chain[i];

    if (typeof cert === 'string') {
      cert = pki.certificateFromPem(cert);
    } // SafeBag


    var certBagAttrs = i === 0 ? bagAttrs : undefined;
    var certAsn1 = pki.certificateToAsn1(cert);
    var certSafeBag = asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [// bagId
    asn1.create(asn1.Class.UNIVERSAL, asn1.Type.OID, false, asn1.oidToDer(pki.oids.certBag).getBytes()), // bagValue
    asn1.create(asn1.Class.CONTEXT_SPECIFIC, 0, true, [// CertBag
    asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [// certId
    asn1.create(asn1.Class.UNIVERSAL, asn1.Type.OID, false, asn1.oidToDer(pki.oids.x509Certificate).getBytes()), // certValue (x509Certificate)
    asn1.create(asn1.Class.CONTEXT_SPECIFIC, 0, true, [asn1.create(asn1.Class.UNIVERSAL, asn1.Type.OCTETSTRING, false, asn1.toDer(certAsn1).getBytes())])])]), // bagAttributes (OPTIONAL)
    certBagAttrs]);
    certSafeBags.push(certSafeBag);
  }

  if (certSafeBags.length > 0) {
    // SafeContents
    var certSafeContents = asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, certSafeBags); // ContentInfo

    var certCI = // PKCS#7 ContentInfo
    asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [// contentType
    asn1.create(asn1.Class.UNIVERSAL, asn1.Type.OID, false, // OID for the content type is 'data'
    asn1.oidToDer(pki.oids.data).getBytes()), // content
    asn1.create(asn1.Class.CONTEXT_SPECIFIC, 0, true, [asn1.create(asn1.Class.UNIVERSAL, asn1.Type.OCTETSTRING, false, asn1.toDer(certSafeContents).getBytes())])]);
    contents.push(certCI);
  } // create safe contents for private key


  var keyBag = null;

  if (key !== null) {
    // SafeBag
    var pkAsn1 = pki.wrapRsaPrivateKey(pki.privateKeyToAsn1(key));

    if (password === null) {
      // no encryption
      keyBag = asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [// bagId
      asn1.create(asn1.Class.UNIVERSAL, asn1.Type.OID, false, asn1.oidToDer(pki.oids.keyBag).getBytes()), // bagValue
      asn1.create(asn1.Class.CONTEXT_SPECIFIC, 0, true, [// PrivateKeyInfo
      pkAsn1]), // bagAttributes (OPTIONAL)
      bagAttrs]);
    } else {
      // encrypted PrivateKeyInfo
      keyBag = asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [// bagId
      asn1.create(asn1.Class.UNIVERSAL, asn1.Type.OID, false, asn1.oidToDer(pki.oids.pkcs8ShroudedKeyBag).getBytes()), // bagValue
      asn1.create(asn1.Class.CONTEXT_SPECIFIC, 0, true, [// EncryptedPrivateKeyInfo
      pki.encryptPrivateKeyInfo(pkAsn1, password, options)]), // bagAttributes (OPTIONAL)
      bagAttrs]);
    } // SafeContents


    var keySafeContents = asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [keyBag]); // ContentInfo

    var keyCI = // PKCS#7 ContentInfo
    asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [// contentType
    asn1.create(asn1.Class.UNIVERSAL, asn1.Type.OID, false, // OID for the content type is 'data'
    asn1.oidToDer(pki.oids.data).getBytes()), // content
    asn1.create(asn1.Class.CONTEXT_SPECIFIC, 0, true, [asn1.create(asn1.Class.UNIVERSAL, asn1.Type.OCTETSTRING, false, asn1.toDer(keySafeContents).getBytes())])]);
    contents.push(keyCI);
  } // create AuthenticatedSafe by stringing together the contents


  var safe = asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, contents);
  var macData;

  if (options.useMac) {
    // MacData
    var sha1 = forge.md.sha1.create();
    var macSalt = new forge.util.ByteBuffer(forge.random.getBytes(options.saltSize));
    var count = options.count; // 160-bit key

    var key = p12.generateKey(password, macSalt, 3, count, 20);
    var mac = forge.hmac.create();
    mac.start(sha1, key);
    mac.update(asn1.toDer(safe).getBytes());
    var macValue = mac.getMac();
    macData = asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [// mac DigestInfo
    asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [// digestAlgorithm
    asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [// algorithm = SHA-1
    asn1.create(asn1.Class.UNIVERSAL, asn1.Type.OID, false, asn1.oidToDer(pki.oids.sha1).getBytes()), // parameters = Null
    asn1.create(asn1.Class.UNIVERSAL, asn1.Type.NULL, false, '')]), // digest
    asn1.create(asn1.Class.UNIVERSAL, asn1.Type.OCTETSTRING, false, macValue.getBytes())]), // macSalt OCTET STRING
    asn1.create(asn1.Class.UNIVERSAL, asn1.Type.OCTETSTRING, false, macSalt.getBytes()), // iterations INTEGER (XXX: Only support count < 65536)
    asn1.create(asn1.Class.UNIVERSAL, asn1.Type.INTEGER, false, asn1.integerToDer(count).getBytes())]);
  } // PFX


  return asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [// version (3)
  asn1.create(asn1.Class.UNIVERSAL, asn1.Type.INTEGER, false, asn1.integerToDer(3).getBytes()), // PKCS#7 ContentInfo
  asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [// contentType
  asn1.create(asn1.Class.UNIVERSAL, asn1.Type.OID, false, // OID for the content type is 'data'
  asn1.oidToDer(pki.oids.data).getBytes()), // content
  asn1.create(asn1.Class.CONTEXT_SPECIFIC, 0, true, [asn1.create(asn1.Class.UNIVERSAL, asn1.Type.OCTETSTRING, false, asn1.toDer(safe).getBytes())])]), macData]);
};
/**
 * Derives a PKCS#12 key.
 *
 * @param password the password to derive the key material from, null or
 *          undefined for none.
 * @param salt the salt, as a ByteBuffer, to use.
 * @param id the PKCS#12 ID byte (1 = key material, 2 = IV, 3 = MAC).
 * @param iter the iteration count.
 * @param n the number of bytes to derive from the password.
 * @param md the message digest to use, defaults to SHA-1.
 *
 * @return a ByteBuffer with the bytes derived from the password.
 */


p12.generateKey = forge.pbe.generatePkcs12Key;
},{"./forge":"o20S","./asn1":"BA5j","./hmac":"NYQx","./oids":"rbLR","./pkcs7asn1":"Z3HL","./pbe":"DWC4","./random":"Gfwb","./rsa":"HL1S","./sha1":"a9m4","./util":"lWyh","./x509":"CJHG"}],"R1ju":[function(require,module,exports) {
/**
 * Javascript implementation of a basic Public Key Infrastructure, including
 * support for RSA public and private keys.
 *
 * @author Dave Longley
 *
 * Copyright (c) 2010-2013 Digital Bazaar, Inc.
 */
var forge = require('./forge');

require('./asn1');

require('./oids');

require('./pbe');

require('./pem');

require('./pbkdf2');

require('./pkcs12');

require('./pss');

require('./rsa');

require('./util');

require('./x509'); // shortcut for asn.1 API


var asn1 = forge.asn1;
/* Public Key Infrastructure (PKI) implementation. */

var pki = module.exports = forge.pki = forge.pki || {};
/**
 * NOTE: THIS METHOD IS DEPRECATED. Use pem.decode() instead.
 *
 * Converts PEM-formatted data to DER.
 *
 * @param pem the PEM-formatted data.
 *
 * @return the DER-formatted data.
 */

pki.pemToDer = function (pem) {
  var msg = forge.pem.decode(pem)[0];

  if (msg.procType && msg.procType.type === 'ENCRYPTED') {
    throw new Error('Could not convert PEM to DER; PEM is encrypted.');
  }

  return forge.util.createBuffer(msg.body);
};
/**
 * Converts an RSA private key from PEM format.
 *
 * @param pem the PEM-formatted private key.
 *
 * @return the private key.
 */


pki.privateKeyFromPem = function (pem) {
  var msg = forge.pem.decode(pem)[0];

  if (msg.type !== 'PRIVATE KEY' && msg.type !== 'RSA PRIVATE KEY') {
    var error = new Error('Could not convert private key from PEM; PEM ' + 'header type is not "PRIVATE KEY" or "RSA PRIVATE KEY".');
    error.headerType = msg.type;
    throw error;
  }

  if (msg.procType && msg.procType.type === 'ENCRYPTED') {
    throw new Error('Could not convert private key from PEM; PEM is encrypted.');
  } // convert DER to ASN.1 object


  var obj = asn1.fromDer(msg.body);
  return pki.privateKeyFromAsn1(obj);
};
/**
 * Converts an RSA private key to PEM format.
 *
 * @param key the private key.
 * @param maxline the maximum characters per line, defaults to 64.
 *
 * @return the PEM-formatted private key.
 */


pki.privateKeyToPem = function (key, maxline) {
  // convert to ASN.1, then DER, then PEM-encode
  var msg = {
    type: 'RSA PRIVATE KEY',
    body: asn1.toDer(pki.privateKeyToAsn1(key)).getBytes()
  };
  return forge.pem.encode(msg, {
    maxline: maxline
  });
};
/**
 * Converts a PrivateKeyInfo to PEM format.
 *
 * @param pki the PrivateKeyInfo.
 * @param maxline the maximum characters per line, defaults to 64.
 *
 * @return the PEM-formatted private key.
 */


pki.privateKeyInfoToPem = function (pki, maxline) {
  // convert to DER, then PEM-encode
  var msg = {
    type: 'PRIVATE KEY',
    body: asn1.toDer(pki).getBytes()
  };
  return forge.pem.encode(msg, {
    maxline: maxline
  });
};
},{"./forge":"o20S","./asn1":"BA5j","./oids":"rbLR","./pbe":"DWC4","./pem":"ClqA","./pbkdf2":"Uyyi","./pkcs12":"yHod","./pss":"cVuL","./rsa":"HL1S","./util":"lWyh","./x509":"CJHG"}],"KBNr":[function(require,module,exports) {
/**
 * Message Digest Algorithm 5 with 128-bit digest (MD5) implementation.
 *
 * @author Dave Longley
 *
 * Copyright (c) 2010-2014 Digital Bazaar, Inc.
 */
var forge = require('./forge');

require('./md');

require('./util');

var md5 = module.exports = forge.md5 = forge.md5 || {};
forge.md.md5 = forge.md.algorithms.md5 = md5;
/**
 * Creates an MD5 message digest object.
 *
 * @return a message digest object.
 */

md5.create = function () {
  // do initialization as necessary
  if (!_initialized) {
    _init();
  } // MD5 state contains four 32-bit integers


  var _state = null; // input buffer

  var _input = forge.util.createBuffer(); // used for word storage


  var _w = new Array(16); // message digest object


  var md = {
    algorithm: 'md5',
    blockLength: 64,
    digestLength: 16,
    // 56-bit length of message so far (does not including padding)
    messageLength: 0,
    // true message length
    fullMessageLength: null,
    // size of message length in bytes
    messageLengthSize: 8
  };
  /**
   * Starts the digest.
   *
   * @return this digest object.
   */

  md.start = function () {
    // up to 56-bit message length for convenience
    md.messageLength = 0; // full message length (set md.messageLength64 for backwards-compatibility)

    md.fullMessageLength = md.messageLength64 = [];
    var int32s = md.messageLengthSize / 4;

    for (var i = 0; i < int32s; ++i) {
      md.fullMessageLength.push(0);
    }

    _input = forge.util.createBuffer();
    _state = {
      h0: 0x67452301,
      h1: 0xEFCDAB89,
      h2: 0x98BADCFE,
      h3: 0x10325476
    };
    return md;
  }; // start digest automatically for first time


  md.start();
  /**
   * Updates the digest with the given message input. The given input can
   * treated as raw input (no encoding will be applied) or an encoding of
   * 'utf8' maybe given to encode the input using UTF-8.
   *
   * @param msg the message input to update with.
   * @param encoding the encoding to use (default: 'raw', other: 'utf8').
   *
   * @return this digest object.
   */

  md.update = function (msg, encoding) {
    if (encoding === 'utf8') {
      msg = forge.util.encodeUtf8(msg);
    } // update message length


    var len = msg.length;
    md.messageLength += len;
    len = [len / 0x100000000 >>> 0, len >>> 0];

    for (var i = md.fullMessageLength.length - 1; i >= 0; --i) {
      md.fullMessageLength[i] += len[1];
      len[1] = len[0] + (md.fullMessageLength[i] / 0x100000000 >>> 0);
      md.fullMessageLength[i] = md.fullMessageLength[i] >>> 0;
      len[0] = len[1] / 0x100000000 >>> 0;
    } // add bytes to input buffer


    _input.putBytes(msg); // process bytes


    _update(_state, _w, _input); // compact input buffer every 2K or if empty


    if (_input.read > 2048 || _input.length() === 0) {
      _input.compact();
    }

    return md;
  };
  /**
   * Produces the digest.
   *
   * @return a byte buffer containing the digest value.
   */


  md.digest = function () {
    /* Note: Here we copy the remaining bytes in the input buffer and
    add the appropriate MD5 padding. Then we do the final update
    on a copy of the state so that if the user wants to get
    intermediate digests they can do so. */

    /* Determine the number of bytes that must be added to the message
    to ensure its length is congruent to 448 mod 512. In other words,
    the data to be digested must be a multiple of 512 bits (or 128 bytes).
    This data includes the message, some padding, and the length of the
    message. Since the length of the message will be encoded as 8 bytes (64
    bits), that means that the last segment of the data must have 56 bytes
    (448 bits) of message and padding. Therefore, the length of the message
    plus the padding must be congruent to 448 mod 512 because
    512 - 128 = 448.
     In order to fill up the message length it must be filled with
    padding that begins with 1 bit followed by all 0 bits. Padding
    must *always* be present, so if the message length is already
    congruent to 448 mod 512, then 512 padding bits must be added. */
    var finalBlock = forge.util.createBuffer();
    finalBlock.putBytes(_input.bytes()); // compute remaining size to be digested (include message length size)

    var remaining = md.fullMessageLength[md.fullMessageLength.length - 1] + md.messageLengthSize; // add padding for overflow blockSize - overflow
    // _padding starts with 1 byte with first bit is set (byte value 128), then
    // there may be up to (blockSize - 1) other pad bytes

    var overflow = remaining & md.blockLength - 1;
    finalBlock.putBytes(_padding.substr(0, md.blockLength - overflow)); // serialize message length in bits in little-endian order; since length
    // is stored in bytes we multiply by 8 and add carry

    var bits,
        carry = 0;

    for (var i = md.fullMessageLength.length - 1; i >= 0; --i) {
      bits = md.fullMessageLength[i] * 8 + carry;
      carry = bits / 0x100000000 >>> 0;
      finalBlock.putInt32Le(bits >>> 0);
    }

    var s2 = {
      h0: _state.h0,
      h1: _state.h1,
      h2: _state.h2,
      h3: _state.h3
    };

    _update(s2, _w, finalBlock);

    var rval = forge.util.createBuffer();
    rval.putInt32Le(s2.h0);
    rval.putInt32Le(s2.h1);
    rval.putInt32Le(s2.h2);
    rval.putInt32Le(s2.h3);
    return rval;
  };

  return md;
}; // padding, constant tables for calculating md5


var _padding = null;
var _g = null;
var _r = null;
var _k = null;
var _initialized = false;
/**
 * Initializes the constant tables.
 */

function _init() {
  // create padding
  _padding = String.fromCharCode(128);
  _padding += forge.util.fillString(String.fromCharCode(0x00), 64); // g values

  _g = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 1, 6, 11, 0, 5, 10, 15, 4, 9, 14, 3, 8, 13, 2, 7, 12, 5, 8, 11, 14, 1, 4, 7, 10, 13, 0, 3, 6, 9, 12, 15, 2, 0, 7, 14, 5, 12, 3, 10, 1, 8, 15, 6, 13, 4, 11, 2, 9]; // rounds table

  _r = [7, 12, 17, 22, 7, 12, 17, 22, 7, 12, 17, 22, 7, 12, 17, 22, 5, 9, 14, 20, 5, 9, 14, 20, 5, 9, 14, 20, 5, 9, 14, 20, 4, 11, 16, 23, 4, 11, 16, 23, 4, 11, 16, 23, 4, 11, 16, 23, 6, 10, 15, 21, 6, 10, 15, 21, 6, 10, 15, 21, 6, 10, 15, 21]; // get the result of abs(sin(i + 1)) as a 32-bit integer

  _k = new Array(64);

  for (var i = 0; i < 64; ++i) {
    _k[i] = Math.floor(Math.abs(Math.sin(i + 1)) * 0x100000000);
  } // now initialized


  _initialized = true;
}
/**
 * Updates an MD5 state with the given byte buffer.
 *
 * @param s the MD5 state to update.
 * @param w the array to use to store words.
 * @param bytes the byte buffer to update with.
 */


function _update(s, w, bytes) {
  // consume 512 bit (64 byte) chunks
  var t, a, b, c, d, f, r, i;
  var len = bytes.length();

  while (len >= 64) {
    // initialize hash value for this chunk
    a = s.h0;
    b = s.h1;
    c = s.h2;
    d = s.h3; // round 1

    for (i = 0; i < 16; ++i) {
      w[i] = bytes.getInt32Le();
      f = d ^ b & (c ^ d);
      t = a + f + _k[i] + w[i];
      r = _r[i];
      a = d;
      d = c;
      c = b;
      b += t << r | t >>> 32 - r;
    } // round 2


    for (; i < 32; ++i) {
      f = c ^ d & (b ^ c);
      t = a + f + _k[i] + w[_g[i]];
      r = _r[i];
      a = d;
      d = c;
      c = b;
      b += t << r | t >>> 32 - r;
    } // round 3


    for (; i < 48; ++i) {
      f = b ^ c ^ d;
      t = a + f + _k[i] + w[_g[i]];
      r = _r[i];
      a = d;
      d = c;
      c = b;
      b += t << r | t >>> 32 - r;
    } // round 4


    for (; i < 64; ++i) {
      f = c ^ (b | ~d);
      t = a + f + _k[i] + w[_g[i]];
      r = _r[i];
      a = d;
      d = c;
      c = b;
      b += t << r | t >>> 32 - r;
    } // update hash state


    s.h0 = s.h0 + a | 0;
    s.h1 = s.h1 + b | 0;
    s.h2 = s.h2 + c | 0;
    s.h3 = s.h3 + d | 0;
    len -= 64;
  }
}
},{"./forge":"o20S","./md":"Tsiu","./util":"lWyh"}],"kpD3":[function(require,module,exports) {

// shim for using process in browser
var process = module.exports = {}; // cached from whatever global is present so that test runners that stub it
// don't break things.  But we need to wrap it in a try catch in case it is
// wrapped in strict mode code which doesn't define any globals.  It's inside a
// function because try/catches deoptimize in certain engines.

var cachedSetTimeout;
var cachedClearTimeout;

function defaultSetTimout() {
  throw new Error('setTimeout has not been defined');
}

function defaultClearTimeout() {
  throw new Error('clearTimeout has not been defined');
}

(function () {
  try {
    if (typeof setTimeout === 'function') {
      cachedSetTimeout = setTimeout;
    } else {
      cachedSetTimeout = defaultSetTimout;
    }
  } catch (e) {
    cachedSetTimeout = defaultSetTimout;
  }

  try {
    if (typeof clearTimeout === 'function') {
      cachedClearTimeout = clearTimeout;
    } else {
      cachedClearTimeout = defaultClearTimeout;
    }
  } catch (e) {
    cachedClearTimeout = defaultClearTimeout;
  }
})();

function runTimeout(fun) {
  if (cachedSetTimeout === setTimeout) {
    //normal enviroments in sane situations
    return setTimeout(fun, 0);
  } // if setTimeout wasn't available but was latter defined


  if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
    cachedSetTimeout = setTimeout;
    return setTimeout(fun, 0);
  }

  try {
    // when when somebody has screwed with setTimeout but no I.E. maddness
    return cachedSetTimeout(fun, 0);
  } catch (e) {
    try {
      // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
      return cachedSetTimeout.call(null, fun, 0);
    } catch (e) {
      // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
      return cachedSetTimeout.call(this, fun, 0);
    }
  }
}

function runClearTimeout(marker) {
  if (cachedClearTimeout === clearTimeout) {
    //normal enviroments in sane situations
    return clearTimeout(marker);
  } // if clearTimeout wasn't available but was latter defined


  if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
    cachedClearTimeout = clearTimeout;
    return clearTimeout(marker);
  }

  try {
    // when when somebody has screwed with setTimeout but no I.E. maddness
    return cachedClearTimeout(marker);
  } catch (e) {
    try {
      // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
      return cachedClearTimeout.call(null, marker);
    } catch (e) {
      // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
      // Some versions of I.E. have different rules for clearTimeout vs setTimeout
      return cachedClearTimeout.call(this, marker);
    }
  }
}

var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;

function cleanUpNextTick() {
  if (!draining || !currentQueue) {
    return;
  }

  draining = false;

  if (currentQueue.length) {
    queue = currentQueue.concat(queue);
  } else {
    queueIndex = -1;
  }

  if (queue.length) {
    drainQueue();
  }
}

function drainQueue() {
  if (draining) {
    return;
  }

  var timeout = runTimeout(cleanUpNextTick);
  draining = true;
  var len = queue.length;

  while (len) {
    currentQueue = queue;
    queue = [];

    while (++queueIndex < len) {
      if (currentQueue) {
        currentQueue[queueIndex].run();
      }
    }

    queueIndex = -1;
    len = queue.length;
  }

  currentQueue = null;
  draining = false;
  runClearTimeout(timeout);
}

process.nextTick = function (fun) {
  var args = new Array(arguments.length - 1);

  if (arguments.length > 1) {
    for (var i = 1; i < arguments.length; i++) {
      args[i - 1] = arguments[i];
    }
  }

  queue.push(new Item(fun, args));

  if (queue.length === 1 && !draining) {
    runTimeout(drainQueue);
  }
}; // v8 likes predictible objects


function Item(fun, array) {
  this.fun = fun;
  this.array = array;
}

Item.prototype.run = function () {
  this.fun.apply(null, this.array);
};

process.title = 'browser';
process.env = {};
process.argv = [];
process.version = ''; // empty string to avoid regexp issues

process.versions = {};

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;
process.prependListener = noop;
process.prependOnceListener = noop;

process.listeners = function (name) {
  return [];
};

process.binding = function (name) {
  throw new Error('process.binding is not supported');
};

process.cwd = function () {
  return '/';
};

process.chdir = function (dir) {
  throw new Error('process.chdir is not supported');
};

process.umask = function () {
  return 0;
};
},{}],"hT6R":[function(require,module,exports) {
var process = require("process");
var global = arguments[3];
var define;
/**
 * [js-sha3]{@link https://github.com/emn178/js-sha3}
 *
 * @version 0.8.0
 * @author Chen, Yi-Cyuan [emn178@gmail.com]
 * @copyright Chen, Yi-Cyuan 2015-2018
 * @license MIT
 */
/*jslint bitwise: true */
(function () {
  'use strict';

  var INPUT_ERROR = 'input is invalid type';
  var FINALIZE_ERROR = 'finalize already called';
  var WINDOW = typeof window === 'object';
  var root = WINDOW ? window : {};
  if (root.JS_SHA3_NO_WINDOW) {
    WINDOW = false;
  }
  var WEB_WORKER = !WINDOW && typeof self === 'object';
  var NODE_JS = !root.JS_SHA3_NO_NODE_JS && typeof process === 'object' && process.versions && process.versions.node;
  if (NODE_JS) {
    root = global;
  } else if (WEB_WORKER) {
    root = self;
  }
  var COMMON_JS = !root.JS_SHA3_NO_COMMON_JS && typeof module === 'object' && module.exports;
  var AMD = typeof define === 'function' && define.amd;
  var ARRAY_BUFFER = !root.JS_SHA3_NO_ARRAY_BUFFER && typeof ArrayBuffer !== 'undefined';
  var HEX_CHARS = '0123456789abcdef'.split('');
  var SHAKE_PADDING = [31, 7936, 2031616, 520093696];
  var CSHAKE_PADDING = [4, 1024, 262144, 67108864];
  var KECCAK_PADDING = [1, 256, 65536, 16777216];
  var PADDING = [6, 1536, 393216, 100663296];
  var SHIFT = [0, 8, 16, 24];
  var RC = [1, 0, 32898, 0, 32906, 2147483648, 2147516416, 2147483648, 32907, 0, 2147483649,
    0, 2147516545, 2147483648, 32777, 2147483648, 138, 0, 136, 0, 2147516425, 0,
    2147483658, 0, 2147516555, 0, 139, 2147483648, 32905, 2147483648, 32771,
    2147483648, 32770, 2147483648, 128, 2147483648, 32778, 0, 2147483658, 2147483648,
    2147516545, 2147483648, 32896, 2147483648, 2147483649, 0, 2147516424, 2147483648];
  var BITS = [224, 256, 384, 512];
  var SHAKE_BITS = [128, 256];
  var OUTPUT_TYPES = ['hex', 'buffer', 'arrayBuffer', 'array', 'digest'];
  var CSHAKE_BYTEPAD = {
    '128': 168,
    '256': 136
  };

  if (root.JS_SHA3_NO_NODE_JS || !Array.isArray) {
    Array.isArray = function (obj) {
      return Object.prototype.toString.call(obj) === '[object Array]';
    };
  }

  if (ARRAY_BUFFER && (root.JS_SHA3_NO_ARRAY_BUFFER_IS_VIEW || !ArrayBuffer.isView)) {
    ArrayBuffer.isView = function (obj) {
      return typeof obj === 'object' && obj.buffer && obj.buffer.constructor === ArrayBuffer;
    };
  }

  var createOutputMethod = function (bits, padding, outputType) {
    return function (message) {
      return new Keccak(bits, padding, bits).update(message)[outputType]();
    };
  };

  var createShakeOutputMethod = function (bits, padding, outputType) {
    return function (message, outputBits) {
      return new Keccak(bits, padding, outputBits).update(message)[outputType]();
    };
  };

  var createCshakeOutputMethod = function (bits, padding, outputType) {
    return function (message, outputBits, n, s) {
      return methods['cshake' + bits].update(message, outputBits, n, s)[outputType]();
    };
  };

  var createKmacOutputMethod = function (bits, padding, outputType) {
    return function (key, message, outputBits, s) {
      return methods['kmac' + bits].update(key, message, outputBits, s)[outputType]();
    };
  };

  var createOutputMethods = function (method, createMethod, bits, padding) {
    for (var i = 0; i < OUTPUT_TYPES.length; ++i) {
      var type = OUTPUT_TYPES[i];
      method[type] = createMethod(bits, padding, type);
    }
    return method;
  };

  var createMethod = function (bits, padding) {
    var method = createOutputMethod(bits, padding, 'hex');
    method.create = function () {
      return new Keccak(bits, padding, bits);
    };
    method.update = function (message) {
      return method.create().update(message);
    };
    return createOutputMethods(method, createOutputMethod, bits, padding);
  };

  var createShakeMethod = function (bits, padding) {
    var method = createShakeOutputMethod(bits, padding, 'hex');
    method.create = function (outputBits) {
      return new Keccak(bits, padding, outputBits);
    };
    method.update = function (message, outputBits) {
      return method.create(outputBits).update(message);
    };
    return createOutputMethods(method, createShakeOutputMethod, bits, padding);
  };

  var createCshakeMethod = function (bits, padding) {
    var w = CSHAKE_BYTEPAD[bits];
    var method = createCshakeOutputMethod(bits, padding, 'hex');
    method.create = function (outputBits, n, s) {
      if (!n && !s) {
        return methods['shake' + bits].create(outputBits);
      } else {
        return new Keccak(bits, padding, outputBits).bytepad([n, s], w);
      }
    };
    method.update = function (message, outputBits, n, s) {
      return method.create(outputBits, n, s).update(message);
    };
    return createOutputMethods(method, createCshakeOutputMethod, bits, padding);
  };

  var createKmacMethod = function (bits, padding) {
    var w = CSHAKE_BYTEPAD[bits];
    var method = createKmacOutputMethod(bits, padding, 'hex');
    method.create = function (key, outputBits, s) {
      return new Kmac(bits, padding, outputBits).bytepad(['KMAC', s], w).bytepad([key], w);
    };
    method.update = function (key, message, outputBits, s) {
      return method.create(key, outputBits, s).update(message);
    };
    return createOutputMethods(method, createKmacOutputMethod, bits, padding);
  };

  var algorithms = [
    { name: 'keccak', padding: KECCAK_PADDING, bits: BITS, createMethod: createMethod },
    { name: 'sha3', padding: PADDING, bits: BITS, createMethod: createMethod },
    { name: 'shake', padding: SHAKE_PADDING, bits: SHAKE_BITS, createMethod: createShakeMethod },
    { name: 'cshake', padding: CSHAKE_PADDING, bits: SHAKE_BITS, createMethod: createCshakeMethod },
    { name: 'kmac', padding: CSHAKE_PADDING, bits: SHAKE_BITS, createMethod: createKmacMethod }
  ];

  var methods = {}, methodNames = [];

  for (var i = 0; i < algorithms.length; ++i) {
    var algorithm = algorithms[i];
    var bits = algorithm.bits;
    for (var j = 0; j < bits.length; ++j) {
      var methodName = algorithm.name + '_' + bits[j];
      methodNames.push(methodName);
      methods[methodName] = algorithm.createMethod(bits[j], algorithm.padding);
      if (algorithm.name !== 'sha3') {
        var newMethodName = algorithm.name + bits[j];
        methodNames.push(newMethodName);
        methods[newMethodName] = methods[methodName];
      }
    }
  }

  function Keccak(bits, padding, outputBits) {
    this.blocks = [];
    this.s = [];
    this.padding = padding;
    this.outputBits = outputBits;
    this.reset = true;
    this.finalized = false;
    this.block = 0;
    this.start = 0;
    this.blockCount = (1600 - (bits << 1)) >> 5;
    this.byteCount = this.blockCount << 2;
    this.outputBlocks = outputBits >> 5;
    this.extraBytes = (outputBits & 31) >> 3;

    for (var i = 0; i < 50; ++i) {
      this.s[i] = 0;
    }
  }

  Keccak.prototype.update = function (message) {
    if (this.finalized) {
      throw new Error(FINALIZE_ERROR);
    }
    var notString, type = typeof message;
    if (type !== 'string') {
      if (type === 'object') {
        if (message === null) {
          throw new Error(INPUT_ERROR);
        } else if (ARRAY_BUFFER && message.constructor === ArrayBuffer) {
          message = new Uint8Array(message);
        } else if (!Array.isArray(message)) {
          if (!ARRAY_BUFFER || !ArrayBuffer.isView(message)) {
            throw new Error(INPUT_ERROR);
          }
        }
      } else {
        throw new Error(INPUT_ERROR);
      }
      notString = true;
    }
    var blocks = this.blocks, byteCount = this.byteCount, length = message.length,
      blockCount = this.blockCount, index = 0, s = this.s, i, code;

    while (index < length) {
      if (this.reset) {
        this.reset = false;
        blocks[0] = this.block;
        for (i = 1; i < blockCount + 1; ++i) {
          blocks[i] = 0;
        }
      }
      if (notString) {
        for (i = this.start; index < length && i < byteCount; ++index) {
          blocks[i >> 2] |= message[index] << SHIFT[i++ & 3];
        }
      } else {
        for (i = this.start; index < length && i < byteCount; ++index) {
          code = message.charCodeAt(index);
          if (code < 0x80) {
            blocks[i >> 2] |= code << SHIFT[i++ & 3];
          } else if (code < 0x800) {
            blocks[i >> 2] |= (0xc0 | (code >> 6)) << SHIFT[i++ & 3];
            blocks[i >> 2] |= (0x80 | (code & 0x3f)) << SHIFT[i++ & 3];
          } else if (code < 0xd800 || code >= 0xe000) {
            blocks[i >> 2] |= (0xe0 | (code >> 12)) << SHIFT[i++ & 3];
            blocks[i >> 2] |= (0x80 | ((code >> 6) & 0x3f)) << SHIFT[i++ & 3];
            blocks[i >> 2] |= (0x80 | (code & 0x3f)) << SHIFT[i++ & 3];
          } else {
            code = 0x10000 + (((code & 0x3ff) << 10) | (message.charCodeAt(++index) & 0x3ff));
            blocks[i >> 2] |= (0xf0 | (code >> 18)) << SHIFT[i++ & 3];
            blocks[i >> 2] |= (0x80 | ((code >> 12) & 0x3f)) << SHIFT[i++ & 3];
            blocks[i >> 2] |= (0x80 | ((code >> 6) & 0x3f)) << SHIFT[i++ & 3];
            blocks[i >> 2] |= (0x80 | (code & 0x3f)) << SHIFT[i++ & 3];
          }
        }
      }
      this.lastByteIndex = i;
      if (i >= byteCount) {
        this.start = i - byteCount;
        this.block = blocks[blockCount];
        for (i = 0; i < blockCount; ++i) {
          s[i] ^= blocks[i];
        }
        f(s);
        this.reset = true;
      } else {
        this.start = i;
      }
    }
    return this;
  };

  Keccak.prototype.encode = function (x, right) {
    var o = x & 255, n = 1;
    var bytes = [o];
    x = x >> 8;
    o = x & 255;
    while (o > 0) {
      bytes.unshift(o);
      x = x >> 8;
      o = x & 255;
      ++n;
    }
    if (right) {
      bytes.push(n);
    } else {
      bytes.unshift(n);
    }
    this.update(bytes);
    return bytes.length;
  };

  Keccak.prototype.encodeString = function (str) {
    var notString, type = typeof str;
    if (type !== 'string') {
      if (type === 'object') {
        if (str === null) {
          throw new Error(INPUT_ERROR);
        } else if (ARRAY_BUFFER && str.constructor === ArrayBuffer) {
          str = new Uint8Array(str);
        } else if (!Array.isArray(str)) {
          if (!ARRAY_BUFFER || !ArrayBuffer.isView(str)) {
            throw new Error(INPUT_ERROR);
          }
        }
      } else {
        throw new Error(INPUT_ERROR);
      }
      notString = true;
    }
    var bytes = 0, length = str.length;
    if (notString) {
      bytes = length;
    } else {
      for (var i = 0; i < str.length; ++i) {
        var code = str.charCodeAt(i);
        if (code < 0x80) {
          bytes += 1;
        } else if (code < 0x800) {
          bytes += 2;
        } else if (code < 0xd800 || code >= 0xe000) {
          bytes += 3;
        } else {
          code = 0x10000 + (((code & 0x3ff) << 10) | (str.charCodeAt(++i) & 0x3ff));
          bytes += 4;
        }
      }
    }
    bytes += this.encode(bytes * 8);
    this.update(str);
    return bytes;
  };

  Keccak.prototype.bytepad = function (strs, w) {
    var bytes = this.encode(w);
    for (var i = 0; i < strs.length; ++i) {
      bytes += this.encodeString(strs[i]);
    }
    var paddingBytes = w - bytes % w;
    var zeros = [];
    zeros.length = paddingBytes;
    this.update(zeros);
    return this;
  };

  Keccak.prototype.finalize = function () {
    if (this.finalized) {
      return;
    }
    this.finalized = true;
    var blocks = this.blocks, i = this.lastByteIndex, blockCount = this.blockCount, s = this.s;
    blocks[i >> 2] |= this.padding[i & 3];
    if (this.lastByteIndex === this.byteCount) {
      blocks[0] = blocks[blockCount];
      for (i = 1; i < blockCount + 1; ++i) {
        blocks[i] = 0;
      }
    }
    blocks[blockCount - 1] |= 0x80000000;
    for (i = 0; i < blockCount; ++i) {
      s[i] ^= blocks[i];
    }
    f(s);
  };

  Keccak.prototype.toString = Keccak.prototype.hex = function () {
    this.finalize();

    var blockCount = this.blockCount, s = this.s, outputBlocks = this.outputBlocks,
      extraBytes = this.extraBytes, i = 0, j = 0;
    var hex = '', block;
    while (j < outputBlocks) {
      for (i = 0; i < blockCount && j < outputBlocks; ++i, ++j) {
        block = s[i];
        hex += HEX_CHARS[(block >> 4) & 0x0F] + HEX_CHARS[block & 0x0F] +
          HEX_CHARS[(block >> 12) & 0x0F] + HEX_CHARS[(block >> 8) & 0x0F] +
          HEX_CHARS[(block >> 20) & 0x0F] + HEX_CHARS[(block >> 16) & 0x0F] +
          HEX_CHARS[(block >> 28) & 0x0F] + HEX_CHARS[(block >> 24) & 0x0F];
      }
      if (j % blockCount === 0) {
        f(s);
        i = 0;
      }
    }
    if (extraBytes) {
      block = s[i];
      hex += HEX_CHARS[(block >> 4) & 0x0F] + HEX_CHARS[block & 0x0F];
      if (extraBytes > 1) {
        hex += HEX_CHARS[(block >> 12) & 0x0F] + HEX_CHARS[(block >> 8) & 0x0F];
      }
      if (extraBytes > 2) {
        hex += HEX_CHARS[(block >> 20) & 0x0F] + HEX_CHARS[(block >> 16) & 0x0F];
      }
    }
    return hex;
  };

  Keccak.prototype.arrayBuffer = function () {
    this.finalize();

    var blockCount = this.blockCount, s = this.s, outputBlocks = this.outputBlocks,
      extraBytes = this.extraBytes, i = 0, j = 0;
    var bytes = this.outputBits >> 3;
    var buffer;
    if (extraBytes) {
      buffer = new ArrayBuffer((outputBlocks + 1) << 2);
    } else {
      buffer = new ArrayBuffer(bytes);
    }
    var array = new Uint32Array(buffer);
    while (j < outputBlocks) {
      for (i = 0; i < blockCount && j < outputBlocks; ++i, ++j) {
        array[j] = s[i];
      }
      if (j % blockCount === 0) {
        f(s);
      }
    }
    if (extraBytes) {
      array[i] = s[i];
      buffer = buffer.slice(0, bytes);
    }
    return buffer;
  };

  Keccak.prototype.buffer = Keccak.prototype.arrayBuffer;

  Keccak.prototype.digest = Keccak.prototype.array = function () {
    this.finalize();

    var blockCount = this.blockCount, s = this.s, outputBlocks = this.outputBlocks,
      extraBytes = this.extraBytes, i = 0, j = 0;
    var array = [], offset, block;
    while (j < outputBlocks) {
      for (i = 0; i < blockCount && j < outputBlocks; ++i, ++j) {
        offset = j << 2;
        block = s[i];
        array[offset] = block & 0xFF;
        array[offset + 1] = (block >> 8) & 0xFF;
        array[offset + 2] = (block >> 16) & 0xFF;
        array[offset + 3] = (block >> 24) & 0xFF;
      }
      if (j % blockCount === 0) {
        f(s);
      }
    }
    if (extraBytes) {
      offset = j << 2;
      block = s[i];
      array[offset] = block & 0xFF;
      if (extraBytes > 1) {
        array[offset + 1] = (block >> 8) & 0xFF;
      }
      if (extraBytes > 2) {
        array[offset + 2] = (block >> 16) & 0xFF;
      }
    }
    return array;
  };

  function Kmac(bits, padding, outputBits) {
    Keccak.call(this, bits, padding, outputBits);
  }

  Kmac.prototype = new Keccak();

  Kmac.prototype.finalize = function () {
    this.encode(this.outputBits, true);
    return Keccak.prototype.finalize.call(this);
  };

  var f = function (s) {
    var h, l, n, c0, c1, c2, c3, c4, c5, c6, c7, c8, c9,
      b0, b1, b2, b3, b4, b5, b6, b7, b8, b9, b10, b11, b12, b13, b14, b15, b16, b17,
      b18, b19, b20, b21, b22, b23, b24, b25, b26, b27, b28, b29, b30, b31, b32, b33,
      b34, b35, b36, b37, b38, b39, b40, b41, b42, b43, b44, b45, b46, b47, b48, b49;
    for (n = 0; n < 48; n += 2) {
      c0 = s[0] ^ s[10] ^ s[20] ^ s[30] ^ s[40];
      c1 = s[1] ^ s[11] ^ s[21] ^ s[31] ^ s[41];
      c2 = s[2] ^ s[12] ^ s[22] ^ s[32] ^ s[42];
      c3 = s[3] ^ s[13] ^ s[23] ^ s[33] ^ s[43];
      c4 = s[4] ^ s[14] ^ s[24] ^ s[34] ^ s[44];
      c5 = s[5] ^ s[15] ^ s[25] ^ s[35] ^ s[45];
      c6 = s[6] ^ s[16] ^ s[26] ^ s[36] ^ s[46];
      c7 = s[7] ^ s[17] ^ s[27] ^ s[37] ^ s[47];
      c8 = s[8] ^ s[18] ^ s[28] ^ s[38] ^ s[48];
      c9 = s[9] ^ s[19] ^ s[29] ^ s[39] ^ s[49];

      h = c8 ^ ((c2 << 1) | (c3 >>> 31));
      l = c9 ^ ((c3 << 1) | (c2 >>> 31));
      s[0] ^= h;
      s[1] ^= l;
      s[10] ^= h;
      s[11] ^= l;
      s[20] ^= h;
      s[21] ^= l;
      s[30] ^= h;
      s[31] ^= l;
      s[40] ^= h;
      s[41] ^= l;
      h = c0 ^ ((c4 << 1) | (c5 >>> 31));
      l = c1 ^ ((c5 << 1) | (c4 >>> 31));
      s[2] ^= h;
      s[3] ^= l;
      s[12] ^= h;
      s[13] ^= l;
      s[22] ^= h;
      s[23] ^= l;
      s[32] ^= h;
      s[33] ^= l;
      s[42] ^= h;
      s[43] ^= l;
      h = c2 ^ ((c6 << 1) | (c7 >>> 31));
      l = c3 ^ ((c7 << 1) | (c6 >>> 31));
      s[4] ^= h;
      s[5] ^= l;
      s[14] ^= h;
      s[15] ^= l;
      s[24] ^= h;
      s[25] ^= l;
      s[34] ^= h;
      s[35] ^= l;
      s[44] ^= h;
      s[45] ^= l;
      h = c4 ^ ((c8 << 1) | (c9 >>> 31));
      l = c5 ^ ((c9 << 1) | (c8 >>> 31));
      s[6] ^= h;
      s[7] ^= l;
      s[16] ^= h;
      s[17] ^= l;
      s[26] ^= h;
      s[27] ^= l;
      s[36] ^= h;
      s[37] ^= l;
      s[46] ^= h;
      s[47] ^= l;
      h = c6 ^ ((c0 << 1) | (c1 >>> 31));
      l = c7 ^ ((c1 << 1) | (c0 >>> 31));
      s[8] ^= h;
      s[9] ^= l;
      s[18] ^= h;
      s[19] ^= l;
      s[28] ^= h;
      s[29] ^= l;
      s[38] ^= h;
      s[39] ^= l;
      s[48] ^= h;
      s[49] ^= l;

      b0 = s[0];
      b1 = s[1];
      b32 = (s[11] << 4) | (s[10] >>> 28);
      b33 = (s[10] << 4) | (s[11] >>> 28);
      b14 = (s[20] << 3) | (s[21] >>> 29);
      b15 = (s[21] << 3) | (s[20] >>> 29);
      b46 = (s[31] << 9) | (s[30] >>> 23);
      b47 = (s[30] << 9) | (s[31] >>> 23);
      b28 = (s[40] << 18) | (s[41] >>> 14);
      b29 = (s[41] << 18) | (s[40] >>> 14);
      b20 = (s[2] << 1) | (s[3] >>> 31);
      b21 = (s[3] << 1) | (s[2] >>> 31);
      b2 = (s[13] << 12) | (s[12] >>> 20);
      b3 = (s[12] << 12) | (s[13] >>> 20);
      b34 = (s[22] << 10) | (s[23] >>> 22);
      b35 = (s[23] << 10) | (s[22] >>> 22);
      b16 = (s[33] << 13) | (s[32] >>> 19);
      b17 = (s[32] << 13) | (s[33] >>> 19);
      b48 = (s[42] << 2) | (s[43] >>> 30);
      b49 = (s[43] << 2) | (s[42] >>> 30);
      b40 = (s[5] << 30) | (s[4] >>> 2);
      b41 = (s[4] << 30) | (s[5] >>> 2);
      b22 = (s[14] << 6) | (s[15] >>> 26);
      b23 = (s[15] << 6) | (s[14] >>> 26);
      b4 = (s[25] << 11) | (s[24] >>> 21);
      b5 = (s[24] << 11) | (s[25] >>> 21);
      b36 = (s[34] << 15) | (s[35] >>> 17);
      b37 = (s[35] << 15) | (s[34] >>> 17);
      b18 = (s[45] << 29) | (s[44] >>> 3);
      b19 = (s[44] << 29) | (s[45] >>> 3);
      b10 = (s[6] << 28) | (s[7] >>> 4);
      b11 = (s[7] << 28) | (s[6] >>> 4);
      b42 = (s[17] << 23) | (s[16] >>> 9);
      b43 = (s[16] << 23) | (s[17] >>> 9);
      b24 = (s[26] << 25) | (s[27] >>> 7);
      b25 = (s[27] << 25) | (s[26] >>> 7);
      b6 = (s[36] << 21) | (s[37] >>> 11);
      b7 = (s[37] << 21) | (s[36] >>> 11);
      b38 = (s[47] << 24) | (s[46] >>> 8);
      b39 = (s[46] << 24) | (s[47] >>> 8);
      b30 = (s[8] << 27) | (s[9] >>> 5);
      b31 = (s[9] << 27) | (s[8] >>> 5);
      b12 = (s[18] << 20) | (s[19] >>> 12);
      b13 = (s[19] << 20) | (s[18] >>> 12);
      b44 = (s[29] << 7) | (s[28] >>> 25);
      b45 = (s[28] << 7) | (s[29] >>> 25);
      b26 = (s[38] << 8) | (s[39] >>> 24);
      b27 = (s[39] << 8) | (s[38] >>> 24);
      b8 = (s[48] << 14) | (s[49] >>> 18);
      b9 = (s[49] << 14) | (s[48] >>> 18);

      s[0] = b0 ^ (~b2 & b4);
      s[1] = b1 ^ (~b3 & b5);
      s[10] = b10 ^ (~b12 & b14);
      s[11] = b11 ^ (~b13 & b15);
      s[20] = b20 ^ (~b22 & b24);
      s[21] = b21 ^ (~b23 & b25);
      s[30] = b30 ^ (~b32 & b34);
      s[31] = b31 ^ (~b33 & b35);
      s[40] = b40 ^ (~b42 & b44);
      s[41] = b41 ^ (~b43 & b45);
      s[2] = b2 ^ (~b4 & b6);
      s[3] = b3 ^ (~b5 & b7);
      s[12] = b12 ^ (~b14 & b16);
      s[13] = b13 ^ (~b15 & b17);
      s[22] = b22 ^ (~b24 & b26);
      s[23] = b23 ^ (~b25 & b27);
      s[32] = b32 ^ (~b34 & b36);
      s[33] = b33 ^ (~b35 & b37);
      s[42] = b42 ^ (~b44 & b46);
      s[43] = b43 ^ (~b45 & b47);
      s[4] = b4 ^ (~b6 & b8);
      s[5] = b5 ^ (~b7 & b9);
      s[14] = b14 ^ (~b16 & b18);
      s[15] = b15 ^ (~b17 & b19);
      s[24] = b24 ^ (~b26 & b28);
      s[25] = b25 ^ (~b27 & b29);
      s[34] = b34 ^ (~b36 & b38);
      s[35] = b35 ^ (~b37 & b39);
      s[44] = b44 ^ (~b46 & b48);
      s[45] = b45 ^ (~b47 & b49);
      s[6] = b6 ^ (~b8 & b0);
      s[7] = b7 ^ (~b9 & b1);
      s[16] = b16 ^ (~b18 & b10);
      s[17] = b17 ^ (~b19 & b11);
      s[26] = b26 ^ (~b28 & b20);
      s[27] = b27 ^ (~b29 & b21);
      s[36] = b36 ^ (~b38 & b30);
      s[37] = b37 ^ (~b39 & b31);
      s[46] = b46 ^ (~b48 & b40);
      s[47] = b47 ^ (~b49 & b41);
      s[8] = b8 ^ (~b0 & b2);
      s[9] = b9 ^ (~b1 & b3);
      s[18] = b18 ^ (~b10 & b12);
      s[19] = b19 ^ (~b11 & b13);
      s[28] = b28 ^ (~b20 & b22);
      s[29] = b29 ^ (~b21 & b23);
      s[38] = b38 ^ (~b30 & b32);
      s[39] = b39 ^ (~b31 & b33);
      s[48] = b48 ^ (~b40 & b42);
      s[49] = b49 ^ (~b41 & b43);

      s[0] ^= RC[n];
      s[1] ^= RC[n + 1];
    }
  };

  if (COMMON_JS) {
    module.exports = methods;
  } else {
    for (i = 0; i < methodNames.length; ++i) {
      root[methodNames[i]] = methods[methodNames[i]];
    }
    if (AMD) {
      define(function () {
        return methods;
      });
    }
  }
})();

},{"process":"kpD3"}],"g45B":[function(require,module,exports) {
"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
var _this = this;
Object.defineProperty(exports, "__esModule", { value: true });
// @ts-ignore
var pki = __importStar(require("node-forge/lib/pki"));
// @ts-ignore
var md = __importStar(require("node-forge/lib/md"));
// @ts-ignore
var md5 = __importStar(require("node-forge/lib/md5"));
// @ts-ignore
var util = __importStar(require("node-forge/lib/util"));
var base_xx_1 = require("../conversions/base-xx");
var string_bytes_1 = require("../conversions/string-bytes");
var sha3 = __importStar(require("js-sha3"));
// HACK. Monkey patch node-forge library to provide oids for missing hash algorithms
pki.oids['sha224'] = '2.16.840.1.101.3.4.2.4';
pki.oids['2.16.840.1.101.3.4.2.4'] = 'sha224';
pki.oids['sha3-224'] = '2.16.840.1.101.3.4.2.7';
pki.oids['2.16.840.1.101.3.4.2.7'] = 'sha3-224';
pki.oids['sha3-256'] = '2.16.840.1.101.3.4.2.8';
pki.oids['2.16.840.1.101.3.4.2.8'] = 'sha3-256';
pki.oids['sha3-384'] = '2.16.840.1.101.3.4.2.9';
pki.oids['2.16.840.1.101.3.4.2.9'] = 'sha3-384';
pki.oids['sha3-512'] = '2.16.840.1.101.3.4.2.10';
pki.oids['2.16.840.1.101.3.4.2.10'] = 'sha3-512';
exports.pemToBytes = function (pem) { return base_xx_1.base64Decode(pem.trim()
    .split(/\r\n|\n/)
    .slice(1, -1).join('')
    .trim()); };
var pemTypeMap = {
    rsaPrivateNonEncrypted: 'RSA PRIVATE KEY',
    rsaPublic: 'PUBLIC KEY',
};
exports.bytesToPem = function (bytes, type) {
    var header = "-----BEGIN " + pemTypeMap[type] + "-----\n";
    var footer = "-----END " + pemTypeMap[type] + "-----\n";
    var b64characters = base_xx_1.base64Encode(bytes);
    if (b64characters.length % 64 !== 0) {
        b64characters += ' '.repeat(64 - b64characters.length % 64);
    }
    var result = header;
    for (var i = 0; i < (b64characters.length / 64); i++) {
        result += b64characters.slice(i * 64, (i + 1) * 64) + '\n';
    }
    result += footer;
    return result;
};
exports.rsaKeyPairSync = function (bits, e) {
    var kp = pki.rsa.generateKeyPair(bits, e);
    return {
        rsaPrivate: exports.pemToBytes(pki.privateKeyToPem(kp.privateKey)),
        rsaPublic: exports.pemToBytes(pki.publicKeyToPem(kp.publicKey)),
    };
};
exports.rsaKeyPair = function (bits, e) { return __awaiter(_this, void 0, void 0, function () {
    return __generator(this, function (_a) {
        return [2 /*return*/, new Promise(function (resolve, reject) {
                pki.rsa.generateKeyPair(bits, e, function (err, kp) {
                    if (err)
                        reject(err);
                    resolve({
                        rsaPrivate: exports.pemToBytes(pki.privateKeyToPem(kp.privateKey)),
                        rsaPublic: exports.pemToBytes(pki.publicKeyToPem(kp.publicKey)),
                    });
                });
            })];
    });
}); };
var digestCreatorPlaceHolder = function (type) { return function () {
    throw new Error("Digest " + type + " is unsupported");
}; };
var MessageDigestAdapter = /** @class */ (function () {
    function MessageDigestAdapter(sha3Digest, algorithm) {
        this.sha3Digest = sha3Digest;
        this.algorithm = algorithm;
    }
    MessageDigestAdapter.makeCreator = function (sha3Hash, algorithmName) {
        return { create: function () { return new MessageDigestAdapter(sha3Hash.create(), algorithmName); } };
    };
    MessageDigestAdapter.prototype.update = function (msg, encoding) {
        this.sha3Digest.update(string_bytes_1.stringToBytes(msg, encoding == null ? 'raw' : encoding));
        return this;
    };
    MessageDigestAdapter.prototype.digest = function () {
        var bytes = Uint8Array.from(this.sha3Digest.digest());
        return util.createBuffer(string_bytes_1.bytesToString(bytes, 'raw'));
    };
    return MessageDigestAdapter;
}());
var digestMap = {
    'MD5': md5,
    'SHA1': md.algorithms.sha1,
    'SHA224': digestCreatorPlaceHolder('SHA224'),
    'SHA256': md.algorithms.sha256,
    'SHA384': md.algorithms.sha384,
    'SHA512': md.algorithms.sha512,
    'SHA3-224': MessageDigestAdapter.makeCreator(sha3.sha3_224, 'sha3-224'),
    'SHA3-256': MessageDigestAdapter.makeCreator(sha3.sha3_256, 'sha3-256'),
    'SHA3-384': MessageDigestAdapter.makeCreator(sha3.sha3_384, 'sha3-384'),
    'SHA3-512': MessageDigestAdapter.makeCreator(sha3.sha3_512, 'sha3-512'),
};
exports.rsaSign = function (rsaPrivateKey, message, digest) {
    if (digest === void 0) { digest = 'SHA256'; }
    var s = exports.bytesToPem(rsaPrivateKey, 'rsaPrivateNonEncrypted');
    var sk = pki.privateKeyFromPem(s);
    var _digest = digestMap[digest].create();
    _digest.update(string_bytes_1.bytesToString(message, 'raw'));
    return string_bytes_1.stringToBytes(sk.sign(_digest), 'raw');
};
exports.rsaVerify = function (rsaPublicKey, message, signature, digest) {
    if (digest === void 0) { digest = 'SHA256'; }
    var pk = pki.publicKeyFromPem(exports.bytesToPem(rsaPublicKey, 'rsaPublic'));
    var _digest = digestMap[digest].create();
    _digest.update(string_bytes_1.bytesToString(message), 'raw');
    return pk.verify(_digest.digest().getBytes(), string_bytes_1.bytesToString(signature, 'raw'));
};

},{"node-forge/lib/pki":"R1ju","node-forge/lib/md":"Tsiu","node-forge/lib/md5":"KBNr","node-forge/lib/util":"lWyh","../conversions/base-xx":"uXRm","../conversions/string-bytes":"WqH7","js-sha3":"hT6R"}],"DyhT":[function(require,module,exports) {
"use strict";
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
var string_bytes_1 = require("../conversions/string-bytes");
// @ts-ignore
var forgeMd5 = __importStar(require("node-forge/lib/md5"));
var concat_split_1 = require("./concat-split");
var encryption_1 = require("./encryption");
var base_xx_1 = require("../conversions/base-xx");
var hashing_1 = require("./hashing");
var random_1 = require("./random");
function strengthenPassword(password, rounds) {
    if (rounds === void 0) { rounds = 5000; }
    while (rounds--) {
        var bytes = string_bytes_1.stringToBytes(password);
        password = base_xx_1.base16Encode(hashing_1.sha256(bytes));
    }
    return password;
}
function evpKdf(passphrase, salt, output) {
    if (output === void 0) { output = 48; }
    var passPlusSalt = string_bytes_1.bytesToString(concat_split_1.concat(passphrase, salt), 'raw');
    var key = '';
    var final_key = key;
    while (final_key.length < output) {
        key = forgeMd5.create().update(key + passPlusSalt).digest().getBytes();
        final_key += key;
    }
    return final_key;
}
/**
 * Encrypts arbitrary utf8 string with utf8 password. Evp key deriving function is used to get encryption key and IV from
 * password. AES-CBC algorithm is used for encryption. Output format is base64 encoded OpenSSL
 * @param seed - utf8 string to encrypt
 * @param password - utf8 password
 * @param encryptionRounds - how many times password will be hashed. Default = 5000
 */
exports.encryptSeed = function (seed, password, encryptionRounds) {
    var passphrase = strengthenPassword(password, encryptionRounds);
    var salt = random_1.randomBytes(8);
    var key_iv = evpKdf(string_bytes_1.stringToBytes(passphrase, 'raw'), salt);
    var key = string_bytes_1.stringToBytes(key_iv.slice(0, 32), 'raw');
    var iv = string_bytes_1.stringToBytes(key_iv.slice(32), 'raw');
    var encrypted = encryption_1.aesEncrypt(string_bytes_1.stringToBytes(seed), key, 'CBC', iv);
    return base_xx_1.base64Encode(concat_split_1.concat(string_bytes_1.stringToBytes('Salted__'), salt, encrypted));
};
exports.decryptSeed = function (encryptedSeed, password, encryptionRounds) {
    var passphrase = strengthenPassword(password, encryptionRounds);
    var encBytes = base_xx_1.base64Decode(encryptedSeed);
    var salt = encBytes.slice(8, 16);
    var key_iv = evpKdf(string_bytes_1.stringToBytes(passphrase, 'raw'), salt);
    var key = string_bytes_1.stringToBytes(key_iv.slice(0, 32), 'raw');
    var iv = string_bytes_1.stringToBytes(key_iv.slice(32), 'raw');
    return string_bytes_1.bytesToString(encryption_1.aesDecrypt(encBytes.slice(16), key, 'CBC', iv));
};

},{"../conversions/string-bytes":"WqH7","node-forge/lib/md5":"KBNr","./concat-split":"UpB3","./encryption":"cfOA","../conversions/base-xx":"uXRm","./hashing":"Teij","./random":"A7J3"}],"Uf8b":[function(require,module,exports) {
"use strict";
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
Object.defineProperty(exports, "__esModule", { value: true });
var hashing_1 = require("./hashing");
var concat_split_1 = require("./concat-split");
/**
 *
 * @param rootHash
 * @param merkleProof
 * @param leafData
 */
function merkleVerify(rootHash, merkleProof, leafData) {
    var LEAF_PREFIX = Uint8Array.from([0]);
    var INTERNAL_NODE_PREFIX = Uint8Array.from([1]);
    if (rootHash.length !== 32)
        throw new Error('Failed to parse merkleProof: Invalid rootHash length');
    var leafHash = hashing_1.blake2b(concat_split_1.concat(LEAF_PREFIX, leafData));
    var proofsWithSide = [];
    var proofBytes = merkleProof.map(function (x) { return x; });
    while (proofBytes.length > 0) {
        var side = proofBytes[0] === 0 ? 'L' : 'R';
        var size = proofBytes[1];
        if (size < 1)
            throw new Error('Failed to parse merkleProof: Wrong hash size');
        var hash = proofBytes.slice(2, 2 + size);
        proofsWithSide.push([side, hash]);
        proofBytes = proofBytes.slice(2 + size);
    }
    var rootHashFromProof = proofsWithSide.reduce(function (acc, _a) {
        var _b = __read(_a, 2), side = _b[0], hash = _b[1];
        return hashing_1.blake2b(concat_split_1.concat(INTERNAL_NODE_PREFIX, side === 'R' ? concat_split_1.concat(hash, acc) : concat_split_1.concat(acc, hash)));
    }, leafHash);
    return rootHashFromProof.every(function (v, i) { return v === rootHash[i]; });
}
exports.merkleVerify = merkleVerify;

},{"./hashing":"Teij","./concat-split":"UpB3"}],"Mcdf":[function(require,module,exports) {
"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spread = (this && this.__spread) || function () {
    for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));
    return ar;
};
Object.defineProperty(exports, "__esModule", { value: true });
var random_1 = require("./random");
var encryption_1 = require("./encryption");
var base_xx_1 = require("../conversions/base-xx");
var string_bytes_1 = require("../conversions/string-bytes");
var concat_split_1 = require("./concat-split");
var hashing_1 = require("./hashing");
var address_keys_seed_1 = require("./address-keys-seed");
var sign_1 = require("./sign");
var verification_1 = require("./verification");
var rsa_1 = require("./rsa");
var seed_ecryption_1 = require("./seed-ecryption");
var merkle_verify_1 = require("./merkle-verify");
exports.crypto = function (options) {
    if (options && options.seed == '')
        throw new Error('Empty seed is not allowed.');
    var c = function (f, first) {
        return function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            return f.apply(void 0, __spread([first], args));
        };
    };
    var toOut = function (f) { return function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        var r = f.apply(void 0, __spread(args));
        return (!options || options && options.output === 'Base58') ? base_xx_1.base58Encode(r) : r;
    }; };
    var toOutKey = function (f) { return function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        var r = f.apply(void 0, __spread(args));
        return ((!options || options && options.output === 'Base58') ?
            ({ privateKey: base_xx_1.base58Encode(r.privateKey), publicKey: base_xx_1.base58Encode(r.publicKey) }) :
            r);
    }; };
    var s = (options && options.seed) ? options.seed : undefined;
    var seedPart = {
        seedWithNonce: s ? c(address_keys_seed_1.seedWithNonce, s) : address_keys_seed_1.seedWithNonce,
        signBytes: toOut(s ? c(sign_1.signBytes, s) : sign_1.signBytes),
        keyPair: toOutKey(s ? c(address_keys_seed_1.keyPair, s) : address_keys_seed_1.keyPair),
        publicKey: toOut(s ? c(address_keys_seed_1.publicKey, s) : address_keys_seed_1.publicKey),
        privateKey: toOut(s ? c(address_keys_seed_1.privateKey, s) : address_keys_seed_1.privateKey),
        address: toOut(s ? c(address_keys_seed_1.address, s) : address_keys_seed_1.address),
    };
    return __assign({}, seedPart, { sharedKey: toOut(encryption_1.sharedKey), buildAddress: address_keys_seed_1.buildAddress,
        blake2b: hashing_1.blake2b,
        keccak: hashing_1.keccak,
        sha256: hashing_1.sha256,
        base64Encode: base_xx_1.base64Encode,
        base64Decode: base_xx_1.base64Decode,
        base58Encode: base_xx_1.base58Encode,
        base58Decode: base_xx_1.base58Decode,
        base16Encode: base_xx_1.base16Encode,
        base16Decode: base_xx_1.base16Decode,
        stringToBytes: string_bytes_1.stringToBytes,
        bytesToString: string_bytes_1.bytesToString,
        random: random_1.random,
        randomSeed: random_1.randomSeed,
        randomBytes: random_1.randomBytes,
        verifySignature: verification_1.verifySignature,
        verifyPublicKey: verification_1.verifyPublicKey,
        verifyAddress: verification_1.verifyAddress,
        messageDecrypt: encryption_1.messageDecrypt,
        messageEncrypt: encryption_1.messageEncrypt,
        aesDecrypt: encryption_1.aesDecrypt,
        aesEncrypt: encryption_1.aesEncrypt,
        encryptSeed: seed_ecryption_1.encryptSeed,
        decryptSeed: seed_ecryption_1.decryptSeed,
        rsaKeyPair: rsa_1.rsaKeyPair,
        rsaKeyPairSync: rsa_1.rsaKeyPairSync,
        rsaSign: rsa_1.rsaSign,
        rsaVerify: rsa_1.rsaVerify,
        merkleVerify: merkle_verify_1.merkleVerify,
        split: concat_split_1.split,
        concat: concat_split_1.concat });
};

},{"./random":"A7J3","./encryption":"cfOA","../conversions/base-xx":"uXRm","../conversions/string-bytes":"WqH7","./concat-split":"UpB3","./hashing":"Teij","./address-keys-seed":"yznw","./sign":"e93L","./verification":"MzsO","./rsa":"g45B","./seed-ecryption":"DyhT","./merkle-verify":"Uf8b"}],"X6Ht":[function(require,module,exports) {
"use strict";
function __export(m) {
    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
var crypto_1 = require("./crypto/crypto");
var seed_words_list_1 = require("./crypto/seed-words-list");
exports.seedWordsList = seed_words_list_1.seedWordsList;
var chain_id_1 = require("./extensions/chain-id");
exports.ChaidId = chain_id_1.ChaidId;
var seed_1 = require("./extensions/seed");
exports.Seed = seed_1.Seed;
var util_1 = require("./crypto/util");
exports.isPrivateKey = util_1.isPrivateKey;
exports.isPublicKey = util_1.isPublicKey;
var crypto_2 = require("./crypto/crypto");
exports.crypto = crypto_2.crypto;
__export(require("./crypto/interface"));
exports.signBytes = (_a = crypto_1.crypto({ output: 'Base58' }), _a.signBytes), exports.keyPair = _a.keyPair, exports.publicKey = _a.publicKey, exports.privateKey = _a.privateKey, exports.address = _a.address, exports.buildAddress = _a.buildAddress, exports.blake2b = _a.blake2b, exports.keccak = _a.keccak, exports.sha256 = _a.sha256, exports.sharedKey = _a.sharedKey, exports.seedWithNonce = _a.seedWithNonce, exports.base64Encode = _a.base64Encode, exports.base64Decode = _a.base64Decode, exports.base58Encode = _a.base58Encode, exports.base58Decode = _a.base58Decode, exports.base16Encode = _a.base16Encode, exports.base16Decode = _a.base16Decode, exports.stringToBytes = _a.stringToBytes, exports.bytesToString = _a.bytesToString, exports.random = _a.random, exports.randomSeed = _a.randomSeed, exports.randomBytes = _a.randomBytes, exports.verifySignature = _a.verifySignature, exports.verifyPublicKey = _a.verifyPublicKey, exports.verifyAddress = _a.verifyAddress, exports.messageDecrypt = _a.messageDecrypt, exports.messageEncrypt = _a.messageEncrypt, exports.aesDecrypt = _a.aesDecrypt, exports.aesEncrypt = _a.aesEncrypt, exports.encryptSeed = _a.encryptSeed, exports.decryptSeed = _a.decryptSeed, exports.rsaKeyPair = _a.rsaKeyPair, exports.rsaKeyPairSync = _a.rsaKeyPairSync, exports.rsaSign = _a.rsaSign, exports.rsaVerify = _a.rsaVerify, exports.merkleVerify = _a.merkleVerify, exports.split = _a.split, exports.concat = _a.concat;

},{"./crypto/crypto":"Mcdf","./crypto/seed-words-list":"UrkL","./extensions/chain-id":"TNAS","./extensions/seed":"sGC0","./crypto/util":"FuKR","./crypto/interface":"OpBg"}],"vtuV":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.validateType = exports.validatePipe = exports.validateBySchema = exports.orderValidator = exports.orEq = exports.noop = exports.isValidDataPair = exports.isValidData = exports.isValidAssetName = exports.isValidAssetDescription = exports.isValidAliasName = exports.isValidAlias = exports.isValidAddress = exports.isString = exports.isRequired = exports.isRecipient = exports.isPublicKey = exports.isNumberLike = exports.isNumber = exports.isBoolean = exports.isBase64 = exports.isAttachment = exports.isAssetId = exports.isArray = exports.isAlias = exports.exception = exports.ASSETS = void 0;

var _defaultTo = _interopRequireDefault(require("ramda/src/defaultTo"));

var _prop = _interopRequireDefault(require("ramda/src/prop"));

var _ifElse = _interopRequireDefault(require("ramda/src/ifElse"));

var _pipe = _interopRequireDefault(require("ramda/src/pipe"));

var _equals = _interopRequireDefault(require("ramda/src/equals"));

var _gte = _interopRequireDefault(require("ramda/src/gte"));

var _lte = _interopRequireDefault(require("ramda/src/lte"));

var _startsWith = _interopRequireDefault(require("ramda/src/startsWith"));

var _isNil = _interopRequireDefault(require("ramda/src/isNil"));

var _includes = _interopRequireDefault(require("ramda/src/includes"));

var _flip = _interopRequireDefault(require("ramda/src/flip"));

var _always = _interopRequireDefault(require("ramda/src/always"));

var _tryCatch = _interopRequireDefault(require("ramda/src/tryCatch"));

var _tsLibCrypto = require("@waves/ts-lib-crypto");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var TX_DEFAULTS = {
  MAX_ATTACHMENT: 140,
  ALIAS: {
    AVAILABLE_CHARS: '-.0123456789@_abcdefghijklmnopqrstuvwxyz',
    MAX_ALIAS_LENGTH: 30,
    MIN_ALIAS_LENGTH: 4
  }
};

var isArray = function (value) {
  return Array.isArray(value);
};

exports.isArray = isArray;

var validatePipe = function () {
  var args = [];

  for (var _i = 0; _i < arguments.length; _i++) {
    args[_i] = arguments[_i];
  }

  return function (value) {
    var isValid = true;

    for (var _i = 0, args_1 = args; _i < args_1.length; _i++) {
      var cb = args_1[_i];
      isValid = !!cb(value);

      if (!isValid) {
        return false;
      }
    }

    return isValid;
  };
};

exports.validatePipe = validatePipe;

var isRequired = function (required) {
  return function (value) {
    return !required || value != null;
  };
};

exports.isRequired = isRequired;

var isString = function (value) {
  return typeof value === 'string' || value instanceof String;
};

exports.isString = isString;

var isNumber = function (value) {
  return (typeof value === 'number' || value instanceof Number) && !isNaN(Number(value));
};

exports.isNumber = isNumber;

var isNumberLike = function (value) {
  return value != null && !isNaN(Number(value)) && !!(value || value === 0);
};

exports.isNumberLike = isNumberLike;

var isBoolean = function (value) {
  return value != null && (typeof value === 'boolean' || value instanceof Boolean);
};

exports.isBoolean = isBoolean;
var orEq = (0, _flip.default)(_includes.default);
exports.orEq = orEq;

var exception = function (msg) {
  throw new Error(msg);
};

exports.exception = exception;

var validateBySchema = function (schema, errorTpl) {
  return function (tx) {
    Object.entries(schema).forEach(function (_a) {
      var key = _a[0],
          cb = _a[1];
      var value = (0, _prop.default)(key, tx || {});

      if (!cb(value)) {
        exception(errorTpl(key, value));
      }
    });
    return true;
  };
};

exports.validateBySchema = validateBySchema;
var isAttachment = (0, _ifElse.default)(orEq([null, undefined]), (0, _defaultTo.default)(true), (0, _ifElse.default)(isString, // TODO Fix attachment gte(TX_DEFAULTS.MAX_ATTACHMENT)
(0, _pipe.default)((0, _prop.default)('length'), (0, _always.default)(true)), (0, _defaultTo.default)(false)));
exports.isAttachment = isAttachment;

var validateChars = function (chars) {
  return function (value) {
    return value.split('').every(function (char) {
      return chars.includes(char);
    });
  };
};

var isValidAliasName = (0, _ifElse.default)(validateChars(TX_DEFAULTS.ALIAS.AVAILABLE_CHARS), (0, _pipe.default)((0, _prop.default)('length'), validatePipe((0, _gte.default)(TX_DEFAULTS.ALIAS.MAX_ALIAS_LENGTH), (0, _lte.default)(TX_DEFAULTS.ALIAS.MIN_ALIAS_LENGTH))), (0, _defaultTo.default)(false));
exports.isValidAliasName = isValidAliasName;
var ASSETS = {
  NAME_MIN_BYTES: 4,
  NAME_MAX_BYTES: 16,
  DESCRIPTION_MAX_BYTES: 1000
};
exports.ASSETS = ASSETS;
var isBase64 = validatePipe((0, _ifElse.default)(isString, (0, _startsWith.default)('base64:'), (0, _pipe.default)(_isNil.default)));
exports.isBase64 = isBase64;
var validateType = {
  integer: isNumberLike,
  boolean: isBoolean,
  string: isString,
  binary: isBase64
};
exports.validateType = validateType;

var isValidDataPair = function (data) {
  return !!(validateType[data.type] && validateType[data.type](data.value));
};

exports.isValidDataPair = isValidDataPair;
var isValidData = validatePipe(isRequired(true), (0, _pipe.default)((0, _prop.default)('key'), validatePipe(isString, function (key) {
  return !!key;
})), isValidDataPair);
exports.isValidData = isValidData;
var isPublicKey = validatePipe(isString, (0, _tryCatch.default)(function (v) {
  return (0, _tsLibCrypto.base58Decode)(v).length === 32;
}, (0, _always.default)(false)));
exports.isPublicKey = isPublicKey;
var isValidAssetName = validatePipe(isString, (0, _pipe.default)((0, _prop.default)('length'), (0, _ifElse.default)((0, _lte.default)(ASSETS.NAME_MIN_BYTES), (0, _gte.default)(ASSETS.NAME_MAX_BYTES), (0, _defaultTo.default)(false))));
exports.isValidAssetName = isValidAssetName;
var isValidAssetDescription = validatePipe(isString, (0, _pipe.default)((0, _prop.default)('length'), (0, _gte.default)(ASSETS.DESCRIPTION_MAX_BYTES)));
exports.isValidAssetDescription = isValidAssetDescription;
var isAssetId = validatePipe((0, _ifElse.default)(orEq(['', null, undefined, 'WAVES']), (0, _defaultTo.default)(true), isString));
exports.isAssetId = isAssetId;

var isAlias = function (value) {
  return value.startsWith('alias:');
}; // TODO fix validator!!!


exports.isAlias = isAlias;
var isValidAddress = isString;
exports.isValidAddress = isValidAddress;
var isValidAlias = (0, _pipe.default)(function (value) {
  return value.split(':')[2];
}, isValidAliasName);
exports.isValidAlias = isValidAlias;
var isRecipient = validatePipe(isString, (0, _ifElse.default)(isAlias, isValidAlias, isValidAddress));
exports.isRecipient = isRecipient;
var orderScheme = {
  orderType: orEq(['sell', 'buy']),
  senderPublicKey: isPublicKey,
  matcherPublicKey: isPublicKey,
  version: orEq([undefined, 0, 1, 2, 3]),
  assetPair: validatePipe(isRequired(true), (0, _pipe.default)((0, _prop.default)('amountAsset'), isAssetId), (0, _pipe.default)((0, _prop.default)('priceAsset'), isAssetId)),
  price: isNumberLike,
  amount: isNumberLike,
  matcherFee: isNumberLike,
  expiration: isNumberLike,
  timestamp: isNumber,
  proofs: (0, _ifElse.default)(isArray, (0, _defaultTo.default)(true), orEq([undefined]))
};
var v12OrderScheme = {
  matcherFeeAssetId: orEq([undefined, null, 'WAVES'])
};
var v3OrderScheme = {
  matcherFeeAssetId: isAssetId
}; // eslint-disable-next-line @typescript-eslint/no-empty-function

var noop = function () {}; // TODO!!!


exports.noop = noop;
var validateOrder = validateBySchema(orderScheme, noop);
var validateOrderV2 = validateBySchema(v12OrderScheme, noop);
var validateOrderV3 = validateBySchema(v3OrderScheme, noop);
var orderValidator = validatePipe(validateOrder, (0, _ifElse.default)((0, _pipe.default)((0, _prop.default)('version'), (0, _equals.default)(3)), validateOrderV3, validateOrderV2));
exports.orderValidator = orderValidator;
},{"ramda/src/defaultTo":"eODk","ramda/src/prop":"E9RQ","ramda/src/ifElse":"xarn","ramda/src/pipe":"bdiw","ramda/src/equals":"rAKI","ramda/src/gte":"LGUI","ramda/src/lte":"PGcC","ramda/src/startsWith":"hkxe","ramda/src/isNil":"sGrY","ramda/src/includes":"hROA","ramda/src/flip":"v93W","ramda/src/always":"bNzb","ramda/src/tryCatch":"EvWP","@waves/ts-lib-crypto":"X6Ht"}],"TV6t":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.validator = exports.validateSignerOptions = exports.validateProviderInterface = exports.transferArgsValidator = exports.transferArgsScheme = exports.sponsorshipArgsValidator = exports.sponsorshipArgsScheme = exports.setScriptArgsValidator = exports.setScriptArgsScheme = exports.setAssetScriptArgsValidator = exports.setAssetScriptArgsScheme = exports.reissueArgsValidator = exports.reissueArgsScheme = exports.massTransferArgsValidator = exports.massTransferArgsScheme = exports.leaseArgsValidator = exports.leaseArgsScheme = exports.issueArgsValidator = exports.issueArgsScheme = exports.invokeArgsValidator = exports.invokeArgsScheme = exports.exchangeArgsValidator = exports.exchangeArgsScheme = exports.dataArgsValidator = exports.dataArgsScheme = exports.cancelLeaseArgsValidator = exports.cancelLeaseArgsScheme = exports.burnArgsValidator = exports.burnArgsScheme = exports.argsValidators = exports.aliasArgsValidator = exports.aliasArgsScheme = void 0;

var _tslib = require("tslib");

var _defaultTo = _interopRequireDefault(require("ramda/src/defaultTo"));

var _prop = _interopRequireDefault(require("ramda/src/prop"));

var _ifElse = _interopRequireDefault(require("ramda/src/ifElse"));

var _pipe = _interopRequireDefault(require("ramda/src/pipe"));

var _equals = _interopRequireDefault(require("ramda/src/equals"));

var _lte = _interopRequireDefault(require("ramda/src/lte"));

var _not = _interopRequireDefault(require("ramda/src/not"));

var _validators = require("./validators");

var _tsTypes = require("@waves/ts-types");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _a;

var shouldValidate = (0, _pipe.default)((0, _equals.default)(undefined), _not.default);

var validateOptional = function (validator) {
  return (0, _ifElse.default)(shouldValidate, validator, (0, _defaultTo.default)(true));
}; // waves-transaction validator can't collect errors for each invalid field.
// This method does.


var validator = function (scheme, method) {
  return function (transaction) {
    var _a;

    var invalidFields = [];

    for (var _i = 0, _b = Object.entries(scheme); _i < _b.length; _i++) {
      var _c = _b[_i],
          fieldName = _c[0],
          validationScheme = _c[1];

      try {
        (0, _validators.validateBySchema)((_a = {}, _a[fieldName] = validationScheme, _a), // eslint-disable-next-line @typescript-eslint/no-empty-function
        _validators.noop)(transaction);
      } catch (error) {
        invalidFields.push(fieldName);
      }
    }

    return {
      isValid: invalidFields.length === 0,
      transaction: transaction,
      method: method,
      invalidFields: invalidFields
    };
  };
};

exports.validator = validator;

var getCommonValidators = function (transactionType) {
  return {
    type: (0, _equals.default)(transactionType),
    version: validateOptional((0, _validators.orEq)([undefined, 1, 2, 3])),
    senderPublicKey: validateOptional(_validators.isPublicKey),
    fee: validateOptional(_validators.isNumberLike),
    proofs: validateOptional(_validators.isArray)
  };
};

var issueArgsScheme = (0, _tslib.__assign)((0, _tslib.__assign)({}, getCommonValidators(_tsTypes.TRANSACTION_TYPE.ISSUE)), {
  name: _validators.isValidAssetName,
  description: validateOptional(_validators.isValidAssetDescription),
  quantity: _validators.isNumberLike,
  decimals: _validators.isNumber,
  reissuable: validateOptional(_validators.isBoolean),
  script: validateOptional(_validators.isBase64),
  chainId: validateOptional(_validators.isNumber)
});
exports.issueArgsScheme = issueArgsScheme;
var issueArgsValidator = validator(issueArgsScheme, 'issue');
exports.issueArgsValidator = issueArgsValidator;
var transferArgsScheme = (0, _tslib.__assign)((0, _tslib.__assign)({}, getCommonValidators(_tsTypes.TRANSACTION_TYPE.TRANSFER)), {
  amount: _validators.isNumberLike,
  recipient: _validators.isRecipient,
  assetId: validateOptional(_validators.isAssetId),
  feeAssetId: validateOptional(_validators.isAssetId),
  attachment: validateOptional(_validators.isAttachment)
});
exports.transferArgsScheme = transferArgsScheme;
var transferArgsValidator = validator(transferArgsScheme, 'transfer');
exports.transferArgsValidator = transferArgsValidator;
var reissueArgsScheme = (0, _tslib.__assign)((0, _tslib.__assign)({}, getCommonValidators(_tsTypes.TRANSACTION_TYPE.REISSUE)), {
  assetId: _validators.isAssetId,
  quantity: _validators.isNumberLike,
  reissuable: _validators.isBoolean,
  chainId: validateOptional(_validators.isNumber)
});
exports.reissueArgsScheme = reissueArgsScheme;
var reissueArgsValidator = validator(reissueArgsScheme, 'reissue');
exports.reissueArgsValidator = reissueArgsValidator;
var burnArgsScheme = (0, _tslib.__assign)((0, _tslib.__assign)({}, getCommonValidators(_tsTypes.TRANSACTION_TYPE.BURN)), {
  // TODO isAssetId (not WAVES)
  assetId: _validators.isString,
  amount: _validators.isNumberLike,
  chainId: validateOptional(_validators.isNumber)
});
exports.burnArgsScheme = burnArgsScheme;
var burnArgsValidator = validator(burnArgsScheme, 'burn');
exports.burnArgsValidator = burnArgsValidator;
var leaseArgsScheme = (0, _tslib.__assign)((0, _tslib.__assign)({}, getCommonValidators(_tsTypes.TRANSACTION_TYPE.LEASE)), {
  amount: _validators.isNumberLike,
  recipient: _validators.isRecipient
});
exports.leaseArgsScheme = leaseArgsScheme;
var leaseArgsValidator = validator(leaseArgsScheme, 'lease');
exports.leaseArgsValidator = leaseArgsValidator;
var cancelLeaseArgsScheme = (0, _tslib.__assign)((0, _tslib.__assign)({}, getCommonValidators(_tsTypes.TRANSACTION_TYPE.CANCEL_LEASE)), {
  leaseId: (0, _pipe.default)(_validators.isString),
  chainId: validateOptional(_validators.isNumber)
});
exports.cancelLeaseArgsScheme = cancelLeaseArgsScheme;
var cancelLeaseArgsValidator = validator(cancelLeaseArgsScheme, 'cancel lease');
exports.cancelLeaseArgsValidator = cancelLeaseArgsValidator;
var aliasArgsScheme = (0, _tslib.__assign)((0, _tslib.__assign)({}, getCommonValidators(_tsTypes.TRANSACTION_TYPE.ALIAS)), {
  alias: function (value) {
    return typeof value === 'string' ? (0, _validators.isValidAliasName)(value) : false;
  }
});
exports.aliasArgsScheme = aliasArgsScheme;
var aliasArgsValidator = validator(aliasArgsScheme, 'alias');
exports.aliasArgsValidator = aliasArgsValidator;
var massTransferArgsScheme = (0, _tslib.__assign)((0, _tslib.__assign)({}, getCommonValidators(_tsTypes.TRANSACTION_TYPE.MASS_TRANSFER)), {
  transfers: (0, _validators.validatePipe)(_validators.isArray, (0, _pipe.default)((0, _prop.default)('length'), (0, _lte.default)(0)), function (data) {
    return data.every((0, _validators.validatePipe)((0, _validators.isRequired)(true), (0, _pipe.default)((0, _prop.default)('recipient'), _validators.isRecipient), (0, _pipe.default)((0, _prop.default)('amount'), _validators.isNumberLike)));
  }),
  assetId: validateOptional(_validators.isAssetId),
  attachment: validateOptional(_validators.isAttachment)
});
exports.massTransferArgsScheme = massTransferArgsScheme;
var massTransferArgsValidator = validator(massTransferArgsScheme, 'mass transfer');
exports.massTransferArgsValidator = massTransferArgsValidator;
var dataArgsScheme = (0, _tslib.__assign)((0, _tslib.__assign)({}, getCommonValidators(_tsTypes.TRANSACTION_TYPE.DATA)), {
  data: function (data) {
    return (0, _validators.isArray)(data) && data.every(function (item) {
      return (0, _validators.isValidData)(item);
    });
  }
});
exports.dataArgsScheme = dataArgsScheme;
var dataArgsValidator = validator(dataArgsScheme, 'data'); // TODO fix any

exports.dataArgsValidator = dataArgsValidator;
var setScriptArgsScheme = (0, _tslib.__assign)((0, _tslib.__assign)({}, getCommonValidators(_tsTypes.TRANSACTION_TYPE.SET_SCRIPT)), {
  script: _validators.isBase64,
  chainId: validateOptional(_validators.isNumber)
});
exports.setScriptArgsScheme = setScriptArgsScheme;
var setScriptArgsValidator = validator(setScriptArgsScheme, 'set script');
exports.setScriptArgsValidator = setScriptArgsValidator;
var sponsorshipArgsScheme = (0, _tslib.__assign)((0, _tslib.__assign)({}, getCommonValidators(_tsTypes.TRANSACTION_TYPE.SPONSORSHIP)), {
  // TODO Add not WAVES ASSET ID
  assetId: _validators.isString,
  minSponsoredAssetFee: _validators.isNumberLike
});
exports.sponsorshipArgsScheme = sponsorshipArgsScheme;
var sponsorshipArgsValidator = validator(sponsorshipArgsScheme, 'sponsorship');
exports.sponsorshipArgsValidator = sponsorshipArgsValidator;
var exchangeArgsScheme = (0, _tslib.__assign)((0, _tslib.__assign)({}, getCommonValidators(_tsTypes.TRANSACTION_TYPE.EXCHANGE)), {
  order1: (0, _validators.validatePipe)((0, _validators.isRequired)(true), _validators.orderValidator),
  order2: (0, _validators.validatePipe)((0, _validators.isRequired)(true), _validators.orderValidator),
  amount: _validators.isNumberLike,
  price: _validators.isNumberLike,
  buyMatcherFee: _validators.isNumberLike,
  sellMatcherFee: _validators.isNumberLike
});
exports.exchangeArgsScheme = exchangeArgsScheme;
var exchangeArgsValidator = validator(exchangeArgsScheme, 'exchange');
exports.exchangeArgsValidator = exchangeArgsValidator;
var setAssetScriptArgsScheme = (0, _tslib.__assign)((0, _tslib.__assign)({}, getCommonValidators(_tsTypes.TRANSACTION_TYPE.SET_ASSET_SCRIPT)), {
  script: _validators.isBase64,
  assetId: _validators.isAssetId,
  chainId: validateOptional(_validators.isNumber)
});
exports.setAssetScriptArgsScheme = setAssetScriptArgsScheme;
var setAssetScriptArgsValidator = validator(setAssetScriptArgsScheme, 'set asset script');
exports.setAssetScriptArgsValidator = setAssetScriptArgsValidator;
var invokeArgsScheme = (0, _tslib.__assign)((0, _tslib.__assign)({}, getCommonValidators(_tsTypes.TRANSACTION_TYPE.INVOKE_SCRIPT)), {
  dApp: _validators.isRecipient,
  call: validateOptional((0, _validators.validatePipe)((0, _pipe.default)((0, _prop.default)('function'), _validators.isString), (0, _pipe.default)((0, _prop.default)('function'), (0, _prop.default)('length'), (0, _lte.default)(0)), (0, _pipe.default)((0, _prop.default)('args'), _validators.isArray))),
  payment: validateOptional((0, _validators.validatePipe)(_validators.isArray, function (data) {
    return data.every((0, _validators.validatePipe)((0, _pipe.default)((0, _prop.default)('amount'), _validators.isNumberLike), (0, _pipe.default)((0, _prop.default)('assetId'), _validators.isAssetId)));
  })),
  feeAssetId: validateOptional(_validators.isAssetId),
  chainId: validateOptional(_validators.isNumber)
});
exports.invokeArgsScheme = invokeArgsScheme;
var invokeArgsValidator = validator(invokeArgsScheme, 'invoke');
exports.invokeArgsValidator = invokeArgsValidator;
var argsValidators = (_a = {}, _a[_tsTypes.TRANSACTION_TYPE.ISSUE] = issueArgsValidator, _a[_tsTypes.TRANSACTION_TYPE.TRANSFER] = transferArgsValidator, _a[_tsTypes.TRANSACTION_TYPE.REISSUE] = reissueArgsValidator, _a[_tsTypes.TRANSACTION_TYPE.BURN] = burnArgsValidator, _a[_tsTypes.TRANSACTION_TYPE.LEASE] = leaseArgsValidator, _a[_tsTypes.TRANSACTION_TYPE.CANCEL_LEASE] = cancelLeaseArgsValidator, _a[_tsTypes.TRANSACTION_TYPE.ALIAS] = aliasArgsValidator, _a[_tsTypes.TRANSACTION_TYPE.MASS_TRANSFER] = massTransferArgsValidator, _a[_tsTypes.TRANSACTION_TYPE.DATA] = dataArgsValidator, _a[_tsTypes.TRANSACTION_TYPE.SET_SCRIPT] = setScriptArgsValidator, _a[_tsTypes.TRANSACTION_TYPE.SPONSORSHIP] = sponsorshipArgsValidator, _a[_tsTypes.TRANSACTION_TYPE.EXCHANGE] = exchangeArgsValidator, _a[_tsTypes.TRANSACTION_TYPE.SET_ASSET_SCRIPT] = setAssetScriptArgsValidator, _a[_tsTypes.TRANSACTION_TYPE.INVOKE_SCRIPT] = invokeArgsValidator, _a);
exports.argsValidators = argsValidators;

var validateSignerOptions = function (options) {
  var res = {
    isValid: true,
    invalidOptions: []
  };

  var isValidLogLevel = function (level) {
    return ['verbose', 'production', 'error'].includes(String(level));
  };

  if (!(0, _validators.isString)(options.NODE_URL)) {
    res.isValid = false;
    res.invalidOptions.push('NODE_URL');
  }

  if (!validateOptional(isValidLogLevel)(options.LOG_LEVEL)) {
    res.isValid = false;
    res.invalidOptions.push('debug');
  }

  return res;
};

exports.validateSignerOptions = validateSignerOptions;

var validateProviderInterface = function (provider) {
  var isFunction = function (value) {
    return typeof value === 'function';
  };

  var scheme = {
    connect: isFunction,
    login: isFunction,
    logout: isFunction,
    signMessage: isFunction,
    signTypedData: isFunction,
    sign: isFunction
  };
  var invalidProperties = [];

  for (var _i = 0, _a = Object.entries(scheme); _i < _a.length; _i++) {
    var _b = _a[_i],
        fieldName = _b[0],
        validator_1 = _b[1];

    if (!validator_1(provider[fieldName])) {
      invalidProperties.push(fieldName);
    }
  }

  return {
    isValid: invalidProperties.length === 0,
    invalidProperties: invalidProperties
  };
};

exports.validateProviderInterface = validateProviderInterface;
},{"tslib":"vCxL","ramda/src/defaultTo":"eODk","ramda/src/prop":"E9RQ","ramda/src/ifElse":"xarn","ramda/src/pipe":"bdiw","ramda/src/equals":"rAKI","ramda/src/lte":"PGcC","ramda/src/not":"FbuY","./validators":"vtuV","@waves/ts-types":"UGFq"}],"ZnFM":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.SignerProviderSignIsNotSupport = exports.SignerProviderInternalError = exports.SignerProviderInterfaceError = exports.SignerProviderConnectError = exports.SignerOptionsError = exports.SignerNetworkError = exports.SignerNetworkByteError = exports.SignerError = exports.SignerEnsureProviderError = exports.SignerAuthError = exports.SignerApiArgumentsError = exports.ERRORS = void 0;

var _tslib = require("tslib");

var REPOSITORY_URL = 'http://github.com/wavesplatform/signer';
var ERRORS = {
  SIGNER_OPTIONS: 1000,
  NETWORK_BYTE: 1001,
  NOT_AUTHORIZED: 1002,
  PROVIDER_CONNECT: 1003,
  ENSURE_PROVIDER: 1004,
  PROVIDER_INTERFACE: 1005,
  PROVIDER_INTERNAL: 1006,
  API_ARGUMENTS: 1007,
  NETWORK_ERROR: 1008,
  PROVIDER_SIGN_NOT_SUPPORTED: 1009
};
exports.ERRORS = ERRORS;

var errorTemplate = function (error) {
  var details = error.details ? "    Details: " + error.details : undefined;
  var errorArgs = error.errorArgs ? "    ErrorArgs: " + error.errorArgs : undefined;
  return ["Signer error:", "    Title: " + error.title, "    Type: " + error.type, "    Code: " + error.code, errorArgs, details, "    More info: " + REPOSITORY_URL + "#error-codes"].filter(Boolean).join('\n');
};

var SignerError =
/** @class */
function (_super) {
  (0, _tslib.__extends)(SignerError, _super);

  function SignerError(details) {
    var _this = _super.call(this, errorTemplate(details)) || this;

    _this.code = details.code;
    _this.type = details.type; // Set the prototype explicitly.

    Object.setPrototypeOf(_this, SignerError.prototype);
    return _this;
  }

  return SignerError;
}(Error);

exports.SignerError = SignerError;

var SignerOptionsError =
/** @class */
function (_super) {
  (0, _tslib.__extends)(SignerOptionsError, _super);

  function SignerOptionsError(args) {
    var _this = _super.call(this, {
      code: ERRORS.SIGNER_OPTIONS,
      title: 'Invalid signer options',
      type: 'validation',
      details: "\n        Invalid signer options: " + args.join(', '),
      errorArgs: args
    }) || this;

    Object.setPrototypeOf(_this, SignerOptionsError.prototype);
    return _this;
  }

  return SignerOptionsError;
}(SignerError);

exports.SignerOptionsError = SignerOptionsError;

var SignerApiArgumentsError =
/** @class */
function (_super) {
  (0, _tslib.__extends)(SignerApiArgumentsError, _super);

  function SignerApiArgumentsError(args) {
    var _this = _super.call(this, {
      code: ERRORS.API_ARGUMENTS,
      title: 'Invalid api method arguments',
      type: 'validation',
      details: "\n        " + args.join('\n        '),
      errorArgs: args
    }) || this;

    Object.setPrototypeOf(_this, SignerApiArgumentsError.prototype);
    return _this;
  }

  return SignerApiArgumentsError;
}(SignerError);

exports.SignerApiArgumentsError = SignerApiArgumentsError;

var SignerNetworkByteError =
/** @class */
function (_super) {
  (0, _tslib.__extends)(SignerNetworkByteError, _super);

  function SignerNetworkByteError(_a) {
    var error = _a.error,
        node = _a.node;

    var _this = _super.call(this, {
      code: ERRORS.NETWORK_BYTE,
      title: 'Network byte fetching has failed',
      type: 'network',
      details: "\n        Could not fetch network from " + node + ": " + error,
      errorArgs: {
        error: error,
        node: node
      }
    }) || this;

    Object.setPrototypeOf(_this, SignerNetworkByteError.prototype);
    return _this;
  }

  return SignerNetworkByteError;
}(SignerError);

exports.SignerNetworkByteError = SignerNetworkByteError;

var SignerProviderInterfaceError =
/** @class */
function (_super) {
  (0, _tslib.__extends)(SignerProviderInterfaceError, _super);

  function SignerProviderInterfaceError(invalidProperties) {
    var _this = _super.call(this, {
      code: ERRORS.NETWORK_BYTE,
      title: 'Invalid Provider interface',
      type: 'validation',
      details: "\n        Invalid provider properties: " + invalidProperties.join(', '),
      errorArgs: invalidProperties
    }) || this;

    Object.setPrototypeOf(_this, SignerProviderInterfaceError.prototype);
    return _this;
  }

  return SignerProviderInterfaceError;
}(SignerError);

exports.SignerProviderInterfaceError = SignerProviderInterfaceError;

var SignerProviderConnectError =
/** @class */
function (_super) {
  (0, _tslib.__extends)(SignerProviderConnectError, _super);

  function SignerProviderConnectError(_a) {
    var error = _a.error,
        node = _a.node;

    var _this = _super.call(this, {
      code: ERRORS.PROVIDER_CONNECT,
      title: 'Could not connect the Provider',
      type: 'network',
      errorArgs: {
        error: error,
        node: node
      }
    }) || this;

    Object.setPrototypeOf(_this, SignerProviderConnectError.prototype);
    return _this;
  }

  return SignerProviderConnectError;
}(SignerError);

exports.SignerProviderConnectError = SignerProviderConnectError;

var SignerProviderSignIsNotSupport =
/** @class */
function (_super) {
  (0, _tslib.__extends)(SignerProviderSignIsNotSupport, _super);

  function SignerProviderSignIsNotSupport(_a) {
    var error = _a.error,
        node = _a.node;

    var _this = _super.call(this, {
      code: ERRORS.PROVIDER_SIGN_NOT_SUPPORTED,
      title: 'Method sign is not support for this provider. Use broadcats instead',
      type: 'validation',
      errorArgs: {
        error: error,
        node: node
      }
    }) || this;

    Object.setPrototypeOf(_this, SignerProviderSignIsNotSupport.prototype);
    return _this;
  }

  return SignerProviderSignIsNotSupport;
}(SignerError);

exports.SignerProviderSignIsNotSupport = SignerProviderSignIsNotSupport;

var SignerEnsureProviderError =
/** @class */
function (_super) {
  (0, _tslib.__extends)(SignerEnsureProviderError, _super);

  function SignerEnsureProviderError(method) {
    var _this = _super.call(this, {
      code: ERRORS.ENSURE_PROVIDER,
      title: 'Provider instance is missing',
      type: 'provider',
      details: "Can't use method: " + method + ". Provider instance is missing",
      errorArgs: {
        failedMethod: method
      }
    }) || this;

    Object.setPrototypeOf(_this, SignerProviderConnectError.prototype);
    return _this;
  }

  return SignerEnsureProviderError;
}(SignerError);

exports.SignerEnsureProviderError = SignerEnsureProviderError;

var SignerProviderInternalError =
/** @class */
function (_super) {
  (0, _tslib.__extends)(SignerProviderInternalError, _super);

  function SignerProviderInternalError(message) {
    var _this = _super.call(this, {
      code: ERRORS.ENSURE_PROVIDER,
      title: 'Provider internal error',
      type: 'provider',
      details: "Provider internal error: " + message + ". This is not error of signer."
    }) || this;

    Object.setPrototypeOf(_this, SignerProviderConnectError.prototype);
    return _this;
  }

  return SignerProviderInternalError;
}(SignerError);

exports.SignerProviderInternalError = SignerProviderInternalError;

var SignerAuthError =
/** @class */
function (_super) {
  (0, _tslib.__extends)(SignerAuthError, _super);

  function SignerAuthError(method) {
    var _this = _super.call(this, {
      code: ERRORS.NOT_AUTHORIZED,
      title: 'Authorization error',
      type: 'authorization',
      details: "Can't use method: " + method + ". User must be logged in",
      errorArgs: {
        failedMethod: method
      }
    }) || this;

    Object.setPrototypeOf(_this, SignerProviderConnectError.prototype);
    return _this;
  }

  return SignerAuthError;
}(SignerError);

exports.SignerAuthError = SignerAuthError;

var SignerNetworkError =
/** @class */
function (_super) {
  (0, _tslib.__extends)(SignerNetworkError, _super); // TODO REMOVE ANY, ADD MORE DETAILS

  function SignerNetworkError(params) {
    return _super.call(this, {
      code: ERRORS.NETWORK_ERROR,
      title: 'Network Error',
      type: 'network',
      details: "Error connect to " + '',
      errorArgs: {}
    }) || this;
  }

  return SignerNetworkError;
}(SignerError);

exports.SignerNetworkError = SignerNetworkError;
},{"tslib":"vCxL"}],"edJK":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.errorHandlerFactory = void 0;

var _tslib = require("tslib");

var _SignerError = require("./SignerError");

var _a;

var ERRORS_MAP = (_a = {}, _a[_SignerError.ERRORS.SIGNER_OPTIONS] = _SignerError.SignerOptionsError, _a[_SignerError.ERRORS.NETWORK_BYTE] = _SignerError.SignerNetworkByteError, _a[_SignerError.ERRORS.PROVIDER_INTERFACE] = _SignerError.SignerProviderInterfaceError, _a[_SignerError.ERRORS.API_ARGUMENTS] = _SignerError.SignerApiArgumentsError, _a[_SignerError.ERRORS.PROVIDER_CONNECT] = _SignerError.SignerProviderConnectError, _a[_SignerError.ERRORS.PROVIDER_SIGN_NOT_SUPPORTED] = _SignerError.SignerProviderSignIsNotSupport, _a[_SignerError.ERRORS.ENSURE_PROVIDER] = _SignerError.SignerEnsureProviderError, _a[_SignerError.ERRORS.PROVIDER_INTERNAL] = _SignerError.SignerProviderInternalError, _a[_SignerError.ERRORS.NOT_AUTHORIZED] = _SignerError.SignerAuthError, _a[_SignerError.ERRORS.NETWORK_ERROR] = _SignerError.SignerNetworkError, _a);

var errorHandlerFactory = function (logger) {
  return function (errorCode, parameters) {
    var _a;

    var error = new ((_a = ERRORS_MAP[errorCode]).bind.apply(_a, (0, _tslib.__spreadArrays)([void 0], parameters || [])))();
    logger.log(error.toString());
    throw error;
  };
};

exports.errorHandlerFactory = errorHandlerFactory;
},{"tslib":"vCxL","./SignerError":"ZnFM"}],"XfM8":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ensureProvider = exports.checkAuth = exports.catchProviderError = exports.catchNetworkErrors = void 0;

var _SignerError = require("./SignerError");

var getErrorHandler = function (signer) {
  return signer._handleError;
};

var ensureProvider = function (target, propertyKey, descriptor) {
  var origin = descriptor.value;

  descriptor.value = function () {
    var args = [];

    for (var _i = 0; _i < arguments.length; _i++) {
      args[_i] = arguments[_i];
    }

    var provider = this.currentProvider;

    if (!provider) {
      var handler = getErrorHandler(this);
      var error = handler(_SignerError.ERRORS.ENSURE_PROVIDER, [propertyKey]);
      throw error;
    }

    return origin.apply(this, args);
  };
};

exports.ensureProvider = ensureProvider;

var catchProviderError = function (target, propertyKey, descriptor) {
  var origin = descriptor.value;

  descriptor.value = function () {
    var _this = this;

    var args = [];

    for (var _i = 0; _i < arguments.length; _i++) {
      args[_i] = arguments[_i];
    }

    return origin.apply(this, args).catch(function (e) {
      if (e === 'Error: User rejection!') {
        return Promise.reject(e);
      }

      if (e instanceof _SignerError.SignerError) {
        return Promise.reject(e);
      }

      var handler = getErrorHandler(_this);
      var error = handler(_SignerError.ERRORS.PROVIDER_INTERNAL, [e.message]);

      _this._console.error(error);

      return Promise.reject(e);
    });
  };
};

exports.catchProviderError = catchProviderError;

var checkAuth = function (target, propertyKey, descriptor) {
  var origin = descriptor.value;

  descriptor.value = function () {
    var args = [];

    for (var _i = 0; _i < arguments.length; _i++) {
      args[_i] = arguments[_i];
    }

    if (this.currentProvider.user == null) {
      var handler = getErrorHandler(this);
      var error = handler(_SignerError.ERRORS.NOT_AUTHORIZED, [propertyKey]);
      throw error;
    }

    return origin.apply(this, args);
  };
};

exports.checkAuth = checkAuth;

var catchNetworkErrors = function (checkData) {
  return function (target, propertyKey, descriptor) {
    var origin = descriptor.value;

    descriptor.value = function () {
      var _this = this;

      var args = [];

      for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
      }

      if (checkData.isMatcher) {// TODO
        // if (!this._options.MATCHER_URL) {
        //     const error = new SignerError(
        //         ERROR_CODE_MAP.NO_MATCHER_URL_PROVIDED,
        //         void 0
        //     );
        //
        //     this._console.error(error);
        //
        //     return Promise.reject(error);
        // }
      }

      return origin.apply(this, args).catch(function (e) {
        if (e instanceof _SignerError.SignerError) {
          return Promise.reject(e);
        }

        var handler = getErrorHandler(_this); // TODO Provide more details for request error!

        var error = handler(_SignerError.ERRORS.NETWORK_ERROR, [{}]);

        _this._console.error(error);

        return Promise.reject(error);
      });
    };
  };
};

exports.catchNetworkErrors = catchNetworkErrors;
},{"./SignerError":"ZnFM"}],"yLd4":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
var _exportNames = {
  Signer: true
};
exports.default = exports.Signer = void 0;

var _tslib = require("tslib");

var _constants = require("./constants");

var _clientLogs = require("@waves/client-logs");

var _addresses = require("@waves/node-api-js/cjs/api-node/addresses");

var _assets = require("@waves/node-api-js/cjs/api-node/assets");

var _wait = _interopRequireDefault(require("@waves/node-api-js/cjs/tools/transactions/wait"));

var _broadcast = _interopRequireDefault(require("@waves/node-api-js/cjs/tools/transactions/broadcast"));

var _getNetworkByte = _interopRequireDefault(require("@waves/node-api-js/cjs/tools/blocks/getNetworkByte"));

var _tsTypes = require("@waves/ts-types");

var _validation = require("./validation");

var _SignerError = require("./SignerError");

var _helpers = require("./helpers");

var _decorators = require("./decorators");

var _types = require("./types");

Object.keys(_types).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  if (key in exports && exports[key] === _types[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _types[key];
    }
  });
});

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var Signer =
/** @class */
function () {
  function Signer(options) {
    var _this_1 = this;

    var _a;

    this._issue = function (txList) {
      return function (data) {
        return _this_1._createPipelineAPI(txList, (0, _tslib.__assign)((0, _tslib.__assign)({}, data), {
          type: _tsTypes.TRANSACTION_TYPE.ISSUE
        }));
      };
    };

    this._transfer = function (txList) {
      return function (data) {
        return _this_1._createPipelineAPI(txList, (0, _tslib.__assign)((0, _tslib.__assign)({}, data), {
          type: _tsTypes.TRANSACTION_TYPE.TRANSFER
        }));
      };
    };

    this._reissue = function (txList) {
      return function (data) {
        return _this_1._createPipelineAPI(txList, (0, _tslib.__assign)((0, _tslib.__assign)({}, data), {
          type: _tsTypes.TRANSACTION_TYPE.REISSUE
        }));
      };
    };

    this._burn = function (txList) {
      return function (data) {
        return _this_1._createPipelineAPI(txList, (0, _tslib.__assign)((0, _tslib.__assign)({}, data), {
          type: _tsTypes.TRANSACTION_TYPE.BURN
        }));
      };
    };

    this._lease = function (txList) {
      return function (data) {
        return _this_1._createPipelineAPI(txList, (0, _tslib.__assign)((0, _tslib.__assign)({}, data), {
          type: _tsTypes.TRANSACTION_TYPE.LEASE
        }));
      };
    };

    this._exchange = function (txList) {
      return function (data) {
        return _this_1._createPipelineAPI(txList, (0, _tslib.__assign)((0, _tslib.__assign)({}, data), {
          type: _tsTypes.TRANSACTION_TYPE.EXCHANGE
        }));
      };
    };

    this._cancelLease = function (txList) {
      return function (data) {
        return _this_1._createPipelineAPI(txList, (0, _tslib.__assign)((0, _tslib.__assign)({}, data), {
          type: _tsTypes.TRANSACTION_TYPE.CANCEL_LEASE
        }));
      };
    };

    this._alias = function (txList) {
      return function (data) {
        return _this_1._createPipelineAPI(txList, (0, _tslib.__assign)((0, _tslib.__assign)({}, data), {
          type: _tsTypes.TRANSACTION_TYPE.ALIAS
        }));
      };
    };

    this._massTransfer = function (txList) {
      return function (data) {
        return _this_1._createPipelineAPI(txList, (0, _tslib.__assign)((0, _tslib.__assign)({}, data), {
          type: _tsTypes.TRANSACTION_TYPE.MASS_TRANSFER
        }));
      };
    };

    this._data = function (txList) {
      return function (data) {
        return _this_1._createPipelineAPI(txList, (0, _tslib.__assign)((0, _tslib.__assign)({}, data), {
          type: _tsTypes.TRANSACTION_TYPE.DATA
        }));
      };
    };

    this._sponsorship = function (txList) {
      return function (sponsorship) {
        return _this_1._createPipelineAPI(txList, (0, _tslib.__assign)((0, _tslib.__assign)({}, sponsorship), {
          type: _tsTypes.TRANSACTION_TYPE.SPONSORSHIP
        }));
      };
    };

    this._setScript = function (txList) {
      return function (setScript) {
        return _this_1._createPipelineAPI(txList, (0, _tslib.__assign)((0, _tslib.__assign)({}, setScript), {
          type: _tsTypes.TRANSACTION_TYPE.SET_SCRIPT
        }));
      };
    };

    this._setAssetScript = function (txList) {
      return function (data) {
        return _this_1._createPipelineAPI(txList, (0, _tslib.__assign)((0, _tslib.__assign)({}, data), {
          type: _tsTypes.TRANSACTION_TYPE.SET_ASSET_SCRIPT
        }));
      };
    };

    this._invoke = function (txList) {
      return function (data) {
        return _this_1._createPipelineAPI(txList, (0, _tslib.__assign)((0, _tslib.__assign)({}, data), {
          type: _tsTypes.TRANSACTION_TYPE.INVOKE_SCRIPT
        }));
      };
    };

    this._logger = (0, _clientLogs.makeConsole)((0, _clientLogs.makeOptions)((_a = options === null || options === void 0 ? void 0 : options.LOG_LEVEL) !== null && _a !== void 0 ? _a : 'production', 'Signer'));
    this._handleError = (0, _helpers.errorHandlerFactory)(this._logger);
    this._options = (0, _tslib.__assign)((0, _tslib.__assign)({}, _constants.DEFAULT_OPTIONS), options || {});

    var _b = (0, _validation.validateSignerOptions)(this._options),
        isValid = _b.isValid,
        invalidOptions = _b.invalidOptions;

    if (!isValid) {
      var error = this._handleError(_SignerError.ERRORS.SIGNER_OPTIONS, [invalidOptions]);

      throw error;
    }

    var makeNetworkByteError = function (e) {
      var error = _this_1._handleError(_SignerError.ERRORS.NETWORK_BYTE, [{
        error: e.message,
        node: _this_1._options.NODE_URL
      }]);

      _this_1._logger.error(error);

      return error;
    };

    try {
      this._networkBytePromise = (0, _getNetworkByte.default)(this._options.NODE_URL).catch(function (e) {
        return Promise.reject(makeNetworkByteError(e));
      });
    } catch (e) {
      throw makeNetworkByteError(e);
    }

    this._logger.info('Signer instance has been successfully created. Options: ', options);
  }

  Object.defineProperty(Signer.prototype, "_connectPromise", {
    get: function () {
      return this.__connectPromise || Promise.reject('Has no provider!');
    },
    set: function (promise) {
      this.__connectPromise = promise;
    },
    enumerable: false,
    configurable: true
  });

  Signer.prototype.on = function (event, handler) {
    this.currentProvider.on(event, handler);

    this._logger.info("Handler for \"" + event + "\" has been added.");

    return this;
  };

  Signer.prototype.once = function (event, handler) {
    this.currentProvider.once(event, handler);

    this._logger.info("One-Time handler for \"" + event + "\" has been added.");

    return this;
  };

  Signer.prototype.off = function (event, handler) {
    this.currentProvider.off(event, handler);

    this._logger.info("Handler for \"" + event + "\" has been removed.");

    return this;
  };

  Signer.prototype.broadcast = function (toBroadcast, options) {
    // @ts-ignore
    return (0, _broadcast.default)(this._options.NODE_URL, toBroadcast, options); // TODO поправить тип в broadcast
  };
  /**
   * Запросить байт сети
   */


  Signer.prototype.getNetworkByte = function () {
    return this._networkBytePromise;
  };
  /**
   * Устанавливаем провайдер отвечающий за подпись
   * @param provider
   *
   * ```ts
   * import Signer from '@waves/signer';
   * import Provider from '@waves/seed-provider';
   *
   * const waves = new Signer();
   * waves.setProvider(new Provider('SEED'));
   * ```
   */


  Signer.prototype.setProvider = function (provider) {
    return (0, _tslib.__awaiter)(this, void 0, void 0, function () {
      var providerValidation, error;

      var _this_1 = this;

      return (0, _tslib.__generator)(this, function (_a) {
        providerValidation = (0, _validation.validateProviderInterface)(provider);

        if (!providerValidation.isValid) {
          error = this._handleError(_SignerError.ERRORS.PROVIDER_INTERFACE, [providerValidation.invalidProperties]);
          throw error;
        }

        this.currentProvider = provider;

        this._logger.info('Provider has been set.');

        this._connectPromise = this._networkBytePromise.then(function (byte) {
          return provider.connect({
            NETWORK_BYTE: byte,
            NODE_URL: _this_1._options.NODE_URL
          }).then(function () {
            _this_1._logger.info('Provider has connected to node.');

            return provider;
          }).catch(function (e) {
            var error = _this_1._handleError(_SignerError.ERRORS.PROVIDER_CONNECT, [{
              error: e.message,
              node: _this_1._options.NODE_URL
            }]);

            _this_1._logger.error(error);

            return Promise.reject(error);
          });
        });
        return [2
        /*return*/
        ];
      });
    });
  };
  /**
   * Получаем список балансов пользователя (необходимо выполнить login перед использованием)
   * Basic usage example:
   *
   * ```ts
   * await waves.getBalance(); // Возвращает балансы пользователя
   * ```
   */


  Signer.prototype.getBalance = function () {
    var _this_1 = this;

    return Promise.all([(0, _addresses.fetchBalanceDetails)(this._options.NODE_URL, this._userData.address).then(function (data) {
      return {
        assetId: 'WAVES',
        assetName: 'Waves',
        decimals: 8,
        amount: String(data.available),
        isMyAsset: false,
        tokens: Number(data.available) * Math.pow(10, 8),
        sponsorship: null,
        isSmart: false
      };
    }), (0, _assets.fetchAssetsBalance)(this._options.NODE_URL, this._userData.address).then(function (data) {
      return data.balances.map(function (item) {
        return {
          assetId: item.assetId,
          assetName: item.issueTransaction.name,
          decimals: item.issueTransaction.decimals,
          amount: String(item.balance),
          isMyAsset: item.issueTransaction.sender === _this_1._userData.address,
          tokens: Number(item.balance) * Math.pow(10, item.issueTransaction.decimals),
          isSmart: !!item.issueTransaction.script,
          sponsorship: item.sponsorBalance != null && item.sponsorBalance > Math.pow(10, 8) && (item.minSponsoredAssetFee || 0) < item.balance ? item.minSponsoredAssetFee : null
        };
      });
    })]).then(function (_a) {
      var waves = _a[0],
          assets = _a[1];
      return (0, _tslib.__spreadArrays)([waves], assets);
    });
  };
  /**
   * Получаем информацию о пользователе
   * В данном методе НЕЛЬЗЯ использовать асинхронность.
   * Метод login провайдера должен вызываться синхронно в контексте вызова метода!
   * ```ts
   * await waves.login(); // Авторизуемся. Возвращает адрес и публичный ключ
   * ```
   */


  Signer.prototype.login = function () {
    var _this_1 = this;

    return this.currentProvider.login().then(function (data) {
      _this_1._logger.info('Logged in.');

      _this_1._userData = data;
      return data;
    }).catch(function (err) {
      if (err === 'Error: User rejection!') {
        throw err;
      }

      var error = _this_1._handleError(_SignerError.ERRORS.PROVIDER_INTERNAL, [err.message]);

      throw error;
    });
  };
  /**
   * Вылогиниваемся из юзера
   */


  Signer.prototype.logout = function () {
    return (0, _tslib.__awaiter)(this, void 0, void 0, function () {
      var _a, message, error;

      return (0, _tslib.__generator)(this, function (_b) {
        switch (_b.label) {
          case 0:
            return [4
            /*yield*/
            , this._connectPromise];

          case 1:
            _b.sent();

            _b.label = 2;

          case 2:
            _b.trys.push([2, 4,, 5]);

            return [4
            /*yield*/
            , this.currentProvider.logout()];

          case 3:
            _b.sent();

            this._userData = undefined;

            this._logger.info('Logged out.');

            return [3
            /*break*/
            , 5];

          case 4:
            _a = _b.sent();
            message = _a.message;
            error = this._handleError(_SignerError.ERRORS.PROVIDER_INTERNAL, message);
            throw error;

          case 5:
            return [2
            /*return*/
            ];
        }
      });
    });
  };
  /**
   * Подписываем сообщение пользователя (провайдер может устанавливать префикс)
   * @param message
   */


  Signer.prototype.signMessage = function (message) {
    return this._connectPromise.then(function (provider) {
      return provider.signMessage(message);
    });
  };
  /**
   * Подписываем типизированные данные
   * @param data
   */


  Signer.prototype.signTypedData = function (data) {
    return this._connectPromise.then(function (provider) {
      return provider.signTypedData(data);
    });
  };
  /**
   * Получаем список балансов в кторых можно платить комиссию
   */


  Signer.prototype.getSponsoredBalances = function () {
    return this.getBalance().then(function (balance) {
      return balance.filter(function (item) {
        return !!item.sponsorship;
      });
    });
  };

  Signer.prototype.batch = function (tsx) {
    var _this_1 = this;

    var sign = function () {
      return _this_1._sign(tsx).then(function (result) {
        return result;
      });
    };

    return {
      sign: sign,
      broadcast: function (opt) {
        return sign().then(function (transactions) {
          return _this_1.broadcast(transactions, opt);
        });
      }
    };
  };

  Signer.prototype.issue = function (data) {
    return this._issue([])(data);
  };

  Signer.prototype.transfer = function (data) {
    return this._transfer([])(data);
  };

  Signer.prototype.reissue = function (data) {
    return this._reissue([])(data);
  };

  Signer.prototype.burn = function (data) {
    return this._burn([])(data);
  };

  Signer.prototype.lease = function (data) {
    return this._lease([])(data);
  };

  Signer.prototype.exchange = function (data) {
    return this._exchange([])(data);
  };

  Signer.prototype.cancelLease = function (data) {
    return this._cancelLease([])(data);
  };

  Signer.prototype.alias = function (data) {
    return this._alias([])(data);
  };

  Signer.prototype.massTransfer = function (data) {
    return this._massTransfer([])(data);
  };

  Signer.prototype.data = function (data) {
    return this._data([])(data);
  };

  Signer.prototype.sponsorship = function (data) {
    return this._sponsorship([])(data);
  };

  Signer.prototype.setScript = function (data) {
    return this._setScript([])(data);
  };

  Signer.prototype.setAssetScript = function (data) {
    return this._setAssetScript([])(data);
  };

  Signer.prototype.invoke = function (data) {
    return this._invoke([])(data);
  };

  Signer.prototype.waitTxConfirm = function (tx, confirmations) {
    return (0, _wait.default)(this._options.NODE_URL, tx, {
      confirmations: confirmations
    }); // TODO Fix types
  };

  Signer.prototype._createPipelineAPI = function (prevCallTxList, signerTx) {
    var _this_1 = this;

    var _this = this;

    var txs = prevCallTxList.length ? (0, _tslib.__spreadArrays)(prevCallTxList, [signerTx]) : [signerTx];
    var chainArgs = Array.isArray(txs) ? txs : [txs];
    return (0, _tslib.__assign)((0, _tslib.__assign)({}, {
      issue: this._issue(chainArgs),
      transfer: this._transfer(chainArgs),
      reissue: this._reissue(chainArgs),
      burn: this._burn(chainArgs),
      lease: this._lease(chainArgs),
      exchange: this._exchange(chainArgs),
      cancelLease: this._cancelLease(chainArgs),
      alias: this._alias(chainArgs),
      massTransfer: this._massTransfer(chainArgs),
      data: this._data(chainArgs),
      sponsorship: this._sponsorship(chainArgs),
      setScript: this._setScript(chainArgs),
      setAssetScript: this._setAssetScript(chainArgs),
      invoke: this._invoke(chainArgs)
    }), {
      sign: function () {
        return _this_1._sign(txs);
      },
      broadcast: function (options) {
        var _a;

        if (((_a = _this.currentProvider) === null || _a === void 0 ? void 0 : _a.isSignAndBroadcastByProvider) === true) {
          return _this.currentProvider.sign(txs);
        } else {
          return this.sign() // @ts-ignore
          .then(function (txs) {
            return _this.broadcast(txs, options);
          });
        }
      }
    });
  };

  Signer.prototype._validate = function (toSign) {
    var signerTxs = Array.isArray(toSign) ? toSign : [toSign];

    var validateTx = function (tx) {
      return _validation.argsValidators[tx.type](tx);
    };

    var knownTxPredicate = function (type) {
      return Object.keys(_validation.argsValidators).includes(String(type));
    };

    var unknownTxs = signerTxs.filter(function (_a) {
      var type = _a.type;
      return !knownTxPredicate(type);
    });
    var knownTxs = signerTxs.filter(function (_a) {
      var type = _a.type;
      return knownTxPredicate(type);
    });
    var invalidTxs = knownTxs.map(validateTx).filter(function (_a) {
      var isValid = _a.isValid;
      return !isValid;
    });

    if (invalidTxs.length === 0 && unknownTxs.length === 0) {
      return {
        isValid: true,
        errors: []
      };
    } else {
      return {
        isValid: false,
        errors: (0, _tslib.__spreadArrays)(invalidTxs.map(function (_a) {
          var transaction = _a.transaction,
              scope = _a.method,
              invalidFields = _a.invalidFields;
          return "Validation error for " + scope + " transaction: " + JSON.stringify(transaction) + ". Invalid arguments: " + (invalidFields === null || invalidFields === void 0 ? void 0 : invalidFields.join(', '));
        }), unknownTxs.map(function (tx) {
          return "Validation error for transaction " + JSON.stringify(tx) + ". Unknown transaction type: " + tx.type;
        }))
      };
    }
  };

  Signer.prototype._sign = function (toSign) {
    var _a;

    var validation = this._validate(toSign);

    if (((_a = this.currentProvider) === null || _a === void 0 ? void 0 : _a.isSignAndBroadcastByProvider) === true) {
      var error = this._handleError(_SignerError.ERRORS.PROVIDER_SIGN_NOT_SUPPORTED, [{
        error: 'PROVIDER_SIGN_NOT_SUPPORTED',
        node: this._options.NODE_URL
      }]);

      throw error;
    }

    if (validation.isValid) {
      return this._connectPromise.then(function (provider) {
        return provider.sign(toSign);
      } // any fixes "Expression produces a union type that is too complex to
      );
    } else {
      var error = this._handleError(_SignerError.ERRORS.API_ARGUMENTS, [validation.errors]);

      throw error;
    }
  };

  (0, _tslib.__decorate)([_decorators.ensureProvider], Signer.prototype, "on", null);
  (0, _tslib.__decorate)([_decorators.ensureProvider], Signer.prototype, "once", null);
  (0, _tslib.__decorate)([_decorators.ensureProvider], Signer.prototype, "off", null);
  (0, _tslib.__decorate)([_decorators.ensureProvider, _decorators.checkAuth], Signer.prototype, "getBalance", null);
  (0, _tslib.__decorate)([_decorators.ensureProvider], Signer.prototype, "login", null);
  (0, _tslib.__decorate)([_decorators.ensureProvider], Signer.prototype, "logout", null);
  (0, _tslib.__decorate)([_decorators.ensureProvider], Signer.prototype, "signMessage", null);
  (0, _tslib.__decorate)([_decorators.ensureProvider], Signer.prototype, "signTypedData", null);
  (0, _tslib.__decorate)([_decorators.catchProviderError], Signer.prototype, "_sign", null);
  return Signer;
}();

exports.Signer = Signer;
// eslint-disable-next-line import/no-default-export
var _default = Signer;
exports.default = _default;
},{"tslib":"vCxL","./constants":"nfKU","@waves/client-logs":"wnK3","@waves/node-api-js/cjs/api-node/addresses":"lmIF","@waves/node-api-js/cjs/api-node/assets":"ZNem","@waves/node-api-js/cjs/tools/transactions/wait":"XisK","@waves/node-api-js/cjs/tools/transactions/broadcast":"NFk5","@waves/node-api-js/cjs/tools/blocks/getNetworkByte":"ezNl","@waves/ts-types":"UGFq","./validation":"TV6t","./SignerError":"ZnFM","./helpers":"edJK","./decorators":"XfM8","./types":"vpK4"}],"f9ON":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _api = require("./types/api");

Object.keys(_api).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _api[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _api[key];
    }
  });
});

var _index = require("./types/index");

Object.keys(_index).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _index[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _index[key];
    }
  });
});

var _Signer = require("./Signer");

Object.keys(_Signer).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _Signer[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _Signer[key];
    }
  });
});
},{"./types/api":"vpK4","./types/index":"vpK4","./Signer":"yLd4"}],"d2z1":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.chainIdFromRecipient = exports.normalizeAssetId = exports.fee = exports.networkByte = exports.isOrder = exports.convertToPairs = exports.addProof = exports.base64Prefix = exports.getSenderPublicKey = exports.mapObj = void 0;
const ts_lib_crypto_1 = require("@waves/ts-lib-crypto");
exports.mapObj = (obj, f) => Object.entries(obj).map(([k, v]) => [k, f(v)])
    .reduce((acc, [k, v]) => (Object.assign(Object.assign({}, acc), { [k]: v })), {});
function getSenderPublicKey(seedsAndIndexes, params) {
    if (seedsAndIndexes.length === 0 && params.senderPublicKey == null)
        throw new Error('Please provide either seed or senderPublicKey');
    else {
        return params.senderPublicKey == null ? ts_lib_crypto_1.publicKey(seedsAndIndexes[0][0]) : params.senderPublicKey;
    }
}
exports.getSenderPublicKey = getSenderPublicKey;
exports.base64Prefix = (str) => str == null || str.slice(0, 7) === 'base64:' ? str : 'base64:' + str;
function addProof(tx, proof, index) {
    if (index == null) {
        tx.proofs = [...tx.proofs, proof];
        return tx;
    }
    if (tx.proofs != null && !!tx.proofs[index])
        throw new Error(`Proof at index ${index} already exists.`);
    for (let i = tx.proofs.length; i < index; i++)
        tx.proofs.push('');
    tx.proofs[index] = proof;
    return tx;
}
exports.addProof = addProof;
function convertToPairs(seedObj) {
    //Due to typescript duck typing, 'string' type satisfies IIndexSeedMap interface. Because of this we should typecheck against string first
    if (seedObj == null) {
        return [];
    }
    else if (typeof seedObj === 'string') {
        return [[seedObj, undefined]];
    }
    else if ('privateKey' in seedObj) {
        return [[seedObj, undefined]];
    }
    else if (Array.isArray(seedObj)) {
        return seedObj.map((s, i) => [s, i]).filter(([s, _]) => s);
    }
    else {
        const keys = Object.keys(seedObj).map(k => parseInt(k)).filter(k => !isNaN(k)).sort();
        return keys.map(k => [seedObj[k], k]);
    }
}
exports.convertToPairs = convertToPairs;
exports.isOrder = (p) => p.assetPair !== undefined;
function networkByte(p, def) {
    switch (typeof p) {
        case 'string':
            return p.charCodeAt(0);
        case 'number':
            return p;
        default:
            return def;
    }
}
exports.networkByte = networkByte;
function fee(params, def) {
    if (params.fee != null)
        return params.fee;
    if (!params.additionalFee)
        return def;
    return def + params.additionalFee;
}
exports.fee = fee;
function normalizeAssetId(assetId) {
    assetId = assetId || null;
    return assetId === 'WAVES' ? null : assetId;
}
exports.normalizeAssetId = normalizeAssetId;
function chainIdFromRecipient(recipient) {
    if (recipient.startsWith('alias')) {
        return recipient.charCodeAt(6);
    }
    else {
        try {
            return ts_lib_crypto_1.base58Decode(recipient)[1];
        }
        catch (e) {
            throw new Error(`Invalid recipient: ${recipient}`);
        }
    }
}
exports.chainIdFromRecipient = chainIdFromRecipient;

},{"@waves/ts-lib-crypto":"X6Ht"}],"LFlE":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const ALPHABET = '123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz';
const ALPHABET_MAP = ALPHABET.split('').reduce((map, c, i) => {
    map[c] = i;
    return map;
}, {});
exports.default = {
    encode(buffer) {
        if (!buffer.length)
            return '';
        const digits = [0];
        for (let i = 0; i < buffer.length; i++) {
            for (let j = 0; j < digits.length; j++) {
                digits[j] <<= 8;
            }
            digits[0] += buffer[i];
            let carry = 0;
            for (let k = 0; k < digits.length; k++) {
                digits[k] += carry;
                carry = (digits[k] / 58) | 0;
                digits[k] %= 58;
            }
            while (carry) {
                digits.push(carry % 58);
                carry = (carry / 58) | 0;
            }
        }
        for (let i = 0; buffer[i] === 0 && i < buffer.length - 1; i++) {
            digits.push(0);
        }
        return digits.reverse().map(function (digit) {
            return ALPHABET[digit];
        }).join('');
    },
    decode(string) {
        if (!string.length)
            return new Uint8Array(0);
        const bytes = [0];
        for (let i = 0; i < string.length; i++) {
            const c = string[i];
            if (!(c in ALPHABET_MAP)) {
                throw new Error(`There is no character "${c}" in the Base58 sequence!`);
            }
            for (let j = 0; j < bytes.length; j++) {
                bytes[j] *= 58;
            }
            bytes[0] += ALPHABET_MAP[c];
            let carry = 0;
            for (let j = 0; j < bytes.length; j++) {
                bytes[j] += carry;
                carry = bytes[j] >> 8;
                bytes[j] &= 0xff;
            }
            while (carry) {
                bytes.push(carry & 0xff);
                carry >>= 8;
            }
        }
        for (let i = 0; string[i] === '1' && i < string.length - 1; i++) {
            bytes.push(0);
        }
        return new Uint8Array(bytes.reverse());
    }
};

},{}],"RyRn":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.concat = (...arrays) => arrays.reduce((a, b) => Uint8Array.from([...a, ...b]), new Uint8Array(0));
exports.range = (start, end, step = 1) => Array.from({ length: end - start })
    .map((_, i) => i * step + start);

},{}],"YvD4":[function(require,module,exports) {
module.exports = Long;

/**
 * wasm optimizations, to do native i64 multiplication and divide
 */
var wasm = null;

try {
  wasm = new WebAssembly.Instance(new WebAssembly.Module(new Uint8Array([
    0, 97, 115, 109, 1, 0, 0, 0, 1, 13, 2, 96, 0, 1, 127, 96, 4, 127, 127, 127, 127, 1, 127, 3, 7, 6, 0, 1, 1, 1, 1, 1, 6, 6, 1, 127, 1, 65, 0, 11, 7, 50, 6, 3, 109, 117, 108, 0, 1, 5, 100, 105, 118, 95, 115, 0, 2, 5, 100, 105, 118, 95, 117, 0, 3, 5, 114, 101, 109, 95, 115, 0, 4, 5, 114, 101, 109, 95, 117, 0, 5, 8, 103, 101, 116, 95, 104, 105, 103, 104, 0, 0, 10, 191, 1, 6, 4, 0, 35, 0, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 126, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 127, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 128, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 129, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 130, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11
  ])), {}).exports;
} catch (e) {
  // no wasm support :(
}

/**
 * Constructs a 64 bit two's-complement integer, given its low and high 32 bit values as *signed* integers.
 *  See the from* functions below for more convenient ways of constructing Longs.
 * @exports Long
 * @class A Long class for representing a 64 bit two's-complement integer value.
 * @param {number} low The low (signed) 32 bits of the long
 * @param {number} high The high (signed) 32 bits of the long
 * @param {boolean=} unsigned Whether unsigned or not, defaults to signed
 * @constructor
 */
function Long(low, high, unsigned) {

    /**
     * The low 32 bits as a signed value.
     * @type {number}
     */
    this.low = low | 0;

    /**
     * The high 32 bits as a signed value.
     * @type {number}
     */
    this.high = high | 0;

    /**
     * Whether unsigned or not.
     * @type {boolean}
     */
    this.unsigned = !!unsigned;
}

// The internal representation of a long is the two given signed, 32-bit values.
// We use 32-bit pieces because these are the size of integers on which
// Javascript performs bit-operations.  For operations like addition and
// multiplication, we split each number into 16 bit pieces, which can easily be
// multiplied within Javascript's floating-point representation without overflow
// or change in sign.
//
// In the algorithms below, we frequently reduce the negative case to the
// positive case by negating the input(s) and then post-processing the result.
// Note that we must ALWAYS check specially whether those values are MIN_VALUE
// (-2^63) because -MIN_VALUE == MIN_VALUE (since 2^63 cannot be represented as
// a positive number, it overflows back into a negative).  Not handling this
// case would often result in infinite recursion.
//
// Common constant values ZERO, ONE, NEG_ONE, etc. are defined below the from*
// methods on which they depend.

/**
 * An indicator used to reliably determine if an object is a Long or not.
 * @type {boolean}
 * @const
 * @private
 */
Long.prototype.__isLong__;

Object.defineProperty(Long.prototype, "__isLong__", { value: true });

/**
 * @function
 * @param {*} obj Object
 * @returns {boolean}
 * @inner
 */
function isLong(obj) {
    return (obj && obj["__isLong__"]) === true;
}

/**
 * Tests if the specified object is a Long.
 * @function
 * @param {*} obj Object
 * @returns {boolean}
 */
Long.isLong = isLong;

/**
 * A cache of the Long representations of small integer values.
 * @type {!Object}
 * @inner
 */
var INT_CACHE = {};

/**
 * A cache of the Long representations of small unsigned integer values.
 * @type {!Object}
 * @inner
 */
var UINT_CACHE = {};

/**
 * @param {number} value
 * @param {boolean=} unsigned
 * @returns {!Long}
 * @inner
 */
function fromInt(value, unsigned) {
    var obj, cachedObj, cache;
    if (unsigned) {
        value >>>= 0;
        if (cache = (0 <= value && value < 256)) {
            cachedObj = UINT_CACHE[value];
            if (cachedObj)
                return cachedObj;
        }
        obj = fromBits(value, (value | 0) < 0 ? -1 : 0, true);
        if (cache)
            UINT_CACHE[value] = obj;
        return obj;
    } else {
        value |= 0;
        if (cache = (-128 <= value && value < 128)) {
            cachedObj = INT_CACHE[value];
            if (cachedObj)
                return cachedObj;
        }
        obj = fromBits(value, value < 0 ? -1 : 0, false);
        if (cache)
            INT_CACHE[value] = obj;
        return obj;
    }
}

/**
 * Returns a Long representing the given 32 bit integer value.
 * @function
 * @param {number} value The 32 bit integer in question
 * @param {boolean=} unsigned Whether unsigned or not, defaults to signed
 * @returns {!Long} The corresponding Long value
 */
Long.fromInt = fromInt;

/**
 * @param {number} value
 * @param {boolean=} unsigned
 * @returns {!Long}
 * @inner
 */
function fromNumber(value, unsigned) {
    if (isNaN(value))
        return unsigned ? UZERO : ZERO;
    if (unsigned) {
        if (value < 0)
            return UZERO;
        if (value >= TWO_PWR_64_DBL)
            return MAX_UNSIGNED_VALUE;
    } else {
        if (value <= -TWO_PWR_63_DBL)
            return MIN_VALUE;
        if (value + 1 >= TWO_PWR_63_DBL)
            return MAX_VALUE;
    }
    if (value < 0)
        return fromNumber(-value, unsigned).neg();
    return fromBits((value % TWO_PWR_32_DBL) | 0, (value / TWO_PWR_32_DBL) | 0, unsigned);
}

/**
 * Returns a Long representing the given value, provided that it is a finite number. Otherwise, zero is returned.
 * @function
 * @param {number} value The number in question
 * @param {boolean=} unsigned Whether unsigned or not, defaults to signed
 * @returns {!Long} The corresponding Long value
 */
Long.fromNumber = fromNumber;

/**
 * @param {number} lowBits
 * @param {number} highBits
 * @param {boolean=} unsigned
 * @returns {!Long}
 * @inner
 */
function fromBits(lowBits, highBits, unsigned) {
    return new Long(lowBits, highBits, unsigned);
}

/**
 * Returns a Long representing the 64 bit integer that comes by concatenating the given low and high bits. Each is
 *  assumed to use 32 bits.
 * @function
 * @param {number} lowBits The low 32 bits
 * @param {number} highBits The high 32 bits
 * @param {boolean=} unsigned Whether unsigned or not, defaults to signed
 * @returns {!Long} The corresponding Long value
 */
Long.fromBits = fromBits;

/**
 * @function
 * @param {number} base
 * @param {number} exponent
 * @returns {number}
 * @inner
 */
var pow_dbl = Math.pow; // Used 4 times (4*8 to 15+4)

/**
 * @param {string} str
 * @param {(boolean|number)=} unsigned
 * @param {number=} radix
 * @returns {!Long}
 * @inner
 */
function fromString(str, unsigned, radix) {
    if (str.length === 0)
        throw Error('empty string');
    if (str === "NaN" || str === "Infinity" || str === "+Infinity" || str === "-Infinity")
        return ZERO;
    if (typeof unsigned === 'number') {
        // For goog.math.long compatibility
        radix = unsigned,
        unsigned = false;
    } else {
        unsigned = !! unsigned;
    }
    radix = radix || 10;
    if (radix < 2 || 36 < radix)
        throw RangeError('radix');

    var p;
    if ((p = str.indexOf('-')) > 0)
        throw Error('interior hyphen');
    else if (p === 0) {
        return fromString(str.substring(1), unsigned, radix).neg();
    }

    // Do several (8) digits each time through the loop, so as to
    // minimize the calls to the very expensive emulated div.
    var radixToPower = fromNumber(pow_dbl(radix, 8));

    var result = ZERO;
    for (var i = 0; i < str.length; i += 8) {
        var size = Math.min(8, str.length - i),
            value = parseInt(str.substring(i, i + size), radix);
        if (size < 8) {
            var power = fromNumber(pow_dbl(radix, size));
            result = result.mul(power).add(fromNumber(value));
        } else {
            result = result.mul(radixToPower);
            result = result.add(fromNumber(value));
        }
    }
    result.unsigned = unsigned;
    return result;
}

/**
 * Returns a Long representation of the given string, written using the specified radix.
 * @function
 * @param {string} str The textual representation of the Long
 * @param {(boolean|number)=} unsigned Whether unsigned or not, defaults to signed
 * @param {number=} radix The radix in which the text is written (2-36), defaults to 10
 * @returns {!Long} The corresponding Long value
 */
Long.fromString = fromString;

/**
 * @function
 * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val
 * @param {boolean=} unsigned
 * @returns {!Long}
 * @inner
 */
function fromValue(val, unsigned) {
    if (typeof val === 'number')
        return fromNumber(val, unsigned);
    if (typeof val === 'string')
        return fromString(val, unsigned);
    // Throws for non-objects, converts non-instanceof Long:
    return fromBits(val.low, val.high, typeof unsigned === 'boolean' ? unsigned : val.unsigned);
}

/**
 * Converts the specified value to a Long using the appropriate from* function for its type.
 * @function
 * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val Value
 * @param {boolean=} unsigned Whether unsigned or not, defaults to signed
 * @returns {!Long}
 */
Long.fromValue = fromValue;

// NOTE: the compiler should inline these constant values below and then remove these variables, so there should be
// no runtime penalty for these.

/**
 * @type {number}
 * @const
 * @inner
 */
var TWO_PWR_16_DBL = 1 << 16;

/**
 * @type {number}
 * @const
 * @inner
 */
var TWO_PWR_24_DBL = 1 << 24;

/**
 * @type {number}
 * @const
 * @inner
 */
var TWO_PWR_32_DBL = TWO_PWR_16_DBL * TWO_PWR_16_DBL;

/**
 * @type {number}
 * @const
 * @inner
 */
var TWO_PWR_64_DBL = TWO_PWR_32_DBL * TWO_PWR_32_DBL;

/**
 * @type {number}
 * @const
 * @inner
 */
var TWO_PWR_63_DBL = TWO_PWR_64_DBL / 2;

/**
 * @type {!Long}
 * @const
 * @inner
 */
var TWO_PWR_24 = fromInt(TWO_PWR_24_DBL);

/**
 * @type {!Long}
 * @inner
 */
var ZERO = fromInt(0);

/**
 * Signed zero.
 * @type {!Long}
 */
Long.ZERO = ZERO;

/**
 * @type {!Long}
 * @inner
 */
var UZERO = fromInt(0, true);

/**
 * Unsigned zero.
 * @type {!Long}
 */
Long.UZERO = UZERO;

/**
 * @type {!Long}
 * @inner
 */
var ONE = fromInt(1);

/**
 * Signed one.
 * @type {!Long}
 */
Long.ONE = ONE;

/**
 * @type {!Long}
 * @inner
 */
var UONE = fromInt(1, true);

/**
 * Unsigned one.
 * @type {!Long}
 */
Long.UONE = UONE;

/**
 * @type {!Long}
 * @inner
 */
var NEG_ONE = fromInt(-1);

/**
 * Signed negative one.
 * @type {!Long}
 */
Long.NEG_ONE = NEG_ONE;

/**
 * @type {!Long}
 * @inner
 */
var MAX_VALUE = fromBits(0xFFFFFFFF|0, 0x7FFFFFFF|0, false);

/**
 * Maximum signed value.
 * @type {!Long}
 */
Long.MAX_VALUE = MAX_VALUE;

/**
 * @type {!Long}
 * @inner
 */
var MAX_UNSIGNED_VALUE = fromBits(0xFFFFFFFF|0, 0xFFFFFFFF|0, true);

/**
 * Maximum unsigned value.
 * @type {!Long}
 */
Long.MAX_UNSIGNED_VALUE = MAX_UNSIGNED_VALUE;

/**
 * @type {!Long}
 * @inner
 */
var MIN_VALUE = fromBits(0, 0x80000000|0, false);

/**
 * Minimum signed value.
 * @type {!Long}
 */
Long.MIN_VALUE = MIN_VALUE;

/**
 * @alias Long.prototype
 * @inner
 */
var LongPrototype = Long.prototype;

/**
 * Converts the Long to a 32 bit integer, assuming it is a 32 bit integer.
 * @returns {number}
 */
LongPrototype.toInt = function toInt() {
    return this.unsigned ? this.low >>> 0 : this.low;
};

/**
 * Converts the Long to a the nearest floating-point representation of this value (double, 53 bit mantissa).
 * @returns {number}
 */
LongPrototype.toNumber = function toNumber() {
    if (this.unsigned)
        return ((this.high >>> 0) * TWO_PWR_32_DBL) + (this.low >>> 0);
    return this.high * TWO_PWR_32_DBL + (this.low >>> 0);
};

/**
 * Converts the Long to a string written in the specified radix.
 * @param {number=} radix Radix (2-36), defaults to 10
 * @returns {string}
 * @override
 * @throws {RangeError} If `radix` is out of range
 */
LongPrototype.toString = function toString(radix) {
    radix = radix || 10;
    if (radix < 2 || 36 < radix)
        throw RangeError('radix');
    if (this.isZero())
        return '0';
    if (this.isNegative()) { // Unsigned Longs are never negative
        if (this.eq(MIN_VALUE)) {
            // We need to change the Long value before it can be negated, so we remove
            // the bottom-most digit in this base and then recurse to do the rest.
            var radixLong = fromNumber(radix),
                div = this.div(radixLong),
                rem1 = div.mul(radixLong).sub(this);
            return div.toString(radix) + rem1.toInt().toString(radix);
        } else
            return '-' + this.neg().toString(radix);
    }

    // Do several (6) digits each time through the loop, so as to
    // minimize the calls to the very expensive emulated div.
    var radixToPower = fromNumber(pow_dbl(radix, 6), this.unsigned),
        rem = this;
    var result = '';
    while (true) {
        var remDiv = rem.div(radixToPower),
            intval = rem.sub(remDiv.mul(radixToPower)).toInt() >>> 0,
            digits = intval.toString(radix);
        rem = remDiv;
        if (rem.isZero())
            return digits + result;
        else {
            while (digits.length < 6)
                digits = '0' + digits;
            result = '' + digits + result;
        }
    }
};

/**
 * Gets the high 32 bits as a signed integer.
 * @returns {number} Signed high bits
 */
LongPrototype.getHighBits = function getHighBits() {
    return this.high;
};

/**
 * Gets the high 32 bits as an unsigned integer.
 * @returns {number} Unsigned high bits
 */
LongPrototype.getHighBitsUnsigned = function getHighBitsUnsigned() {
    return this.high >>> 0;
};

/**
 * Gets the low 32 bits as a signed integer.
 * @returns {number} Signed low bits
 */
LongPrototype.getLowBits = function getLowBits() {
    return this.low;
};

/**
 * Gets the low 32 bits as an unsigned integer.
 * @returns {number} Unsigned low bits
 */
LongPrototype.getLowBitsUnsigned = function getLowBitsUnsigned() {
    return this.low >>> 0;
};

/**
 * Gets the number of bits needed to represent the absolute value of this Long.
 * @returns {number}
 */
LongPrototype.getNumBitsAbs = function getNumBitsAbs() {
    if (this.isNegative()) // Unsigned Longs are never negative
        return this.eq(MIN_VALUE) ? 64 : this.neg().getNumBitsAbs();
    var val = this.high != 0 ? this.high : this.low;
    for (var bit = 31; bit > 0; bit--)
        if ((val & (1 << bit)) != 0)
            break;
    return this.high != 0 ? bit + 33 : bit + 1;
};

/**
 * Tests if this Long's value equals zero.
 * @returns {boolean}
 */
LongPrototype.isZero = function isZero() {
    return this.high === 0 && this.low === 0;
};

/**
 * Tests if this Long's value equals zero. This is an alias of {@link Long#isZero}.
 * @returns {boolean}
 */
LongPrototype.eqz = LongPrototype.isZero;

/**
 * Tests if this Long's value is negative.
 * @returns {boolean}
 */
LongPrototype.isNegative = function isNegative() {
    return !this.unsigned && this.high < 0;
};

/**
 * Tests if this Long's value is positive.
 * @returns {boolean}
 */
LongPrototype.isPositive = function isPositive() {
    return this.unsigned || this.high >= 0;
};

/**
 * Tests if this Long's value is odd.
 * @returns {boolean}
 */
LongPrototype.isOdd = function isOdd() {
    return (this.low & 1) === 1;
};

/**
 * Tests if this Long's value is even.
 * @returns {boolean}
 */
LongPrototype.isEven = function isEven() {
    return (this.low & 1) === 0;
};

/**
 * Tests if this Long's value equals the specified's.
 * @param {!Long|number|string} other Other value
 * @returns {boolean}
 */
LongPrototype.equals = function equals(other) {
    if (!isLong(other))
        other = fromValue(other);
    if (this.unsigned !== other.unsigned && (this.high >>> 31) === 1 && (other.high >>> 31) === 1)
        return false;
    return this.high === other.high && this.low === other.low;
};

/**
 * Tests if this Long's value equals the specified's. This is an alias of {@link Long#equals}.
 * @function
 * @param {!Long|number|string} other Other value
 * @returns {boolean}
 */
LongPrototype.eq = LongPrototype.equals;

/**
 * Tests if this Long's value differs from the specified's.
 * @param {!Long|number|string} other Other value
 * @returns {boolean}
 */
LongPrototype.notEquals = function notEquals(other) {
    return !this.eq(/* validates */ other);
};

/**
 * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.
 * @function
 * @param {!Long|number|string} other Other value
 * @returns {boolean}
 */
LongPrototype.neq = LongPrototype.notEquals;

/**
 * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.
 * @function
 * @param {!Long|number|string} other Other value
 * @returns {boolean}
 */
LongPrototype.ne = LongPrototype.notEquals;

/**
 * Tests if this Long's value is less than the specified's.
 * @param {!Long|number|string} other Other value
 * @returns {boolean}
 */
LongPrototype.lessThan = function lessThan(other) {
    return this.comp(/* validates */ other) < 0;
};

/**
 * Tests if this Long's value is less than the specified's. This is an alias of {@link Long#lessThan}.
 * @function
 * @param {!Long|number|string} other Other value
 * @returns {boolean}
 */
LongPrototype.lt = LongPrototype.lessThan;

/**
 * Tests if this Long's value is less than or equal the specified's.
 * @param {!Long|number|string} other Other value
 * @returns {boolean}
 */
LongPrototype.lessThanOrEqual = function lessThanOrEqual(other) {
    return this.comp(/* validates */ other) <= 0;
};

/**
 * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.
 * @function
 * @param {!Long|number|string} other Other value
 * @returns {boolean}
 */
LongPrototype.lte = LongPrototype.lessThanOrEqual;

/**
 * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.
 * @function
 * @param {!Long|number|string} other Other value
 * @returns {boolean}
 */
LongPrototype.le = LongPrototype.lessThanOrEqual;

/**
 * Tests if this Long's value is greater than the specified's.
 * @param {!Long|number|string} other Other value
 * @returns {boolean}
 */
LongPrototype.greaterThan = function greaterThan(other) {
    return this.comp(/* validates */ other) > 0;
};

/**
 * Tests if this Long's value is greater than the specified's. This is an alias of {@link Long#greaterThan}.
 * @function
 * @param {!Long|number|string} other Other value
 * @returns {boolean}
 */
LongPrototype.gt = LongPrototype.greaterThan;

/**
 * Tests if this Long's value is greater than or equal the specified's.
 * @param {!Long|number|string} other Other value
 * @returns {boolean}
 */
LongPrototype.greaterThanOrEqual = function greaterThanOrEqual(other) {
    return this.comp(/* validates */ other) >= 0;
};

/**
 * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.
 * @function
 * @param {!Long|number|string} other Other value
 * @returns {boolean}
 */
LongPrototype.gte = LongPrototype.greaterThanOrEqual;

/**
 * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.
 * @function
 * @param {!Long|number|string} other Other value
 * @returns {boolean}
 */
LongPrototype.ge = LongPrototype.greaterThanOrEqual;

/**
 * Compares this Long's value with the specified's.
 * @param {!Long|number|string} other Other value
 * @returns {number} 0 if they are the same, 1 if the this is greater and -1
 *  if the given one is greater
 */
LongPrototype.compare = function compare(other) {
    if (!isLong(other))
        other = fromValue(other);
    if (this.eq(other))
        return 0;
    var thisNeg = this.isNegative(),
        otherNeg = other.isNegative();
    if (thisNeg && !otherNeg)
        return -1;
    if (!thisNeg && otherNeg)
        return 1;
    // At this point the sign bits are the same
    if (!this.unsigned)
        return this.sub(other).isNegative() ? -1 : 1;
    // Both are positive if at least one is unsigned
    return (other.high >>> 0) > (this.high >>> 0) || (other.high === this.high && (other.low >>> 0) > (this.low >>> 0)) ? -1 : 1;
};

/**
 * Compares this Long's value with the specified's. This is an alias of {@link Long#compare}.
 * @function
 * @param {!Long|number|string} other Other value
 * @returns {number} 0 if they are the same, 1 if the this is greater and -1
 *  if the given one is greater
 */
LongPrototype.comp = LongPrototype.compare;

/**
 * Negates this Long's value.
 * @returns {!Long} Negated Long
 */
LongPrototype.negate = function negate() {
    if (!this.unsigned && this.eq(MIN_VALUE))
        return MIN_VALUE;
    return this.not().add(ONE);
};

/**
 * Negates this Long's value. This is an alias of {@link Long#negate}.
 * @function
 * @returns {!Long} Negated Long
 */
LongPrototype.neg = LongPrototype.negate;

/**
 * Returns the sum of this and the specified Long.
 * @param {!Long|number|string} addend Addend
 * @returns {!Long} Sum
 */
LongPrototype.add = function add(addend) {
    if (!isLong(addend))
        addend = fromValue(addend);

    // Divide each number into 4 chunks of 16 bits, and then sum the chunks.

    var a48 = this.high >>> 16;
    var a32 = this.high & 0xFFFF;
    var a16 = this.low >>> 16;
    var a00 = this.low & 0xFFFF;

    var b48 = addend.high >>> 16;
    var b32 = addend.high & 0xFFFF;
    var b16 = addend.low >>> 16;
    var b00 = addend.low & 0xFFFF;

    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;
    c00 += a00 + b00;
    c16 += c00 >>> 16;
    c00 &= 0xFFFF;
    c16 += a16 + b16;
    c32 += c16 >>> 16;
    c16 &= 0xFFFF;
    c32 += a32 + b32;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c48 += a48 + b48;
    c48 &= 0xFFFF;
    return fromBits((c16 << 16) | c00, (c48 << 16) | c32, this.unsigned);
};

/**
 * Returns the difference of this and the specified Long.
 * @param {!Long|number|string} subtrahend Subtrahend
 * @returns {!Long} Difference
 */
LongPrototype.subtract = function subtract(subtrahend) {
    if (!isLong(subtrahend))
        subtrahend = fromValue(subtrahend);
    return this.add(subtrahend.neg());
};

/**
 * Returns the difference of this and the specified Long. This is an alias of {@link Long#subtract}.
 * @function
 * @param {!Long|number|string} subtrahend Subtrahend
 * @returns {!Long} Difference
 */
LongPrototype.sub = LongPrototype.subtract;

/**
 * Returns the product of this and the specified Long.
 * @param {!Long|number|string} multiplier Multiplier
 * @returns {!Long} Product
 */
LongPrototype.multiply = function multiply(multiplier) {
    if (this.isZero())
        return ZERO;
    if (!isLong(multiplier))
        multiplier = fromValue(multiplier);

    // use wasm support if present
    if (wasm) {
        var low = wasm.mul(this.low,
                           this.high,
                           multiplier.low,
                           multiplier.high);
        return fromBits(low, wasm.get_high(), this.unsigned);
    }

    if (multiplier.isZero())
        return ZERO;
    if (this.eq(MIN_VALUE))
        return multiplier.isOdd() ? MIN_VALUE : ZERO;
    if (multiplier.eq(MIN_VALUE))
        return this.isOdd() ? MIN_VALUE : ZERO;

    if (this.isNegative()) {
        if (multiplier.isNegative())
            return this.neg().mul(multiplier.neg());
        else
            return this.neg().mul(multiplier).neg();
    } else if (multiplier.isNegative())
        return this.mul(multiplier.neg()).neg();

    // If both longs are small, use float multiplication
    if (this.lt(TWO_PWR_24) && multiplier.lt(TWO_PWR_24))
        return fromNumber(this.toNumber() * multiplier.toNumber(), this.unsigned);

    // Divide each long into 4 chunks of 16 bits, and then add up 4x4 products.
    // We can skip products that would overflow.

    var a48 = this.high >>> 16;
    var a32 = this.high & 0xFFFF;
    var a16 = this.low >>> 16;
    var a00 = this.low & 0xFFFF;

    var b48 = multiplier.high >>> 16;
    var b32 = multiplier.high & 0xFFFF;
    var b16 = multiplier.low >>> 16;
    var b00 = multiplier.low & 0xFFFF;

    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;
    c00 += a00 * b00;
    c16 += c00 >>> 16;
    c00 &= 0xFFFF;
    c16 += a16 * b00;
    c32 += c16 >>> 16;
    c16 &= 0xFFFF;
    c16 += a00 * b16;
    c32 += c16 >>> 16;
    c16 &= 0xFFFF;
    c32 += a32 * b00;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c32 += a16 * b16;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c32 += a00 * b32;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;
    c48 &= 0xFFFF;
    return fromBits((c16 << 16) | c00, (c48 << 16) | c32, this.unsigned);
};

/**
 * Returns the product of this and the specified Long. This is an alias of {@link Long#multiply}.
 * @function
 * @param {!Long|number|string} multiplier Multiplier
 * @returns {!Long} Product
 */
LongPrototype.mul = LongPrototype.multiply;

/**
 * Returns this Long divided by the specified. The result is signed if this Long is signed or
 *  unsigned if this Long is unsigned.
 * @param {!Long|number|string} divisor Divisor
 * @returns {!Long} Quotient
 */
LongPrototype.divide = function divide(divisor) {
    if (!isLong(divisor))
        divisor = fromValue(divisor);
    if (divisor.isZero())
        throw Error('division by zero');

    // use wasm support if present
    if (wasm) {
        // guard against signed division overflow: the largest
        // negative number / -1 would be 1 larger than the largest
        // positive number, due to two's complement.
        if (!this.unsigned &&
            this.high === -0x80000000 &&
            divisor.low === -1 && divisor.high === -1) {
            // be consistent with non-wasm code path
            return this;
        }
        var low = (this.unsigned ? wasm.div_u : wasm.div_s)(
            this.low,
            this.high,
            divisor.low,
            divisor.high
        );
        return fromBits(low, wasm.get_high(), this.unsigned);
    }

    if (this.isZero())
        return this.unsigned ? UZERO : ZERO;
    var approx, rem, res;
    if (!this.unsigned) {
        // This section is only relevant for signed longs and is derived from the
        // closure library as a whole.
        if (this.eq(MIN_VALUE)) {
            if (divisor.eq(ONE) || divisor.eq(NEG_ONE))
                return MIN_VALUE;  // recall that -MIN_VALUE == MIN_VALUE
            else if (divisor.eq(MIN_VALUE))
                return ONE;
            else {
                // At this point, we have |other| >= 2, so |this/other| < |MIN_VALUE|.
                var halfThis = this.shr(1);
                approx = halfThis.div(divisor).shl(1);
                if (approx.eq(ZERO)) {
                    return divisor.isNegative() ? ONE : NEG_ONE;
                } else {
                    rem = this.sub(divisor.mul(approx));
                    res = approx.add(rem.div(divisor));
                    return res;
                }
            }
        } else if (divisor.eq(MIN_VALUE))
            return this.unsigned ? UZERO : ZERO;
        if (this.isNegative()) {
            if (divisor.isNegative())
                return this.neg().div(divisor.neg());
            return this.neg().div(divisor).neg();
        } else if (divisor.isNegative())
            return this.div(divisor.neg()).neg();
        res = ZERO;
    } else {
        // The algorithm below has not been made for unsigned longs. It's therefore
        // required to take special care of the MSB prior to running it.
        if (!divisor.unsigned)
            divisor = divisor.toUnsigned();
        if (divisor.gt(this))
            return UZERO;
        if (divisor.gt(this.shru(1))) // 15 >>> 1 = 7 ; with divisor = 8 ; true
            return UONE;
        res = UZERO;
    }

    // Repeat the following until the remainder is less than other:  find a
    // floating-point that approximates remainder / other *from below*, add this
    // into the result, and subtract it from the remainder.  It is critical that
    // the approximate value is less than or equal to the real value so that the
    // remainder never becomes negative.
    rem = this;
    while (rem.gte(divisor)) {
        // Approximate the result of division. This may be a little greater or
        // smaller than the actual value.
        approx = Math.max(1, Math.floor(rem.toNumber() / divisor.toNumber()));

        // We will tweak the approximate result by changing it in the 48-th digit or
        // the smallest non-fractional digit, whichever is larger.
        var log2 = Math.ceil(Math.log(approx) / Math.LN2),
            delta = (log2 <= 48) ? 1 : pow_dbl(2, log2 - 48),

        // Decrease the approximation until it is smaller than the remainder.  Note
        // that if it is too large, the product overflows and is negative.
            approxRes = fromNumber(approx),
            approxRem = approxRes.mul(divisor);
        while (approxRem.isNegative() || approxRem.gt(rem)) {
            approx -= delta;
            approxRes = fromNumber(approx, this.unsigned);
            approxRem = approxRes.mul(divisor);
        }

        // We know the answer can't be zero... and actually, zero would cause
        // infinite recursion since we would make no progress.
        if (approxRes.isZero())
            approxRes = ONE;

        res = res.add(approxRes);
        rem = rem.sub(approxRem);
    }
    return res;
};

/**
 * Returns this Long divided by the specified. This is an alias of {@link Long#divide}.
 * @function
 * @param {!Long|number|string} divisor Divisor
 * @returns {!Long} Quotient
 */
LongPrototype.div = LongPrototype.divide;

/**
 * Returns this Long modulo the specified.
 * @param {!Long|number|string} divisor Divisor
 * @returns {!Long} Remainder
 */
LongPrototype.modulo = function modulo(divisor) {
    if (!isLong(divisor))
        divisor = fromValue(divisor);

    // use wasm support if present
    if (wasm) {
        var low = (this.unsigned ? wasm.rem_u : wasm.rem_s)(
            this.low,
            this.high,
            divisor.low,
            divisor.high
        );
        return fromBits(low, wasm.get_high(), this.unsigned);
    }

    return this.sub(this.div(divisor).mul(divisor));
};

/**
 * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.
 * @function
 * @param {!Long|number|string} divisor Divisor
 * @returns {!Long} Remainder
 */
LongPrototype.mod = LongPrototype.modulo;

/**
 * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.
 * @function
 * @param {!Long|number|string} divisor Divisor
 * @returns {!Long} Remainder
 */
LongPrototype.rem = LongPrototype.modulo;

/**
 * Returns the bitwise NOT of this Long.
 * @returns {!Long}
 */
LongPrototype.not = function not() {
    return fromBits(~this.low, ~this.high, this.unsigned);
};

/**
 * Returns the bitwise AND of this Long and the specified.
 * @param {!Long|number|string} other Other Long
 * @returns {!Long}
 */
LongPrototype.and = function and(other) {
    if (!isLong(other))
        other = fromValue(other);
    return fromBits(this.low & other.low, this.high & other.high, this.unsigned);
};

/**
 * Returns the bitwise OR of this Long and the specified.
 * @param {!Long|number|string} other Other Long
 * @returns {!Long}
 */
LongPrototype.or = function or(other) {
    if (!isLong(other))
        other = fromValue(other);
    return fromBits(this.low | other.low, this.high | other.high, this.unsigned);
};

/**
 * Returns the bitwise XOR of this Long and the given one.
 * @param {!Long|number|string} other Other Long
 * @returns {!Long}
 */
LongPrototype.xor = function xor(other) {
    if (!isLong(other))
        other = fromValue(other);
    return fromBits(this.low ^ other.low, this.high ^ other.high, this.unsigned);
};

/**
 * Returns this Long with bits shifted to the left by the given amount.
 * @param {number|!Long} numBits Number of bits
 * @returns {!Long} Shifted Long
 */
LongPrototype.shiftLeft = function shiftLeft(numBits) {
    if (isLong(numBits))
        numBits = numBits.toInt();
    if ((numBits &= 63) === 0)
        return this;
    else if (numBits < 32)
        return fromBits(this.low << numBits, (this.high << numBits) | (this.low >>> (32 - numBits)), this.unsigned);
    else
        return fromBits(0, this.low << (numBits - 32), this.unsigned);
};

/**
 * Returns this Long with bits shifted to the left by the given amount. This is an alias of {@link Long#shiftLeft}.
 * @function
 * @param {number|!Long} numBits Number of bits
 * @returns {!Long} Shifted Long
 */
LongPrototype.shl = LongPrototype.shiftLeft;

/**
 * Returns this Long with bits arithmetically shifted to the right by the given amount.
 * @param {number|!Long} numBits Number of bits
 * @returns {!Long} Shifted Long
 */
LongPrototype.shiftRight = function shiftRight(numBits) {
    if (isLong(numBits))
        numBits = numBits.toInt();
    if ((numBits &= 63) === 0)
        return this;
    else if (numBits < 32)
        return fromBits((this.low >>> numBits) | (this.high << (32 - numBits)), this.high >> numBits, this.unsigned);
    else
        return fromBits(this.high >> (numBits - 32), this.high >= 0 ? 0 : -1, this.unsigned);
};

/**
 * Returns this Long with bits arithmetically shifted to the right by the given amount. This is an alias of {@link Long#shiftRight}.
 * @function
 * @param {number|!Long} numBits Number of bits
 * @returns {!Long} Shifted Long
 */
LongPrototype.shr = LongPrototype.shiftRight;

/**
 * Returns this Long with bits logically shifted to the right by the given amount.
 * @param {number|!Long} numBits Number of bits
 * @returns {!Long} Shifted Long
 */
LongPrototype.shiftRightUnsigned = function shiftRightUnsigned(numBits) {
    if (isLong(numBits))
        numBits = numBits.toInt();
    numBits &= 63;
    if (numBits === 0)
        return this;
    else {
        var high = this.high;
        if (numBits < 32) {
            var low = this.low;
            return fromBits((low >>> numBits) | (high << (32 - numBits)), high >>> numBits, this.unsigned);
        } else if (numBits === 32)
            return fromBits(high, 0, this.unsigned);
        else
            return fromBits(high >>> (numBits - 32), 0, this.unsigned);
    }
};

/**
 * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.
 * @function
 * @param {number|!Long} numBits Number of bits
 * @returns {!Long} Shifted Long
 */
LongPrototype.shru = LongPrototype.shiftRightUnsigned;

/**
 * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.
 * @function
 * @param {number|!Long} numBits Number of bits
 * @returns {!Long} Shifted Long
 */
LongPrototype.shr_u = LongPrototype.shiftRightUnsigned;

/**
 * Converts this Long to signed.
 * @returns {!Long} Signed long
 */
LongPrototype.toSigned = function toSigned() {
    if (!this.unsigned)
        return this;
    return fromBits(this.low, this.high, false);
};

/**
 * Converts this Long to unsigned.
 * @returns {!Long} Unsigned long
 */
LongPrototype.toUnsigned = function toUnsigned() {
    if (this.unsigned)
        return this;
    return fromBits(this.low, this.high, true);
};

/**
 * Converts this Long to its byte representation.
 * @param {boolean=} le Whether little or big endian, defaults to big endian
 * @returns {!Array.<number>} Byte representation
 */
LongPrototype.toBytes = function toBytes(le) {
    return le ? this.toBytesLE() : this.toBytesBE();
};

/**
 * Converts this Long to its little endian byte representation.
 * @returns {!Array.<number>} Little endian byte representation
 */
LongPrototype.toBytesLE = function toBytesLE() {
    var hi = this.high,
        lo = this.low;
    return [
        lo        & 0xff,
        lo >>>  8 & 0xff,
        lo >>> 16 & 0xff,
        lo >>> 24       ,
        hi        & 0xff,
        hi >>>  8 & 0xff,
        hi >>> 16 & 0xff,
        hi >>> 24
    ];
};

/**
 * Converts this Long to its big endian byte representation.
 * @returns {!Array.<number>} Big endian byte representation
 */
LongPrototype.toBytesBE = function toBytesBE() {
    var hi = this.high,
        lo = this.low;
    return [
        hi >>> 24       ,
        hi >>> 16 & 0xff,
        hi >>>  8 & 0xff,
        hi        & 0xff,
        lo >>> 24       ,
        lo >>> 16 & 0xff,
        lo >>>  8 & 0xff,
        lo        & 0xff
    ];
};

/**
 * Creates a Long from its byte representation.
 * @param {!Array.<number>} bytes Byte representation
 * @param {boolean=} unsigned Whether unsigned or not, defaults to signed
 * @param {boolean=} le Whether little or big endian, defaults to big endian
 * @returns {Long} The corresponding Long value
 */
Long.fromBytes = function fromBytes(bytes, unsigned, le) {
    return le ? Long.fromBytesLE(bytes, unsigned) : Long.fromBytesBE(bytes, unsigned);
};

/**
 * Creates a Long from its little endian byte representation.
 * @param {!Array.<number>} bytes Little endian byte representation
 * @param {boolean=} unsigned Whether unsigned or not, defaults to signed
 * @returns {Long} The corresponding Long value
 */
Long.fromBytesLE = function fromBytesLE(bytes, unsigned) {
    return new Long(
        bytes[0]       |
        bytes[1] <<  8 |
        bytes[2] << 16 |
        bytes[3] << 24,
        bytes[4]       |
        bytes[5] <<  8 |
        bytes[6] << 16 |
        bytes[7] << 24,
        unsigned
    );
};

/**
 * Creates a Long from its big endian byte representation.
 * @param {!Array.<number>} bytes Big endian byte representation
 * @param {boolean=} unsigned Whether unsigned or not, defaults to signed
 * @returns {Long} The corresponding Long value
 */
Long.fromBytesBE = function fromBytesBE(bytes, unsigned) {
    return new Long(
        bytes[4] << 24 |
        bytes[5] << 16 |
        bytes[6] <<  8 |
        bytes[7],
        bytes[0] << 24 |
        bytes[1] << 16 |
        bytes[2] <<  8 |
        bytes[3],
        unsigned
    );
};

},{}],"PHPb":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const base58_1 = require("./libs/base58");
const Base64 = require("base64-js");
const utils_1 = require("./libs/utils");
const Long = require("long");
const stringToUint8Array = (str) => Uint8Array.from([...unescape(encodeURIComponent(str))].map(c => c.charCodeAt(0)));
exports.empty = Uint8Array.from([]);
exports.zero = Uint8Array.from([0]);
exports.one = Uint8Array.from([1]);
exports.BASE58_STRING = (value) => base58_1.default.decode(value);
exports.BASE64_STRING = (value) => Base64.toByteArray(value.replace('base64:', ''));
exports.STRING = (value) => value ? stringToUint8Array(value) : exports.empty;
exports.BYTE = (value) => Uint8Array.from([value]);
exports.BOOL = (value) => exports.BYTE(value == true ? 1 : 0);
exports.BYTES = (value) => Uint8Array.from(value);
exports.SHORT = (value) => {
    const s = Long.fromNumber(value, true);
    return Uint8Array.from(s.toBytesBE().slice(6));
};
exports.INT = (value) => {
    const i = Long.fromNumber(value, true);
    return Uint8Array.from(i.toBytesBE().slice(4));
};
exports.OPTION = (s) => (value) => value == null
    || (typeof value == 'string' && value.length == 0)
    ? exports.zero : utils_1.concat(exports.one, s(value));
exports.LEN = (lenSerializer) => (valueSerializer) => (value) => {
    const data = valueSerializer(value);
    const len = lenSerializer(data.length);
    return utils_1.concat(len, data);
};
exports.COUNT = (countSerializer) => (itemSerializer) => (items) => {
    const data = utils_1.concat(...items.map(x => itemSerializer(x)));
    const len = countSerializer(items.length);
    return utils_1.concat(len, data);
};
exports.LONG = (value) => {
    let l;
    if (typeof value === 'number') {
        if (value > Math.pow(2, 53) - 1) {
            throw new Error(`${value} is too big to be precisely represented as js number. Use string instead`);
        }
        l = Long.fromNumber(value);
    }
    else {
        l = Long.fromString(value.toString());
    }
    return Uint8Array.from(l.toBytesBE());
};
exports.SCRIPT = (script) => exports.OPTION(exports.LEN(exports.SHORT)(exports.BASE64_STRING))(script ? script.slice(7) : null);
exports.ALIAS = val => {
    const [_, byte, alias] = val.split(':');
    if (!byte || byte.length !== 1)
        throw new Error('Invalid network byte in alias');
    if (!alias || alias.length === 0)
        throw new Error('Invalid alias body');
    return utils_1.concat([2], [byte.charCodeAt(0)], exports.LEN(exports.SHORT)(exports.STRING)(alias));
};
exports.ADDRESS_OR_ALIAS = val => val.startsWith('alias')
    ? exports.ALIAS(val)
    : exports.BASE58_STRING(val);

},{"./libs/base58":"LFlE","base64-js":"prL8","./libs/utils":"RyRn","long":"YvD4"}],"zK1S":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var utf8ArrayToStr = (function () {
    var charCache = new Array(128); // Preallocate the cache for the common single byte chars
    var charFromCodePt = String.fromCodePoint || String.fromCharCode;
    var result = [];
    return function (array) {
        var codePt, byte1;
        var buffLen = array.length;
        result.length = 0;
        for (var i = 0; i < buffLen;) {
            byte1 = array[i++];
            if (byte1 <= 0x7F) {
                codePt = byte1;
            }
            else if (byte1 <= 0xDF) {
                codePt = ((byte1 & 0x1F) << 6) | (array[i++] & 0x3F);
            }
            else if (byte1 <= 0xEF) {
                codePt = ((byte1 & 0x0F) << 12) | ((array[i++] & 0x3F) << 6) | (array[i++] & 0x3F);
            }
            else if (String.fromCodePoint) {
                codePt = ((byte1 & 0x07) << 18) | ((array[i++] & 0x3F) << 12) | ((array[i++] & 0x3F) << 6) | (array[i++] & 0x3F);
            }
            else {
                codePt = 63; // Cannot convertLongFields four byte code points, so use "?" instead
                i += 3;
            }
            result.push(charCache[codePt] || (charCache[codePt] = charFromCodePt(codePt)));
        }
        return result.join('');
    };
});
exports.Utf8ArrayToStr = utf8ArrayToStr();

},{}],"dt3h":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const Long = require("long");
const Utf8ArrayToStr_1 = require("./libs/Utf8ArrayToStr");
const base58_1 = require("./libs/base58");
const Base64 = require("base64-js");
exports.ALIAS_VERSION = 2;
const LENGTH_SIZE = 2;
exports.P_OPTION = (p) => (bytes, start = 0) => {
    if (bytes[start] === 0)
        return { value: null, shift: 1 };
    const result = p(bytes, start + 1);
    return { value: result.value, shift: result.shift + 1 };
};
exports.P_BYTE = (bytes, start = 0) => ({ value: bytes[start], shift: 1 });
exports.P_SHORT = (bytes, start = 0) => ({ value: 256 * bytes[start] + bytes[start + 1], shift: 2 });
exports.P_INT = (bytes, start = 0) => ({
    value: Math.pow(2, 24) * bytes[start] + Math.pow(2, 16) * bytes[start + 1] + Math.pow(2, 8) * bytes[start + 2] + bytes[start + 3],
    shift: 4
});
exports.P_LONG = (bytes, start = 0) => ({
    value: Long.fromBytesBE(Array.from(bytes.slice(start, start + 8))).toString(),
    shift: 8,
});
exports.P_BOOLEAN = (bytes, start = 0) => {
    const value = !!bytes[start];
    return { value, shift: 1 };
};
exports.P_STRING_FIXED = (len) => (bytes, start = 0) => {
    const value = Utf8ArrayToStr_1.Utf8ArrayToStr(bytes.slice(start, start + len));
    return { shift: len, value };
};
exports.P_STRING_VAR = (lenParser) => (bytes, start = 0) => {
    const lengthInfo = lenParser(bytes, start);
    const { value } = exports.P_STRING_FIXED(lengthInfo.value)(bytes, start + lengthInfo.shift);
    return { shift: lengthInfo.value + lengthInfo.shift, value };
};
exports.P_BASE58_FIXED = (len) => (bytes, start = 0) => {
    const value = base58_1.default.encode(bytes.slice(start, start + len));
    return { value, shift: len };
};
exports.P_BASE58_VAR = (lenParser) => (bytes, start = 0) => {
    const lengthInfo = lenParser(bytes, start);
    const { value } = exports.P_BASE58_FIXED(lengthInfo.value)(bytes, start + LENGTH_SIZE);
    return { shift: lengthInfo.value + LENGTH_SIZE, value };
};
exports.P_BASE64 = (lenParser) => (bytes, start = 0) => {
    const lengthInfo = lenParser(bytes, start);
    const value = `base64:${Base64.fromByteArray(bytes.slice(start + lengthInfo.shift, start + lengthInfo.shift + lengthInfo.value))}`;
    return { shift: lengthInfo.value + lengthInfo.shift, value };
};
const byteToString = (shift) => (bytes, start) => {
    const value = Utf8ArrayToStr_1.Utf8ArrayToStr(bytes.slice(start, start + shift));
    return { shift, value };
};
exports.byteToStringWithLength = (bytes, start = 0) => {
    const lengthInfo = exports.P_SHORT(bytes, start);
    const { value } = byteToString(lengthInfo.value)(bytes, start + LENGTH_SIZE);
    return { shift: lengthInfo.value + LENGTH_SIZE, value };
};
exports.byteToBase58 = (bytes, start = 0, length) => {
    const shift = length || 32;
    const value = base58_1.default.encode(bytes.slice(start, start + shift));
    return { value, shift };
};
exports.byteToBase58WithLength = (bytes, start = 0) => {
    const lenInfo = exports.P_SHORT(bytes, start);
    const value = base58_1.default.encode(bytes.slice(start + lenInfo.shift, start + lenInfo.shift + lenInfo.value));
    return { value, shift: lenInfo.shift + lenInfo.value };
};
exports.byteToAddressOrAlias = (bytes, start = 0) => {
    if (bytes[start] === exports.ALIAS_VERSION) {
        const aliasData = exports.byteToStringWithLength(bytes, start + 2);
        return { shift: aliasData.shift + 2, value: `alias:${String.fromCharCode(bytes[start + 1])}:${aliasData.value}` };
    }
    else {
        return exports.byteToBase58(bytes, start, 26);
    }
};
exports.byteNewAliasToString = (bytes, start = 0) => {
    const shift = exports.P_SHORT(bytes, start).value + LENGTH_SIZE;
    const { value } = exports.byteToStringWithLength(bytes, start);
    return { shift, value };
};
exports.byteToScript = (bytes, start = 0) => {
    const VERSION_LENGTH = 1;
    if (bytes[start] === 0) {
        return { shift: VERSION_LENGTH, value: null };
    }
    const lengthInfo = exports.P_SHORT(bytes, start + VERSION_LENGTH);
    const from = start + VERSION_LENGTH + lengthInfo.shift;
    const to = start + VERSION_LENGTH + lengthInfo.shift + lengthInfo.value;
    const value = `base64:${Base64.fromByteArray(bytes.slice(from, to))}`;
    return { value, shift: to - start };
};

},{"long":"YvD4","./libs/Utf8ArrayToStr":"zK1S","./libs/base58":"LFlE","base64-js":"prL8"}],"uARc":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var DATA_FIELD_TYPE;
(function (DATA_FIELD_TYPE) {
    DATA_FIELD_TYPE["INTEGER"] = "integer";
    DATA_FIELD_TYPE["BOOLEAN"] = "boolean";
    DATA_FIELD_TYPE["STRING"] = "string";
    DATA_FIELD_TYPE["BINARY"] = "binary";
})(DATA_FIELD_TYPE = exports.DATA_FIELD_TYPE || (exports.DATA_FIELD_TYPE = {}));
function anyOf(items, options) {
    return new AnyOfClass(items, options);
}
exports.anyOf = anyOf;
class AnyOfClass {
    constructor(_items, options) {
        this._items = _items;
        this.type = 'anyOf';
        this.discriminatorField = 'type';
        this.discriminatorBytePos = 0; // defaults to 0
        Object.assign(this, options);
    }
    itemByKey(k) {
        // Here if k equals undefined (this happens if discriminator field is undefined), first item with no string key returns
        // This is useful for items without versions. E.g. orderV0
        const row = this._items.find(([key, schema, stringKey]) => stringKey === k || key == k);
        return row && {
            schema: row[1],
            key: row[0],
            strKey: row[2],
        };
    }
    itemByByteKey(k) {
        const row = this._items.find(([key, _]) => key === k);
        return row && {
            schema: row[1],
            key: row[0],
            strKey: row[2] || row[0].toString(10),
        };
    }
}

},{}],"L3Vj":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const serializePrimitives_1 = require("./serializePrimitives");
const utils_1 = require("./libs/utils");
const schemas_1 = require("./schemas");
/**
 * Creates js to bytes converter for object from given schema
 * @param schema
 * @param fromLongConverter
 */
// FixMe: currently fromLongConverter does nothing. Maybe we should remove it altogether
exports.serializerFromSchema = (schema, fromLongConverter) => (obj) => {
    //let result = Uint8Array.from([]);
    let serializer, itemBytes;
    if (schema.type === 'array') {
        serializer = exports.serializerFromSchema(schema.items, fromLongConverter);
        itemBytes = utils_1.concat(...obj.map((item) => serializer((item))));
        return utils_1.concat((schema.toBytes || serializePrimitives_1.SHORT)(obj.length), itemBytes);
    }
    else if (schema.type === 'object') {
        let objBytes = Uint8Array.from([]);
        if (schema.optional && obj == null) {
            return Uint8Array.from([0]);
        }
        schema.schema.forEach(field => {
            const [name, schema] = field;
            let data;
            // Name as array means than we need to serialize many js fields as one binary object. E.g. we need to add length
            if (Array.isArray(name)) {
                data = name.reduce((acc, fieldName) => (Object.assign({}, acc, { [fieldName]: obj[fieldName] })), {});
            }
            else {
                data = obj[name];
            }
            serializer = exports.serializerFromSchema(schema, fromLongConverter);
            itemBytes = serializer(data);
            objBytes = utils_1.concat(objBytes, itemBytes);
        });
        if (schema.withLength) {
            const l = schema.withLength.toBytes(objBytes.length);
            objBytes = utils_1.concat(l, objBytes);
        }
        if (schema.optional)
            objBytes = utils_1.concat([1], objBytes);
        return objBytes;
    }
    else if (schema.type === 'anyOf') {
        const type = obj[schema.discriminatorField];
        const anyOfItem = schema.itemByKey(type);
        if (anyOfItem == null) {
            throw new Error(`Serializer Error: Unknown anyOf type: ${type}`);
        }
        // FIXME: HACK for boolean argument type.
        // We cannot distinguish schema for 'true' from schema for 'false' when getting item by key since they both have 'boolean' string key
        if (anyOfItem.strKey === 'boolean' && anyOfItem.key === 6 && obj.value === false)
            anyOfItem.key = 7;
        // HACK END
        serializer = exports.serializerFromSchema(anyOfItem.schema, fromLongConverter);
        // If object should be serialized as is. E.g.  {type: 20, signature, '100500'}
        if (schema.valueField == null) {
            return serializer(obj);
            // Otherwise we serialize field and write discriminator. Eg. {type: 'integer', value: 10000}
        }
        else {
            itemBytes = serializer(obj[schema.valueField]);
            return utils_1.concat((schema.toBytes || serializePrimitives_1.BYTE)(anyOfItem.key), itemBytes);
        }
    }
    else if (schema.type === 'primitive' || schema.type === undefined) {
        return schema.toBytes(obj);
    }
    else if (schema.type === 'dataTxField') {
        const keyBytes = serializePrimitives_1.LEN(serializePrimitives_1.SHORT)(serializePrimitives_1.STRING)(obj.key);
        const type = obj.type;
        const typeSchema = schema.items.get(type);
        if (typeSchema == null) {
            throw new Error(`Serializer Error: Unknown dataTxField type: ${type}`);
        }
        const typeCode = [...schema.items.values()].findIndex(schema => schema === typeSchema);
        serializer = exports.serializerFromSchema(typeSchema, fromLongConverter);
        itemBytes = serializer(obj.value);
        return utils_1.concat(keyBytes, serializePrimitives_1.BYTE(typeCode), itemBytes);
    }
    else {
        throw new Error(`Serializer Error: Unknown schema type: ${schema.type}`);
    }
};
function serializeTx(tx, fromLongConverter) {
    const { type, version } = tx;
    const schema = schemas_1.getTransactionSchema(type, version);
    return exports.serializerFromSchema(schema, fromLongConverter)(tx);
}
exports.serializeTx = serializeTx;
function serializeOrder(ord, fromLongConverter) {
    const version = ord.version || 1;
    const schema = schemas_1.orderVersionMap[version];
    if (schema == null)
        throw new Error(`Unknown order version: ${version}`);
    return exports.serializerFromSchema(schema, fromLongConverter)(ord);
}
exports.serializeOrder = serializeOrder;

},{"./serializePrimitives":"PHPb","./libs/utils":"RyRn","./schemas":"ubn0"}],"ubn0":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const serializePrimitives_1 = require("./serializePrimitives");
const parsePrimitives_1 = require("./parsePrimitives");
const schemaTypes_1 = require("./schemaTypes");
const serialize_1 = require("./serialize");
//Todo: import this enums from ts-types package
var TRANSACTION_TYPE;
(function (TRANSACTION_TYPE) {
    TRANSACTION_TYPE[TRANSACTION_TYPE["GENESIS"] = 1] = "GENESIS";
    TRANSACTION_TYPE[TRANSACTION_TYPE["PAYMENT"] = 2] = "PAYMENT";
    TRANSACTION_TYPE[TRANSACTION_TYPE["ISSUE"] = 3] = "ISSUE";
    TRANSACTION_TYPE[TRANSACTION_TYPE["TRANSFER"] = 4] = "TRANSFER";
    TRANSACTION_TYPE[TRANSACTION_TYPE["REISSUE"] = 5] = "REISSUE";
    TRANSACTION_TYPE[TRANSACTION_TYPE["BURN"] = 6] = "BURN";
    TRANSACTION_TYPE[TRANSACTION_TYPE["EXCHANGE"] = 7] = "EXCHANGE";
    TRANSACTION_TYPE[TRANSACTION_TYPE["LEASE"] = 8] = "LEASE";
    TRANSACTION_TYPE[TRANSACTION_TYPE["CANCEL_LEASE"] = 9] = "CANCEL_LEASE";
    TRANSACTION_TYPE[TRANSACTION_TYPE["ALIAS"] = 10] = "ALIAS";
    TRANSACTION_TYPE[TRANSACTION_TYPE["MASS_TRANSFER"] = 11] = "MASS_TRANSFER";
    TRANSACTION_TYPE[TRANSACTION_TYPE["DATA"] = 12] = "DATA";
    TRANSACTION_TYPE[TRANSACTION_TYPE["SET_SCRIPT"] = 13] = "SET_SCRIPT";
    TRANSACTION_TYPE[TRANSACTION_TYPE["SPONSORSHIP"] = 14] = "SPONSORSHIP";
    TRANSACTION_TYPE[TRANSACTION_TYPE["SET_ASSET_SCRIPT"] = 15] = "SET_ASSET_SCRIPT";
    TRANSACTION_TYPE[TRANSACTION_TYPE["INVOKE_SCRIPT"] = 16] = "INVOKE_SCRIPT";
})(TRANSACTION_TYPE = exports.TRANSACTION_TYPE || (exports.TRANSACTION_TYPE = {}));
const shortConverter = {
    toBytes: serializePrimitives_1.SHORT,
    fromBytes: parsePrimitives_1.P_SHORT,
};
const intConverter = {
    toBytes: serializePrimitives_1.INT,
    fromBytes: parsePrimitives_1.P_INT,
};
var txFields;
(function (txFields) {
    //Field constructors
    txFields.longField = (name) => ([name, { toBytes: serializePrimitives_1.LONG, fromBytes: parsePrimitives_1.P_LONG }]);
    txFields.byteField = (name) => ([name, { toBytes: serializePrimitives_1.BYTE, fromBytes: parsePrimitives_1.P_BYTE }]);
    txFields.booleanField = (name) => ([name, { toBytes: serializePrimitives_1.BOOL, fromBytes: parsePrimitives_1.P_BOOLEAN }]);
    txFields.stringField = (name) => ([name, {
            toBytes: serializePrimitives_1.LEN(serializePrimitives_1.SHORT)(serializePrimitives_1.STRING),
            fromBytes: parsePrimitives_1.P_STRING_VAR(parsePrimitives_1.P_SHORT),
        }]);
    txFields.base58field32 = (name) => ([name, {
            toBytes: serializePrimitives_1.BASE58_STRING,
            fromBytes: parsePrimitives_1.P_BASE58_FIXED(32),
        }]);
    // String 'WAVES' often used instead of null. That's why we should serialize it as null
    txFields.base58Option32 = (name) => ([name, {
            toBytes: (s) => s === 'WAVES' ? serializePrimitives_1.OPTION(serializePrimitives_1.BASE58_STRING)(null) : serializePrimitives_1.OPTION(serializePrimitives_1.BASE58_STRING)(s),
            fromBytes: parsePrimitives_1.P_OPTION(parsePrimitives_1.P_BASE58_FIXED(32)),
        }]);
    txFields.base64field = (name) => ([name, {
            toBytes: serializePrimitives_1.LEN(serializePrimitives_1.SHORT)(serializePrimitives_1.BASE64_STRING),
            fromBytes: parsePrimitives_1.P_BASE64(parsePrimitives_1.P_SHORT),
        }]);
    txFields.byteConstant = (byte) => (['noname', {
            toBytes: () => Uint8Array.from([byte]),
            fromBytes: () => ({ value: undefined, shift: 1 }),
        }]);
    // Primitive fields
    txFields.alias = ['alias', {
            toBytes: serializePrimitives_1.LEN(serializePrimitives_1.SHORT)(serializePrimitives_1.STRING),
            fromBytes: parsePrimitives_1.byteNewAliasToString,
        }];
    txFields.amount = txFields.longField('amount');
    txFields.assetDescription = txFields.stringField('description');
    txFields.assetId = txFields.base58field32('assetId');
    txFields.assetName = txFields.stringField('name');
    txFields.attachment = ['attachment', {
            toBytes: serializePrimitives_1.LEN(serializePrimitives_1.SHORT)(serializePrimitives_1.BASE58_STRING),
            fromBytes: parsePrimitives_1.P_BASE58_VAR(parsePrimitives_1.P_SHORT),
        }];
    txFields.chainId = txFields.byteField('chainId');
    txFields.decimals = txFields.byteField('decimals');
    txFields.fee = txFields.longField('fee');
    txFields.leaseAssetId = txFields.base58Option32('leaseAssetId');
    txFields.leaseId = txFields.base58field32('leaseId');
    txFields.optionalAssetId = txFields.base58Option32('assetId');
    txFields.quantity = txFields.longField('quantity');
    txFields.reissuable = txFields.booleanField('reissuable');
    txFields.recipient = ['recipient', {
            toBytes: serializePrimitives_1.ADDRESS_OR_ALIAS,
            fromBytes: parsePrimitives_1.byteToAddressOrAlias,
        }];
    txFields.script = ['script', {
            toBytes: serializePrimitives_1.SCRIPT,
            fromBytes: parsePrimitives_1.byteToScript,
        }];
    txFields.senderPublicKey = txFields.base58field32('senderPublicKey');
    txFields.signature = ['signature', {
            toBytes: serializePrimitives_1.BASE58_STRING,
            fromBytes: parsePrimitives_1.P_BASE58_FIXED(64),
        }];
    txFields.timestamp = txFields.longField('timestamp');
    txFields.type = txFields.byteField('type');
    txFields.version = txFields.byteField('version');
    // Complex fields
    txFields.proofs = ['proofs', {
            type: 'array',
            items: {
                toBytes: serializePrimitives_1.LEN(serializePrimitives_1.SHORT)(serializePrimitives_1.BASE58_STRING),
                fromBytes: parsePrimitives_1.P_BASE58_VAR(parsePrimitives_1.P_SHORT),
            },
        }];
    const transfer = {
        type: 'object',
        schema: [
            txFields.recipient,
            txFields.amount,
        ],
    };
    txFields.transfers = ['transfers', {
            type: 'array',
            items: transfer,
        }];
    const dataTxItem = {
        type: 'dataTxField',
        items: new Map([
            [schemaTypes_1.DATA_FIELD_TYPE.INTEGER, { toBytes: serializePrimitives_1.LONG, fromBytes: parsePrimitives_1.P_LONG }],
            [schemaTypes_1.DATA_FIELD_TYPE.BOOLEAN, { toBytes: serializePrimitives_1.BOOL, fromBytes: parsePrimitives_1.P_BOOLEAN }],
            [schemaTypes_1.DATA_FIELD_TYPE.BINARY, { toBytes: serializePrimitives_1.LEN(serializePrimitives_1.SHORT)(serializePrimitives_1.BASE64_STRING), fromBytes: parsePrimitives_1.P_BASE64(parsePrimitives_1.P_SHORT) }],
            [schemaTypes_1.DATA_FIELD_TYPE.STRING, { toBytes: serializePrimitives_1.LEN(serializePrimitives_1.SHORT)(serializePrimitives_1.STRING), fromBytes: parsePrimitives_1.P_STRING_VAR(parsePrimitives_1.P_SHORT) }],
        ]),
    };
    txFields.data = ['data', {
            type: 'array',
            items: dataTxItem,
        }];
    const functionArgumentPrimitives = [
        [0, { toBytes: serializePrimitives_1.LONG, fromBytes: parsePrimitives_1.P_LONG }, 'integer'],
        [1, { toBytes: serializePrimitives_1.LEN(serializePrimitives_1.INT)(serializePrimitives_1.BASE64_STRING), fromBytes: parsePrimitives_1.P_BASE64(parsePrimitives_1.P_INT) }, 'binary'],
        [2, { toBytes: serializePrimitives_1.LEN(serializePrimitives_1.INT)(serializePrimitives_1.STRING), fromBytes: parsePrimitives_1.P_STRING_VAR(parsePrimitives_1.P_INT) }, 'string'],
        [6, { toBytes: () => Uint8Array.from([]), fromBytes: () => ({ value: true, shift: 0 }) }, 'boolean'],
        [7, { toBytes: () => Uint8Array.from([]), fromBytes: () => ({ value: false, shift: 0 }) }, 'boolean'],
    ];
    const functionArgument = schemaTypes_1.anyOf([
        ...functionArgumentPrimitives,
        [11, {
                type: 'array',
                toBytes: serializePrimitives_1.INT,
                fromBytes: parsePrimitives_1.P_INT,
                items: schemaTypes_1.anyOf(functionArgumentPrimitives, { valueField: 'value' }),
            }, 'list'],
    ], { valueField: 'value' });
    txFields.functionCall = ['call', {
            type: 'object',
            optional: true,
            schema: [
                // special bytes to indicate function call. Used in Serde serializer
                txFields.byteConstant(9),
                txFields.byteConstant(1),
                ['function', {
                        toBytes: serializePrimitives_1.LEN(serializePrimitives_1.INT)(serializePrimitives_1.STRING),
                        fromBytes: parsePrimitives_1.P_STRING_VAR(parsePrimitives_1.P_INT),
                    }],
                ['args', {
                        type: 'array',
                        toBytes: serializePrimitives_1.INT,
                        fromBytes: parsePrimitives_1.P_INT,
                        items: functionArgument,
                    }],
            ],
        }];
    txFields.payment = {
        type: 'object',
        withLength: shortConverter,
        schema: [
            txFields.amount,
            txFields.optionalAssetId
        ],
    };
    txFields.payments = ['payment', {
            type: 'array',
            items: txFields.payment,
        }];
})(txFields = exports.txFields || (exports.txFields = {}));
exports.orderSchemaV1 = {
    type: 'object',
    schema: [
        txFields.senderPublicKey,
        txFields.base58field32('matcherPublicKey'),
        ['assetPair', {
                type: 'object',
                schema: [
                    txFields.base58Option32('amountAsset'),
                    txFields.base58Option32('priceAsset'),
                ],
            }],
        ['orderType', {
                toBytes: (type) => serializePrimitives_1.BYTE(type === 'sell' ? 1 : 0),
                fromBytes: (bytes, start = 0) => parsePrimitives_1.P_BYTE(bytes, start).value === 1 ?
                    { value: 'sell', shift: 1 } :
                    { value: 'buy', shift: 1 },
            }],
        txFields.longField('price'),
        txFields.longField('amount'),
        txFields.timestamp,
        txFields.longField('expiration'),
        txFields.longField('matcherFee'),
    ],
};
exports.orderSchemaV2 = {
    type: 'object',
    schema: [
        txFields.version,
        ...exports.orderSchemaV1.schema,
    ],
};
// In order v3 amount and price fields are flipped
exports.orderSchemaV3 = {
    type: 'object',
    schema: [
        ...exports.orderSchemaV2.schema,
        ['matcherFeeAssetId', txFields.optionalAssetId[1]]
    ],
};
exports.aliasSchemaV2 = {
    type: 'object',
    schema: [
        txFields.type,
        txFields.version,
        txFields.senderPublicKey,
        [['alias', 'chainId'], {
                type: 'object',
                withLength: shortConverter,
                schema: [
                    txFields.byteConstant(2),
                    txFields.chainId,
                    txFields.alias,
                ],
            }],
        txFields.fee,
        txFields.timestamp,
    ],
};
exports.burnSchemaV2 = {
    type: 'object',
    schema: [
        txFields.type,
        txFields.version,
        txFields.chainId,
        txFields.senderPublicKey,
        txFields.assetId,
        txFields.amount,
        txFields.fee,
        txFields.timestamp,
    ],
};
exports.cancelLeaseSchemaV2 = {
    type: 'object',
    schema: [
        txFields.type,
        txFields.version,
        txFields.chainId,
        txFields.senderPublicKey,
        txFields.fee,
        txFields.timestamp,
        txFields.leaseId,
    ],
};
exports.invokeScriptSchemaV1 = {
    type: 'object',
    schema: [
        txFields.type,
        txFields.version,
        txFields.chainId,
        txFields.senderPublicKey,
        ['dApp', txFields.recipient[1]],
        txFields.functionCall,
        txFields.payments,
        txFields.fee,
        ['feeAssetId', txFields.optionalAssetId[1]],
        txFields.timestamp,
    ],
};
exports.dataSchemaV1 = {
    type: 'object',
    schema: [
        txFields.type,
        txFields.version,
        txFields.senderPublicKey,
        txFields.data,
        txFields.timestamp,
        txFields.fee,
    ],
};
exports.proofsSchemaV0 = {
    type: 'object',
    schema: [
        ['signature', {
                toBytes: serializePrimitives_1.BASE58_STRING,
                fromBytes: parsePrimitives_1.P_BASE58_FIXED(64),
            }],
    ],
};
exports.proofsSchemaV1 = {
    type: 'object',
    schema: [
        txFields.byteConstant(1),
        txFields.proofs,
    ],
};
const orderSchemaV0WithSignature = {
    type: 'object',
    schema: [...exports.orderSchemaV1.schema, txFields.signature],
};
//ExchangeV0 needs both orders length to be present before actual order bytes.
// That's why there are two separate rules for oder1 and order2 fields. First one serializes order and writes length.
// Seconds serializes and writes whole order. When deserialize, second rule overwrites order fields in js object
exports.exchangeSchemaV1 = {
    type: 'object',
    schema: [
        txFields.type,
        ['order1', {
                fromBytes: () => ({ value: undefined, shift: 4 }),
                toBytes: (order) => serializePrimitives_1.INT(serialize_1.serializerFromSchema(orderSchemaV0WithSignature)(order).length)
            }],
        ['order2', {
                fromBytes: () => ({ value: undefined, shift: 4 }),
                toBytes: (order) => serializePrimitives_1.INT(serialize_1.serializerFromSchema(orderSchemaV0WithSignature)(order).length)
            }],
        ['order1', orderSchemaV0WithSignature],
        ['order2', orderSchemaV0WithSignature],
        txFields.longField('price'),
        txFields.longField('amount'),
        txFields.longField('buyMatcherFee'),
        txFields.longField('sellMatcherFee'),
        txFields.longField('fee'),
        txFields.longField('timestamp'),
    ],
};
const anyOrder = schemaTypes_1.anyOf([
    [1, {
            type: 'object',
            //order v1 length is serialized without orderVersion
            withLength: {
                toBytes: (x) => serializePrimitives_1.INT(x - 1),
                fromBytes: (x) => {
                    const { value, shift } = parsePrimitives_1.P_INT(x);
                    return { value: value + 1, shift };
                }
            },
            schema: [txFields.byteConstant(1), ...exports.orderSchemaV1.schema, ...exports.proofsSchemaV0.schema]
        }],
    [2, { type: 'object', withLength: intConverter, schema: [...exports.orderSchemaV2.schema, ...exports.proofsSchemaV1.schema] }],
    [3, { type: 'object', withLength: intConverter, schema: [...exports.orderSchemaV3.schema, ...exports.proofsSchemaV1.schema] }],
], { discriminatorField: 'version', discriminatorBytePos: 4 });
exports.exchangeSchemaV2 = {
    type: 'object',
    schema: [
        txFields.byteConstant(0),
        txFields.type,
        txFields.version,
        ['order1', anyOrder],
        ['order2', anyOrder],
        txFields.longField('price'),
        txFields.longField('amount'),
        txFields.longField('buyMatcherFee'),
        txFields.longField('sellMatcherFee'),
        txFields.longField('fee'),
        txFields.longField('timestamp'),
    ],
};
exports.issueSchemaV2 = {
    type: 'object',
    schema: [
        txFields.type,
        txFields.version,
        txFields.chainId,
        txFields.senderPublicKey,
        txFields.assetName,
        txFields.assetDescription,
        txFields.quantity,
        txFields.decimals,
        txFields.reissuable,
        txFields.fee,
        txFields.timestamp,
        txFields.script,
    ],
};
exports.leaseSchemaV2 = {
    type: 'object',
    schema: [
        txFields.type,
        txFields.version,
        txFields.leaseAssetId,
        txFields.senderPublicKey,
        txFields.recipient,
        txFields.amount,
        txFields.fee,
        txFields.timestamp,
    ],
};
exports.massTransferSchemaV1 = {
    type: 'object',
    schema: [
        txFields.type,
        txFields.version,
        txFields.senderPublicKey,
        txFields.optionalAssetId,
        txFields.transfers,
        txFields.timestamp,
        txFields.fee,
        txFields.attachment,
    ],
};
exports.reissueSchemaV2 = {
    type: 'object',
    schema: [
        txFields.type,
        txFields.version,
        txFields.chainId,
        txFields.senderPublicKey,
        txFields.assetId,
        txFields.quantity,
        txFields.reissuable,
        txFields.fee,
        txFields.timestamp,
    ],
};
exports.setAssetScriptSchemaV1 = {
    type: 'object',
    schema: [
        txFields.type,
        txFields.version,
        txFields.chainId,
        txFields.senderPublicKey,
        txFields.assetId,
        txFields.fee,
        txFields.timestamp,
        txFields.script,
    ],
};
exports.setScriptSchemaV1 = {
    type: 'object',
    schema: [
        txFields.type,
        txFields.version,
        txFields.chainId,
        txFields.senderPublicKey,
        txFields.script,
        txFields.fee,
        txFields.timestamp,
    ],
};
exports.sponsorshipSchemaV1 = {
    type: 'object',
    schema: [
        txFields.type,
        txFields.version,
        txFields.senderPublicKey,
        txFields.assetId,
        txFields.longField('minSponsoredAssetFee'),
        txFields.fee,
        txFields.timestamp,
    ],
};
exports.transferSchemaV2 = {
    type: 'object',
    schema: [
        txFields.type,
        txFields.version,
        txFields.senderPublicKey,
        txFields.optionalAssetId,
        ['feeAssetId', txFields.optionalAssetId[1]],
        txFields.timestamp,
        txFields.amount,
        txFields.fee,
        txFields.recipient,
        txFields.attachment,
    ],
};
/**
 * Maps transaction types to schemas object. Schemas are written by keys. 1 equals no version or version 1
 */
exports.schemasByTypeMap = {
    [TRANSACTION_TYPE.GENESIS]: {},
    [TRANSACTION_TYPE.PAYMENT]: {},
    [TRANSACTION_TYPE.ISSUE]: {
        2: exports.issueSchemaV2,
    },
    [TRANSACTION_TYPE.TRANSFER]: {
        2: exports.transferSchemaV2,
    },
    [TRANSACTION_TYPE.REISSUE]: {
        2: exports.reissueSchemaV2,
    },
    [TRANSACTION_TYPE.BURN]: {
        2: exports.burnSchemaV2,
    },
    [TRANSACTION_TYPE.EXCHANGE]: {
        1: exports.exchangeSchemaV1,
        2: exports.exchangeSchemaV2,
    },
    [TRANSACTION_TYPE.LEASE]: {
        2: exports.leaseSchemaV2,
    },
    [TRANSACTION_TYPE.CANCEL_LEASE]: {
        2: exports.cancelLeaseSchemaV2,
    },
    [TRANSACTION_TYPE.ALIAS]: {
        2: exports.aliasSchemaV2,
    },
    [TRANSACTION_TYPE.MASS_TRANSFER]: {
        1: exports.massTransferSchemaV1,
    },
    [TRANSACTION_TYPE.DATA]: {
        1: exports.dataSchemaV1,
    },
    [TRANSACTION_TYPE.SET_SCRIPT]: {
        1: exports.setScriptSchemaV1,
    },
    [TRANSACTION_TYPE.SPONSORSHIP]: {
        1: exports.sponsorshipSchemaV1,
    },
    [TRANSACTION_TYPE.SET_ASSET_SCRIPT]: {
        1: exports.setAssetScriptSchemaV1,
    },
    [TRANSACTION_TYPE.INVOKE_SCRIPT]: {
        1: exports.invokeScriptSchemaV1,
    },
};
exports.orderVersionMap = {
    1: exports.orderSchemaV1,
    2: exports.orderSchemaV2,
    3: exports.orderSchemaV3
};
function getTransactionSchema(type, version) {
    const schemas = exports.schemasByTypeMap[type];
    if (typeof schemas !== 'object') {
        throw new Error(`Incorrect tx type: ${type}`);
    }
    const schema = schemas[version || 1];
    if (typeof schema !== 'object') {
        throw new Error(`Incorrect tx version: ${version}`);
    }
    return schema;
}
exports.getTransactionSchema = getTransactionSchema;

},{"./serializePrimitives":"PHPb","./parsePrimitives":"dt3h","./schemaTypes":"uARc","./serialize":"L3Vj"}],"oKag":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const parsePrimitives_1 = require("./parsePrimitives");
const utils_1 = require("./libs/utils");
const schemas_1 = require("./schemas");
/**
 * Creates Uint8Array parser from object schema. If toLongConverter is provided it will be used for all LONG primitives found in schema
 * @param schema
 * @param toLongConverter
 */
exports.parserFromSchema = (schema, toLongConverter) => (bytes, start = 0) => {
    let cursor = start;
    if (schema.type === 'array') {
        const result = [];
        const { value: len, shift } = (schema.fromBytes || parsePrimitives_1.P_SHORT)(bytes, start);
        cursor += shift;
        utils_1.range(0, len).forEach(_ => {
            const parser = exports.parserFromSchema(schema.items, toLongConverter);
            const { value, shift } = parser(bytes, cursor);
            result.push(value);
            cursor += shift;
        });
        return { value: result, shift: cursor - start };
    }
    else if (schema.type === 'object') {
        if (schema.optional) {
            const exists = bytes[cursor] === 1;
            cursor += 1;
            if (!exists)
                return { value: undefined, shift: 1 };
        }
        // skip object length, since we have schema of all its fields
        if (schema.withLength) {
            const lenInfo = schema.withLength.fromBytes(bytes, cursor);
            cursor += lenInfo.shift;
        }
        const result = {};
        schema.schema.forEach(field => {
            const [name, schema] = field;
            const parser = exports.parserFromSchema(schema, toLongConverter);
            const { value, shift } = parser(bytes, cursor);
            cursor += shift;
            if (value !== undefined) {
                // Name as array means than we need to save result to many object fields
                if (Array.isArray(name)) {
                    Object.assign(result, value);
                }
                else {
                    result[name] = value;
                }
            }
        });
        return { value: result, shift: cursor - start };
    }
    else if (schema.type === 'anyOf') {
        const typeInfo = (schema.fromBytes || parsePrimitives_1.P_BYTE)(bytes, cursor + schema.discriminatorBytePos);
        // Не увеличивать курсор, если объект пишется целиком с дискриминатором или дискриминатор не на 0 позиции.
        // Стоит убрать запись и чтение дискриминаторов из anyOf и вынес
        if (schema.valueField && schema.discriminatorBytePos === 0) {
            cursor += typeInfo.shift;
        }
        const item = schema.itemByByteKey(typeInfo.value);
        if (item == null) {
            throw new Error(`Failed to get schema for item with bytecode: ${typeInfo.value}`);
        }
        const parser = exports.parserFromSchema(item.schema, toLongConverter);
        const { value, shift } = parser(bytes, cursor);
        cursor += shift;
        return {
            // Checks if value should be written inside object. Eg. { type: 'int', value: 20}. Otherwise writes object directly. Eg. {type: 4, recipient: 'foo', timestamp:10000}
            value: schema.valueField ?
                { [schema.discriminatorField]: item.strKey, [schema.valueField]: value } :
                value,
            shift: cursor - start,
        };
    }
    else if (schema.type === 'dataTxField') {
        const key = parsePrimitives_1.byteToStringWithLength(bytes, cursor);
        cursor += key.shift;
        let dataType = parsePrimitives_1.P_BYTE(bytes, cursor);
        cursor += dataType.shift;
        const itemRecord = [...schema.items].find((_, i) => i === dataType.value);
        if (!itemRecord) {
            throw new Error(`Parser Error: Unknown dataTxField type: ${dataType.value}`);
        }
        const parser = exports.parserFromSchema(itemRecord[1], toLongConverter);
        const result = parser(bytes, cursor);
        //cursor += result.shift;
        return {
            value: {
                value: result.value,
                key: key.value,
                type: itemRecord[0],
            },
            shift: result.shift + key.shift + dataType.shift,
        };
    }
    else if (schema.type === 'primitive' || schema.type === undefined) {
        const parser = schema.fromBytes;
        let { value, shift } = parser(bytes, start);
        //Capture LONG Parser and convert strings desired instance if longFactory is present
        if (parser === parsePrimitives_1.P_LONG && toLongConverter) {
            value = toLongConverter(value);
        }
        return { value, shift: shift };
    }
    else {
        throw new Error(`Parser Error: Unknown schema type: ${schema.type}`);
    }
};
exports.parseHeader = (bytes) => {
    let shift = 0;
    let typeInfo = parsePrimitives_1.P_BYTE(bytes, shift);
    shift += typeInfo.shift;
    // ExchangeTransactionV2 have leading 0 in bodybytes
    if (typeInfo.value === 0) {
        typeInfo = parsePrimitives_1.P_BYTE(bytes, shift);
        shift += typeInfo.shift;
    }
    let versionInfo = parsePrimitives_1.P_BYTE(bytes, shift);
    return {
        type: typeInfo.value,
        version: versionInfo.value,
    };
};
/**
 * This function cannot parse transactions without version
 */
function parseTx(bytes, toLongConverter) {
    const { type, version } = exports.parseHeader(bytes);
    const schema = schemas_1.getTransactionSchema(type, version);
    return exports.parserFromSchema(schema, toLongConverter)(bytes).value;
}
exports.parseTx = parseTx;
/**
 * This function cannot parse OrderV1, which doesn't have version field
 */
function parseOrder(bytes, toLongConverter) {
    return exports.parserFromSchema(schemas_1.orderSchemaV2, toLongConverter)(bytes).value;
}
exports.parseOrder = parseOrder;

},{"./parsePrimitives":"dt3h","./libs/utils":"RyRn","./schemas":"ubn0"}],"iiKn":[function(require,module,exports) {
"use strict";
var create = function (options) {
    'use strict';
    var _options = {
        'strict': false,
    };
    if (options !== undefined && options !== null) {
        if (options.strict === true) {
            _options.strict = true;
        }
    }
    var at, // The index of the current character
    ch, // The current character
    escapee = {
        '"': '"',
        '\\': '\\',
        '/': '/',
        b: '\b',
        f: '\f',
        n: '\n',
        r: '\r',
        t: '\t'
    }, text, error = function (m) {
        throw {
            name: 'SyntaxError',
            message: m,
            at: at,
            text: text
        };
    }, next = function (c) {
        if (c && c !== ch) {
            error('Expected \'' + c + '\' instead of \'' + ch + '\'');
        }
        ch = text.charAt(at);
        at += 1;
        return ch;
    }, number = function () {
        var number, string = '';
        if (ch === '-') {
            string = '-';
            next('-');
        }
        while (ch >= '0' && ch <= '9') {
            string += ch;
            next();
        }
        if (ch === '.') {
            string += '.';
            while (next() && ch >= '0' && ch <= '9') {
                string += ch;
            }
        }
        if (ch === 'e' || ch === 'E') {
            string += ch;
            next();
            if (ch === '-' || ch === '+') {
                string += ch;
                next();
            }
            while (ch >= '0' && ch <= '9') {
                string += ch;
                next();
            }
        }
        number = +string;
        if (options && options.parse) {
            return options.parse(string);
        }
        if (!isFinite(number)) {
            error('Bad number');
        }
        else {
            if (string.length > 15) {
                return string;
            }
            else {
                return number;
            }
        }
    }, string = function () {
        var hex, i, string = '', uffff;
        if (ch === '"') {
            while (next()) {
                if (ch === '"') {
                    next();
                    return string;
                }
                if (ch === '\\') {
                    next();
                    if (ch === 'u') {
                        uffff = 0;
                        for (i = 0; i < 4; i += 1) {
                            hex = parseInt(next(), 16);
                            if (!isFinite(hex)) {
                                break;
                            }
                            uffff = uffff * 16 + hex;
                        }
                        string += String.fromCharCode(uffff);
                    }
                    else if (typeof escapee[ch] === 'string') {
                        string += escapee[ch];
                    }
                    else {
                        break;
                    }
                }
                else {
                    string += ch;
                }
            }
        }
        error('Bad string');
    }, white = function () {
        while (ch && ch <= ' ') {
            next();
        }
    }, word = function () {
        switch (ch) {
            case 't':
                next('t');
                next('r');
                next('u');
                next('e');
                return true;
            case 'f':
                next('f');
                next('a');
                next('l');
                next('s');
                next('e');
                return false;
            case 'n':
                next('n');
                next('u');
                next('l');
                next('l');
                return null;
        }
        error('Unexpected \'' + ch + '\'');
    }, value, // Place holder for the value function.
    array = function () {
        var array = [];
        if (ch === '[') {
            next('[');
            white();
            if (ch === ']') {
                next(']');
                return array; // empty array
            }
            while (ch) {
                array.push(value());
                white();
                if (ch === ']') {
                    next(']');
                    return array;
                }
                next(',');
                white();
            }
        }
        error('Bad array');
    }, object = function () {
        var key, object = {};
        if (ch === '{') {
            next('{');
            white();
            if (ch === '}') {
                next('}');
                return object; // empty object
            }
            while (ch) {
                key = string();
                white();
                next(':');
                if (_options.strict === true && Object.hasOwnProperty.call(object, key)) {
                    error('Duplicate key "' + key + '"');
                }
                object[key] = value();
                white();
                if (ch === '}') {
                    next('}');
                    return object;
                }
                next(',');
                white();
            }
        }
        error('Bad object');
    };
    value = function () {
        white();
        switch (ch) {
            case '{':
                return object();
            case '[':
                return array();
            case '"':
                return string();
            case '-':
                return number();
            default:
                return ch >= '0' && ch <= '9' ? number() : word();
        }
    };
    var rx_escapable = /[\\"\u0000-\u001f\u007f-\u009f\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g;
    var gap;
    var indent;
    var meta = {
        '\b': '\\b',
        '\t': '\\t',
        '\n': '\\n',
        '\f': '\\f',
        '\r': '\\r',
        '"': '\\"',
        '\\': '\\\\'
    };
    var rep;
    function quote(string) {
        // If the string contains no control characters, no quote characters, and no
        // backslash characters, then we can safely slap some quotes around it.
        // Otherwise we must also replace the offending characters with safe escape
        // sequences.
        rx_escapable.lastIndex = 0;
        return rx_escapable.test(string) ?
            '"' + string.replace(rx_escapable, function (a) {
                var c = meta[a];
                return typeof c === 'string' ?
                    c :
                    '\\u' + ('0000' + a.charCodeAt(0).toString(16)).slice(-4);
            }) + '"' :
            '"' + string + '"';
    }
    function str(key, holder) {
        // Produce a string from holder[key].
        var i; // The loop counter.
        var k; // The member key.
        var v; // The member value.
        var length;
        var mind = gap;
        var partial;
        var value = holder[key];
        var isBigNumber = options && options.isInstance && options.isInstance(value);
        // Check for NaN and Infinity
        if (isBigNumber && !value.isFinite()) {
            value = null;
        }
        // If the value has a toJSON method, call it to obtain a replacement value.
        if (isBigNumber) {
            value = options.stringify(value);
        }
        else if (value && typeof value === 'object' &&
            typeof value.toJSON === 'function') {
            value = value.toJSON(key);
        }
        // If we were called with a replacer function, then call the replacer to
        // obtain a replacement value.
        if (typeof rep === 'function') {
            value = rep.call(holder, key, value);
        }
        // What happens next depends on the value's type.
        switch (typeof value) {
            case 'string':
                if (isBigNumber) {
                    return value;
                }
                else {
                    return quote(value);
                }
            case 'number':
                // JSON numbers must be finite. Encode non-finite numbers as null.
                return isFinite(value) ?
                    String(value) :
                    'null';
            case 'boolean':
                // If the value is a boolean or null, convert it to a string. Note:
                // typeof null does not produce "null". The case is included here in
                // the remote chance that this gets fixed someday.
                return String(value);
            // If the type is "object", we might be dealing with an object or an array or
            // null.
            case 'object':
                // Due to a specification blunder in ECMAScript, typeof null is "object",
                // so watch out for that case.
                if (!value) {
                    return 'null';
                }
                // Make an array to hold the partial results of stringifying this object value.
                gap += indent;
                partial = [];
                // Is the value an array?
                if (Object.prototype.toString.apply(value) === '[object Array]') {
                    // The value is an array. Stringify every element. Use null as a placeholder
                    // for non-JSON values.
                    length = value.length;
                    for (i = 0; i < length; i += 1) {
                        partial[i] = str(i, value) || 'null';
                    }
                    // Join all of the elements together, separated with commas, and wrap them in
                    // brackets.
                    v = partial.length === 0 ?
                        '[]' :
                        gap ?
                            '[\n' + gap + partial.join(',\n' + gap) + '\n' + mind + ']' :
                            '[' + partial.join(',') + ']';
                    gap = mind;
                    return v;
                }
                // If the replacer is an array, use it to select the members to be stringified.
                if (rep && typeof rep === 'object') {
                    length = rep.length;
                    for (i = 0; i < length; i += 1) {
                        if (typeof rep[i] === 'string') {
                            k = rep[i];
                            v = str(k, value);
                            if (v) {
                                partial.push(quote(k) + (gap ?
                                    ': ' :
                                    ':') + v);
                            }
                        }
                    }
                }
                else {
                    // Otherwise, iterate through all of the keys in the object.
                    for (k in value) {
                        if (Object.prototype.hasOwnProperty.call(value, k)) {
                            v = str(k, value);
                            if (v) {
                                partial.push(quote(k) + (gap ?
                                    ': ' :
                                    ':') + v);
                            }
                        }
                    }
                }
                // Join all of the member texts together, separated with commas,
                // and wrap them in braces.
                v = partial.length === 0 ?
                    '{}' :
                    gap ?
                        '{\n' + gap + partial.join(',\n' + gap) + '\n' + mind + '}' :
                        '{' + partial.join(',') + '}';
                gap = mind;
                return v;
        }
    }
    var stringify = function (value, replacer, space) {
        // The stringify method takes a value and an optional replacer, and an optional
        // space parameter, and returns a JSON text. The replacer can be a function
        // that can replace values, or an array of strings that will select the keys.
        // A default replacer method can be provided. Use of the space parameter can
        // produce text that is more easily readable.
        var i;
        gap = '';
        indent = '';
        // If the space parameter is a number, make an indent string containing that
        // many spaces.
        if (typeof space === 'number') {
            for (i = 0; i < space; i += 1) {
                indent += ' ';
            }
            // If the space parameter is a string, it will be used as the indent string.
        }
        else if (typeof space === 'string') {
            indent = space;
        }
        // If there is a replacer, it must be a function or an array.
        // Otherwise, throw an error.
        rep = replacer;
        if (replacer && typeof replacer !== 'function' &&
            (typeof replacer !== 'object' ||
                typeof replacer.length !== 'number')) {
            throw new Error('JSON.stringify');
        }
        // Make a fake root object containing our value under the key of "".
        // Return the result of stringifying the value.
        return str('', {
            '': value
        });
    };
    var parse = function (source, reviver) {
        var result;
        text = source + '';
        at = 0;
        ch = ' ';
        result = value();
        white();
        if (ch) {
            error('Syntax error');
        }
        return typeof reviver === 'function'
            ? (function walk(holder, key) {
                var k, v, value = holder[key];
                if (value && typeof value === 'object') {
                    Object.keys(value).forEach(function (k) {
                        v = walk(value, k);
                        if (v !== undefined) {
                            value[k] = v;
                        }
                        else {
                            delete value[k];
                        }
                    });
                }
                return reviver.call(holder, key, value);
            }({ '': result }, ''))
            : result;
    };
    return { parse: parse, stringify: stringify };
};
module.exports = create;

},{}],"Ehz6":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const create = require("@waves/parse-json-bignumber/dist/parse-json-bignumber");
const { parse, stringify } = create();
const schemas_1 = require("./schemas");
const serializePrimitives_1 = require("./serializePrimitives");
const index_1 = require("./index");
function resolvePath(path, obj) {
    if (path.length === 0)
        return obj;
    if (typeof obj !== 'object')
        return undefined;
    return resolvePath(path.slice(1), obj[path[0]]);
}
const isLongProp = (fullPath, fullSchema, targetObject) => {
    function go(path, schema) {
        if (schema == null)
            return false;
        if (path.length === 0 && (schema.type === 'primitive' || schema.type === undefined))
            return schema.toBytes === serializePrimitives_1.LONG;
        if (schema.type === 'object') {
            const field = schema.schema.find(([name, _]) => name === path[0]);
            return go(path.slice(1), field && field[1]);
        }
        if (schema.type === 'array') {
            return go(path.slice(1), schema.items);
        }
        if (schema.type === 'dataTxField') {
            if (path[0] !== 'value')
                return false;
            const dataObj = resolvePath(fullPath.slice(0, fullPath.length - 1), targetObject);
            const dataSchema = schema.items.get(dataObj.type);
            return go(path.slice(1), dataSchema);
        }
        if (schema.type === 'anyOf') {
            // Find object and get it's schema
            const obj = resolvePath(fullPath.slice(0, fullPath.length - 1), targetObject);
            const objType = obj[schema.discriminatorField];
            const objSchema = schema.itemByKey(objType);
            if (!objSchema)
                return false;
            // If valueField exists in schema we also check if value and not type field is currently processed. E.g:
            // {type: 'integer', value: 1000}
            if (schema.valueField != null && fullPath[fullPath.length - 1] === schema.valueField) {
                return go(path.slice(1), objSchema.schema);
            }
            //  Otherwise whole object is used as value. E.g.: {type:14, sender: 'example', amount: 1000}
            else {
                return go(path, objSchema.schema);
            }
        }
        return false;
    }
    return go(fullPath, fullSchema);
};
/**
 * Converts object to JSON string using binary schema. For every string found, it checks if given string is LONG property.
 * If true - function writes this string as number
 * @param obj
 * @param schema
 */
function stringifyWithSchema(obj, schema) {
    const path = [];
    const stack = [];
    function stringifyValue(value) {
        if (typeof value === 'string') {
            // ///TODO: DIRTY HACK
            // if (value === 'integer'
            //   && path[0] === 'call'
            //   && path[1] === 'args'
            //   && path[3] === 'type'
            // ) { return `"${value}"` }
            if (isLongProp(path, schema, obj)) {
                return value;
            }
        }
        if (typeof value === 'boolean' || value instanceof Boolean ||
            value === null ||
            typeof value === 'number' || value instanceof Number ||
            typeof value === 'string' || value instanceof String ||
            value instanceof Date) {
            return JSON.stringify(value);
        }
        if (Array.isArray(value)) {
            return stringifyArray(value);
        }
        if (value && typeof value === 'object') {
            return stringifyObject(value);
        }
        return undefined;
    }
    function stringifyArray(array) {
        let str = '[';
        const stackIndex = stack.length;
        stack[stackIndex] = array;
        for (let i = 0; i < array.length; i++) {
            let key = i + '';
            let item = array[i];
            if (typeof item !== 'undefined' && typeof item !== 'function') {
                path[stackIndex] = key;
                str += stringifyValue(item);
            }
            else {
                str += 'null';
            }
            if (i < array.length - 1) {
                str += ',';
            }
        }
        stack.length = stackIndex;
        path.length = stackIndex;
        str += ']';
        return str;
    }
    function stringifyObject(object) {
        let first = true;
        let str = '{';
        const stackIndex = stack.length;
        stack[stackIndex] = object;
        for (let key in object) {
            if (object.hasOwnProperty(key)) {
                let value = object[key];
                if (includeProperty(value)) {
                    if (first) {
                        first = false;
                    }
                    else {
                        str += ',';
                    }
                    str += ('"' + key + '":');
                    path[stackIndex] = key;
                    str += stringifyValue(value);
                }
            }
        }
        stack.length = stackIndex;
        path.length = stackIndex;
        str += '}';
        return str;
    }
    function includeProperty(value) {
        return typeof value !== 'undefined'
            && typeof value !== 'function';
    }
    return stringifyValue(obj) || '';
}
exports.stringifyWithSchema = stringifyWithSchema;
/**
 * Safe parse json string to TX. Converts unsafe numbers to strings. Converts all LONG fields with converter if provided
 * @param str
 * @param toLongConverter
 */
function parseTx(str, toLongConverter) {
    const tx = parse(str);
    return toLongConverter ? index_1.convertTxLongFields(tx, toLongConverter) : tx;
}
exports.parseTx = parseTx;
/**
 * Converts transaction to JSON string.
 * If transaction contains custom LONG instances and this instances doesn't have toString method, you can provide converter as second param
 * @param tx
 * @param fromLongConverter
 */
function stringifyTx(tx, fromLongConverter) {
    const { type, version } = tx;
    const schema = schemas_1.getTransactionSchema(type, version);
    const txWithStrings = index_1.convertLongFields(tx, schema, undefined, fromLongConverter);
    return stringifyWithSchema(txWithStrings, schema);
}
exports.stringifyTx = stringifyTx;
/**
 * Safe parse json string to order. Converts unsafe numbers to strings. Converts all LONG fields with converter if provided
 * @param str
 * @param toLongConverter
 */
function parseOrder(str, toLongConverter) {
    const ord = parse(str);
    const schema = ord.version === 2 ? schemas_1.orderSchemaV2 : schemas_1.orderSchemaV1;
    return toLongConverter ? index_1.convertLongFields(ord, schema, toLongConverter) : ord;
}
exports.parseOrder = parseOrder;
/**
 * Converts order to JSON string
 * If order contains custom LONG instances and this instances doesn't have toString method, you can provide converter as second param
 * @param ord
 * @param fromLongConverter
 */
function stringifyOrder(ord, fromLongConverter) {
    const schema = ord.version === 2 ? schemas_1.orderSchemaV2 : schemas_1.orderSchemaV1;
    const ordWithStrings = index_1.convertLongFields(ord, schema, undefined, fromLongConverter);
    return stringifyWithSchema(ordWithStrings, schema);
}
exports.stringifyOrder = stringifyOrder;

},{"@waves/parse-json-bignumber/dist/parse-json-bignumber":"iiKn","./schemas":"ubn0","./serializePrimitives":"PHPb","./index":"PoKl"}],"PoKl":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const schemas_1 = require("./schemas");
const serialize_1 = require("./serialize");
const parse_1 = require("./parse");
const json = require("./jsonMethods");
exports.json = json;
const serializePrimitives = require("./serializePrimitives");
exports.serializePrimitives = serializePrimitives;
const parsePrimitives = require("./parsePrimitives");
exports.parsePrimitives = parsePrimitives;
const schemas = require("./schemas");
exports.schemas = schemas;
const binary = {
    serializerFromSchema: serialize_1.serializerFromSchema,
    serializeTx: serialize_1.serializeTx,
    serializeOrder: serialize_1.serializeOrder,
    parserFromSchema: parse_1.parserFromSchema,
    parseTx: parse_1.parseTx,
    parseOrder: parse_1.parseOrder,
};
exports.binary = binary;
/**
 * Converts all LONG fields to another type with toConverter using schema. If no toConverter is provided LONG fields will be converted to strings.
 * If object contains custom LONG instances and this instances doesn't have toString method, you can provide fromConverter
 * @param obj
 * @param schema
 * @param toConverter - used to convert string to LONG. If not provided, string will be left as is
 * @param fromConverter - used to convert LONG to string. If not provided, toString will be called
 */
function convertLongFields(obj, schema, toConverter, fromConverter) {
    //ToDo: rewrite. Now simply serializes and then parses with long  factory to get right long types
    const ser = serialize_1.serializerFromSchema(schema, fromConverter);
    const par = parse_1.parserFromSchema(schema, toConverter);
    const converted = par(ser(obj)).value;
    return Object.assign({}, obj, converted);
}
exports.convertLongFields = convertLongFields;
function convertTxLongFields(tx, toConverter, fromConverter) {
    const { type, version } = tx;
    const schema = schemas_1.getTransactionSchema(type, version);
    return convertLongFields(tx, schema, toConverter, fromConverter);
}
exports.convertTxLongFields = convertTxLongFields;

},{"./schemas":"ubn0","./serialize":"L3Vj","./parse":"oKag","./jsonMethods":"Ehz6","./serializePrimitives":"PHPb","./parsePrimitives":"dt3h"}],"gA2k":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getError = exports.validateByShema = exports.isRecipient = exports.exception = exports.isValidAssetDescription = exports.isValidAssetName = exports.isValidDeleteRequest = exports.isValidData = exports.isValidDataPair = exports.isAttachment = exports.isAssetId = exports.isWavesOrAssetId = exports.isPublicKeyForEthSuppTx = exports.isPublicKey = exports.isHash = exports.isValidAlias = exports.isValidAliasName = exports.isValidAddress = exports.isBase64 = exports.isBase58 = exports.bytesLength = exports.isArray = exports.isByteArray = exports.isBoolean = exports.isNaturalNumberOrNullLike = exports.isNaturalNumberOrZeroLike = exports.isNaturalNumberLike = exports.isNumberLike = exports.isNumber = exports.isString = exports.isRequired = exports.orEq = exports.isEq = exports.ifElse = exports.gte = exports.lte = exports.prop = exports.validatePipe = exports.pipe = exports.nope = exports.defaultValue = void 0;
const ts_lib_crypto_1 = require("@waves/ts-lib-crypto");
const TX_DEFAULTS = {
    MAX_ATTACHMENT: 140,
    ALIAS: {
        AVAILABLE_CHARS: '-.0123456789@_abcdefghijklmnopqrstuvwxyz',
        MAX_ALIAS_LENGTH: 30,
        MIN_ALIAS_LENGTH: 4,
    },
};
const ASSETS = {
    NAME_MIN_BYTES: 4,
    NAME_MAX_BYTES: 16,
    DESCRIPTION_MAX_BYTES: 1000,
};
exports.defaultValue = (value) => () => value;
exports.nope = (value) => value;
exports.pipe = (...args) => (value) => args.reduce((acc, cb) => cb(acc), value);
exports.validatePipe = (...args) => (value) => {
    let isValid = true;
    for (const cb of args) {
        isValid = !!cb(value);
        if (!isValid) {
            return false;
        }
    }
    return isValid;
};
exports.prop = (key) => (value) => value ? value[key] : undefined;
exports.lte = (ref) => (value) => ref >= value;
exports.gte = (ref) => (value) => ref <= value;
exports.ifElse = (condition, a, b) => (value) => condition(value) ? a(value) : b(value);
exports.isEq = (reference) => (value) => {
    switch (true) {
        case exports.isNumber(value) && exports.isNumber(reference):
            return Number(value) === Number(reference);
        case exports.isString(value) && exports.isString(reference):
            return String(reference) === String(value);
        case exports.isBoolean(value) && exports.isBoolean(reference):
            return Boolean(value) === Boolean(reference);
        default:
            return reference === value;
    }
};
exports.orEq = (referencesList) => (value) => referencesList.some(exports.isEq(value));
exports.isRequired = (required) => (value) => !required || value != null;
exports.isString = (value) => typeof value === 'string' || value instanceof String;
exports.isNumber = (value) => (typeof value === 'number' || value instanceof Number) && !isNaN(Number(value));
exports.isNumberLike = (value) => value != null && !isNaN(Number(value)) && !!(value || value === 0);
exports.isNaturalNumberLike = (value) => value != null && !isNaN(Number(value)) && Number(value) > 0;
exports.isNaturalNumberOrZeroLike = (value) => value != null && !isNaN(Number(value)) && Number(value) >= 0;
exports.isNaturalNumberOrNullLike = (value) => (!isNaN(Number(value)) && Number(value) > 0) || value === null;
exports.isBoolean = (value) => value != null && (typeof value === 'boolean' || value instanceof Boolean);
exports.isByteArray = (value) => {
    if (!value) {
        return false;
    }
    const bytes = new Uint8Array(value);
    return bytes.length === value.length && bytes.every((val, index) => exports.isEq(val)(value[index]));
};
exports.isArray = (value) => Array.isArray(value);
exports.bytesLength = (length) => (value) => {
    try {
        return Uint8Array.from(value).length === length;
    }
    catch (e) {
        return false;
    }
};
exports.isBase58 = (value) => {
    try {
        ts_lib_crypto_1.base58Decode(value);
    }
    catch (e) {
        return false;
    }
    return true;
};
exports.isBase64 = (value) => {
    try {
        value = value.replace(/^base64:/, '');
        ts_lib_crypto_1.base64Decode(value);
    }
    catch (e) {
        return false;
    }
    return true;
};
exports.isValidAddress = (address, network) => {
    if (typeof address !== 'string' || !exports.isBase58(address)) {
        return false;
    }
    let addressBytes = ts_lib_crypto_1.base58Decode(address);
    if (addressBytes[0] !== 1) {
        return false;
    }
    if (network != null && addressBytes[1] != network) {
        return false;
    }
    let key = addressBytes.slice(0, 22);
    let check = addressBytes.slice(22, 26);
    let keyHash = ts_lib_crypto_1.keccak(ts_lib_crypto_1.blake2b(key)).slice(0, 4);
    for (let i = 0; i < 4; i++) {
        if (check[i] !== keyHash[i]) {
            return false;
        }
    }
    return true;
};
const validateChars = (chars) => (value) => value.split('').every((char) => chars.includes(char));
exports.isValidAliasName = exports.ifElse(validateChars(TX_DEFAULTS.ALIAS.AVAILABLE_CHARS), exports.pipe(exports.prop('length'), exports.validatePipe(exports.lte(TX_DEFAULTS.ALIAS.MAX_ALIAS_LENGTH), exports.gte(TX_DEFAULTS.ALIAS.MIN_ALIAS_LENGTH))), exports.defaultValue(false));
exports.isValidAlias = exports.validatePipe(exports.isString, exports.pipe((value) => value.split(':'), exports.ifElse((value) => value[0] !== 'alias' || value.length !== 3, exports.defaultValue(false), exports.pipe(exports.prop(2), exports.isValidAliasName))));
exports.isHash = exports.validatePipe(exports.isRequired(true), exports.isBase58, exports.pipe((value) => ts_lib_crypto_1.base58Decode(value), exports.bytesLength(32)));
exports.isPublicKey = exports.isHash;
exports.isPublicKeyForEthSuppTx = exports.ifElse(exports.orEq(['', null, undefined]), exports.defaultValue(true), exports.pipe((value) => ts_lib_crypto_1.base58Decode(value), (value) => {
    try {
        return Uint8Array.from(value).length === 32 || Uint8Array.from(value).length === 64;
    }
    catch (e) {
        return false;
    }
}));
exports.isWavesOrAssetId = exports.ifElse(exports.orEq(['', null, undefined, 'WAVES']), exports.defaultValue(true), exports.isHash);
exports.isAssetId = exports.isHash;
exports.isAttachment = exports.ifElse(exports.orEq([null, undefined]), exports.defaultValue(true), exports.ifElse(
// if valid Data Pair
exports.validatePipe(exports.isArray, (data) => data.every(exports.isValidDataPair)), exports.defaultValue(true), 
// else if valid base58 or bytearray
exports.pipe(exports.ifElse(exports.isBase58, ts_lib_crypto_1.base58Decode, exports.nope), exports.ifElse(exports.isByteArray, exports.pipe(exports.prop('length'), exports.lte(TX_DEFAULTS.MAX_ATTACHMENT)), exports.defaultValue(false)))));
const validateType = {
    integer: exports.isNumberLike,
    boolean: exports.isBoolean,
    string: exports.isString,
    binary: exports.isBase64,
    list: exports.isArray,
};
exports.isValidDataPair = (data) => !!(validateType[data.type] && validateType[data.type](data.value));
exports.isValidData = exports.validatePipe(exports.isRequired(true), exports.pipe(exports.prop('key'), exports.validatePipe(exports.isString, (key) => !!key)), exports.isValidDataPair);
exports.isValidDeleteRequest = exports.validatePipe(exports.isRequired(true), exports.pipe(exports.prop('key'), exports.validatePipe(exports.isString, (key) => !!key)), ({ type, value }) => type == null && value == null);
exports.isValidAssetName = exports.validatePipe(exports.isRequired(true), exports.isString, exports.pipe(ts_lib_crypto_1.stringToBytes, exports.prop('length'), exports.ifElse(exports.gte(ASSETS.NAME_MIN_BYTES), exports.lte(ASSETS.NAME_MAX_BYTES), exports.defaultValue(false))));
exports.isValidAssetDescription = exports.validatePipe(exports.isRequired(false), exports.defaultValue(true), exports.pipe(ts_lib_crypto_1.stringToBytes, exports.prop('length'), exports.lte(ASSETS.DESCRIPTION_MAX_BYTES)));
exports.exception = (msg) => {
    throw new Error(msg);
};
exports.isRecipient = exports.ifElse(exports.isValidAddress, exports.defaultValue(true), exports.isValidAlias);
exports.validateByShema = (shema, errorTpl) => (tx) => {
    Object.entries(shema).forEach(([key, cb]) => {
        const value = exports.prop(key)(tx || {});
        if (!cb(value)) {
            exports.exception(errorTpl(key, value));
        }
    });
    return true;
};
exports.getError = (key, value) => {
    return `tx "${key}", has wrong data: ${JSON.stringify(value)}. Check tx data.`;
};

},{"@waves/ts-lib-crypto":"X6Ht"}],"o0lw":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.transferValidator = void 0;
const validators_1 = require("./validators");
const ts_types_1 = require("@waves/ts-types");
const transferScheme = {
    type: validators_1.isEq(ts_types_1.TRANSACTION_TYPE.TRANSFER),
    senderPublicKey: validators_1.isPublicKey,
    version: validators_1.orEq([undefined, 2, 3]),
    assetId: validators_1.isWavesOrAssetId,
    feeAssetId: validators_1.isWavesOrAssetId,
    recipient: validators_1.isRecipient,
    amount: validators_1.isNaturalNumberOrZeroLike,
    attachment: validators_1.isAttachment,
    fee: validators_1.isNaturalNumberOrZeroLike,
    timestamp: validators_1.isNaturalNumberOrZeroLike,
    proofs: validators_1.ifElse(validators_1.isArray, validators_1.defaultValue(true), validators_1.orEq([undefined])),
};
exports.transferValidator = validators_1.validateByShema(transferScheme, validators_1.getError);

},{"./validators":"gA2k","@waves/ts-types":"UGFq"}],"HBpD":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.massTransferValidator = void 0;
const ts_types_1 = require("@waves/ts-types");
const validators_1 = require("./validators");
const massTransferScheme = {
    type: validators_1.isEq(ts_types_1.TRANSACTION_TYPE.MASS_TRANSFER),
    senderPublicKey: validators_1.isPublicKey,
    version: validators_1.orEq([undefined, 1, 2]),
    transfers: validators_1.validatePipe(validators_1.isArray, validators_1.pipe(validators_1.prop('length'), validators_1.gte(0)), validators_1.pipe(validators_1.prop('length'), validators_1.lte(100)), (data) => data.every(validators_1.validatePipe(validators_1.isRequired(true), validators_1.pipe(validators_1.prop('recipient'), validators_1.isRecipient), validators_1.pipe(validators_1.prop('amount'), validators_1.isNaturalNumberOrZeroLike)))),
    assetId: validators_1.isWavesOrAssetId,
    attachment: validators_1.isAttachment,
    fee: validators_1.isNaturalNumberOrZeroLike,
    timestamp: validators_1.isNumber,
    proofs: validators_1.ifElse(validators_1.isArray, validators_1.defaultValue(true), validators_1.orEq([undefined])),
};
exports.massTransferValidator = validators_1.validateByShema(massTransferScheme, validators_1.getError);

},{"@waves/ts-types":"UGFq","./validators":"gA2k"}],"q7Yg":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.aliasValidator = void 0;
const validators_1 = require("./validators");
const ts_types_1 = require("@waves/ts-types");
const aliasScheme = {
    type: validators_1.isEq(ts_types_1.TRANSACTION_TYPE.ALIAS),
    version: validators_1.orEq([undefined, 2, 3]),
    senderPublicKey: validators_1.isPublicKey,
    alias: validators_1.isValidAliasName,
    fee: validators_1.isNaturalNumberOrZeroLike,
    chainId: validators_1.isNumber,
    timestamp: validators_1.isNumber,
    proofs: validators_1.ifElse(validators_1.isArray, validators_1.defaultValue(true), validators_1.orEq([undefined])),
};
exports.aliasValidator = validators_1.validateByShema(aliasScheme, validators_1.getError);

},{"./validators":"gA2k","@waves/ts-types":"UGFq"}],"zj6Y":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.burnValidator = void 0;
const ts_types_1 = require("@waves/ts-types");
const validators_1 = require("./validators");
const burnScheme = {
    type: validators_1.isEq(ts_types_1.TRANSACTION_TYPE.BURN),
    senderPublicKey: validators_1.isPublicKey,
    version: validators_1.orEq([undefined, 2, 3]),
    assetId: validators_1.isAssetId,
    amount: validators_1.isNaturalNumberLike,
    chainId: validators_1.isNaturalNumberLike,
    fee: validators_1.isNaturalNumberOrZeroLike,
    timestamp: validators_1.isNumber,
    proofs: validators_1.ifElse(validators_1.isArray, validators_1.defaultValue(true), validators_1.orEq([undefined])),
};
exports.burnValidator = validators_1.validateByShema(burnScheme, validators_1.getError);

},{"@waves/ts-types":"UGFq","./validators":"gA2k"}],"EXaV":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.cancelLeaseValidator = void 0;
const ts_types_1 = require("@waves/ts-types");
const validators_1 = require("./validators");
const cancelLeaseScheme = {
    type: validators_1.isEq(ts_types_1.TRANSACTION_TYPE.CANCEL_LEASE),
    senderPublicKey: validators_1.isPublicKey,
    version: validators_1.orEq([undefined, 2, 3]),
    leaseId: validators_1.isAssetId,
    chainId: validators_1.isNumber,
    fee: validators_1.isNaturalNumberOrZeroLike,
    timestamp: validators_1.isNumber,
    proofs: validators_1.ifElse(validators_1.isArray, validators_1.defaultValue(true), validators_1.orEq([undefined])),
};
exports.cancelLeaseValidator = validators_1.validateByShema(cancelLeaseScheme, validators_1.getError);

},{"@waves/ts-types":"UGFq","./validators":"gA2k"}],"Y1ZA":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.dataValidator = exports.dataFieldValidator = void 0;
const ts_types_1 = require("@waves/ts-types");
const validators_1 = require("./validators");
const dataScheme = {
    type: validators_1.isEq(ts_types_1.TRANSACTION_TYPE.DATA),
    senderPublicKey: validators_1.isPublicKey,
    version: validators_1.orEq([undefined, 1, 2]),
    data: (data) => validators_1.isArray(data) &&
        data.every(item => validators_1.isValidData(item) || validators_1.isValidDeleteRequest(item)),
    fee: validators_1.isNaturalNumberOrZeroLike,
    timestamp: validators_1.isNumber,
    proofs: validators_1.ifElse(validators_1.isArray, validators_1.defaultValue(true), validators_1.orEq([undefined])),
};
exports.dataFieldValidator = (item) => validators_1.isValidData(item) || validators_1.isValidDeleteRequest(item);
exports.dataValidator = validators_1.validateByShema(dataScheme, validators_1.getError);

},{"@waves/ts-types":"UGFq","./validators":"gA2k"}],"pvLA":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.sponsorshipValidator = void 0;
const ts_types_1 = require("@waves/ts-types");
const validators_1 = require("./validators");
const sponsorshipScheme = {
    type: validators_1.isEq(ts_types_1.TRANSACTION_TYPE.SPONSORSHIP),
    senderPublicKey: validators_1.isPublicKey,
    version: validators_1.orEq([undefined, 1, 2]),
    assetId: validators_1.isAssetId,
    minSponsoredAssetFee: validators_1.isNaturalNumberOrNullLike,
    fee: validators_1.isNaturalNumberOrZeroLike,
    timestamp: validators_1.isNumber,
    proofs: validators_1.ifElse(validators_1.isArray, validators_1.defaultValue(true), validators_1.orEq([undefined])),
};
exports.sponsorshipValidator = validators_1.validateByShema(sponsorshipScheme, validators_1.getError);

},{"@waves/ts-types":"UGFq","./validators":"gA2k"}],"XPqD":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.setAssetScriptValidator = void 0;
const ts_types_1 = require("@waves/ts-types");
const validators_1 = require("./validators");
const setAssetScriptScheme = {
    type: validators_1.isEq(ts_types_1.TRANSACTION_TYPE.SET_ASSET_SCRIPT),
    senderPublicKey: validators_1.isPublicKey,
    version: validators_1.orEq([undefined, 1, 2]),
    assetId: validators_1.isAssetId,
    chainId: validators_1.isNaturalNumberLike,
    fee: validators_1.isNaturalNumberOrZeroLike,
    timestamp: validators_1.isNumber,
    script: validators_1.isBase64,
    proofs: validators_1.ifElse(validators_1.isArray, validators_1.defaultValue(true), validators_1.orEq([undefined])),
};
exports.setAssetScriptValidator = validators_1.validateByShema(setAssetScriptScheme, validators_1.getError);

},{"@waves/ts-types":"UGFq","./validators":"gA2k"}],"VV3p":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.setScriptValidator = void 0;
const ts_types_1 = require("@waves/ts-types");
const validators_1 = require("./validators");
const setScriptScheme = {
    type: validators_1.isEq(ts_types_1.TRANSACTION_TYPE.SET_SCRIPT),
    senderPublicKey: validators_1.isPublicKey,
    version: validators_1.orEq([undefined, 1, 2]),
    chainId: validators_1.isNaturalNumberLike,
    fee: validators_1.isNaturalNumberOrZeroLike,
    timestamp: validators_1.isNumber,
    script: validators_1.ifElse(validators_1.isEq(null), validators_1.defaultValue(true), validators_1.isBase64),
    proofs: validators_1.ifElse(validators_1.isArray, validators_1.defaultValue(true), validators_1.orEq([undefined])),
};
exports.setScriptValidator = validators_1.validateByShema(setScriptScheme, validators_1.getError);

},{"@waves/ts-types":"UGFq","./validators":"gA2k"}],"MbYA":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.reissueValidator = void 0;
const ts_types_1 = require("@waves/ts-types");
const validators_1 = require("./validators");
const reissueScheme = {
    type: validators_1.isEq(ts_types_1.TRANSACTION_TYPE.REISSUE),
    senderPublicKey: validators_1.isPublicKey,
    version: validators_1.orEq([undefined, 2, 3]),
    assetId: validators_1.isAssetId,
    quantity: validators_1.isNaturalNumberLike,
    reissuable: validators_1.isBoolean,
    chainId: validators_1.isNaturalNumberLike,
    fee: validators_1.isNaturalNumberOrZeroLike,
    timestamp: validators_1.isNumber,
    proofs: validators_1.ifElse(validators_1.isArray, validators_1.defaultValue(true), validators_1.orEq([undefined])),
};
exports.reissueValidator = validators_1.validateByShema(reissueScheme, validators_1.getError);

},{"@waves/ts-types":"UGFq","./validators":"gA2k"}],"QQBY":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.issueValidator = void 0;
const ts_types_1 = require("@waves/ts-types");
const validators_1 = require("./validators");
const issueScheme = {
    type: validators_1.isEq(ts_types_1.TRANSACTION_TYPE.ISSUE),
    version: validators_1.orEq([undefined, 2, 3]),
    senderPublicKey: validators_1.isPublicKey,
    name: validators_1.isValidAssetName,
    description: validators_1.isValidAssetDescription,
    quantity: validators_1.isNaturalNumberLike,
    decimals: validators_1.isNumber,
    reissuable: validators_1.isBoolean,
    script: validators_1.ifElse(validators_1.isRequired(true), validators_1.isBase64, validators_1.defaultValue(true)),
    chainId: validators_1.isNumber,
    fee: validators_1.isNaturalNumberOrZeroLike,
    timestamp: validators_1.isNumber,
    proofs: validators_1.ifElse(validators_1.isArray, validators_1.defaultValue(true), validators_1.orEq([undefined])),
};
exports.issueValidator = validators_1.validateByShema(issueScheme, validators_1.getError);

},{"@waves/ts-types":"UGFq","./validators":"gA2k"}],"TRRp":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.leaseValidator = void 0;
const ts_types_1 = require("@waves/ts-types");
const validators_1 = require("./validators");
const leaseScheme = {
    type: validators_1.isEq(ts_types_1.TRANSACTION_TYPE.LEASE),
    version: validators_1.orEq([undefined, 2, 3]),
    senderPublicKey: validators_1.isPublicKey,
    recipient: validators_1.isRecipient,
    amount: validators_1.isNaturalNumberLike,
    fee: validators_1.isNaturalNumberOrZeroLike,
    timestamp: validators_1.isNumber,
    proofs: validators_1.ifElse(validators_1.isArray, validators_1.defaultValue(true), validators_1.orEq([undefined])),
};
exports.leaseValidator = validators_1.validateByShema(leaseScheme, validators_1.getError);

},{"@waves/ts-types":"UGFq","./validators":"gA2k"}],"OZvz":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.invokeValidator = void 0;
const ts_types_1 = require("@waves/ts-types");
const validators_1 = require("./validators");
const invokeScheme = {
    type: validators_1.isEq(ts_types_1.TRANSACTION_TYPE.INVOKE_SCRIPT),
    senderPublicKey: validators_1.isPublicKey,
    version: validators_1.orEq([undefined, 1, 2]),
    dApp: validators_1.isRecipient,
    call: validators_1.ifElse(validators_1.isRequired(false), validators_1.defaultValue(true), validators_1.validatePipe(validators_1.pipe(validators_1.prop('function'), validators_1.isString), validators_1.pipe(validators_1.prop('function'), validators_1.prop('length'), validators_1.gte(0)), validators_1.pipe(validators_1.prop('args'), validators_1.isArray), (data) => data.every(validators_1.validatePipe(validators_1.isRequired(true), validators_1.isValidDataPair)))),
    payment: validators_1.validatePipe(validators_1.isArray, (data) => data.every(validators_1.validatePipe(validators_1.pipe(validators_1.prop('amount'), validators_1.isNumberLike), validators_1.pipe(validators_1.prop('assetId'), validators_1.isWavesOrAssetId)))),
    fee: validators_1.isNaturalNumberOrZeroLike,
    feeAssetId: validators_1.isWavesOrAssetId,
    chainId: validators_1.isNaturalNumberLike,
    timestamp: validators_1.isNaturalNumberLike,
    proofs: validators_1.ifElse(validators_1.isArray, validators_1.defaultValue(true), validators_1.orEq([undefined])),
};
exports.invokeValidator = validators_1.validateByShema(invokeScheme, validators_1.getError);

},{"@waves/ts-types":"UGFq","./validators":"gA2k"}],"wnyU":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.orderValidator = void 0;
const validators_1 = require("./validators");
const orderScheme = {
    orderType: validators_1.orEq(['sell', 'buy']),
    matcherPublicKey: validators_1.isPublicKey,
    version: validators_1.orEq([undefined, 1, 2, 3, 4]),
    assetPair: validators_1.validatePipe(validators_1.isRequired(true), validators_1.pipe(validators_1.prop('amountAsset'), validators_1.isWavesOrAssetId), validators_1.pipe(validators_1.prop('priceAsset'), validators_1.isWavesOrAssetId)),
    price: validators_1.isNumberLike,
    amount: validators_1.isNumberLike,
    matcherFee: validators_1.isNumberLike,
    expiration: validators_1.isNumberLike,
    timestamp: validators_1.isNumber,
    proofs: validators_1.ifElse(validators_1.isArray, validators_1.defaultValue(true), validators_1.orEq([undefined])),
};
const v1_2_OrderScheme = {
    matcherFeeAssetId: validators_1.orEq([undefined, null, 'WAVES']),
    senderPublicKey: validators_1.isPublicKey,
};
const v3_OrderScheme = {
    matcherFeeAssetId: validators_1.isWavesOrAssetId,
    senderPublicKey: validators_1.isPublicKey,
};
const v4_OrderScheme = {
    matcherFeeAssetId: validators_1.isWavesOrAssetId,
    senderPublicKey: validators_1.isPublicKeyForEthSuppTx,
};
const validateOrder = validators_1.validateByShema(orderScheme, validators_1.getError);
const validateOrderV2 = validators_1.validateByShema(v1_2_OrderScheme, validators_1.getError);
const validateOrderV3 = validators_1.validateByShema(v3_OrderScheme, validators_1.getError);
const validateOrderV4 = validators_1.validateByShema(v4_OrderScheme, validators_1.getError);
exports.orderValidator = validators_1.validatePipe(validateOrder, validators_1.ifElse(validators_1.pipe(validators_1.prop('version'), (v) => v >= 3), validators_1.ifElse(validators_1.pipe(validators_1.prop('version'), (v) => v >= 4), validateOrderV4, validateOrderV3), validateOrderV2));

},{"./validators":"gA2k"}],"ldSY":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.exchangeValidator = void 0;
const ts_types_1 = require("@waves/ts-types");
const order_1 = require("./order");
const validators_1 = require("./validators");
const exchangeScheme = {
    type: validators_1.isEq(ts_types_1.TRANSACTION_TYPE.EXCHANGE),
    senderPublicKey: validators_1.isPublicKey,
    version: validators_1.orEq([undefined, 1, 2, 3]),
    order1: validators_1.validatePipe(validators_1.isRequired(true), order_1.orderValidator),
    order2: validators_1.validatePipe(validators_1.isRequired(true), order_1.orderValidator),
    amount: validators_1.isNumberLike,
    price: validators_1.isNumberLike,
    buyMatcherFee: validators_1.isNumberLike,
    sellMatcherFee: validators_1.isNumberLike,
    fee: validators_1.isNaturalNumberOrZeroLike,
    timestamp: validators_1.isNumber,
    proofs: validators_1.ifElse(validators_1.isArray, validators_1.defaultValue(true), validators_1.orEq([undefined])),
};
exports.exchangeValidator = validators_1.validateByShema(exchangeScheme, validators_1.getError);

},{"@waves/ts-types":"UGFq","./order":"wnyU","./validators":"gA2k"}],"iqe6":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.updateAssetInfoValidator = void 0;
const ts_types_1 = require("@waves/ts-types");
const validators_1 = require("./validators");
const updateAssetInfoScheme = {
    type: validators_1.isEq(ts_types_1.TRANSACTION_TYPE.UPDATE_ASSET_INFO),
    senderPublicKey: validators_1.isPublicKey,
    name: validators_1.isValidAssetName,
    description: validators_1.isValidAssetDescription,
    version: validators_1.orEq([1]),
    assetId: validators_1.isAssetId,
    fee: validators_1.isNaturalNumberOrZeroLike,
    timestamp: validators_1.isNumber,
    proofs: validators_1.ifElse(validators_1.isArray, validators_1.defaultValue(true), validators_1.orEq([undefined])),
};
exports.updateAssetInfoValidator = validators_1.validateByShema(updateAssetInfoScheme, validators_1.getError);

},{"@waves/ts-types":"UGFq","./validators":"gA2k"}],"VGlD":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.cancelOrderValidator = void 0;
const validators_1 = require("./validators");
const cancelOrderScheme = {
    sender: validators_1.isPublicKey,
    orderId: validators_1.isHash,
    signature: validators_1.isBase58,
    hash: validators_1.isBase58,
};
exports.cancelOrderValidator = validators_1.validateByShema(cancelOrderScheme, validators_1.getError);

},{"./validators":"gA2k"}],"DzoF":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.customDataValidator = void 0;
const validators_1 = require("./validators");
const customDataV1Scheme = {
    version: validators_1.isEq(1),
    binary: validators_1.isBase64,
};
const customDataV2Scheme = {
    version: validators_1.isEq(2),
    data: validators_1.validatePipe(validators_1.isArray, (data) => data.every(validators_1.validatePipe(validators_1.isRequired(true), validators_1.isValidDataPair))),
};
const v1Validator = validators_1.validateByShema(customDataV1Scheme, validators_1.getError);
const v2Validator = validators_1.validateByShema(customDataV2Scheme, validators_1.getError);
exports.customDataValidator = validators_1.ifElse(validators_1.pipe(validators_1.prop('version'), validators_1.isEq(1)), v1Validator, v2Validator);

},{"./validators":"gA2k"}],"MDnx":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.authValidator = void 0;
const validators_1 = require("./validators");
const authScheme = {
    data: validators_1.isString,
    host: validators_1.isString,
};
exports.authValidator = validators_1.validateByShema(authScheme, validators_1.getError);

},{"./validators":"gA2k"}],"x8Qo":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.authValidator = void 0;
const validators_1 = require("./validators");
const authScheme = {
    publicKey: validators_1.isPublicKey,
    timestamp: validators_1.isNumber,
};
exports.authValidator = validators_1.validateByShema(authScheme, validators_1.getError);

},{"./validators":"gA2k"}],"bRjQ":[function(require,module,exports) {
"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !exports.hasOwnProperty(p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.validate = void 0;
__exportStar(require("./validators"), exports);
const transfer_1 = require("./transfer");
const mass_transfer_1 = require("./mass-transfer");
const alias_1 = require("./alias");
const burn_1 = require("./burn");
const cancel_lease_1 = require("./cancel-lease");
const data_1 = require("./data");
const sponsorship_1 = require("./sponsorship");
const set_asset_script_1 = require("./set-asset-script");
const set_script_1 = require("./set-script");
const reissue_1 = require("./reissue");
const issue_1 = require("./issue");
const lease_1 = require("./lease");
const invoke_script_1 = require("./invoke-script");
const exchange_1 = require("./exchange");
const update_asset_info_1 = require("./update-asset-info");
// import { invokeExpressionValidator as invokeExpression } from './invoke-expression'
const order_1 = require("./order");
const cancel_order_1 = require("./cancel-order");
const custom_data_1 = require("./custom-data");
const auth_1 = require("./auth");
const wavesAuth_1 = require("./wavesAuth");
exports.validate = {
    transfer: transfer_1.transferValidator,
    massTransfer: mass_transfer_1.massTransferValidator,
    alias: alias_1.aliasValidator,
    issue: issue_1.issueValidator,
    reissue: reissue_1.reissueValidator,
    sponsorship: sponsorship_1.sponsorshipValidator,
    burn: burn_1.burnValidator,
    setAssetScript: set_asset_script_1.setAssetScriptValidator,
    cancelLease: cancel_lease_1.cancelLeaseValidator,
    data: data_1.dataValidator,
    dataFieldValidator: data_1.dataFieldValidator,
    lease: lease_1.leaseValidator,
    setScript: set_script_1.setScriptValidator,
    invokeScript: invoke_script_1.invokeValidator,
    exchange: exchange_1.exchangeValidator,
    updateAssetInfo: update_asset_info_1.updateAssetInfoValidator,
    // invokeExpression,
    cancelOrder: cancel_order_1.cancelOrderValidator,
    customData: custom_data_1.customDataValidator,
    order: order_1.orderValidator,
    wavesAuth: wavesAuth_1.authValidator,
    auth: auth_1.authValidator,
};

},{"./validators":"gA2k","./transfer":"o0lw","./mass-transfer":"HBpD","./alias":"q7Yg","./burn":"zj6Y","./cancel-lease":"EXaV","./data":"Y1ZA","./sponsorship":"pvLA","./set-asset-script":"XPqD","./set-script":"VV3p","./reissue":"MbYA","./issue":"QQBY","./lease":"TRRp","./invoke-script":"OZvz","./exchange":"ldSY","./update-asset-info":"iqe6","./order":"wnyU","./cancel-order":"VGlD","./custom-data":"DzoF","./auth":"MDnx","./wavesAuth":"x8Qo"}],"oU4k":[function(require,module,exports) {
"use strict";
module.exports = asPromise;

/**
 * Callback as used by {@link util.asPromise}.
 * @typedef asPromiseCallback
 * @type {function}
 * @param {Error|null} error Error, if any
 * @param {...*} params Additional arguments
 * @returns {undefined}
 */

/**
 * Returns a promise from a node-style callback function.
 * @memberof util
 * @param {asPromiseCallback} fn Function to call
 * @param {*} ctx Function context
 * @param {...*} params Function arguments
 * @returns {Promise<*>} Promisified function
 */
function asPromise(fn, ctx/*, varargs */) {
    var params  = new Array(arguments.length - 1),
        offset  = 0,
        index   = 2,
        pending = true;
    while (index < arguments.length)
        params[offset++] = arguments[index++];
    return new Promise(function executor(resolve, reject) {
        params[offset] = function callback(err/*, varargs */) {
            if (pending) {
                pending = false;
                if (err)
                    reject(err);
                else {
                    var params = new Array(arguments.length - 1),
                        offset = 0;
                    while (offset < params.length)
                        params[offset++] = arguments[offset];
                    resolve.apply(null, params);
                }
            }
        };
        try {
            fn.apply(ctx || null, params);
        } catch (err) {
            if (pending) {
                pending = false;
                reject(err);
            }
        }
    });
}

},{}],"SASd":[function(require,module,exports) {
"use strict";

/**
 * A minimal base64 implementation for number arrays.
 * @memberof util
 * @namespace
 */
var base64 = exports;

/**
 * Calculates the byte length of a base64 encoded string.
 * @param {string} string Base64 encoded string
 * @returns {number} Byte length
 */
base64.length = function length(string) {
    var p = string.length;
    if (!p)
        return 0;
    var n = 0;
    while (--p % 4 > 1 && string.charAt(p) === "=")
        ++n;
    return Math.ceil(string.length * 3) / 4 - n;
};

// Base64 encoding table
var b64 = new Array(64);

// Base64 decoding table
var s64 = new Array(123);

// 65..90, 97..122, 48..57, 43, 47
for (var i = 0; i < 64;)
    s64[b64[i] = i < 26 ? i + 65 : i < 52 ? i + 71 : i < 62 ? i - 4 : i - 59 | 43] = i++;

/**
 * Encodes a buffer to a base64 encoded string.
 * @param {Uint8Array} buffer Source buffer
 * @param {number} start Source start
 * @param {number} end Source end
 * @returns {string} Base64 encoded string
 */
base64.encode = function encode(buffer, start, end) {
    var parts = null,
        chunk = [];
    var i = 0, // output index
        j = 0, // goto index
        t;     // temporary
    while (start < end) {
        var b = buffer[start++];
        switch (j) {
            case 0:
                chunk[i++] = b64[b >> 2];
                t = (b & 3) << 4;
                j = 1;
                break;
            case 1:
                chunk[i++] = b64[t | b >> 4];
                t = (b & 15) << 2;
                j = 2;
                break;
            case 2:
                chunk[i++] = b64[t | b >> 6];
                chunk[i++] = b64[b & 63];
                j = 0;
                break;
        }
        if (i > 8191) {
            (parts || (parts = [])).push(String.fromCharCode.apply(String, chunk));
            i = 0;
        }
    }
    if (j) {
        chunk[i++] = b64[t];
        chunk[i++] = 61;
        if (j === 1)
            chunk[i++] = 61;
    }
    if (parts) {
        if (i)
            parts.push(String.fromCharCode.apply(String, chunk.slice(0, i)));
        return parts.join("");
    }
    return String.fromCharCode.apply(String, chunk.slice(0, i));
};

var invalidEncoding = "invalid encoding";

/**
 * Decodes a base64 encoded string to a buffer.
 * @param {string} string Source string
 * @param {Uint8Array} buffer Destination buffer
 * @param {number} offset Destination offset
 * @returns {number} Number of bytes written
 * @throws {Error} If encoding is invalid
 */
base64.decode = function decode(string, buffer, offset) {
    var start = offset;
    var j = 0, // goto index
        t;     // temporary
    for (var i = 0; i < string.length;) {
        var c = string.charCodeAt(i++);
        if (c === 61 && j > 1)
            break;
        if ((c = s64[c]) === undefined)
            throw Error(invalidEncoding);
        switch (j) {
            case 0:
                t = c;
                j = 1;
                break;
            case 1:
                buffer[offset++] = t << 2 | (c & 48) >> 4;
                t = c;
                j = 2;
                break;
            case 2:
                buffer[offset++] = (t & 15) << 4 | (c & 60) >> 2;
                t = c;
                j = 3;
                break;
            case 3:
                buffer[offset++] = (t & 3) << 6 | c;
                j = 0;
                break;
        }
    }
    if (j === 1)
        throw Error(invalidEncoding);
    return offset - start;
};

/**
 * Tests if the specified string appears to be base64 encoded.
 * @param {string} string String to test
 * @returns {boolean} `true` if probably base64 encoded, otherwise false
 */
base64.test = function test(string) {
    return /^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$/.test(string);
};

},{}],"wJQW":[function(require,module,exports) {
"use strict";
module.exports = EventEmitter;

/**
 * Constructs a new event emitter instance.
 * @classdesc A minimal event emitter.
 * @memberof util
 * @constructor
 */
function EventEmitter() {

    /**
     * Registered listeners.
     * @type {Object.<string,*>}
     * @private
     */
    this._listeners = {};
}

/**
 * Registers an event listener.
 * @param {string} evt Event name
 * @param {function} fn Listener
 * @param {*} [ctx] Listener context
 * @returns {util.EventEmitter} `this`
 */
EventEmitter.prototype.on = function on(evt, fn, ctx) {
    (this._listeners[evt] || (this._listeners[evt] = [])).push({
        fn  : fn,
        ctx : ctx || this
    });
    return this;
};

/**
 * Removes an event listener or any matching listeners if arguments are omitted.
 * @param {string} [evt] Event name. Removes all listeners if omitted.
 * @param {function} [fn] Listener to remove. Removes all listeners of `evt` if omitted.
 * @returns {util.EventEmitter} `this`
 */
EventEmitter.prototype.off = function off(evt, fn) {
    if (evt === undefined)
        this._listeners = {};
    else {
        if (fn === undefined)
            this._listeners[evt] = [];
        else {
            var listeners = this._listeners[evt];
            for (var i = 0; i < listeners.length;)
                if (listeners[i].fn === fn)
                    listeners.splice(i, 1);
                else
                    ++i;
        }
    }
    return this;
};

/**
 * Emits an event by calling its listeners with the specified arguments.
 * @param {string} evt Event name
 * @param {...*} args Arguments
 * @returns {util.EventEmitter} `this`
 */
EventEmitter.prototype.emit = function emit(evt) {
    var listeners = this._listeners[evt];
    if (listeners) {
        var args = [],
            i = 1;
        for (; i < arguments.length;)
            args.push(arguments[i++]);
        for (i = 0; i < listeners.length;)
            listeners[i].fn.apply(listeners[i++].ctx, args);
    }
    return this;
};

},{}],"SGHJ":[function(require,module,exports) {
"use strict";

module.exports = factory(factory);

/**
 * Reads / writes floats / doubles from / to buffers.
 * @name util.float
 * @namespace
 */

/**
 * Writes a 32 bit float to a buffer using little endian byte order.
 * @name util.float.writeFloatLE
 * @function
 * @param {number} val Value to write
 * @param {Uint8Array} buf Target buffer
 * @param {number} pos Target buffer offset
 * @returns {undefined}
 */

/**
 * Writes a 32 bit float to a buffer using big endian byte order.
 * @name util.float.writeFloatBE
 * @function
 * @param {number} val Value to write
 * @param {Uint8Array} buf Target buffer
 * @param {number} pos Target buffer offset
 * @returns {undefined}
 */

/**
 * Reads a 32 bit float from a buffer using little endian byte order.
 * @name util.float.readFloatLE
 * @function
 * @param {Uint8Array} buf Source buffer
 * @param {number} pos Source buffer offset
 * @returns {number} Value read
 */

/**
 * Reads a 32 bit float from a buffer using big endian byte order.
 * @name util.float.readFloatBE
 * @function
 * @param {Uint8Array} buf Source buffer
 * @param {number} pos Source buffer offset
 * @returns {number} Value read
 */

/**
 * Writes a 64 bit double to a buffer using little endian byte order.
 * @name util.float.writeDoubleLE
 * @function
 * @param {number} val Value to write
 * @param {Uint8Array} buf Target buffer
 * @param {number} pos Target buffer offset
 * @returns {undefined}
 */

/**
 * Writes a 64 bit double to a buffer using big endian byte order.
 * @name util.float.writeDoubleBE
 * @function
 * @param {number} val Value to write
 * @param {Uint8Array} buf Target buffer
 * @param {number} pos Target buffer offset
 * @returns {undefined}
 */

/**
 * Reads a 64 bit double from a buffer using little endian byte order.
 * @name util.float.readDoubleLE
 * @function
 * @param {Uint8Array} buf Source buffer
 * @param {number} pos Source buffer offset
 * @returns {number} Value read
 */

/**
 * Reads a 64 bit double from a buffer using big endian byte order.
 * @name util.float.readDoubleBE
 * @function
 * @param {Uint8Array} buf Source buffer
 * @param {number} pos Source buffer offset
 * @returns {number} Value read
 */

// Factory function for the purpose of node-based testing in modified global environments
function factory(exports) {

    // float: typed array
    if (typeof Float32Array !== "undefined") (function() {

        var f32 = new Float32Array([ -0 ]),
            f8b = new Uint8Array(f32.buffer),
            le  = f8b[3] === 128;

        function writeFloat_f32_cpy(val, buf, pos) {
            f32[0] = val;
            buf[pos    ] = f8b[0];
            buf[pos + 1] = f8b[1];
            buf[pos + 2] = f8b[2];
            buf[pos + 3] = f8b[3];
        }

        function writeFloat_f32_rev(val, buf, pos) {
            f32[0] = val;
            buf[pos    ] = f8b[3];
            buf[pos + 1] = f8b[2];
            buf[pos + 2] = f8b[1];
            buf[pos + 3] = f8b[0];
        }

        /* istanbul ignore next */
        exports.writeFloatLE = le ? writeFloat_f32_cpy : writeFloat_f32_rev;
        /* istanbul ignore next */
        exports.writeFloatBE = le ? writeFloat_f32_rev : writeFloat_f32_cpy;

        function readFloat_f32_cpy(buf, pos) {
            f8b[0] = buf[pos    ];
            f8b[1] = buf[pos + 1];
            f8b[2] = buf[pos + 2];
            f8b[3] = buf[pos + 3];
            return f32[0];
        }

        function readFloat_f32_rev(buf, pos) {
            f8b[3] = buf[pos    ];
            f8b[2] = buf[pos + 1];
            f8b[1] = buf[pos + 2];
            f8b[0] = buf[pos + 3];
            return f32[0];
        }

        /* istanbul ignore next */
        exports.readFloatLE = le ? readFloat_f32_cpy : readFloat_f32_rev;
        /* istanbul ignore next */
        exports.readFloatBE = le ? readFloat_f32_rev : readFloat_f32_cpy;

    // float: ieee754
    })(); else (function() {

        function writeFloat_ieee754(writeUint, val, buf, pos) {
            var sign = val < 0 ? 1 : 0;
            if (sign)
                val = -val;
            if (val === 0)
                writeUint(1 / val > 0 ? /* positive */ 0 : /* negative 0 */ 2147483648, buf, pos);
            else if (isNaN(val))
                writeUint(2143289344, buf, pos);
            else if (val > 3.4028234663852886e+38) // +-Infinity
                writeUint((sign << 31 | 2139095040) >>> 0, buf, pos);
            else if (val < 1.1754943508222875e-38) // denormal
                writeUint((sign << 31 | Math.round(val / 1.401298464324817e-45)) >>> 0, buf, pos);
            else {
                var exponent = Math.floor(Math.log(val) / Math.LN2),
                    mantissa = Math.round(val * Math.pow(2, -exponent) * 8388608) & 8388607;
                writeUint((sign << 31 | exponent + 127 << 23 | mantissa) >>> 0, buf, pos);
            }
        }

        exports.writeFloatLE = writeFloat_ieee754.bind(null, writeUintLE);
        exports.writeFloatBE = writeFloat_ieee754.bind(null, writeUintBE);

        function readFloat_ieee754(readUint, buf, pos) {
            var uint = readUint(buf, pos),
                sign = (uint >> 31) * 2 + 1,
                exponent = uint >>> 23 & 255,
                mantissa = uint & 8388607;
            return exponent === 255
                ? mantissa
                ? NaN
                : sign * Infinity
                : exponent === 0 // denormal
                ? sign * 1.401298464324817e-45 * mantissa
                : sign * Math.pow(2, exponent - 150) * (mantissa + 8388608);
        }

        exports.readFloatLE = readFloat_ieee754.bind(null, readUintLE);
        exports.readFloatBE = readFloat_ieee754.bind(null, readUintBE);

    })();

    // double: typed array
    if (typeof Float64Array !== "undefined") (function() {

        var f64 = new Float64Array([-0]),
            f8b = new Uint8Array(f64.buffer),
            le  = f8b[7] === 128;

        function writeDouble_f64_cpy(val, buf, pos) {
            f64[0] = val;
            buf[pos    ] = f8b[0];
            buf[pos + 1] = f8b[1];
            buf[pos + 2] = f8b[2];
            buf[pos + 3] = f8b[3];
            buf[pos + 4] = f8b[4];
            buf[pos + 5] = f8b[5];
            buf[pos + 6] = f8b[6];
            buf[pos + 7] = f8b[7];
        }

        function writeDouble_f64_rev(val, buf, pos) {
            f64[0] = val;
            buf[pos    ] = f8b[7];
            buf[pos + 1] = f8b[6];
            buf[pos + 2] = f8b[5];
            buf[pos + 3] = f8b[4];
            buf[pos + 4] = f8b[3];
            buf[pos + 5] = f8b[2];
            buf[pos + 6] = f8b[1];
            buf[pos + 7] = f8b[0];
        }

        /* istanbul ignore next */
        exports.writeDoubleLE = le ? writeDouble_f64_cpy : writeDouble_f64_rev;
        /* istanbul ignore next */
        exports.writeDoubleBE = le ? writeDouble_f64_rev : writeDouble_f64_cpy;

        function readDouble_f64_cpy(buf, pos) {
            f8b[0] = buf[pos    ];
            f8b[1] = buf[pos + 1];
            f8b[2] = buf[pos + 2];
            f8b[3] = buf[pos + 3];
            f8b[4] = buf[pos + 4];
            f8b[5] = buf[pos + 5];
            f8b[6] = buf[pos + 6];
            f8b[7] = buf[pos + 7];
            return f64[0];
        }

        function readDouble_f64_rev(buf, pos) {
            f8b[7] = buf[pos    ];
            f8b[6] = buf[pos + 1];
            f8b[5] = buf[pos + 2];
            f8b[4] = buf[pos + 3];
            f8b[3] = buf[pos + 4];
            f8b[2] = buf[pos + 5];
            f8b[1] = buf[pos + 6];
            f8b[0] = buf[pos + 7];
            return f64[0];
        }

        /* istanbul ignore next */
        exports.readDoubleLE = le ? readDouble_f64_cpy : readDouble_f64_rev;
        /* istanbul ignore next */
        exports.readDoubleBE = le ? readDouble_f64_rev : readDouble_f64_cpy;

    // double: ieee754
    })(); else (function() {

        function writeDouble_ieee754(writeUint, off0, off1, val, buf, pos) {
            var sign = val < 0 ? 1 : 0;
            if (sign)
                val = -val;
            if (val === 0) {
                writeUint(0, buf, pos + off0);
                writeUint(1 / val > 0 ? /* positive */ 0 : /* negative 0 */ 2147483648, buf, pos + off1);
            } else if (isNaN(val)) {
                writeUint(0, buf, pos + off0);
                writeUint(2146959360, buf, pos + off1);
            } else if (val > 1.7976931348623157e+308) { // +-Infinity
                writeUint(0, buf, pos + off0);
                writeUint((sign << 31 | 2146435072) >>> 0, buf, pos + off1);
            } else {
                var mantissa;
                if (val < 2.2250738585072014e-308) { // denormal
                    mantissa = val / 5e-324;
                    writeUint(mantissa >>> 0, buf, pos + off0);
                    writeUint((sign << 31 | mantissa / 4294967296) >>> 0, buf, pos + off1);
                } else {
                    var exponent = Math.floor(Math.log(val) / Math.LN2);
                    if (exponent === 1024)
                        exponent = 1023;
                    mantissa = val * Math.pow(2, -exponent);
                    writeUint(mantissa * 4503599627370496 >>> 0, buf, pos + off0);
                    writeUint((sign << 31 | exponent + 1023 << 20 | mantissa * 1048576 & 1048575) >>> 0, buf, pos + off1);
                }
            }
        }

        exports.writeDoubleLE = writeDouble_ieee754.bind(null, writeUintLE, 0, 4);
        exports.writeDoubleBE = writeDouble_ieee754.bind(null, writeUintBE, 4, 0);

        function readDouble_ieee754(readUint, off0, off1, buf, pos) {
            var lo = readUint(buf, pos + off0),
                hi = readUint(buf, pos + off1);
            var sign = (hi >> 31) * 2 + 1,
                exponent = hi >>> 20 & 2047,
                mantissa = 4294967296 * (hi & 1048575) + lo;
            return exponent === 2047
                ? mantissa
                ? NaN
                : sign * Infinity
                : exponent === 0 // denormal
                ? sign * 5e-324 * mantissa
                : sign * Math.pow(2, exponent - 1075) * (mantissa + 4503599627370496);
        }

        exports.readDoubleLE = readDouble_ieee754.bind(null, readUintLE, 0, 4);
        exports.readDoubleBE = readDouble_ieee754.bind(null, readUintBE, 4, 0);

    })();

    return exports;
}

// uint helpers

function writeUintLE(val, buf, pos) {
    buf[pos    ] =  val        & 255;
    buf[pos + 1] =  val >>> 8  & 255;
    buf[pos + 2] =  val >>> 16 & 255;
    buf[pos + 3] =  val >>> 24;
}

function writeUintBE(val, buf, pos) {
    buf[pos    ] =  val >>> 24;
    buf[pos + 1] =  val >>> 16 & 255;
    buf[pos + 2] =  val >>> 8  & 255;
    buf[pos + 3] =  val        & 255;
}

function readUintLE(buf, pos) {
    return (buf[pos    ]
          | buf[pos + 1] << 8
          | buf[pos + 2] << 16
          | buf[pos + 3] << 24) >>> 0;
}

function readUintBE(buf, pos) {
    return (buf[pos    ] << 24
          | buf[pos + 1] << 16
          | buf[pos + 2] << 8
          | buf[pos + 3]) >>> 0;
}

},{}],"XRF3":[function(require,module,exports) {
"use strict";
module.exports = inquire;

/**
 * Requires a module only if available.
 * @memberof util
 * @param {string} moduleName Module to require
 * @returns {?Object} Required module if available and not empty, otherwise `null`
 */
function inquire(moduleName) {
    try {
        var mod = eval("quire".replace(/^/,"re"))(moduleName); // eslint-disable-line no-eval
        if (mod && (mod.length || Object.keys(mod).length))
            return mod;
    } catch (e) {} // eslint-disable-line no-empty
    return null;
}

},{}],"nie5":[function(require,module,exports) {
"use strict";

/**
 * A minimal UTF8 implementation for number arrays.
 * @memberof util
 * @namespace
 */
var utf8 = exports;

/**
 * Calculates the UTF8 byte length of a string.
 * @param {string} string String
 * @returns {number} Byte length
 */
utf8.length = function utf8_length(string) {
    var len = 0,
        c = 0;
    for (var i = 0; i < string.length; ++i) {
        c = string.charCodeAt(i);
        if (c < 128)
            len += 1;
        else if (c < 2048)
            len += 2;
        else if ((c & 0xFC00) === 0xD800 && (string.charCodeAt(i + 1) & 0xFC00) === 0xDC00) {
            ++i;
            len += 4;
        } else
            len += 3;
    }
    return len;
};

/**
 * Reads UTF8 bytes as a string.
 * @param {Uint8Array} buffer Source buffer
 * @param {number} start Source start
 * @param {number} end Source end
 * @returns {string} String read
 */
utf8.read = function utf8_read(buffer, start, end) {
    var len = end - start;
    if (len < 1)
        return "";
    var parts = null,
        chunk = [],
        i = 0, // char offset
        t;     // temporary
    while (start < end) {
        t = buffer[start++];
        if (t < 128)
            chunk[i++] = t;
        else if (t > 191 && t < 224)
            chunk[i++] = (t & 31) << 6 | buffer[start++] & 63;
        else if (t > 239 && t < 365) {
            t = ((t & 7) << 18 | (buffer[start++] & 63) << 12 | (buffer[start++] & 63) << 6 | buffer[start++] & 63) - 0x10000;
            chunk[i++] = 0xD800 + (t >> 10);
            chunk[i++] = 0xDC00 + (t & 1023);
        } else
            chunk[i++] = (t & 15) << 12 | (buffer[start++] & 63) << 6 | buffer[start++] & 63;
        if (i > 8191) {
            (parts || (parts = [])).push(String.fromCharCode.apply(String, chunk));
            i = 0;
        }
    }
    if (parts) {
        if (i)
            parts.push(String.fromCharCode.apply(String, chunk.slice(0, i)));
        return parts.join("");
    }
    return String.fromCharCode.apply(String, chunk.slice(0, i));
};

/**
 * Writes a string as UTF8 bytes.
 * @param {string} string Source string
 * @param {Uint8Array} buffer Destination buffer
 * @param {number} offset Destination offset
 * @returns {number} Bytes written
 */
utf8.write = function utf8_write(string, buffer, offset) {
    var start = offset,
        c1, // character 1
        c2; // character 2
    for (var i = 0; i < string.length; ++i) {
        c1 = string.charCodeAt(i);
        if (c1 < 128) {
            buffer[offset++] = c1;
        } else if (c1 < 2048) {
            buffer[offset++] = c1 >> 6       | 192;
            buffer[offset++] = c1       & 63 | 128;
        } else if ((c1 & 0xFC00) === 0xD800 && ((c2 = string.charCodeAt(i + 1)) & 0xFC00) === 0xDC00) {
            c1 = 0x10000 + ((c1 & 0x03FF) << 10) + (c2 & 0x03FF);
            ++i;
            buffer[offset++] = c1 >> 18      | 240;
            buffer[offset++] = c1 >> 12 & 63 | 128;
            buffer[offset++] = c1 >> 6  & 63 | 128;
            buffer[offset++] = c1       & 63 | 128;
        } else {
            buffer[offset++] = c1 >> 12      | 224;
            buffer[offset++] = c1 >> 6  & 63 | 128;
            buffer[offset++] = c1       & 63 | 128;
        }
    }
    return offset - start;
};

},{}],"YX4y":[function(require,module,exports) {
"use strict";
module.exports = pool;

/**
 * An allocator as used by {@link util.pool}.
 * @typedef PoolAllocator
 * @type {function}
 * @param {number} size Buffer size
 * @returns {Uint8Array} Buffer
 */

/**
 * A slicer as used by {@link util.pool}.
 * @typedef PoolSlicer
 * @type {function}
 * @param {number} start Start offset
 * @param {number} end End offset
 * @returns {Uint8Array} Buffer slice
 * @this {Uint8Array}
 */

/**
 * A general purpose buffer pool.
 * @memberof util
 * @function
 * @param {PoolAllocator} alloc Allocator
 * @param {PoolSlicer} slice Slicer
 * @param {number} [size=8192] Slab size
 * @returns {PoolAllocator} Pooled allocator
 */
function pool(alloc, slice, size) {
    var SIZE   = size || 8192;
    var MAX    = SIZE >>> 1;
    var slab   = null;
    var offset = SIZE;
    return function pool_alloc(size) {
        if (size < 1 || size > MAX)
            return alloc(size);
        if (offset + size > SIZE) {
            slab = alloc(SIZE);
            offset = 0;
        }
        var buf = slice.call(slab, offset, offset += size);
        if (offset & 7) // align to 32 bit
            offset = (offset | 7) + 1;
        return buf;
    };
}

},{}],"Ty7D":[function(require,module,exports) {
"use strict";
module.exports = LongBits;

var util = require("../util/minimal");

/**
 * Constructs new long bits.
 * @classdesc Helper class for working with the low and high bits of a 64 bit value.
 * @memberof util
 * @constructor
 * @param {number} lo Low 32 bits, unsigned
 * @param {number} hi High 32 bits, unsigned
 */
function LongBits(lo, hi) {

    // note that the casts below are theoretically unnecessary as of today, but older statically
    // generated converter code might still call the ctor with signed 32bits. kept for compat.

    /**
     * Low bits.
     * @type {number}
     */
    this.lo = lo >>> 0;

    /**
     * High bits.
     * @type {number}
     */
    this.hi = hi >>> 0;
}

/**
 * Zero bits.
 * @memberof util.LongBits
 * @type {util.LongBits}
 */
var zero = LongBits.zero = new LongBits(0, 0);

zero.toNumber = function() { return 0; };
zero.zzEncode = zero.zzDecode = function() { return this; };
zero.length = function() { return 1; };

/**
 * Zero hash.
 * @memberof util.LongBits
 * @type {string}
 */
var zeroHash = LongBits.zeroHash = "\0\0\0\0\0\0\0\0";

/**
 * Constructs new long bits from the specified number.
 * @param {number} value Value
 * @returns {util.LongBits} Instance
 */
LongBits.fromNumber = function fromNumber(value) {
    if (value === 0)
        return zero;
    var sign = value < 0;
    if (sign)
        value = -value;
    var lo = value >>> 0,
        hi = (value - lo) / 4294967296 >>> 0;
    if (sign) {
        hi = ~hi >>> 0;
        lo = ~lo >>> 0;
        if (++lo > 4294967295) {
            lo = 0;
            if (++hi > 4294967295)
                hi = 0;
        }
    }
    return new LongBits(lo, hi);
};

/**
 * Constructs new long bits from a number, long or string.
 * @param {Long|number|string} value Value
 * @returns {util.LongBits} Instance
 */
LongBits.from = function from(value) {
    if (typeof value === "number")
        return LongBits.fromNumber(value);
    if (util.isString(value)) {
        /* istanbul ignore else */
        if (util.Long)
            value = util.Long.fromString(value);
        else
            return LongBits.fromNumber(parseInt(value, 10));
    }
    return value.low || value.high ? new LongBits(value.low >>> 0, value.high >>> 0) : zero;
};

/**
 * Converts this long bits to a possibly unsafe JavaScript number.
 * @param {boolean} [unsigned=false] Whether unsigned or not
 * @returns {number} Possibly unsafe number
 */
LongBits.prototype.toNumber = function toNumber(unsigned) {
    if (!unsigned && this.hi >>> 31) {
        var lo = ~this.lo + 1 >>> 0,
            hi = ~this.hi     >>> 0;
        if (!lo)
            hi = hi + 1 >>> 0;
        return -(lo + hi * 4294967296);
    }
    return this.lo + this.hi * 4294967296;
};

/**
 * Converts this long bits to a long.
 * @param {boolean} [unsigned=false] Whether unsigned or not
 * @returns {Long} Long
 */
LongBits.prototype.toLong = function toLong(unsigned) {
    return util.Long
        ? new util.Long(this.lo | 0, this.hi | 0, Boolean(unsigned))
        /* istanbul ignore next */
        : { low: this.lo | 0, high: this.hi | 0, unsigned: Boolean(unsigned) };
};

var charCodeAt = String.prototype.charCodeAt;

/**
 * Constructs new long bits from the specified 8 characters long hash.
 * @param {string} hash Hash
 * @returns {util.LongBits} Bits
 */
LongBits.fromHash = function fromHash(hash) {
    if (hash === zeroHash)
        return zero;
    return new LongBits(
        ( charCodeAt.call(hash, 0)
        | charCodeAt.call(hash, 1) << 8
        | charCodeAt.call(hash, 2) << 16
        | charCodeAt.call(hash, 3) << 24) >>> 0
    ,
        ( charCodeAt.call(hash, 4)
        | charCodeAt.call(hash, 5) << 8
        | charCodeAt.call(hash, 6) << 16
        | charCodeAt.call(hash, 7) << 24) >>> 0
    );
};

/**
 * Converts this long bits to a 8 characters long hash.
 * @returns {string} Hash
 */
LongBits.prototype.toHash = function toHash() {
    return String.fromCharCode(
        this.lo        & 255,
        this.lo >>> 8  & 255,
        this.lo >>> 16 & 255,
        this.lo >>> 24      ,
        this.hi        & 255,
        this.hi >>> 8  & 255,
        this.hi >>> 16 & 255,
        this.hi >>> 24
    );
};

/**
 * Zig-zag encodes this long bits.
 * @returns {util.LongBits} `this`
 */
LongBits.prototype.zzEncode = function zzEncode() {
    var mask =   this.hi >> 31;
    this.hi  = ((this.hi << 1 | this.lo >>> 31) ^ mask) >>> 0;
    this.lo  = ( this.lo << 1                   ^ mask) >>> 0;
    return this;
};

/**
 * Zig-zag decodes this long bits.
 * @returns {util.LongBits} `this`
 */
LongBits.prototype.zzDecode = function zzDecode() {
    var mask = -(this.lo & 1);
    this.lo  = ((this.lo >>> 1 | this.hi << 31) ^ mask) >>> 0;
    this.hi  = ( this.hi >>> 1                  ^ mask) >>> 0;
    return this;
};

/**
 * Calculates the length of this longbits when encoded as a varint.
 * @returns {number} Length
 */
LongBits.prototype.length = function length() {
    var part0 =  this.lo,
        part1 = (this.lo >>> 28 | this.hi << 4) >>> 0,
        part2 =  this.hi >>> 24;
    return part2 === 0
         ? part1 === 0
           ? part0 < 16384
             ? part0 < 128 ? 1 : 2
             : part0 < 2097152 ? 3 : 4
           : part1 < 16384
             ? part1 < 128 ? 5 : 6
             : part1 < 2097152 ? 7 : 8
         : part2 < 128 ? 9 : 10;
};

},{"../util/minimal":"KgKa"}],"KgKa":[function(require,module,exports) {
var global = arguments[3];
var Buffer = require("buffer").Buffer;
"use strict";
var util = exports;

// used to return a Promise where callback is omitted
util.asPromise = require("@protobufjs/aspromise");

// converts to / from base64 encoded strings
util.base64 = require("@protobufjs/base64");

// base class of rpc.Service
util.EventEmitter = require("@protobufjs/eventemitter");

// float handling accross browsers
util.float = require("@protobufjs/float");

// requires modules optionally and hides the call from bundlers
util.inquire = require("@protobufjs/inquire");

// converts to / from utf8 encoded strings
util.utf8 = require("@protobufjs/utf8");

// provides a node-like buffer pool in the browser
util.pool = require("@protobufjs/pool");

// utility to work with the low and high bits of a 64 bit value
util.LongBits = require("./longbits");

/**
 * Whether running within node or not.
 * @memberof util
 * @type {boolean}
 */
util.isNode = Boolean(typeof global !== "undefined"
                   && global
                   && global.process
                   && global.process.versions
                   && global.process.versions.node);

/**
 * Global object reference.
 * @memberof util
 * @type {Object}
 */
util.global = util.isNode && global
           || typeof window !== "undefined" && window
           || typeof self   !== "undefined" && self
           || this; // eslint-disable-line no-invalid-this

/**
 * An immuable empty array.
 * @memberof util
 * @type {Array.<*>}
 * @const
 */
util.emptyArray = Object.freeze ? Object.freeze([]) : /* istanbul ignore next */ []; // used on prototypes

/**
 * An immutable empty object.
 * @type {Object}
 * @const
 */
util.emptyObject = Object.freeze ? Object.freeze({}) : /* istanbul ignore next */ {}; // used on prototypes

/**
 * Tests if the specified value is an integer.
 * @function
 * @param {*} value Value to test
 * @returns {boolean} `true` if the value is an integer
 */
util.isInteger = Number.isInteger || /* istanbul ignore next */ function isInteger(value) {
    return typeof value === "number" && isFinite(value) && Math.floor(value) === value;
};

/**
 * Tests if the specified value is a string.
 * @param {*} value Value to test
 * @returns {boolean} `true` if the value is a string
 */
util.isString = function isString(value) {
    return typeof value === "string" || value instanceof String;
};

/**
 * Tests if the specified value is a non-null object.
 * @param {*} value Value to test
 * @returns {boolean} `true` if the value is a non-null object
 */
util.isObject = function isObject(value) {
    return value && typeof value === "object";
};

/**
 * Checks if a property on a message is considered to be present.
 * This is an alias of {@link util.isSet}.
 * @function
 * @param {Object} obj Plain object or message instance
 * @param {string} prop Property name
 * @returns {boolean} `true` if considered to be present, otherwise `false`
 */
util.isset =

/**
 * Checks if a property on a message is considered to be present.
 * @param {Object} obj Plain object or message instance
 * @param {string} prop Property name
 * @returns {boolean} `true` if considered to be present, otherwise `false`
 */
util.isSet = function isSet(obj, prop) {
    var value = obj[prop];
    if (value != null && obj.hasOwnProperty(prop)) // eslint-disable-line eqeqeq, no-prototype-builtins
        return typeof value !== "object" || (Array.isArray(value) ? value.length : Object.keys(value).length) > 0;
    return false;
};

/**
 * Any compatible Buffer instance.
 * This is a minimal stand-alone definition of a Buffer instance. The actual type is that exported by node's typings.
 * @interface Buffer
 * @extends Uint8Array
 */

/**
 * Node's Buffer class if available.
 * @type {Constructor<Buffer>}
 */
util.Buffer = (function() {
    try {
        var Buffer = util.inquire("buffer").Buffer;
        // refuse to use non-node buffers if not explicitly assigned (perf reasons):
        return Buffer.prototype.utf8Write ? Buffer : /* istanbul ignore next */ null;
    } catch (e) {
        /* istanbul ignore next */
        return null;
    }
})();

// Internal alias of or polyfull for Buffer.from.
util._Buffer_from = null;

// Internal alias of or polyfill for Buffer.allocUnsafe.
util._Buffer_allocUnsafe = null;

/**
 * Creates a new buffer of whatever type supported by the environment.
 * @param {number|number[]} [sizeOrArray=0] Buffer size or number array
 * @returns {Uint8Array|Buffer} Buffer
 */
util.newBuffer = function newBuffer(sizeOrArray) {
    /* istanbul ignore next */
    return typeof sizeOrArray === "number"
        ? util.Buffer
            ? util._Buffer_allocUnsafe(sizeOrArray)
            : new util.Array(sizeOrArray)
        : util.Buffer
            ? util._Buffer_from(sizeOrArray)
            : typeof Uint8Array === "undefined"
                ? sizeOrArray
                : new Uint8Array(sizeOrArray);
};

/**
 * Array implementation used in the browser. `Uint8Array` if supported, otherwise `Array`.
 * @type {Constructor<Uint8Array>}
 */
util.Array = typeof Uint8Array !== "undefined" ? Uint8Array /* istanbul ignore next */ : Array;

/**
 * Any compatible Long instance.
 * This is a minimal stand-alone definition of a Long instance. The actual type is that exported by long.js.
 * @interface Long
 * @property {number} low Low bits
 * @property {number} high High bits
 * @property {boolean} unsigned Whether unsigned or not
 */

/**
 * Long.js's Long class if available.
 * @type {Constructor<Long>}
 */
util.Long = /* istanbul ignore next */ util.global.dcodeIO && /* istanbul ignore next */ util.global.dcodeIO.Long
         || /* istanbul ignore next */ util.global.Long
         || util.inquire("long");

/**
 * Regular expression used to verify 2 bit (`bool`) map keys.
 * @type {RegExp}
 * @const
 */
util.key2Re = /^true|false|0|1$/;

/**
 * Regular expression used to verify 32 bit (`int32` etc.) map keys.
 * @type {RegExp}
 * @const
 */
util.key32Re = /^-?(?:0|[1-9][0-9]*)$/;

/**
 * Regular expression used to verify 64 bit (`int64` etc.) map keys.
 * @type {RegExp}
 * @const
 */
util.key64Re = /^(?:[\\x00-\\xff]{8}|-?(?:0|[1-9][0-9]*))$/;

/**
 * Converts a number or long to an 8 characters long hash string.
 * @param {Long|number} value Value to convert
 * @returns {string} Hash
 */
util.longToHash = function longToHash(value) {
    return value
        ? util.LongBits.from(value).toHash()
        : util.LongBits.zeroHash;
};

/**
 * Converts an 8 characters long hash string to a long or number.
 * @param {string} hash Hash
 * @param {boolean} [unsigned=false] Whether unsigned or not
 * @returns {Long|number} Original value
 */
util.longFromHash = function longFromHash(hash, unsigned) {
    var bits = util.LongBits.fromHash(hash);
    if (util.Long)
        return util.Long.fromBits(bits.lo, bits.hi, unsigned);
    return bits.toNumber(Boolean(unsigned));
};

/**
 * Merges the properties of the source object into the destination object.
 * @memberof util
 * @param {Object.<string,*>} dst Destination object
 * @param {Object.<string,*>} src Source object
 * @param {boolean} [ifNotSet=false] Merges only if the key is not already set
 * @returns {Object.<string,*>} Destination object
 */
function merge(dst, src, ifNotSet) { // used by converters
    for (var keys = Object.keys(src), i = 0; i < keys.length; ++i)
        if (dst[keys[i]] === undefined || !ifNotSet)
            dst[keys[i]] = src[keys[i]];
    return dst;
}

util.merge = merge;

/**
 * Converts the first character of a string to lower case.
 * @param {string} str String to convert
 * @returns {string} Converted string
 */
util.lcFirst = function lcFirst(str) {
    return str.charAt(0).toLowerCase() + str.substring(1);
};

/**
 * Creates a custom error constructor.
 * @memberof util
 * @param {string} name Error name
 * @returns {Constructor<Error>} Custom error constructor
 */
function newError(name) {

    function CustomError(message, properties) {

        if (!(this instanceof CustomError))
            return new CustomError(message, properties);

        // Error.call(this, message);
        // ^ just returns a new error instance because the ctor can be called as a function

        Object.defineProperty(this, "message", { get: function() { return message; } });

        /* istanbul ignore next */
        if (Error.captureStackTrace) // node
            Error.captureStackTrace(this, CustomError);
        else
            Object.defineProperty(this, "stack", { value: new Error().stack || "" });

        if (properties)
            merge(this, properties);
    }

    (CustomError.prototype = Object.create(Error.prototype)).constructor = CustomError;

    Object.defineProperty(CustomError.prototype, "name", { get: function() { return name; } });

    CustomError.prototype.toString = function toString() {
        return this.name + ": " + this.message;
    };

    return CustomError;
}

util.newError = newError;

/**
 * Constructs a new protocol error.
 * @classdesc Error subclass indicating a protocol specifc error.
 * @memberof util
 * @extends Error
 * @template T extends Message<T>
 * @constructor
 * @param {string} message Error message
 * @param {Object.<string,*>} [properties] Additional properties
 * @example
 * try {
 *     MyMessage.decode(someBuffer); // throws if required fields are missing
 * } catch (e) {
 *     if (e instanceof ProtocolError && e.instance)
 *         console.log("decoded so far: " + JSON.stringify(e.instance));
 * }
 */
util.ProtocolError = newError("ProtocolError");

/**
 * So far decoded message instance.
 * @name util.ProtocolError#instance
 * @type {Message<T>}
 */

/**
 * A OneOf getter as returned by {@link util.oneOfGetter}.
 * @typedef OneOfGetter
 * @type {function}
 * @returns {string|undefined} Set field name, if any
 */

/**
 * Builds a getter for a oneof's present field name.
 * @param {string[]} fieldNames Field names
 * @returns {OneOfGetter} Unbound getter
 */
util.oneOfGetter = function getOneOf(fieldNames) {
    var fieldMap = {};
    for (var i = 0; i < fieldNames.length; ++i)
        fieldMap[fieldNames[i]] = 1;

    /**
     * @returns {string|undefined} Set field name, if any
     * @this Object
     * @ignore
     */
    return function() { // eslint-disable-line consistent-return
        for (var keys = Object.keys(this), i = keys.length - 1; i > -1; --i)
            if (fieldMap[keys[i]] === 1 && this[keys[i]] !== undefined && this[keys[i]] !== null)
                return keys[i];
    };
};

/**
 * A OneOf setter as returned by {@link util.oneOfSetter}.
 * @typedef OneOfSetter
 * @type {function}
 * @param {string|undefined} value Field name
 * @returns {undefined}
 */

/**
 * Builds a setter for a oneof's present field name.
 * @param {string[]} fieldNames Field names
 * @returns {OneOfSetter} Unbound setter
 */
util.oneOfSetter = function setOneOf(fieldNames) {

    /**
     * @param {string} name Field name
     * @returns {undefined}
     * @this Object
     * @ignore
     */
    return function(name) {
        for (var i = 0; i < fieldNames.length; ++i)
            if (fieldNames[i] !== name)
                delete this[fieldNames[i]];
    };
};

/**
 * Default conversion options used for {@link Message#toJSON} implementations.
 *
 * These options are close to proto3's JSON mapping with the exception that internal types like Any are handled just like messages. More precisely:
 *
 * - Longs become strings
 * - Enums become string keys
 * - Bytes become base64 encoded strings
 * - (Sub-)Messages become plain objects
 * - Maps become plain objects with all string keys
 * - Repeated fields become arrays
 * - NaN and Infinity for float and double fields become strings
 *
 * @type {IConversionOptions}
 * @see https://developers.google.com/protocol-buffers/docs/proto3?hl=en#json
 */
util.toJSONOptions = {
    longs: String,
    enums: String,
    bytes: String,
    json: true
};

// Sets up buffer utility according to the environment (called in index-minimal)
util._configure = function() {
    var Buffer = util.Buffer;
    /* istanbul ignore if */
    if (!Buffer) {
        util._Buffer_from = util._Buffer_allocUnsafe = null;
        return;
    }
    // because node 4.x buffers are incompatible & immutable
    // see: https://github.com/dcodeIO/protobuf.js/pull/665
    util._Buffer_from = Buffer.from !== Uint8Array.from && Buffer.from ||
        /* istanbul ignore next */
        function Buffer_from(value, encoding) {
            return new Buffer(value, encoding);
        };
    util._Buffer_allocUnsafe = Buffer.allocUnsafe ||
        /* istanbul ignore next */
        function Buffer_allocUnsafe(size) {
            return new Buffer(size);
        };
};

},{"@protobufjs/aspromise":"oU4k","@protobufjs/base64":"SASd","@protobufjs/eventemitter":"wJQW","@protobufjs/float":"SGHJ","@protobufjs/inquire":"XRF3","@protobufjs/utf8":"nie5","@protobufjs/pool":"YX4y","./longbits":"Ty7D","buffer":"XyCw"}],"DEsF":[function(require,module,exports) {
"use strict";
module.exports = Writer;

var util      = require("./util/minimal");

var BufferWriter; // cyclic

var LongBits  = util.LongBits,
    base64    = util.base64,
    utf8      = util.utf8;

/**
 * Constructs a new writer operation instance.
 * @classdesc Scheduled writer operation.
 * @constructor
 * @param {function(*, Uint8Array, number)} fn Function to call
 * @param {number} len Value byte length
 * @param {*} val Value to write
 * @ignore
 */
function Op(fn, len, val) {

    /**
     * Function to call.
     * @type {function(Uint8Array, number, *)}
     */
    this.fn = fn;

    /**
     * Value byte length.
     * @type {number}
     */
    this.len = len;

    /**
     * Next operation.
     * @type {Writer.Op|undefined}
     */
    this.next = undefined;

    /**
     * Value to write.
     * @type {*}
     */
    this.val = val; // type varies
}

/* istanbul ignore next */
function noop() {} // eslint-disable-line no-empty-function

/**
 * Constructs a new writer state instance.
 * @classdesc Copied writer state.
 * @memberof Writer
 * @constructor
 * @param {Writer} writer Writer to copy state from
 * @ignore
 */
function State(writer) {

    /**
     * Current head.
     * @type {Writer.Op}
     */
    this.head = writer.head;

    /**
     * Current tail.
     * @type {Writer.Op}
     */
    this.tail = writer.tail;

    /**
     * Current buffer length.
     * @type {number}
     */
    this.len = writer.len;

    /**
     * Next state.
     * @type {State|null}
     */
    this.next = writer.states;
}

/**
 * Constructs a new writer instance.
 * @classdesc Wire format writer using `Uint8Array` if available, otherwise `Array`.
 * @constructor
 */
function Writer() {

    /**
     * Current length.
     * @type {number}
     */
    this.len = 0;

    /**
     * Operations head.
     * @type {Object}
     */
    this.head = new Op(noop, 0, 0);

    /**
     * Operations tail
     * @type {Object}
     */
    this.tail = this.head;

    /**
     * Linked forked states.
     * @type {Object|null}
     */
    this.states = null;

    // When a value is written, the writer calculates its byte length and puts it into a linked
    // list of operations to perform when finish() is called. This both allows us to allocate
    // buffers of the exact required size and reduces the amount of work we have to do compared
    // to first calculating over objects and then encoding over objects. In our case, the encoding
    // part is just a linked list walk calling operations with already prepared values.
}

var create = function create() {
    return util.Buffer
        ? function create_buffer_setup() {
            return (Writer.create = function create_buffer() {
                return new BufferWriter();
            })();
        }
        /* istanbul ignore next */
        : function create_array() {
            return new Writer();
        };
};

/**
 * Creates a new writer.
 * @function
 * @returns {BufferWriter|Writer} A {@link BufferWriter} when Buffers are supported, otherwise a {@link Writer}
 */
Writer.create = create();

/**
 * Allocates a buffer of the specified size.
 * @param {number} size Buffer size
 * @returns {Uint8Array} Buffer
 */
Writer.alloc = function alloc(size) {
    return new util.Array(size);
};

// Use Uint8Array buffer pool in the browser, just like node does with buffers
/* istanbul ignore else */
if (util.Array !== Array)
    Writer.alloc = util.pool(Writer.alloc, util.Array.prototype.subarray);

/**
 * Pushes a new operation to the queue.
 * @param {function(Uint8Array, number, *)} fn Function to call
 * @param {number} len Value byte length
 * @param {number} val Value to write
 * @returns {Writer} `this`
 * @private
 */
Writer.prototype._push = function push(fn, len, val) {
    this.tail = this.tail.next = new Op(fn, len, val);
    this.len += len;
    return this;
};

function writeByte(val, buf, pos) {
    buf[pos] = val & 255;
}

function writeVarint32(val, buf, pos) {
    while (val > 127) {
        buf[pos++] = val & 127 | 128;
        val >>>= 7;
    }
    buf[pos] = val;
}

/**
 * Constructs a new varint writer operation instance.
 * @classdesc Scheduled varint writer operation.
 * @extends Op
 * @constructor
 * @param {number} len Value byte length
 * @param {number} val Value to write
 * @ignore
 */
function VarintOp(len, val) {
    this.len = len;
    this.next = undefined;
    this.val = val;
}

VarintOp.prototype = Object.create(Op.prototype);
VarintOp.prototype.fn = writeVarint32;

/**
 * Writes an unsigned 32 bit value as a varint.
 * @param {number} value Value to write
 * @returns {Writer} `this`
 */
Writer.prototype.uint32 = function write_uint32(value) {
    // here, the call to this.push has been inlined and a varint specific Op subclass is used.
    // uint32 is by far the most frequently used operation and benefits significantly from this.
    this.len += (this.tail = this.tail.next = new VarintOp(
        (value = value >>> 0)
                < 128       ? 1
        : value < 16384     ? 2
        : value < 2097152   ? 3
        : value < 268435456 ? 4
        :                     5,
    value)).len;
    return this;
};

/**
 * Writes a signed 32 bit value as a varint.
 * @function
 * @param {number} value Value to write
 * @returns {Writer} `this`
 */
Writer.prototype.int32 = function write_int32(value) {
    return value < 0
        ? this._push(writeVarint64, 10, LongBits.fromNumber(value)) // 10 bytes per spec
        : this.uint32(value);
};

/**
 * Writes a 32 bit value as a varint, zig-zag encoded.
 * @param {number} value Value to write
 * @returns {Writer} `this`
 */
Writer.prototype.sint32 = function write_sint32(value) {
    return this.uint32((value << 1 ^ value >> 31) >>> 0);
};

function writeVarint64(val, buf, pos) {
    while (val.hi) {
        buf[pos++] = val.lo & 127 | 128;
        val.lo = (val.lo >>> 7 | val.hi << 25) >>> 0;
        val.hi >>>= 7;
    }
    while (val.lo > 127) {
        buf[pos++] = val.lo & 127 | 128;
        val.lo = val.lo >>> 7;
    }
    buf[pos++] = val.lo;
}

/**
 * Writes an unsigned 64 bit value as a varint.
 * @param {Long|number|string} value Value to write
 * @returns {Writer} `this`
 * @throws {TypeError} If `value` is a string and no long library is present.
 */
Writer.prototype.uint64 = function write_uint64(value) {
    var bits = LongBits.from(value);
    return this._push(writeVarint64, bits.length(), bits);
};

/**
 * Writes a signed 64 bit value as a varint.
 * @function
 * @param {Long|number|string} value Value to write
 * @returns {Writer} `this`
 * @throws {TypeError} If `value` is a string and no long library is present.
 */
Writer.prototype.int64 = Writer.prototype.uint64;

/**
 * Writes a signed 64 bit value as a varint, zig-zag encoded.
 * @param {Long|number|string} value Value to write
 * @returns {Writer} `this`
 * @throws {TypeError} If `value` is a string and no long library is present.
 */
Writer.prototype.sint64 = function write_sint64(value) {
    var bits = LongBits.from(value).zzEncode();
    return this._push(writeVarint64, bits.length(), bits);
};

/**
 * Writes a boolish value as a varint.
 * @param {boolean} value Value to write
 * @returns {Writer} `this`
 */
Writer.prototype.bool = function write_bool(value) {
    return this._push(writeByte, 1, value ? 1 : 0);
};

function writeFixed32(val, buf, pos) {
    buf[pos    ] =  val         & 255;
    buf[pos + 1] =  val >>> 8   & 255;
    buf[pos + 2] =  val >>> 16  & 255;
    buf[pos + 3] =  val >>> 24;
}

/**
 * Writes an unsigned 32 bit value as fixed 32 bits.
 * @param {number} value Value to write
 * @returns {Writer} `this`
 */
Writer.prototype.fixed32 = function write_fixed32(value) {
    return this._push(writeFixed32, 4, value >>> 0);
};

/**
 * Writes a signed 32 bit value as fixed 32 bits.
 * @function
 * @param {number} value Value to write
 * @returns {Writer} `this`
 */
Writer.prototype.sfixed32 = Writer.prototype.fixed32;

/**
 * Writes an unsigned 64 bit value as fixed 64 bits.
 * @param {Long|number|string} value Value to write
 * @returns {Writer} `this`
 * @throws {TypeError} If `value` is a string and no long library is present.
 */
Writer.prototype.fixed64 = function write_fixed64(value) {
    var bits = LongBits.from(value);
    return this._push(writeFixed32, 4, bits.lo)._push(writeFixed32, 4, bits.hi);
};

/**
 * Writes a signed 64 bit value as fixed 64 bits.
 * @function
 * @param {Long|number|string} value Value to write
 * @returns {Writer} `this`
 * @throws {TypeError} If `value` is a string and no long library is present.
 */
Writer.prototype.sfixed64 = Writer.prototype.fixed64;

/**
 * Writes a float (32 bit).
 * @function
 * @param {number} value Value to write
 * @returns {Writer} `this`
 */
Writer.prototype.float = function write_float(value) {
    return this._push(util.float.writeFloatLE, 4, value);
};

/**
 * Writes a double (64 bit float).
 * @function
 * @param {number} value Value to write
 * @returns {Writer} `this`
 */
Writer.prototype.double = function write_double(value) {
    return this._push(util.float.writeDoubleLE, 8, value);
};

var writeBytes = util.Array.prototype.set
    ? function writeBytes_set(val, buf, pos) {
        buf.set(val, pos); // also works for plain array values
    }
    /* istanbul ignore next */
    : function writeBytes_for(val, buf, pos) {
        for (var i = 0; i < val.length; ++i)
            buf[pos + i] = val[i];
    };

/**
 * Writes a sequence of bytes.
 * @param {Uint8Array|string} value Buffer or base64 encoded string to write
 * @returns {Writer} `this`
 */
Writer.prototype.bytes = function write_bytes(value) {
    var len = value.length >>> 0;
    if (!len)
        return this._push(writeByte, 1, 0);
    if (util.isString(value)) {
        var buf = Writer.alloc(len = base64.length(value));
        base64.decode(value, buf, 0);
        value = buf;
    }
    return this.uint32(len)._push(writeBytes, len, value);
};

/**
 * Writes a string.
 * @param {string} value Value to write
 * @returns {Writer} `this`
 */
Writer.prototype.string = function write_string(value) {
    var len = utf8.length(value);
    return len
        ? this.uint32(len)._push(utf8.write, len, value)
        : this._push(writeByte, 1, 0);
};

/**
 * Forks this writer's state by pushing it to a stack.
 * Calling {@link Writer#reset|reset} or {@link Writer#ldelim|ldelim} resets the writer to the previous state.
 * @returns {Writer} `this`
 */
Writer.prototype.fork = function fork() {
    this.states = new State(this);
    this.head = this.tail = new Op(noop, 0, 0);
    this.len = 0;
    return this;
};

/**
 * Resets this instance to the last state.
 * @returns {Writer} `this`
 */
Writer.prototype.reset = function reset() {
    if (this.states) {
        this.head   = this.states.head;
        this.tail   = this.states.tail;
        this.len    = this.states.len;
        this.states = this.states.next;
    } else {
        this.head = this.tail = new Op(noop, 0, 0);
        this.len  = 0;
    }
    return this;
};

/**
 * Resets to the last state and appends the fork state's current write length as a varint followed by its operations.
 * @returns {Writer} `this`
 */
Writer.prototype.ldelim = function ldelim() {
    var head = this.head,
        tail = this.tail,
        len  = this.len;
    this.reset().uint32(len);
    if (len) {
        this.tail.next = head.next; // skip noop
        this.tail = tail;
        this.len += len;
    }
    return this;
};

/**
 * Finishes the write operation.
 * @returns {Uint8Array} Finished buffer
 */
Writer.prototype.finish = function finish() {
    var head = this.head.next, // skip noop
        buf  = this.constructor.alloc(this.len),
        pos  = 0;
    while (head) {
        head.fn(head.val, buf, pos);
        pos += head.len;
        head = head.next;
    }
    // this.head = this.tail = null;
    return buf;
};

Writer._configure = function(BufferWriter_) {
    BufferWriter = BufferWriter_;
    Writer.create = create();
    BufferWriter._configure();
};

},{"./util/minimal":"KgKa"}],"BjCp":[function(require,module,exports) {
"use strict";
module.exports = BufferWriter;

// extends Writer
var Writer = require("./writer");
(BufferWriter.prototype = Object.create(Writer.prototype)).constructor = BufferWriter;

var util = require("./util/minimal");

/**
 * Constructs a new buffer writer instance.
 * @classdesc Wire format writer using node buffers.
 * @extends Writer
 * @constructor
 */
function BufferWriter() {
    Writer.call(this);
}

BufferWriter._configure = function () {
    /**
     * Allocates a buffer of the specified size.
     * @function
     * @param {number} size Buffer size
     * @returns {Buffer} Buffer
     */
    BufferWriter.alloc = util._Buffer_allocUnsafe;

    BufferWriter.writeBytesBuffer = util.Buffer && util.Buffer.prototype instanceof Uint8Array && util.Buffer.prototype.set.name === "set"
        ? function writeBytesBuffer_set(val, buf, pos) {
          buf.set(val, pos); // faster than copy (requires node >= 4 where Buffers extend Uint8Array and set is properly inherited)
          // also works for plain array values
        }
        /* istanbul ignore next */
        : function writeBytesBuffer_copy(val, buf, pos) {
          if (val.copy) // Buffer values
            val.copy(buf, pos, 0, val.length);
          else for (var i = 0; i < val.length;) // plain array values
            buf[pos++] = val[i++];
        };
};


/**
 * @override
 */
BufferWriter.prototype.bytes = function write_bytes_buffer(value) {
    if (util.isString(value))
        value = util._Buffer_from(value, "base64");
    var len = value.length >>> 0;
    this.uint32(len);
    if (len)
        this._push(BufferWriter.writeBytesBuffer, len, value);
    return this;
};

function writeStringBuffer(val, buf, pos) {
    if (val.length < 40) // plain js is faster for short strings (probably due to redundant assertions)
        util.utf8.write(val, buf, pos);
    else if (buf.utf8Write)
        buf.utf8Write(val, pos);
    else
        buf.write(val, pos);
}

/**
 * @override
 */
BufferWriter.prototype.string = function write_string_buffer(value) {
    var len = util.Buffer.byteLength(value);
    this.uint32(len);
    if (len)
        this._push(writeStringBuffer, len, value);
    return this;
};


/**
 * Finishes the write operation.
 * @name BufferWriter#finish
 * @function
 * @returns {Buffer} Finished buffer
 */

BufferWriter._configure();

},{"./writer":"DEsF","./util/minimal":"KgKa"}],"z4LV":[function(require,module,exports) {
"use strict";
module.exports = Reader;

var util      = require("./util/minimal");

var BufferReader; // cyclic

var LongBits  = util.LongBits,
    utf8      = util.utf8;

/* istanbul ignore next */
function indexOutOfRange(reader, writeLength) {
    return RangeError("index out of range: " + reader.pos + " + " + (writeLength || 1) + " > " + reader.len);
}

/**
 * Constructs a new reader instance using the specified buffer.
 * @classdesc Wire format reader using `Uint8Array` if available, otherwise `Array`.
 * @constructor
 * @param {Uint8Array} buffer Buffer to read from
 */
function Reader(buffer) {

    /**
     * Read buffer.
     * @type {Uint8Array}
     */
    this.buf = buffer;

    /**
     * Read buffer position.
     * @type {number}
     */
    this.pos = 0;

    /**
     * Read buffer length.
     * @type {number}
     */
    this.len = buffer.length;
}

var create_array = typeof Uint8Array !== "undefined"
    ? function create_typed_array(buffer) {
        if (buffer instanceof Uint8Array || Array.isArray(buffer))
            return new Reader(buffer);
        throw Error("illegal buffer");
    }
    /* istanbul ignore next */
    : function create_array(buffer) {
        if (Array.isArray(buffer))
            return new Reader(buffer);
        throw Error("illegal buffer");
    };

var create = function create() {
    return util.Buffer
        ? function create_buffer_setup(buffer) {
            return (Reader.create = function create_buffer(buffer) {
                return util.Buffer.isBuffer(buffer)
                    ? new BufferReader(buffer)
                    /* istanbul ignore next */
                    : create_array(buffer);
            })(buffer);
        }
        /* istanbul ignore next */
        : create_array;
};

/**
 * Creates a new reader using the specified buffer.
 * @function
 * @param {Uint8Array|Buffer} buffer Buffer to read from
 * @returns {Reader|BufferReader} A {@link BufferReader} if `buffer` is a Buffer, otherwise a {@link Reader}
 * @throws {Error} If `buffer` is not a valid buffer
 */
Reader.create = create();

Reader.prototype._slice = util.Array.prototype.subarray || /* istanbul ignore next */ util.Array.prototype.slice;

/**
 * Reads a varint as an unsigned 32 bit value.
 * @function
 * @returns {number} Value read
 */
Reader.prototype.uint32 = (function read_uint32_setup() {
    var value = 4294967295; // optimizer type-hint, tends to deopt otherwise (?!)
    return function read_uint32() {
        value = (         this.buf[this.pos] & 127       ) >>> 0; if (this.buf[this.pos++] < 128) return value;
        value = (value | (this.buf[this.pos] & 127) <<  7) >>> 0; if (this.buf[this.pos++] < 128) return value;
        value = (value | (this.buf[this.pos] & 127) << 14) >>> 0; if (this.buf[this.pos++] < 128) return value;
        value = (value | (this.buf[this.pos] & 127) << 21) >>> 0; if (this.buf[this.pos++] < 128) return value;
        value = (value | (this.buf[this.pos] &  15) << 28) >>> 0; if (this.buf[this.pos++] < 128) return value;

        /* istanbul ignore if */
        if ((this.pos += 5) > this.len) {
            this.pos = this.len;
            throw indexOutOfRange(this, 10);
        }
        return value;
    };
})();

/**
 * Reads a varint as a signed 32 bit value.
 * @returns {number} Value read
 */
Reader.prototype.int32 = function read_int32() {
    return this.uint32() | 0;
};

/**
 * Reads a zig-zag encoded varint as a signed 32 bit value.
 * @returns {number} Value read
 */
Reader.prototype.sint32 = function read_sint32() {
    var value = this.uint32();
    return value >>> 1 ^ -(value & 1) | 0;
};

/* eslint-disable no-invalid-this */

function readLongVarint() {
    // tends to deopt with local vars for octet etc.
    var bits = new LongBits(0, 0);
    var i = 0;
    if (this.len - this.pos > 4) { // fast route (lo)
        for (; i < 4; ++i) {
            // 1st..4th
            bits.lo = (bits.lo | (this.buf[this.pos] & 127) << i * 7) >>> 0;
            if (this.buf[this.pos++] < 128)
                return bits;
        }
        // 5th
        bits.lo = (bits.lo | (this.buf[this.pos] & 127) << 28) >>> 0;
        bits.hi = (bits.hi | (this.buf[this.pos] & 127) >>  4) >>> 0;
        if (this.buf[this.pos++] < 128)
            return bits;
        i = 0;
    } else {
        for (; i < 3; ++i) {
            /* istanbul ignore if */
            if (this.pos >= this.len)
                throw indexOutOfRange(this);
            // 1st..3th
            bits.lo = (bits.lo | (this.buf[this.pos] & 127) << i * 7) >>> 0;
            if (this.buf[this.pos++] < 128)
                return bits;
        }
        // 4th
        bits.lo = (bits.lo | (this.buf[this.pos++] & 127) << i * 7) >>> 0;
        return bits;
    }
    if (this.len - this.pos > 4) { // fast route (hi)
        for (; i < 5; ++i) {
            // 6th..10th
            bits.hi = (bits.hi | (this.buf[this.pos] & 127) << i * 7 + 3) >>> 0;
            if (this.buf[this.pos++] < 128)
                return bits;
        }
    } else {
        for (; i < 5; ++i) {
            /* istanbul ignore if */
            if (this.pos >= this.len)
                throw indexOutOfRange(this);
            // 6th..10th
            bits.hi = (bits.hi | (this.buf[this.pos] & 127) << i * 7 + 3) >>> 0;
            if (this.buf[this.pos++] < 128)
                return bits;
        }
    }
    /* istanbul ignore next */
    throw Error("invalid varint encoding");
}

/* eslint-enable no-invalid-this */

/**
 * Reads a varint as a signed 64 bit value.
 * @name Reader#int64
 * @function
 * @returns {Long} Value read
 */

/**
 * Reads a varint as an unsigned 64 bit value.
 * @name Reader#uint64
 * @function
 * @returns {Long} Value read
 */

/**
 * Reads a zig-zag encoded varint as a signed 64 bit value.
 * @name Reader#sint64
 * @function
 * @returns {Long} Value read
 */

/**
 * Reads a varint as a boolean.
 * @returns {boolean} Value read
 */
Reader.prototype.bool = function read_bool() {
    return this.uint32() !== 0;
};

function readFixed32_end(buf, end) { // note that this uses `end`, not `pos`
    return (buf[end - 4]
          | buf[end - 3] << 8
          | buf[end - 2] << 16
          | buf[end - 1] << 24) >>> 0;
}

/**
 * Reads fixed 32 bits as an unsigned 32 bit integer.
 * @returns {number} Value read
 */
Reader.prototype.fixed32 = function read_fixed32() {

    /* istanbul ignore if */
    if (this.pos + 4 > this.len)
        throw indexOutOfRange(this, 4);

    return readFixed32_end(this.buf, this.pos += 4);
};

/**
 * Reads fixed 32 bits as a signed 32 bit integer.
 * @returns {number} Value read
 */
Reader.prototype.sfixed32 = function read_sfixed32() {

    /* istanbul ignore if */
    if (this.pos + 4 > this.len)
        throw indexOutOfRange(this, 4);

    return readFixed32_end(this.buf, this.pos += 4) | 0;
};

/* eslint-disable no-invalid-this */

function readFixed64(/* this: Reader */) {

    /* istanbul ignore if */
    if (this.pos + 8 > this.len)
        throw indexOutOfRange(this, 8);

    return new LongBits(readFixed32_end(this.buf, this.pos += 4), readFixed32_end(this.buf, this.pos += 4));
}

/* eslint-enable no-invalid-this */

/**
 * Reads fixed 64 bits.
 * @name Reader#fixed64
 * @function
 * @returns {Long} Value read
 */

/**
 * Reads zig-zag encoded fixed 64 bits.
 * @name Reader#sfixed64
 * @function
 * @returns {Long} Value read
 */

/**
 * Reads a float (32 bit) as a number.
 * @function
 * @returns {number} Value read
 */
Reader.prototype.float = function read_float() {

    /* istanbul ignore if */
    if (this.pos + 4 > this.len)
        throw indexOutOfRange(this, 4);

    var value = util.float.readFloatLE(this.buf, this.pos);
    this.pos += 4;
    return value;
};

/**
 * Reads a double (64 bit float) as a number.
 * @function
 * @returns {number} Value read
 */
Reader.prototype.double = function read_double() {

    /* istanbul ignore if */
    if (this.pos + 8 > this.len)
        throw indexOutOfRange(this, 4);

    var value = util.float.readDoubleLE(this.buf, this.pos);
    this.pos += 8;
    return value;
};

/**
 * Reads a sequence of bytes preceeded by its length as a varint.
 * @returns {Uint8Array} Value read
 */
Reader.prototype.bytes = function read_bytes() {
    var length = this.uint32(),
        start  = this.pos,
        end    = this.pos + length;

    /* istanbul ignore if */
    if (end > this.len)
        throw indexOutOfRange(this, length);

    this.pos += length;
    if (Array.isArray(this.buf)) // plain array
        return this.buf.slice(start, end);
    return start === end // fix for IE 10/Win8 and others' subarray returning array of size 1
        ? new this.buf.constructor(0)
        : this._slice.call(this.buf, start, end);
};

/**
 * Reads a string preceeded by its byte length as a varint.
 * @returns {string} Value read
 */
Reader.prototype.string = function read_string() {
    var bytes = this.bytes();
    return utf8.read(bytes, 0, bytes.length);
};

/**
 * Skips the specified number of bytes if specified, otherwise skips a varint.
 * @param {number} [length] Length if known, otherwise a varint is assumed
 * @returns {Reader} `this`
 */
Reader.prototype.skip = function skip(length) {
    if (typeof length === "number") {
        /* istanbul ignore if */
        if (this.pos + length > this.len)
            throw indexOutOfRange(this, length);
        this.pos += length;
    } else {
        do {
            /* istanbul ignore if */
            if (this.pos >= this.len)
                throw indexOutOfRange(this);
        } while (this.buf[this.pos++] & 128);
    }
    return this;
};

/**
 * Skips the next element of the specified wire type.
 * @param {number} wireType Wire type received
 * @returns {Reader} `this`
 */
Reader.prototype.skipType = function(wireType) {
    switch (wireType) {
        case 0:
            this.skip();
            break;
        case 1:
            this.skip(8);
            break;
        case 2:
            this.skip(this.uint32());
            break;
        case 3:
            while ((wireType = this.uint32() & 7) !== 4) {
                this.skipType(wireType);
            }
            break;
        case 5:
            this.skip(4);
            break;

        /* istanbul ignore next */
        default:
            throw Error("invalid wire type " + wireType + " at offset " + this.pos);
    }
    return this;
};

Reader._configure = function(BufferReader_) {
    BufferReader = BufferReader_;
    Reader.create = create();
    BufferReader._configure();

    var fn = util.Long ? "toLong" : /* istanbul ignore next */ "toNumber";
    util.merge(Reader.prototype, {

        int64: function read_int64() {
            return readLongVarint.call(this)[fn](false);
        },

        uint64: function read_uint64() {
            return readLongVarint.call(this)[fn](true);
        },

        sint64: function read_sint64() {
            return readLongVarint.call(this).zzDecode()[fn](false);
        },

        fixed64: function read_fixed64() {
            return readFixed64.call(this)[fn](true);
        },

        sfixed64: function read_sfixed64() {
            return readFixed64.call(this)[fn](false);
        }

    });
};

},{"./util/minimal":"KgKa"}],"Rkr2":[function(require,module,exports) {
"use strict";
module.exports = BufferReader;

// extends Reader
var Reader = require("./reader");
(BufferReader.prototype = Object.create(Reader.prototype)).constructor = BufferReader;

var util = require("./util/minimal");

/**
 * Constructs a new buffer reader instance.
 * @classdesc Wire format reader using node buffers.
 * @extends Reader
 * @constructor
 * @param {Buffer} buffer Buffer to read from
 */
function BufferReader(buffer) {
    Reader.call(this, buffer);

    /**
     * Read buffer.
     * @name BufferReader#buf
     * @type {Buffer}
     */
}

BufferReader._configure = function () {
    /* istanbul ignore else */
    if (util.Buffer)
        BufferReader.prototype._slice = util.Buffer.prototype.slice;
};


/**
 * @override
 */
BufferReader.prototype.string = function read_string_buffer() {
    var len = this.uint32(); // modifies pos
    return this.buf.utf8Slice
        ? this.buf.utf8Slice(this.pos, this.pos = Math.min(this.pos + len, this.len))
        : this.buf.toString("utf-8", this.pos, this.pos = Math.min(this.pos + len, this.len));
};

/**
 * Reads a sequence of bytes preceeded by its length as a varint.
 * @name BufferReader#bytes
 * @function
 * @returns {Buffer} Value read
 */

BufferReader._configure();

},{"./reader":"z4LV","./util/minimal":"KgKa"}],"eoks":[function(require,module,exports) {
"use strict";
module.exports = Service;

var util = require("../util/minimal");

// Extends EventEmitter
(Service.prototype = Object.create(util.EventEmitter.prototype)).constructor = Service;

/**
 * A service method callback as used by {@link rpc.ServiceMethod|ServiceMethod}.
 *
 * Differs from {@link RPCImplCallback} in that it is an actual callback of a service method which may not return `response = null`.
 * @typedef rpc.ServiceMethodCallback
 * @template TRes extends Message<TRes>
 * @type {function}
 * @param {Error|null} error Error, if any
 * @param {TRes} [response] Response message
 * @returns {undefined}
 */

/**
 * A service method part of a {@link rpc.Service} as created by {@link Service.create}.
 * @typedef rpc.ServiceMethod
 * @template TReq extends Message<TReq>
 * @template TRes extends Message<TRes>
 * @type {function}
 * @param {TReq|Properties<TReq>} request Request message or plain object
 * @param {rpc.ServiceMethodCallback<TRes>} [callback] Node-style callback called with the error, if any, and the response message
 * @returns {Promise<Message<TRes>>} Promise if `callback` has been omitted, otherwise `undefined`
 */

/**
 * Constructs a new RPC service instance.
 * @classdesc An RPC service as returned by {@link Service#create}.
 * @exports rpc.Service
 * @extends util.EventEmitter
 * @constructor
 * @param {RPCImpl} rpcImpl RPC implementation
 * @param {boolean} [requestDelimited=false] Whether requests are length-delimited
 * @param {boolean} [responseDelimited=false] Whether responses are length-delimited
 */
function Service(rpcImpl, requestDelimited, responseDelimited) {

    if (typeof rpcImpl !== "function")
        throw TypeError("rpcImpl must be a function");

    util.EventEmitter.call(this);

    /**
     * RPC implementation. Becomes `null` once the service is ended.
     * @type {RPCImpl|null}
     */
    this.rpcImpl = rpcImpl;

    /**
     * Whether requests are length-delimited.
     * @type {boolean}
     */
    this.requestDelimited = Boolean(requestDelimited);

    /**
     * Whether responses are length-delimited.
     * @type {boolean}
     */
    this.responseDelimited = Boolean(responseDelimited);
}

/**
 * Calls a service method through {@link rpc.Service#rpcImpl|rpcImpl}.
 * @param {Method|rpc.ServiceMethod<TReq,TRes>} method Reflected or static method
 * @param {Constructor<TReq>} requestCtor Request constructor
 * @param {Constructor<TRes>} responseCtor Response constructor
 * @param {TReq|Properties<TReq>} request Request message or plain object
 * @param {rpc.ServiceMethodCallback<TRes>} callback Service callback
 * @returns {undefined}
 * @template TReq extends Message<TReq>
 * @template TRes extends Message<TRes>
 */
Service.prototype.rpcCall = function rpcCall(method, requestCtor, responseCtor, request, callback) {

    if (!request)
        throw TypeError("request must be specified");

    var self = this;
    if (!callback)
        return util.asPromise(rpcCall, self, method, requestCtor, responseCtor, request);

    if (!self.rpcImpl) {
        setTimeout(function() { callback(Error("already ended")); }, 0);
        return undefined;
    }

    try {
        return self.rpcImpl(
            method,
            requestCtor[self.requestDelimited ? "encodeDelimited" : "encode"](request).finish(),
            function rpcCallback(err, response) {

                if (err) {
                    self.emit("error", err, method);
                    return callback(err);
                }

                if (response === null) {
                    self.end(/* endedByRPC */ true);
                    return undefined;
                }

                if (!(response instanceof responseCtor)) {
                    try {
                        response = responseCtor[self.responseDelimited ? "decodeDelimited" : "decode"](response);
                    } catch (err) {
                        self.emit("error", err, method);
                        return callback(err);
                    }
                }

                self.emit("data", response, method);
                return callback(null, response);
            }
        );
    } catch (err) {
        self.emit("error", err, method);
        setTimeout(function() { callback(err); }, 0);
        return undefined;
    }
};

/**
 * Ends this service and emits the `end` event.
 * @param {boolean} [endedByRPC=false] Whether the service has been ended by the RPC implementation.
 * @returns {rpc.Service} `this`
 */
Service.prototype.end = function end(endedByRPC) {
    if (this.rpcImpl) {
        if (!endedByRPC) // signal end to rpcImpl
            this.rpcImpl(null, null, null);
        this.rpcImpl = null;
        this.emit("end").off();
    }
    return this;
};

},{"../util/minimal":"KgKa"}],"ay75":[function(require,module,exports) {
"use strict";

/**
 * Streaming RPC helpers.
 * @namespace
 */
var rpc = exports;

/**
 * RPC implementation passed to {@link Service#create} performing a service request on network level, i.e. by utilizing http requests or websockets.
 * @typedef RPCImpl
 * @type {function}
 * @param {Method|rpc.ServiceMethod<Message<{}>,Message<{}>>} method Reflected or static method being called
 * @param {Uint8Array} requestData Request data
 * @param {RPCImplCallback} callback Callback function
 * @returns {undefined}
 * @example
 * function rpcImpl(method, requestData, callback) {
 *     if (protobuf.util.lcFirst(method.name) !== "myMethod") // compatible with static code
 *         throw Error("no such method");
 *     asynchronouslyObtainAResponse(requestData, function(err, responseData) {
 *         callback(err, responseData);
 *     });
 * }
 */

/**
 * Node-style callback as used by {@link RPCImpl}.
 * @typedef RPCImplCallback
 * @type {function}
 * @param {Error|null} error Error, if any, otherwise `null`
 * @param {Uint8Array|null} [response] Response data or `null` to signal end of stream, if there hasn't been an error
 * @returns {undefined}
 */

rpc.Service = require("./rpc/service");

},{"./rpc/service":"eoks"}],"Nr0F":[function(require,module,exports) {
"use strict";
module.exports = {};

/**
 * Named roots.
 * This is where pbjs stores generated structures (the option `-r, --root` specifies a name).
 * Can also be used manually to make roots available accross modules.
 * @name roots
 * @type {Object.<string,Root>}
 * @example
 * // pbjs -r myroot -o compiled.js ...
 *
 * // in another module:
 * require("./compiled.js");
 *
 * // in any subsequent module:
 * var root = protobuf.roots["myroot"];
 */

},{}],"qETn":[function(require,module,exports) {
"use strict";
var protobuf = exports;

/**
 * Build type, one of `"full"`, `"light"` or `"minimal"`.
 * @name build
 * @type {string}
 * @const
 */
protobuf.build = "minimal";

// Serialization
protobuf.Writer       = require("./writer");
protobuf.BufferWriter = require("./writer_buffer");
protobuf.Reader       = require("./reader");
protobuf.BufferReader = require("./reader_buffer");

// Utility
protobuf.util         = require("./util/minimal");
protobuf.rpc          = require("./rpc");
protobuf.roots        = require("./roots");
protobuf.configure    = configure;

/* istanbul ignore next */
/**
 * Reconfigures the library according to the environment.
 * @returns {undefined}
 */
function configure() {
    protobuf.util._configure();
    protobuf.Writer._configure(protobuf.BufferWriter);
    protobuf.Reader._configure(protobuf.BufferReader);
}

// Set up buffer utility according to the environment
configure();

},{"./writer":"DEsF","./writer_buffer":"BjCp","./reader":"z4LV","./reader_buffer":"Rkr2","./util/minimal":"KgKa","./rpc":"ay75","./roots":"Nr0F"}],"Myh2":[function(require,module,exports) {
// minimal library entry point.

"use strict";
module.exports = require("./src/index-minimal");

},{"./src/index-minimal":"qETn"}],"lm95":[function(require,module,exports) {
/*eslint-disable block-scoped-var, id-length, no-control-regex, no-magic-numbers, no-prototype-builtins, no-redeclare, no-shadow, no-var, sort-vars*/
"use strict";

var $protobuf = require("protobufjs/minimal");

var $Reader = $protobuf.Reader, $Writer = $protobuf.Writer, $util = $protobuf.util;

var $root = $protobuf.roots["default"] || ($protobuf.roots["default"] = {});

$root.waves = (function() {

    var waves = {};

    waves.Amount = (function() {

        function Amount(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        Amount.prototype.assetId = $util.newBuffer([]);
        Amount.prototype.amount = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        Amount.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.assetId != null && m.hasOwnProperty("assetId"))
                w.uint32(10).bytes(m.assetId);
            if (m.amount != null && m.hasOwnProperty("amount"))
                w.uint32(16).int64(m.amount);
            return w;
        };

        Amount.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.waves.Amount();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.assetId = r.bytes();
                    break;
                case 2:
                    m.amount = r.int64();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        return Amount;
    })();

    waves.Block = (function() {

        function Block(p) {
            this.transactions = [];
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        Block.prototype.header = null;
        Block.prototype.signature = $util.newBuffer([]);
        Block.prototype.transactions = $util.emptyArray;

        Block.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.header != null && m.hasOwnProperty("header"))
                $root.waves.Block.Header.encode(m.header, w.uint32(10).fork()).ldelim();
            if (m.signature != null && m.hasOwnProperty("signature"))
                w.uint32(18).bytes(m.signature);
            if (m.transactions != null && m.transactions.length) {
                for (var i = 0; i < m.transactions.length; ++i)
                    $root.waves.SignedTransaction.encode(m.transactions[i], w.uint32(26).fork()).ldelim();
            }
            return w;
        };

        Block.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.waves.Block();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.header = $root.waves.Block.Header.decode(r, r.uint32());
                    break;
                case 2:
                    m.signature = r.bytes();
                    break;
                case 3:
                    if (!(m.transactions && m.transactions.length))
                        m.transactions = [];
                    m.transactions.push($root.waves.SignedTransaction.decode(r, r.uint32()));
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        Block.Header = (function() {

            function Header(p) {
                this.featureVotes = [];
                if (p)
                    for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                        if (p[ks[i]] != null)
                            this[ks[i]] = p[ks[i]];
            }

            Header.prototype.chainId = 0;
            Header.prototype.reference = $util.newBuffer([]);
            Header.prototype.baseTarget = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
            Header.prototype.generationSignature = $util.newBuffer([]);
            Header.prototype.featureVotes = $util.emptyArray;
            Header.prototype.timestamp = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
            Header.prototype.version = 0;
            Header.prototype.generator = $util.newBuffer([]);
            Header.prototype.rewardVote = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
            Header.prototype.transactionsRoot = $util.newBuffer([]);

            Header.encode = function encode(m, w) {
                if (!w)
                    w = $Writer.create();
                if (m.chainId != null && m.hasOwnProperty("chainId"))
                    w.uint32(8).int32(m.chainId);
                if (m.reference != null && m.hasOwnProperty("reference"))
                    w.uint32(18).bytes(m.reference);
                if (m.baseTarget != null && m.hasOwnProperty("baseTarget"))
                    w.uint32(24).int64(m.baseTarget);
                if (m.generationSignature != null && m.hasOwnProperty("generationSignature"))
                    w.uint32(34).bytes(m.generationSignature);
                if (m.featureVotes != null && m.featureVotes.length) {
                    w.uint32(42).fork();
                    for (var i = 0; i < m.featureVotes.length; ++i)
                        w.uint32(m.featureVotes[i]);
                    w.ldelim();
                }
                if (m.timestamp != null && m.hasOwnProperty("timestamp"))
                    w.uint32(48).int64(m.timestamp);
                if (m.version != null && m.hasOwnProperty("version"))
                    w.uint32(56).int32(m.version);
                if (m.generator != null && m.hasOwnProperty("generator"))
                    w.uint32(66).bytes(m.generator);
                if (m.rewardVote != null && m.hasOwnProperty("rewardVote"))
                    w.uint32(72).int64(m.rewardVote);
                if (m.transactionsRoot != null && m.hasOwnProperty("transactionsRoot"))
                    w.uint32(82).bytes(m.transactionsRoot);
                return w;
            };

            Header.decode = function decode(r, l) {
                if (!(r instanceof $Reader))
                    r = $Reader.create(r);
                var c = l === undefined ? r.len : r.pos + l, m = new $root.waves.Block.Header();
                while (r.pos < c) {
                    var t = r.uint32();
                    switch (t >>> 3) {
                    case 1:
                        m.chainId = r.int32();
                        break;
                    case 2:
                        m.reference = r.bytes();
                        break;
                    case 3:
                        m.baseTarget = r.int64();
                        break;
                    case 4:
                        m.generationSignature = r.bytes();
                        break;
                    case 5:
                        if (!(m.featureVotes && m.featureVotes.length))
                            m.featureVotes = [];
                        if ((t & 7) === 2) {
                            var c2 = r.uint32() + r.pos;
                            while (r.pos < c2)
                                m.featureVotes.push(r.uint32());
                        } else
                            m.featureVotes.push(r.uint32());
                        break;
                    case 6:
                        m.timestamp = r.int64();
                        break;
                    case 7:
                        m.version = r.int32();
                        break;
                    case 8:
                        m.generator = r.bytes();
                        break;
                    case 9:
                        m.rewardVote = r.int64();
                        break;
                    case 10:
                        m.transactionsRoot = r.bytes();
                        break;
                    default:
                        r.skipType(t & 7);
                        break;
                    }
                }
                return m;
            };

            return Header;
        })();

        return Block;
    })();

    waves.MicroBlock = (function() {

        function MicroBlock(p) {
            this.transactions = [];
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        MicroBlock.prototype.version = 0;
        MicroBlock.prototype.reference = $util.newBuffer([]);
        MicroBlock.prototype.updatedBlockSignature = $util.newBuffer([]);
        MicroBlock.prototype.senderPublicKey = $util.newBuffer([]);
        MicroBlock.prototype.transactions = $util.emptyArray;

        MicroBlock.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.version != null && m.hasOwnProperty("version"))
                w.uint32(8).int32(m.version);
            if (m.reference != null && m.hasOwnProperty("reference"))
                w.uint32(18).bytes(m.reference);
            if (m.updatedBlockSignature != null && m.hasOwnProperty("updatedBlockSignature"))
                w.uint32(26).bytes(m.updatedBlockSignature);
            if (m.senderPublicKey != null && m.hasOwnProperty("senderPublicKey"))
                w.uint32(34).bytes(m.senderPublicKey);
            if (m.transactions != null && m.transactions.length) {
                for (var i = 0; i < m.transactions.length; ++i)
                    $root.waves.SignedTransaction.encode(m.transactions[i], w.uint32(42).fork()).ldelim();
            }
            return w;
        };

        MicroBlock.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.waves.MicroBlock();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.version = r.int32();
                    break;
                case 2:
                    m.reference = r.bytes();
                    break;
                case 3:
                    m.updatedBlockSignature = r.bytes();
                    break;
                case 4:
                    m.senderPublicKey = r.bytes();
                    break;
                case 5:
                    if (!(m.transactions && m.transactions.length))
                        m.transactions = [];
                    m.transactions.push($root.waves.SignedTransaction.decode(r, r.uint32()));
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        return MicroBlock;
    })();

    waves.SignedMicroBlock = (function() {

        function SignedMicroBlock(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        SignedMicroBlock.prototype.microBlock = null;
        SignedMicroBlock.prototype.signature = $util.newBuffer([]);
        SignedMicroBlock.prototype.totalBlockId = $util.newBuffer([]);

        SignedMicroBlock.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.microBlock != null && m.hasOwnProperty("microBlock"))
                $root.waves.MicroBlock.encode(m.microBlock, w.uint32(10).fork()).ldelim();
            if (m.signature != null && m.hasOwnProperty("signature"))
                w.uint32(18).bytes(m.signature);
            if (m.totalBlockId != null && m.hasOwnProperty("totalBlockId"))
                w.uint32(26).bytes(m.totalBlockId);
            return w;
        };

        SignedMicroBlock.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.waves.SignedMicroBlock();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.microBlock = $root.waves.MicroBlock.decode(r, r.uint32());
                    break;
                case 2:
                    m.signature = r.bytes();
                    break;
                case 3:
                    m.totalBlockId = r.bytes();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        return SignedMicroBlock;
    })();

    waves.events = (function() {

        var events = {};

        events.BlockchainUpdated = (function() {

            function BlockchainUpdated(p) {
                this.referencedAssets = [];
                if (p)
                    for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                        if (p[ks[i]] != null)
                            this[ks[i]] = p[ks[i]];
            }

            BlockchainUpdated.prototype.id = $util.newBuffer([]);
            BlockchainUpdated.prototype.height = 0;
            BlockchainUpdated.prototype.append = null;
            BlockchainUpdated.prototype.rollback = null;
            BlockchainUpdated.prototype.referencedAssets = $util.emptyArray;

            var $oneOfFields;

            Object.defineProperty(BlockchainUpdated.prototype, "update", {
                get: $util.oneOfGetter($oneOfFields = ["append", "rollback"]),
                set: $util.oneOfSetter($oneOfFields)
            });

            BlockchainUpdated.encode = function encode(m, w) {
                if (!w)
                    w = $Writer.create();
                if (m.id != null && m.hasOwnProperty("id"))
                    w.uint32(10).bytes(m.id);
                if (m.height != null && m.hasOwnProperty("height"))
                    w.uint32(16).int32(m.height);
                if (m.append != null && m.hasOwnProperty("append"))
                    $root.waves.events.BlockchainUpdated.Append.encode(m.append, w.uint32(90).fork()).ldelim();
                if (m.rollback != null && m.hasOwnProperty("rollback"))
                    $root.waves.events.BlockchainUpdated.Rollback.encode(m.rollback, w.uint32(98).fork()).ldelim();
                if (m.referencedAssets != null && m.referencedAssets.length) {
                    for (var i = 0; i < m.referencedAssets.length; ++i)
                        $root.waves.events.StateUpdate.AssetInfo.encode(m.referencedAssets[i], w.uint32(170).fork()).ldelim();
                }
                return w;
            };

            BlockchainUpdated.decode = function decode(r, l) {
                if (!(r instanceof $Reader))
                    r = $Reader.create(r);
                var c = l === undefined ? r.len : r.pos + l, m = new $root.waves.events.BlockchainUpdated();
                while (r.pos < c) {
                    var t = r.uint32();
                    switch (t >>> 3) {
                    case 1:
                        m.id = r.bytes();
                        break;
                    case 2:
                        m.height = r.int32();
                        break;
                    case 11:
                        m.append = $root.waves.events.BlockchainUpdated.Append.decode(r, r.uint32());
                        break;
                    case 12:
                        m.rollback = $root.waves.events.BlockchainUpdated.Rollback.decode(r, r.uint32());
                        break;
                    case 21:
                        if (!(m.referencedAssets && m.referencedAssets.length))
                            m.referencedAssets = [];
                        m.referencedAssets.push($root.waves.events.StateUpdate.AssetInfo.decode(r, r.uint32()));
                        break;
                    default:
                        r.skipType(t & 7);
                        break;
                    }
                }
                return m;
            };

            BlockchainUpdated.Append = (function() {

                function Append(p) {
                    this.transactionIds = [];
                    this.transactionsMetadata = [];
                    this.transactionStateUpdates = [];
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }

                Append.prototype.block = null;
                Append.prototype.microBlock = null;
                Append.prototype.transactionIds = $util.emptyArray;
                Append.prototype.transactionsMetadata = $util.emptyArray;
                Append.prototype.stateUpdate = null;
                Append.prototype.transactionStateUpdates = $util.emptyArray;

                var $oneOfFields;

                Object.defineProperty(Append.prototype, "body", {
                    get: $util.oneOfGetter($oneOfFields = ["block", "microBlock"]),
                    set: $util.oneOfSetter($oneOfFields)
                });

                Append.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    if (m.block != null && m.hasOwnProperty("block"))
                        $root.waves.events.BlockchainUpdated.Append.BlockAppend.encode(m.block, w.uint32(10).fork()).ldelim();
                    if (m.microBlock != null && m.hasOwnProperty("microBlock"))
                        $root.waves.events.BlockchainUpdated.Append.MicroBlockAppend.encode(m.microBlock, w.uint32(18).fork()).ldelim();
                    if (m.transactionIds != null && m.transactionIds.length) {
                        for (var i = 0; i < m.transactionIds.length; ++i)
                            w.uint32(26).bytes(m.transactionIds[i]);
                    }
                    if (m.transactionsMetadata != null && m.transactionsMetadata.length) {
                        for (var i = 0; i < m.transactionsMetadata.length; ++i)
                            $root.waves.events.TransactionMetadata.encode(m.transactionsMetadata[i], w.uint32(34).fork()).ldelim();
                    }
                    if (m.stateUpdate != null && m.hasOwnProperty("stateUpdate"))
                        $root.waves.events.StateUpdate.encode(m.stateUpdate, w.uint32(90).fork()).ldelim();
                    if (m.transactionStateUpdates != null && m.transactionStateUpdates.length) {
                        for (var i = 0; i < m.transactionStateUpdates.length; ++i)
                            $root.waves.events.StateUpdate.encode(m.transactionStateUpdates[i], w.uint32(98).fork()).ldelim();
                    }
                    return w;
                };

                Append.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.waves.events.BlockchainUpdated.Append();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                        case 1:
                            m.block = $root.waves.events.BlockchainUpdated.Append.BlockAppend.decode(r, r.uint32());
                            break;
                        case 2:
                            m.microBlock = $root.waves.events.BlockchainUpdated.Append.MicroBlockAppend.decode(r, r.uint32());
                            break;
                        case 3:
                            if (!(m.transactionIds && m.transactionIds.length))
                                m.transactionIds = [];
                            m.transactionIds.push(r.bytes());
                            break;
                        case 4:
                            if (!(m.transactionsMetadata && m.transactionsMetadata.length))
                                m.transactionsMetadata = [];
                            m.transactionsMetadata.push($root.waves.events.TransactionMetadata.decode(r, r.uint32()));
                            break;
                        case 11:
                            m.stateUpdate = $root.waves.events.StateUpdate.decode(r, r.uint32());
                            break;
                        case 12:
                            if (!(m.transactionStateUpdates && m.transactionStateUpdates.length))
                                m.transactionStateUpdates = [];
                            m.transactionStateUpdates.push($root.waves.events.StateUpdate.decode(r, r.uint32()));
                            break;
                        default:
                            r.skipType(t & 7);
                            break;
                        }
                    }
                    return m;
                };

                Append.BlockAppend = (function() {

                    function BlockAppend(p) {
                        if (p)
                            for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                                if (p[ks[i]] != null)
                                    this[ks[i]] = p[ks[i]];
                    }

                    BlockAppend.prototype.block = null;
                    BlockAppend.prototype.updatedWavesAmount = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

                    BlockAppend.encode = function encode(m, w) {
                        if (!w)
                            w = $Writer.create();
                        if (m.block != null && m.hasOwnProperty("block"))
                            $root.waves.Block.encode(m.block, w.uint32(10).fork()).ldelim();
                        if (m.updatedWavesAmount != null && m.hasOwnProperty("updatedWavesAmount"))
                            w.uint32(16).int64(m.updatedWavesAmount);
                        return w;
                    };

                    BlockAppend.decode = function decode(r, l) {
                        if (!(r instanceof $Reader))
                            r = $Reader.create(r);
                        var c = l === undefined ? r.len : r.pos + l, m = new $root.waves.events.BlockchainUpdated.Append.BlockAppend();
                        while (r.pos < c) {
                            var t = r.uint32();
                            switch (t >>> 3) {
                            case 1:
                                m.block = $root.waves.Block.decode(r, r.uint32());
                                break;
                            case 2:
                                m.updatedWavesAmount = r.int64();
                                break;
                            default:
                                r.skipType(t & 7);
                                break;
                            }
                        }
                        return m;
                    };

                    return BlockAppend;
                })();

                Append.MicroBlockAppend = (function() {

                    function MicroBlockAppend(p) {
                        if (p)
                            for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                                if (p[ks[i]] != null)
                                    this[ks[i]] = p[ks[i]];
                    }

                    MicroBlockAppend.prototype.microBlock = null;
                    MicroBlockAppend.prototype.updatedTransactionsRoot = $util.newBuffer([]);

                    MicroBlockAppend.encode = function encode(m, w) {
                        if (!w)
                            w = $Writer.create();
                        if (m.microBlock != null && m.hasOwnProperty("microBlock"))
                            $root.waves.SignedMicroBlock.encode(m.microBlock, w.uint32(10).fork()).ldelim();
                        if (m.updatedTransactionsRoot != null && m.hasOwnProperty("updatedTransactionsRoot"))
                            w.uint32(18).bytes(m.updatedTransactionsRoot);
                        return w;
                    };

                    MicroBlockAppend.decode = function decode(r, l) {
                        if (!(r instanceof $Reader))
                            r = $Reader.create(r);
                        var c = l === undefined ? r.len : r.pos + l, m = new $root.waves.events.BlockchainUpdated.Append.MicroBlockAppend();
                        while (r.pos < c) {
                            var t = r.uint32();
                            switch (t >>> 3) {
                            case 1:
                                m.microBlock = $root.waves.SignedMicroBlock.decode(r, r.uint32());
                                break;
                            case 2:
                                m.updatedTransactionsRoot = r.bytes();
                                break;
                            default:
                                r.skipType(t & 7);
                                break;
                            }
                        }
                        return m;
                    };

                    return MicroBlockAppend;
                })();

                return Append;
            })();

            BlockchainUpdated.Rollback = (function() {

                function Rollback(p) {
                    this.removedTransactionIds = [];
                    this.removedBlocks = [];
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }

                Rollback.prototype.type = 0;
                Rollback.prototype.removedTransactionIds = $util.emptyArray;
                Rollback.prototype.removedBlocks = $util.emptyArray;
                Rollback.prototype.rollbackStateUpdate = null;

                Rollback.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    if (m.type != null && m.hasOwnProperty("type"))
                        w.uint32(8).int32(m.type);
                    if (m.removedTransactionIds != null && m.removedTransactionIds.length) {
                        for (var i = 0; i < m.removedTransactionIds.length; ++i)
                            w.uint32(18).bytes(m.removedTransactionIds[i]);
                    }
                    if (m.removedBlocks != null && m.removedBlocks.length) {
                        for (var i = 0; i < m.removedBlocks.length; ++i)
                            $root.waves.Block.encode(m.removedBlocks[i], w.uint32(26).fork()).ldelim();
                    }
                    if (m.rollbackStateUpdate != null && m.hasOwnProperty("rollbackStateUpdate"))
                        $root.waves.events.StateUpdate.encode(m.rollbackStateUpdate, w.uint32(34).fork()).ldelim();
                    return w;
                };

                Rollback.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.waves.events.BlockchainUpdated.Rollback();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                        case 1:
                            m.type = r.int32();
                            break;
                        case 2:
                            if (!(m.removedTransactionIds && m.removedTransactionIds.length))
                                m.removedTransactionIds = [];
                            m.removedTransactionIds.push(r.bytes());
                            break;
                        case 3:
                            if (!(m.removedBlocks && m.removedBlocks.length))
                                m.removedBlocks = [];
                            m.removedBlocks.push($root.waves.Block.decode(r, r.uint32()));
                            break;
                        case 4:
                            m.rollbackStateUpdate = $root.waves.events.StateUpdate.decode(r, r.uint32());
                            break;
                        default:
                            r.skipType(t & 7);
                            break;
                        }
                    }
                    return m;
                };

                Rollback.RollbackType = (function() {
                    var valuesById = {}, values = Object.create(valuesById);
                    values[valuesById[0] = "BLOCK"] = 0;
                    values[valuesById[1] = "MICROBLOCK"] = 1;
                    return values;
                })();

                return Rollback;
            })();

            return BlockchainUpdated;
        })();

        events.StateUpdate = (function() {

            function StateUpdate(p) {
                this.balances = [];
                this.leasingForAddress = [];
                this.dataEntries = [];
                this.assets = [];
                this.individualLeases = [];
                if (p)
                    for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                        if (p[ks[i]] != null)
                            this[ks[i]] = p[ks[i]];
            }

            StateUpdate.prototype.balances = $util.emptyArray;
            StateUpdate.prototype.leasingForAddress = $util.emptyArray;
            StateUpdate.prototype.dataEntries = $util.emptyArray;
            StateUpdate.prototype.assets = $util.emptyArray;
            StateUpdate.prototype.individualLeases = $util.emptyArray;

            StateUpdate.encode = function encode(m, w) {
                if (!w)
                    w = $Writer.create();
                if (m.balances != null && m.balances.length) {
                    for (var i = 0; i < m.balances.length; ++i)
                        $root.waves.events.StateUpdate.BalanceUpdate.encode(m.balances[i], w.uint32(10).fork()).ldelim();
                }
                if (m.leasingForAddress != null && m.leasingForAddress.length) {
                    for (var i = 0; i < m.leasingForAddress.length; ++i)
                        $root.waves.events.StateUpdate.LeasingUpdate.encode(m.leasingForAddress[i], w.uint32(18).fork()).ldelim();
                }
                if (m.dataEntries != null && m.dataEntries.length) {
                    for (var i = 0; i < m.dataEntries.length; ++i)
                        $root.waves.events.StateUpdate.DataEntryUpdate.encode(m.dataEntries[i], w.uint32(26).fork()).ldelim();
                }
                if (m.assets != null && m.assets.length) {
                    for (var i = 0; i < m.assets.length; ++i)
                        $root.waves.events.StateUpdate.AssetStateUpdate.encode(m.assets[i], w.uint32(34).fork()).ldelim();
                }
                if (m.individualLeases != null && m.individualLeases.length) {
                    for (var i = 0; i < m.individualLeases.length; ++i)
                        $root.waves.events.StateUpdate.LeaseUpdate.encode(m.individualLeases[i], w.uint32(42).fork()).ldelim();
                }
                return w;
            };

            StateUpdate.decode = function decode(r, l) {
                if (!(r instanceof $Reader))
                    r = $Reader.create(r);
                var c = l === undefined ? r.len : r.pos + l, m = new $root.waves.events.StateUpdate();
                while (r.pos < c) {
                    var t = r.uint32();
                    switch (t >>> 3) {
                    case 1:
                        if (!(m.balances && m.balances.length))
                            m.balances = [];
                        m.balances.push($root.waves.events.StateUpdate.BalanceUpdate.decode(r, r.uint32()));
                        break;
                    case 2:
                        if (!(m.leasingForAddress && m.leasingForAddress.length))
                            m.leasingForAddress = [];
                        m.leasingForAddress.push($root.waves.events.StateUpdate.LeasingUpdate.decode(r, r.uint32()));
                        break;
                    case 3:
                        if (!(m.dataEntries && m.dataEntries.length))
                            m.dataEntries = [];
                        m.dataEntries.push($root.waves.events.StateUpdate.DataEntryUpdate.decode(r, r.uint32()));
                        break;
                    case 4:
                        if (!(m.assets && m.assets.length))
                            m.assets = [];
                        m.assets.push($root.waves.events.StateUpdate.AssetStateUpdate.decode(r, r.uint32()));
                        break;
                    case 5:
                        if (!(m.individualLeases && m.individualLeases.length))
                            m.individualLeases = [];
                        m.individualLeases.push($root.waves.events.StateUpdate.LeaseUpdate.decode(r, r.uint32()));
                        break;
                    default:
                        r.skipType(t & 7);
                        break;
                    }
                }
                return m;
            };

            StateUpdate.BalanceUpdate = (function() {

                function BalanceUpdate(p) {
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }

                BalanceUpdate.prototype.address = $util.newBuffer([]);
                BalanceUpdate.prototype.amountAfter = null;
                BalanceUpdate.prototype.amountBefore = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

                BalanceUpdate.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    if (m.address != null && m.hasOwnProperty("address"))
                        w.uint32(10).bytes(m.address);
                    if (m.amountAfter != null && m.hasOwnProperty("amountAfter"))
                        $root.waves.Amount.encode(m.amountAfter, w.uint32(18).fork()).ldelim();
                    if (m.amountBefore != null && m.hasOwnProperty("amountBefore"))
                        w.uint32(24).int64(m.amountBefore);
                    return w;
                };

                BalanceUpdate.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.waves.events.StateUpdate.BalanceUpdate();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                        case 1:
                            m.address = r.bytes();
                            break;
                        case 2:
                            m.amountAfter = $root.waves.Amount.decode(r, r.uint32());
                            break;
                        case 3:
                            m.amountBefore = r.int64();
                            break;
                        default:
                            r.skipType(t & 7);
                            break;
                        }
                    }
                    return m;
                };

                return BalanceUpdate;
            })();

            StateUpdate.LeasingUpdate = (function() {

                function LeasingUpdate(p) {
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }

                LeasingUpdate.prototype.address = $util.newBuffer([]);
                LeasingUpdate.prototype.inAfter = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
                LeasingUpdate.prototype.outAfter = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
                LeasingUpdate.prototype.inBefore = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
                LeasingUpdate.prototype.outBefore = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

                LeasingUpdate.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    if (m.address != null && m.hasOwnProperty("address"))
                        w.uint32(10).bytes(m.address);
                    if (m.inAfter != null && m.hasOwnProperty("inAfter"))
                        w.uint32(16).int64(m.inAfter);
                    if (m.outAfter != null && m.hasOwnProperty("outAfter"))
                        w.uint32(24).int64(m.outAfter);
                    if (m.inBefore != null && m.hasOwnProperty("inBefore"))
                        w.uint32(32).int64(m.inBefore);
                    if (m.outBefore != null && m.hasOwnProperty("outBefore"))
                        w.uint32(40).int64(m.outBefore);
                    return w;
                };

                LeasingUpdate.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.waves.events.StateUpdate.LeasingUpdate();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                        case 1:
                            m.address = r.bytes();
                            break;
                        case 2:
                            m.inAfter = r.int64();
                            break;
                        case 3:
                            m.outAfter = r.int64();
                            break;
                        case 4:
                            m.inBefore = r.int64();
                            break;
                        case 5:
                            m.outBefore = r.int64();
                            break;
                        default:
                            r.skipType(t & 7);
                            break;
                        }
                    }
                    return m;
                };

                return LeasingUpdate;
            })();

            StateUpdate.LeaseUpdate = (function() {

                function LeaseUpdate(p) {
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }

                LeaseUpdate.prototype.leaseId = $util.newBuffer([]);
                LeaseUpdate.prototype.statusAfter = 0;
                LeaseUpdate.prototype.amount = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
                LeaseUpdate.prototype.sender = $util.newBuffer([]);
                LeaseUpdate.prototype.recipient = $util.newBuffer([]);
                LeaseUpdate.prototype.originTransactionId = $util.newBuffer([]);

                LeaseUpdate.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    if (m.leaseId != null && m.hasOwnProperty("leaseId"))
                        w.uint32(10).bytes(m.leaseId);
                    if (m.statusAfter != null && m.hasOwnProperty("statusAfter"))
                        w.uint32(16).int32(m.statusAfter);
                    if (m.amount != null && m.hasOwnProperty("amount"))
                        w.uint32(80).int64(m.amount);
                    if (m.sender != null && m.hasOwnProperty("sender"))
                        w.uint32(90).bytes(m.sender);
                    if (m.recipient != null && m.hasOwnProperty("recipient"))
                        w.uint32(98).bytes(m.recipient);
                    if (m.originTransactionId != null && m.hasOwnProperty("originTransactionId"))
                        w.uint32(106).bytes(m.originTransactionId);
                    return w;
                };

                LeaseUpdate.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.waves.events.StateUpdate.LeaseUpdate();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                        case 1:
                            m.leaseId = r.bytes();
                            break;
                        case 2:
                            m.statusAfter = r.int32();
                            break;
                        case 10:
                            m.amount = r.int64();
                            break;
                        case 11:
                            m.sender = r.bytes();
                            break;
                        case 12:
                            m.recipient = r.bytes();
                            break;
                        case 13:
                            m.originTransactionId = r.bytes();
                            break;
                        default:
                            r.skipType(t & 7);
                            break;
                        }
                    }
                    return m;
                };

                LeaseUpdate.LeaseStatus = (function() {
                    var valuesById = {}, values = Object.create(valuesById);
                    values[valuesById[0] = "INACTIVE"] = 0;
                    values[valuesById[1] = "ACTIVE"] = 1;
                    return values;
                })();

                return LeaseUpdate;
            })();

            StateUpdate.DataEntryUpdate = (function() {

                function DataEntryUpdate(p) {
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }

                DataEntryUpdate.prototype.address = $util.newBuffer([]);
                DataEntryUpdate.prototype.dataEntry = null;
                DataEntryUpdate.prototype.dataEntryBefore = null;

                DataEntryUpdate.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    if (m.address != null && m.hasOwnProperty("address"))
                        w.uint32(10).bytes(m.address);
                    if (m.dataEntry != null && m.hasOwnProperty("dataEntry"))
                        $root.waves.DataTransactionData.DataEntry.encode(m.dataEntry, w.uint32(18).fork()).ldelim();
                    if (m.dataEntryBefore != null && m.hasOwnProperty("dataEntryBefore"))
                        $root.waves.DataTransactionData.DataEntry.encode(m.dataEntryBefore, w.uint32(82).fork()).ldelim();
                    return w;
                };

                DataEntryUpdate.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.waves.events.StateUpdate.DataEntryUpdate();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                        case 1:
                            m.address = r.bytes();
                            break;
                        case 2:
                            m.dataEntry = $root.waves.DataTransactionData.DataEntry.decode(r, r.uint32());
                            break;
                        case 10:
                            m.dataEntryBefore = $root.waves.DataTransactionData.DataEntry.decode(r, r.uint32());
                            break;
                        default:
                            r.skipType(t & 7);
                            break;
                        }
                    }
                    return m;
                };

                return DataEntryUpdate;
            })();

            StateUpdate.AssetStateUpdate = (function() {

                function AssetStateUpdate(p) {
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }

                AssetStateUpdate.prototype.before = null;
                AssetStateUpdate.prototype.after = null;

                AssetStateUpdate.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    if (m.before != null && m.hasOwnProperty("before"))
                        $root.waves.events.StateUpdate.AssetDetails.encode(m.before, w.uint32(10).fork()).ldelim();
                    if (m.after != null && m.hasOwnProperty("after"))
                        $root.waves.events.StateUpdate.AssetDetails.encode(m.after, w.uint32(18).fork()).ldelim();
                    return w;
                };

                AssetStateUpdate.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.waves.events.StateUpdate.AssetStateUpdate();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                        case 1:
                            m.before = $root.waves.events.StateUpdate.AssetDetails.decode(r, r.uint32());
                            break;
                        case 2:
                            m.after = $root.waves.events.StateUpdate.AssetDetails.decode(r, r.uint32());
                            break;
                        default:
                            r.skipType(t & 7);
                            break;
                        }
                    }
                    return m;
                };

                return AssetStateUpdate;
            })();

            StateUpdate.AssetDetails = (function() {

                function AssetDetails(p) {
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }

                AssetDetails.prototype.assetId = $util.newBuffer([]);
                AssetDetails.prototype.issuer = $util.newBuffer([]);
                AssetDetails.prototype.decimals = 0;
                AssetDetails.prototype.name = "";
                AssetDetails.prototype.description = "";
                AssetDetails.prototype.reissuable = false;
                AssetDetails.prototype.volume = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
                AssetDetails.prototype.scriptInfo = null;
                AssetDetails.prototype.sponsorship = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
                AssetDetails.prototype.nft = false;
                AssetDetails.prototype.lastUpdated = 0;
                AssetDetails.prototype.safeVolume = $util.newBuffer([]);

                AssetDetails.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    if (m.assetId != null && m.hasOwnProperty("assetId"))
                        w.uint32(10).bytes(m.assetId);
                    if (m.issuer != null && m.hasOwnProperty("issuer"))
                        w.uint32(18).bytes(m.issuer);
                    if (m.decimals != null && m.hasOwnProperty("decimals"))
                        w.uint32(24).int32(m.decimals);
                    if (m.name != null && m.hasOwnProperty("name"))
                        w.uint32(34).string(m.name);
                    if (m.description != null && m.hasOwnProperty("description"))
                        w.uint32(42).string(m.description);
                    if (m.reissuable != null && m.hasOwnProperty("reissuable"))
                        w.uint32(48).bool(m.reissuable);
                    if (m.volume != null && m.hasOwnProperty("volume"))
                        w.uint32(56).int64(m.volume);
                    if (m.scriptInfo != null && m.hasOwnProperty("scriptInfo"))
                        $root.waves.events.StateUpdate.AssetDetails.AssetScriptInfo.encode(m.scriptInfo, w.uint32(66).fork()).ldelim();
                    if (m.sponsorship != null && m.hasOwnProperty("sponsorship"))
                        w.uint32(72).int64(m.sponsorship);
                    if (m.nft != null && m.hasOwnProperty("nft"))
                        w.uint32(80).bool(m.nft);
                    if (m.lastUpdated != null && m.hasOwnProperty("lastUpdated"))
                        w.uint32(88).int32(m.lastUpdated);
                    if (m.safeVolume != null && m.hasOwnProperty("safeVolume"))
                        w.uint32(162).bytes(m.safeVolume);
                    return w;
                };

                AssetDetails.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.waves.events.StateUpdate.AssetDetails();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                        case 1:
                            m.assetId = r.bytes();
                            break;
                        case 2:
                            m.issuer = r.bytes();
                            break;
                        case 3:
                            m.decimals = r.int32();
                            break;
                        case 4:
                            m.name = r.string();
                            break;
                        case 5:
                            m.description = r.string();
                            break;
                        case 6:
                            m.reissuable = r.bool();
                            break;
                        case 7:
                            m.volume = r.int64();
                            break;
                        case 8:
                            m.scriptInfo = $root.waves.events.StateUpdate.AssetDetails.AssetScriptInfo.decode(r, r.uint32());
                            break;
                        case 9:
                            m.sponsorship = r.int64();
                            break;
                        case 10:
                            m.nft = r.bool();
                            break;
                        case 11:
                            m.lastUpdated = r.int32();
                            break;
                        case 20:
                            m.safeVolume = r.bytes();
                            break;
                        default:
                            r.skipType(t & 7);
                            break;
                        }
                    }
                    return m;
                };

                AssetDetails.AssetScriptInfo = (function() {

                    function AssetScriptInfo(p) {
                        if (p)
                            for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                                if (p[ks[i]] != null)
                                    this[ks[i]] = p[ks[i]];
                    }

                    AssetScriptInfo.prototype.script = $util.newBuffer([]);
                    AssetScriptInfo.prototype.complexity = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

                    AssetScriptInfo.encode = function encode(m, w) {
                        if (!w)
                            w = $Writer.create();
                        if (m.script != null && m.hasOwnProperty("script"))
                            w.uint32(10).bytes(m.script);
                        if (m.complexity != null && m.hasOwnProperty("complexity"))
                            w.uint32(16).int64(m.complexity);
                        return w;
                    };

                    AssetScriptInfo.decode = function decode(r, l) {
                        if (!(r instanceof $Reader))
                            r = $Reader.create(r);
                        var c = l === undefined ? r.len : r.pos + l, m = new $root.waves.events.StateUpdate.AssetDetails.AssetScriptInfo();
                        while (r.pos < c) {
                            var t = r.uint32();
                            switch (t >>> 3) {
                            case 1:
                                m.script = r.bytes();
                                break;
                            case 2:
                                m.complexity = r.int64();
                                break;
                            default:
                                r.skipType(t & 7);
                                break;
                            }
                        }
                        return m;
                    };

                    return AssetScriptInfo;
                })();

                return AssetDetails;
            })();

            StateUpdate.AssetInfo = (function() {

                function AssetInfo(p) {
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }

                AssetInfo.prototype.id = $util.newBuffer([]);
                AssetInfo.prototype.decimals = 0;
                AssetInfo.prototype.name = "";

                AssetInfo.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    if (m.id != null && m.hasOwnProperty("id"))
                        w.uint32(10).bytes(m.id);
                    if (m.decimals != null && m.hasOwnProperty("decimals"))
                        w.uint32(16).int32(m.decimals);
                    if (m.name != null && m.hasOwnProperty("name"))
                        w.uint32(26).string(m.name);
                    return w;
                };

                AssetInfo.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.waves.events.StateUpdate.AssetInfo();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                        case 1:
                            m.id = r.bytes();
                            break;
                        case 2:
                            m.decimals = r.int32();
                            break;
                        case 3:
                            m.name = r.string();
                            break;
                        default:
                            r.skipType(t & 7);
                            break;
                        }
                    }
                    return m;
                };

                return AssetInfo;
            })();

            return StateUpdate;
        })();

        events.TransactionMetadata = (function() {

            function TransactionMetadata(p) {
                if (p)
                    for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                        if (p[ks[i]] != null)
                            this[ks[i]] = p[ks[i]];
            }

            TransactionMetadata.prototype.senderAddress = $util.newBuffer([]);
            TransactionMetadata.prototype.transfer = null;
            TransactionMetadata.prototype.exchange = null;
            TransactionMetadata.prototype.massTransfer = null;
            TransactionMetadata.prototype.invokeScript = null;
            TransactionMetadata.prototype.lease = null;
            TransactionMetadata.prototype.ethereum = null;

            var $oneOfFields;

            Object.defineProperty(TransactionMetadata.prototype, "metadata", {
                get: $util.oneOfGetter($oneOfFields = ["transfer", "exchange", "massTransfer", "invokeScript", "lease", "ethereum"]),
                set: $util.oneOfSetter($oneOfFields)
            });

            TransactionMetadata.encode = function encode(m, w) {
                if (!w)
                    w = $Writer.create();
                if (m.senderAddress != null && m.hasOwnProperty("senderAddress"))
                    w.uint32(10).bytes(m.senderAddress);
                if (m.transfer != null && m.hasOwnProperty("transfer"))
                    $root.waves.events.TransactionMetadata.TransferMetadata.encode(m.transfer, w.uint32(834).fork()).ldelim();
                if (m.exchange != null && m.hasOwnProperty("exchange"))
                    $root.waves.events.TransactionMetadata.ExchangeMetadata.encode(m.exchange, w.uint32(858).fork()).ldelim();
                if (m.massTransfer != null && m.hasOwnProperty("massTransfer"))
                    $root.waves.events.TransactionMetadata.MassTransferMetadata.encode(m.massTransfer, w.uint32(890).fork()).ldelim();
                if (m.invokeScript != null && m.hasOwnProperty("invokeScript"))
                    $root.waves.events.TransactionMetadata.InvokeScriptMetadata.encode(m.invokeScript, w.uint32(930).fork()).ldelim();
                if (m.lease != null && m.hasOwnProperty("lease"))
                    $root.waves.events.TransactionMetadata.LeaseMetadata.encode(m.lease, w.uint32(938).fork()).ldelim();
                if (m.ethereum != null && m.hasOwnProperty("ethereum"))
                    $root.waves.events.TransactionMetadata.EthereumMetadata.encode(m.ethereum, w.uint32(2410).fork()).ldelim();
                return w;
            };

            TransactionMetadata.decode = function decode(r, l) {
                if (!(r instanceof $Reader))
                    r = $Reader.create(r);
                var c = l === undefined ? r.len : r.pos + l, m = new $root.waves.events.TransactionMetadata();
                while (r.pos < c) {
                    var t = r.uint32();
                    switch (t >>> 3) {
                    case 1:
                        m.senderAddress = r.bytes();
                        break;
                    case 104:
                        m.transfer = $root.waves.events.TransactionMetadata.TransferMetadata.decode(r, r.uint32());
                        break;
                    case 107:
                        m.exchange = $root.waves.events.TransactionMetadata.ExchangeMetadata.decode(r, r.uint32());
                        break;
                    case 111:
                        m.massTransfer = $root.waves.events.TransactionMetadata.MassTransferMetadata.decode(r, r.uint32());
                        break;
                    case 116:
                        m.invokeScript = $root.waves.events.TransactionMetadata.InvokeScriptMetadata.decode(r, r.uint32());
                        break;
                    case 117:
                        m.lease = $root.waves.events.TransactionMetadata.LeaseMetadata.decode(r, r.uint32());
                        break;
                    case 301:
                        m.ethereum = $root.waves.events.TransactionMetadata.EthereumMetadata.decode(r, r.uint32());
                        break;
                    default:
                        r.skipType(t & 7);
                        break;
                    }
                }
                return m;
            };

            TransactionMetadata.TransferMetadata = (function() {

                function TransferMetadata(p) {
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }

                TransferMetadata.prototype.recipientAddress = $util.newBuffer([]);

                TransferMetadata.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    if (m.recipientAddress != null && m.hasOwnProperty("recipientAddress"))
                        w.uint32(10).bytes(m.recipientAddress);
                    return w;
                };

                TransferMetadata.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.waves.events.TransactionMetadata.TransferMetadata();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                        case 1:
                            m.recipientAddress = r.bytes();
                            break;
                        default:
                            r.skipType(t & 7);
                            break;
                        }
                    }
                    return m;
                };

                return TransferMetadata;
            })();

            TransactionMetadata.MassTransferMetadata = (function() {

                function MassTransferMetadata(p) {
                    this.recipientsAddresses = [];
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }

                MassTransferMetadata.prototype.recipientsAddresses = $util.emptyArray;

                MassTransferMetadata.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    if (m.recipientsAddresses != null && m.recipientsAddresses.length) {
                        for (var i = 0; i < m.recipientsAddresses.length; ++i)
                            w.uint32(10).bytes(m.recipientsAddresses[i]);
                    }
                    return w;
                };

                MassTransferMetadata.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.waves.events.TransactionMetadata.MassTransferMetadata();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                        case 1:
                            if (!(m.recipientsAddresses && m.recipientsAddresses.length))
                                m.recipientsAddresses = [];
                            m.recipientsAddresses.push(r.bytes());
                            break;
                        default:
                            r.skipType(t & 7);
                            break;
                        }
                    }
                    return m;
                };

                return MassTransferMetadata;
            })();

            TransactionMetadata.ExchangeMetadata = (function() {

                function ExchangeMetadata(p) {
                    this.orderIds = [];
                    this.orderSenderAddresses = [];
                    this.orderSenderPublicKeys = [];
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }

                ExchangeMetadata.prototype.orderIds = $util.emptyArray;
                ExchangeMetadata.prototype.orderSenderAddresses = $util.emptyArray;
                ExchangeMetadata.prototype.orderSenderPublicKeys = $util.emptyArray;

                ExchangeMetadata.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    if (m.orderIds != null && m.orderIds.length) {
                        for (var i = 0; i < m.orderIds.length; ++i)
                            w.uint32(10).bytes(m.orderIds[i]);
                    }
                    if (m.orderSenderAddresses != null && m.orderSenderAddresses.length) {
                        for (var i = 0; i < m.orderSenderAddresses.length; ++i)
                            w.uint32(18).bytes(m.orderSenderAddresses[i]);
                    }
                    if (m.orderSenderPublicKeys != null && m.orderSenderPublicKeys.length) {
                        for (var i = 0; i < m.orderSenderPublicKeys.length; ++i)
                            w.uint32(26).bytes(m.orderSenderPublicKeys[i]);
                    }
                    return w;
                };

                ExchangeMetadata.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.waves.events.TransactionMetadata.ExchangeMetadata();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                        case 1:
                            if (!(m.orderIds && m.orderIds.length))
                                m.orderIds = [];
                            m.orderIds.push(r.bytes());
                            break;
                        case 2:
                            if (!(m.orderSenderAddresses && m.orderSenderAddresses.length))
                                m.orderSenderAddresses = [];
                            m.orderSenderAddresses.push(r.bytes());
                            break;
                        case 3:
                            if (!(m.orderSenderPublicKeys && m.orderSenderPublicKeys.length))
                                m.orderSenderPublicKeys = [];
                            m.orderSenderPublicKeys.push(r.bytes());
                            break;
                        default:
                            r.skipType(t & 7);
                            break;
                        }
                    }
                    return m;
                };

                return ExchangeMetadata;
            })();

            TransactionMetadata.InvokeScriptMetadata = (function() {

                function InvokeScriptMetadata(p) {
                    this["arguments"] = [];
                    this.payments = [];
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }

                InvokeScriptMetadata.prototype.dAppAddress = $util.newBuffer([]);
                InvokeScriptMetadata.prototype.functionName = "";
                InvokeScriptMetadata.prototype["arguments"] = $util.emptyArray;
                InvokeScriptMetadata.prototype.payments = $util.emptyArray;
                InvokeScriptMetadata.prototype.result = null;

                InvokeScriptMetadata.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    if (m.dAppAddress != null && m.hasOwnProperty("dAppAddress"))
                        w.uint32(10).bytes(m.dAppAddress);
                    if (m.functionName != null && m.hasOwnProperty("functionName"))
                        w.uint32(18).string(m.functionName);
                    if (m["arguments"] != null && m["arguments"].length) {
                        for (var i = 0; i < m["arguments"].length; ++i)
                            $root.waves.InvokeScriptResult.Call.Argument.encode(m["arguments"][i], w.uint32(26).fork()).ldelim();
                    }
                    if (m.payments != null && m.payments.length) {
                        for (var i = 0; i < m.payments.length; ++i)
                            $root.waves.Amount.encode(m.payments[i], w.uint32(34).fork()).ldelim();
                    }
                    if (m.result != null && m.hasOwnProperty("result"))
                        $root.waves.InvokeScriptResult.encode(m.result, w.uint32(42).fork()).ldelim();
                    return w;
                };

                InvokeScriptMetadata.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.waves.events.TransactionMetadata.InvokeScriptMetadata();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                        case 1:
                            m.dAppAddress = r.bytes();
                            break;
                        case 2:
                            m.functionName = r.string();
                            break;
                        case 3:
                            if (!(m["arguments"] && m["arguments"].length))
                                m["arguments"] = [];
                            m["arguments"].push($root.waves.InvokeScriptResult.Call.Argument.decode(r, r.uint32()));
                            break;
                        case 4:
                            if (!(m.payments && m.payments.length))
                                m.payments = [];
                            m.payments.push($root.waves.Amount.decode(r, r.uint32()));
                            break;
                        case 5:
                            m.result = $root.waves.InvokeScriptResult.decode(r, r.uint32());
                            break;
                        default:
                            r.skipType(t & 7);
                            break;
                        }
                    }
                    return m;
                };

                InvokeScriptMetadata.Argument = (function() {

                    function Argument(p) {
                        if (p)
                            for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                                if (p[ks[i]] != null)
                                    this[ks[i]] = p[ks[i]];
                    }

                    Argument.prototype.integerValue = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
                    Argument.prototype.binaryValue = $util.newBuffer([]);
                    Argument.prototype.stringValue = "";
                    Argument.prototype.booleanValue = false;
                    Argument.prototype.list = null;

                    var $oneOfFields;

                    Object.defineProperty(Argument.prototype, "value", {
                        get: $util.oneOfGetter($oneOfFields = ["integerValue", "binaryValue", "stringValue", "booleanValue", "list"]),
                        set: $util.oneOfSetter($oneOfFields)
                    });

                    Argument.encode = function encode(m, w) {
                        if (!w)
                            w = $Writer.create();
                        if (m.integerValue != null && m.hasOwnProperty("integerValue"))
                            w.uint32(8).int64(m.integerValue);
                        if (m.binaryValue != null && m.hasOwnProperty("binaryValue"))
                            w.uint32(18).bytes(m.binaryValue);
                        if (m.stringValue != null && m.hasOwnProperty("stringValue"))
                            w.uint32(26).string(m.stringValue);
                        if (m.booleanValue != null && m.hasOwnProperty("booleanValue"))
                            w.uint32(32).bool(m.booleanValue);
                        if (m.list != null && m.hasOwnProperty("list"))
                            $root.waves.events.TransactionMetadata.InvokeScriptMetadata.Argument.List.encode(m.list, w.uint32(82).fork()).ldelim();
                        return w;
                    };

                    Argument.decode = function decode(r, l) {
                        if (!(r instanceof $Reader))
                            r = $Reader.create(r);
                        var c = l === undefined ? r.len : r.pos + l, m = new $root.waves.events.TransactionMetadata.InvokeScriptMetadata.Argument();
                        while (r.pos < c) {
                            var t = r.uint32();
                            switch (t >>> 3) {
                            case 1:
                                m.integerValue = r.int64();
                                break;
                            case 2:
                                m.binaryValue = r.bytes();
                                break;
                            case 3:
                                m.stringValue = r.string();
                                break;
                            case 4:
                                m.booleanValue = r.bool();
                                break;
                            case 10:
                                m.list = $root.waves.events.TransactionMetadata.InvokeScriptMetadata.Argument.List.decode(r, r.uint32());
                                break;
                            default:
                                r.skipType(t & 7);
                                break;
                            }
                        }
                        return m;
                    };

                    Argument.List = (function() {

                        function List(p) {
                            this.items = [];
                            if (p)
                                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                                    if (p[ks[i]] != null)
                                        this[ks[i]] = p[ks[i]];
                        }

                        List.prototype.items = $util.emptyArray;

                        List.encode = function encode(m, w) {
                            if (!w)
                                w = $Writer.create();
                            if (m.items != null && m.items.length) {
                                for (var i = 0; i < m.items.length; ++i)
                                    $root.waves.events.TransactionMetadata.InvokeScriptMetadata.Argument.encode(m.items[i], w.uint32(10).fork()).ldelim();
                            }
                            return w;
                        };

                        List.decode = function decode(r, l) {
                            if (!(r instanceof $Reader))
                                r = $Reader.create(r);
                            var c = l === undefined ? r.len : r.pos + l, m = new $root.waves.events.TransactionMetadata.InvokeScriptMetadata.Argument.List();
                            while (r.pos < c) {
                                var t = r.uint32();
                                switch (t >>> 3) {
                                case 1:
                                    if (!(m.items && m.items.length))
                                        m.items = [];
                                    m.items.push($root.waves.events.TransactionMetadata.InvokeScriptMetadata.Argument.decode(r, r.uint32()));
                                    break;
                                default:
                                    r.skipType(t & 7);
                                    break;
                                }
                            }
                            return m;
                        };

                        return List;
                    })();

                    return Argument;
                })();

                return InvokeScriptMetadata;
            })();

            TransactionMetadata.LeaseMetadata = (function() {

                function LeaseMetadata(p) {
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }

                LeaseMetadata.prototype.recipientAddress = $util.newBuffer([]);

                LeaseMetadata.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    if (m.recipientAddress != null && m.hasOwnProperty("recipientAddress"))
                        w.uint32(10).bytes(m.recipientAddress);
                    return w;
                };

                LeaseMetadata.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.waves.events.TransactionMetadata.LeaseMetadata();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                        case 1:
                            m.recipientAddress = r.bytes();
                            break;
                        default:
                            r.skipType(t & 7);
                            break;
                        }
                    }
                    return m;
                };

                return LeaseMetadata;
            })();

            TransactionMetadata.EthereumTransferMetadata = (function() {

                function EthereumTransferMetadata(p) {
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }

                EthereumTransferMetadata.prototype.recipientAddress = $util.newBuffer([]);
                EthereumTransferMetadata.prototype.amount = null;

                EthereumTransferMetadata.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    if (m.recipientAddress != null && m.hasOwnProperty("recipientAddress"))
                        w.uint32(10).bytes(m.recipientAddress);
                    if (m.amount != null && m.hasOwnProperty("amount"))
                        $root.waves.Amount.encode(m.amount, w.uint32(18).fork()).ldelim();
                    return w;
                };

                EthereumTransferMetadata.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.waves.events.TransactionMetadata.EthereumTransferMetadata();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                        case 1:
                            m.recipientAddress = r.bytes();
                            break;
                        case 2:
                            m.amount = $root.waves.Amount.decode(r, r.uint32());
                            break;
                        default:
                            r.skipType(t & 7);
                            break;
                        }
                    }
                    return m;
                };

                return EthereumTransferMetadata;
            })();

            TransactionMetadata.EthereumMetadata = (function() {

                function EthereumMetadata(p) {
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }

                EthereumMetadata.prototype.timestamp = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
                EthereumMetadata.prototype.fee = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
                EthereumMetadata.prototype.senderPublicKey = $util.newBuffer([]);
                EthereumMetadata.prototype.transfer = null;
                EthereumMetadata.prototype.invoke = null;

                var $oneOfFields;

                Object.defineProperty(EthereumMetadata.prototype, "Action", {
                    get: $util.oneOfGetter($oneOfFields = ["transfer", "invoke"]),
                    set: $util.oneOfSetter($oneOfFields)
                });

                EthereumMetadata.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    if (m.timestamp != null && m.hasOwnProperty("timestamp"))
                        w.uint32(16).int64(m.timestamp);
                    if (m.fee != null && m.hasOwnProperty("fee"))
                        w.uint32(24).int64(m.fee);
                    if (m.senderPublicKey != null && m.hasOwnProperty("senderPublicKey"))
                        w.uint32(34).bytes(m.senderPublicKey);
                    if (m.transfer != null && m.hasOwnProperty("transfer"))
                        $root.waves.events.TransactionMetadata.EthereumTransferMetadata.encode(m.transfer, w.uint32(82).fork()).ldelim();
                    if (m.invoke != null && m.hasOwnProperty("invoke"))
                        $root.waves.events.TransactionMetadata.InvokeScriptMetadata.encode(m.invoke, w.uint32(90).fork()).ldelim();
                    return w;
                };

                EthereumMetadata.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.waves.events.TransactionMetadata.EthereumMetadata();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                        case 2:
                            m.timestamp = r.int64();
                            break;
                        case 3:
                            m.fee = r.int64();
                            break;
                        case 4:
                            m.senderPublicKey = r.bytes();
                            break;
                        case 10:
                            m.transfer = $root.waves.events.TransactionMetadata.EthereumTransferMetadata.decode(r, r.uint32());
                            break;
                        case 11:
                            m.invoke = $root.waves.events.TransactionMetadata.InvokeScriptMetadata.decode(r, r.uint32());
                            break;
                        default:
                            r.skipType(t & 7);
                            break;
                        }
                    }
                    return m;
                };

                return EthereumMetadata;
            })();

            return TransactionMetadata;
        })();

        events.grpc = (function() {

            var grpc = {};

            grpc.BlockchainUpdatesApi = (function() {

                function BlockchainUpdatesApi(rpcImpl, requestDelimited, responseDelimited) {
                    $protobuf.rpc.Service.call(this, rpcImpl, requestDelimited, responseDelimited);
                }

                (BlockchainUpdatesApi.prototype = Object.create($protobuf.rpc.Service.prototype)).constructor = BlockchainUpdatesApi;


                Object.defineProperty(BlockchainUpdatesApi.prototype.getBlockUpdate = function getBlockUpdate(request, callback) {
                    return this.rpcCall(getBlockUpdate, $root.waves.events.grpc.GetBlockUpdateRequest, $root.waves.events.grpc.GetBlockUpdateResponse, request, callback);
                }, "name", { value: "GetBlockUpdate" });


                Object.defineProperty(BlockchainUpdatesApi.prototype.getBlockUpdatesRange = function getBlockUpdatesRange(request, callback) {
                    return this.rpcCall(getBlockUpdatesRange, $root.waves.events.grpc.GetBlockUpdatesRangeRequest, $root.waves.events.grpc.GetBlockUpdatesRangeResponse, request, callback);
                }, "name", { value: "GetBlockUpdatesRange" });


                Object.defineProperty(BlockchainUpdatesApi.prototype.subscribe = function subscribe(request, callback) {
                    return this.rpcCall(subscribe, $root.waves.events.grpc.SubscribeRequest, $root.waves.events.grpc.SubscribeEvent, request, callback);
                }, "name", { value: "Subscribe" });

                return BlockchainUpdatesApi;
            })();

            grpc.GetBlockUpdateRequest = (function() {

                function GetBlockUpdateRequest(p) {
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }

                GetBlockUpdateRequest.prototype.height = 0;

                GetBlockUpdateRequest.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    if (m.height != null && m.hasOwnProperty("height"))
                        w.uint32(8).int32(m.height);
                    return w;
                };

                GetBlockUpdateRequest.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.waves.events.grpc.GetBlockUpdateRequest();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                        case 1:
                            m.height = r.int32();
                            break;
                        default:
                            r.skipType(t & 7);
                            break;
                        }
                    }
                    return m;
                };

                return GetBlockUpdateRequest;
            })();

            grpc.GetBlockUpdateResponse = (function() {

                function GetBlockUpdateResponse(p) {
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }

                GetBlockUpdateResponse.prototype.update = null;

                GetBlockUpdateResponse.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    if (m.update != null && m.hasOwnProperty("update"))
                        $root.waves.events.BlockchainUpdated.encode(m.update, w.uint32(10).fork()).ldelim();
                    return w;
                };

                GetBlockUpdateResponse.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.waves.events.grpc.GetBlockUpdateResponse();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                        case 1:
                            m.update = $root.waves.events.BlockchainUpdated.decode(r, r.uint32());
                            break;
                        default:
                            r.skipType(t & 7);
                            break;
                        }
                    }
                    return m;
                };

                return GetBlockUpdateResponse;
            })();

            grpc.GetBlockUpdatesRangeRequest = (function() {

                function GetBlockUpdatesRangeRequest(p) {
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }

                GetBlockUpdatesRangeRequest.prototype.fromHeight = 0;
                GetBlockUpdatesRangeRequest.prototype.toHeight = 0;

                GetBlockUpdatesRangeRequest.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    if (m.fromHeight != null && m.hasOwnProperty("fromHeight"))
                        w.uint32(8).int32(m.fromHeight);
                    if (m.toHeight != null && m.hasOwnProperty("toHeight"))
                        w.uint32(16).int32(m.toHeight);
                    return w;
                };

                GetBlockUpdatesRangeRequest.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.waves.events.grpc.GetBlockUpdatesRangeRequest();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                        case 1:
                            m.fromHeight = r.int32();
                            break;
                        case 2:
                            m.toHeight = r.int32();
                            break;
                        default:
                            r.skipType(t & 7);
                            break;
                        }
                    }
                    return m;
                };

                return GetBlockUpdatesRangeRequest;
            })();

            grpc.GetBlockUpdatesRangeResponse = (function() {

                function GetBlockUpdatesRangeResponse(p) {
                    this.updates = [];
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }

                GetBlockUpdatesRangeResponse.prototype.updates = $util.emptyArray;

                GetBlockUpdatesRangeResponse.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    if (m.updates != null && m.updates.length) {
                        for (var i = 0; i < m.updates.length; ++i)
                            $root.waves.events.BlockchainUpdated.encode(m.updates[i], w.uint32(10).fork()).ldelim();
                    }
                    return w;
                };

                GetBlockUpdatesRangeResponse.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.waves.events.grpc.GetBlockUpdatesRangeResponse();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                        case 1:
                            if (!(m.updates && m.updates.length))
                                m.updates = [];
                            m.updates.push($root.waves.events.BlockchainUpdated.decode(r, r.uint32()));
                            break;
                        default:
                            r.skipType(t & 7);
                            break;
                        }
                    }
                    return m;
                };

                return GetBlockUpdatesRangeResponse;
            })();

            grpc.SubscribeRequest = (function() {

                function SubscribeRequest(p) {
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }

                SubscribeRequest.prototype.fromHeight = 0;
                SubscribeRequest.prototype.toHeight = 0;

                SubscribeRequest.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    if (m.fromHeight != null && m.hasOwnProperty("fromHeight"))
                        w.uint32(8).int32(m.fromHeight);
                    if (m.toHeight != null && m.hasOwnProperty("toHeight"))
                        w.uint32(16).int32(m.toHeight);
                    return w;
                };

                SubscribeRequest.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.waves.events.grpc.SubscribeRequest();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                        case 1:
                            m.fromHeight = r.int32();
                            break;
                        case 2:
                            m.toHeight = r.int32();
                            break;
                        default:
                            r.skipType(t & 7);
                            break;
                        }
                    }
                    return m;
                };

                return SubscribeRequest;
            })();

            grpc.SubscribeEvent = (function() {

                function SubscribeEvent(p) {
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }

                SubscribeEvent.prototype.update = null;

                SubscribeEvent.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    if (m.update != null && m.hasOwnProperty("update"))
                        $root.waves.events.BlockchainUpdated.encode(m.update, w.uint32(10).fork()).ldelim();
                    return w;
                };

                SubscribeEvent.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.waves.events.grpc.SubscribeEvent();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                        case 1:
                            m.update = $root.waves.events.BlockchainUpdated.decode(r, r.uint32());
                            break;
                        default:
                            r.skipType(t & 7);
                            break;
                        }
                    }
                    return m;
                };

                return SubscribeEvent;
            })();

            return grpc;
        })();

        return events;
    })();

    waves.InvokeScriptResult = (function() {

        function InvokeScriptResult(p) {
            this.data = [];
            this.transfers = [];
            this.issues = [];
            this.reissues = [];
            this.burns = [];
            this.sponsorFees = [];
            this.leases = [];
            this.leaseCancels = [];
            this.invokes = [];
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        InvokeScriptResult.prototype.data = $util.emptyArray;
        InvokeScriptResult.prototype.transfers = $util.emptyArray;
        InvokeScriptResult.prototype.issues = $util.emptyArray;
        InvokeScriptResult.prototype.reissues = $util.emptyArray;
        InvokeScriptResult.prototype.burns = $util.emptyArray;
        InvokeScriptResult.prototype.errorMessage = null;
        InvokeScriptResult.prototype.sponsorFees = $util.emptyArray;
        InvokeScriptResult.prototype.leases = $util.emptyArray;
        InvokeScriptResult.prototype.leaseCancels = $util.emptyArray;
        InvokeScriptResult.prototype.invokes = $util.emptyArray;

        InvokeScriptResult.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.data != null && m.data.length) {
                for (var i = 0; i < m.data.length; ++i)
                    $root.waves.DataTransactionData.DataEntry.encode(m.data[i], w.uint32(10).fork()).ldelim();
            }
            if (m.transfers != null && m.transfers.length) {
                for (var i = 0; i < m.transfers.length; ++i)
                    $root.waves.InvokeScriptResult.Payment.encode(m.transfers[i], w.uint32(18).fork()).ldelim();
            }
            if (m.issues != null && m.issues.length) {
                for (var i = 0; i < m.issues.length; ++i)
                    $root.waves.InvokeScriptResult.Issue.encode(m.issues[i], w.uint32(26).fork()).ldelim();
            }
            if (m.reissues != null && m.reissues.length) {
                for (var i = 0; i < m.reissues.length; ++i)
                    $root.waves.InvokeScriptResult.Reissue.encode(m.reissues[i], w.uint32(34).fork()).ldelim();
            }
            if (m.burns != null && m.burns.length) {
                for (var i = 0; i < m.burns.length; ++i)
                    $root.waves.InvokeScriptResult.Burn.encode(m.burns[i], w.uint32(42).fork()).ldelim();
            }
            if (m.errorMessage != null && m.hasOwnProperty("errorMessage"))
                $root.waves.InvokeScriptResult.ErrorMessage.encode(m.errorMessage, w.uint32(50).fork()).ldelim();
            if (m.sponsorFees != null && m.sponsorFees.length) {
                for (var i = 0; i < m.sponsorFees.length; ++i)
                    $root.waves.InvokeScriptResult.SponsorFee.encode(m.sponsorFees[i], w.uint32(58).fork()).ldelim();
            }
            if (m.leases != null && m.leases.length) {
                for (var i = 0; i < m.leases.length; ++i)
                    $root.waves.InvokeScriptResult.Lease.encode(m.leases[i], w.uint32(66).fork()).ldelim();
            }
            if (m.leaseCancels != null && m.leaseCancels.length) {
                for (var i = 0; i < m.leaseCancels.length; ++i)
                    $root.waves.InvokeScriptResult.LeaseCancel.encode(m.leaseCancels[i], w.uint32(74).fork()).ldelim();
            }
            if (m.invokes != null && m.invokes.length) {
                for (var i = 0; i < m.invokes.length; ++i)
                    $root.waves.InvokeScriptResult.Invocation.encode(m.invokes[i], w.uint32(82).fork()).ldelim();
            }
            return w;
        };

        InvokeScriptResult.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.waves.InvokeScriptResult();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    if (!(m.data && m.data.length))
                        m.data = [];
                    m.data.push($root.waves.DataTransactionData.DataEntry.decode(r, r.uint32()));
                    break;
                case 2:
                    if (!(m.transfers && m.transfers.length))
                        m.transfers = [];
                    m.transfers.push($root.waves.InvokeScriptResult.Payment.decode(r, r.uint32()));
                    break;
                case 3:
                    if (!(m.issues && m.issues.length))
                        m.issues = [];
                    m.issues.push($root.waves.InvokeScriptResult.Issue.decode(r, r.uint32()));
                    break;
                case 4:
                    if (!(m.reissues && m.reissues.length))
                        m.reissues = [];
                    m.reissues.push($root.waves.InvokeScriptResult.Reissue.decode(r, r.uint32()));
                    break;
                case 5:
                    if (!(m.burns && m.burns.length))
                        m.burns = [];
                    m.burns.push($root.waves.InvokeScriptResult.Burn.decode(r, r.uint32()));
                    break;
                case 6:
                    m.errorMessage = $root.waves.InvokeScriptResult.ErrorMessage.decode(r, r.uint32());
                    break;
                case 7:
                    if (!(m.sponsorFees && m.sponsorFees.length))
                        m.sponsorFees = [];
                    m.sponsorFees.push($root.waves.InvokeScriptResult.SponsorFee.decode(r, r.uint32()));
                    break;
                case 8:
                    if (!(m.leases && m.leases.length))
                        m.leases = [];
                    m.leases.push($root.waves.InvokeScriptResult.Lease.decode(r, r.uint32()));
                    break;
                case 9:
                    if (!(m.leaseCancels && m.leaseCancels.length))
                        m.leaseCancels = [];
                    m.leaseCancels.push($root.waves.InvokeScriptResult.LeaseCancel.decode(r, r.uint32()));
                    break;
                case 10:
                    if (!(m.invokes && m.invokes.length))
                        m.invokes = [];
                    m.invokes.push($root.waves.InvokeScriptResult.Invocation.decode(r, r.uint32()));
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        InvokeScriptResult.Payment = (function() {

            function Payment(p) {
                if (p)
                    for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                        if (p[ks[i]] != null)
                            this[ks[i]] = p[ks[i]];
            }

            Payment.prototype.address = $util.newBuffer([]);
            Payment.prototype.amount = null;

            Payment.encode = function encode(m, w) {
                if (!w)
                    w = $Writer.create();
                if (m.address != null && m.hasOwnProperty("address"))
                    w.uint32(10).bytes(m.address);
                if (m.amount != null && m.hasOwnProperty("amount"))
                    $root.waves.Amount.encode(m.amount, w.uint32(18).fork()).ldelim();
                return w;
            };

            Payment.decode = function decode(r, l) {
                if (!(r instanceof $Reader))
                    r = $Reader.create(r);
                var c = l === undefined ? r.len : r.pos + l, m = new $root.waves.InvokeScriptResult.Payment();
                while (r.pos < c) {
                    var t = r.uint32();
                    switch (t >>> 3) {
                    case 1:
                        m.address = r.bytes();
                        break;
                    case 2:
                        m.amount = $root.waves.Amount.decode(r, r.uint32());
                        break;
                    default:
                        r.skipType(t & 7);
                        break;
                    }
                }
                return m;
            };

            return Payment;
        })();

        InvokeScriptResult.Issue = (function() {

            function Issue(p) {
                if (p)
                    for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                        if (p[ks[i]] != null)
                            this[ks[i]] = p[ks[i]];
            }

            Issue.prototype.assetId = $util.newBuffer([]);
            Issue.prototype.name = "";
            Issue.prototype.description = "";
            Issue.prototype.amount = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
            Issue.prototype.decimals = 0;
            Issue.prototype.reissuable = false;
            Issue.prototype.script = $util.newBuffer([]);
            Issue.prototype.nonce = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

            Issue.encode = function encode(m, w) {
                if (!w)
                    w = $Writer.create();
                if (m.assetId != null && m.hasOwnProperty("assetId"))
                    w.uint32(10).bytes(m.assetId);
                if (m.name != null && m.hasOwnProperty("name"))
                    w.uint32(18).string(m.name);
                if (m.description != null && m.hasOwnProperty("description"))
                    w.uint32(26).string(m.description);
                if (m.amount != null && m.hasOwnProperty("amount"))
                    w.uint32(32).int64(m.amount);
                if (m.decimals != null && m.hasOwnProperty("decimals"))
                    w.uint32(40).int32(m.decimals);
                if (m.reissuable != null && m.hasOwnProperty("reissuable"))
                    w.uint32(48).bool(m.reissuable);
                if (m.script != null && m.hasOwnProperty("script"))
                    w.uint32(58).bytes(m.script);
                if (m.nonce != null && m.hasOwnProperty("nonce"))
                    w.uint32(64).int64(m.nonce);
                return w;
            };

            Issue.decode = function decode(r, l) {
                if (!(r instanceof $Reader))
                    r = $Reader.create(r);
                var c = l === undefined ? r.len : r.pos + l, m = new $root.waves.InvokeScriptResult.Issue();
                while (r.pos < c) {
                    var t = r.uint32();
                    switch (t >>> 3) {
                    case 1:
                        m.assetId = r.bytes();
                        break;
                    case 2:
                        m.name = r.string();
                        break;
                    case 3:
                        m.description = r.string();
                        break;
                    case 4:
                        m.amount = r.int64();
                        break;
                    case 5:
                        m.decimals = r.int32();
                        break;
                    case 6:
                        m.reissuable = r.bool();
                        break;
                    case 7:
                        m.script = r.bytes();
                        break;
                    case 8:
                        m.nonce = r.int64();
                        break;
                    default:
                        r.skipType(t & 7);
                        break;
                    }
                }
                return m;
            };

            return Issue;
        })();

        InvokeScriptResult.Reissue = (function() {

            function Reissue(p) {
                if (p)
                    for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                        if (p[ks[i]] != null)
                            this[ks[i]] = p[ks[i]];
            }

            Reissue.prototype.assetId = $util.newBuffer([]);
            Reissue.prototype.amount = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
            Reissue.prototype.isReissuable = false;

            Reissue.encode = function encode(m, w) {
                if (!w)
                    w = $Writer.create();
                if (m.assetId != null && m.hasOwnProperty("assetId"))
                    w.uint32(10).bytes(m.assetId);
                if (m.amount != null && m.hasOwnProperty("amount"))
                    w.uint32(16).int64(m.amount);
                if (m.isReissuable != null && m.hasOwnProperty("isReissuable"))
                    w.uint32(24).bool(m.isReissuable);
                return w;
            };

            Reissue.decode = function decode(r, l) {
                if (!(r instanceof $Reader))
                    r = $Reader.create(r);
                var c = l === undefined ? r.len : r.pos + l, m = new $root.waves.InvokeScriptResult.Reissue();
                while (r.pos < c) {
                    var t = r.uint32();
                    switch (t >>> 3) {
                    case 1:
                        m.assetId = r.bytes();
                        break;
                    case 2:
                        m.amount = r.int64();
                        break;
                    case 3:
                        m.isReissuable = r.bool();
                        break;
                    default:
                        r.skipType(t & 7);
                        break;
                    }
                }
                return m;
            };

            return Reissue;
        })();

        InvokeScriptResult.Burn = (function() {

            function Burn(p) {
                if (p)
                    for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                        if (p[ks[i]] != null)
                            this[ks[i]] = p[ks[i]];
            }

            Burn.prototype.assetId = $util.newBuffer([]);
            Burn.prototype.amount = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

            Burn.encode = function encode(m, w) {
                if (!w)
                    w = $Writer.create();
                if (m.assetId != null && m.hasOwnProperty("assetId"))
                    w.uint32(10).bytes(m.assetId);
                if (m.amount != null && m.hasOwnProperty("amount"))
                    w.uint32(16).int64(m.amount);
                return w;
            };

            Burn.decode = function decode(r, l) {
                if (!(r instanceof $Reader))
                    r = $Reader.create(r);
                var c = l === undefined ? r.len : r.pos + l, m = new $root.waves.InvokeScriptResult.Burn();
                while (r.pos < c) {
                    var t = r.uint32();
                    switch (t >>> 3) {
                    case 1:
                        m.assetId = r.bytes();
                        break;
                    case 2:
                        m.amount = r.int64();
                        break;
                    default:
                        r.skipType(t & 7);
                        break;
                    }
                }
                return m;
            };

            return Burn;
        })();

        InvokeScriptResult.SponsorFee = (function() {

            function SponsorFee(p) {
                if (p)
                    for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                        if (p[ks[i]] != null)
                            this[ks[i]] = p[ks[i]];
            }

            SponsorFee.prototype.minFee = null;

            SponsorFee.encode = function encode(m, w) {
                if (!w)
                    w = $Writer.create();
                if (m.minFee != null && m.hasOwnProperty("minFee"))
                    $root.waves.Amount.encode(m.minFee, w.uint32(10).fork()).ldelim();
                return w;
            };

            SponsorFee.decode = function decode(r, l) {
                if (!(r instanceof $Reader))
                    r = $Reader.create(r);
                var c = l === undefined ? r.len : r.pos + l, m = new $root.waves.InvokeScriptResult.SponsorFee();
                while (r.pos < c) {
                    var t = r.uint32();
                    switch (t >>> 3) {
                    case 1:
                        m.minFee = $root.waves.Amount.decode(r, r.uint32());
                        break;
                    default:
                        r.skipType(t & 7);
                        break;
                    }
                }
                return m;
            };

            return SponsorFee;
        })();

        InvokeScriptResult.Lease = (function() {

            function Lease(p) {
                if (p)
                    for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                        if (p[ks[i]] != null)
                            this[ks[i]] = p[ks[i]];
            }

            Lease.prototype.recipient = null;
            Lease.prototype.amount = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
            Lease.prototype.nonce = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
            Lease.prototype.leaseId = $util.newBuffer([]);

            Lease.encode = function encode(m, w) {
                if (!w)
                    w = $Writer.create();
                if (m.recipient != null && m.hasOwnProperty("recipient"))
                    $root.waves.Recipient.encode(m.recipient, w.uint32(10).fork()).ldelim();
                if (m.amount != null && m.hasOwnProperty("amount"))
                    w.uint32(16).int64(m.amount);
                if (m.nonce != null && m.hasOwnProperty("nonce"))
                    w.uint32(24).int64(m.nonce);
                if (m.leaseId != null && m.hasOwnProperty("leaseId"))
                    w.uint32(34).bytes(m.leaseId);
                return w;
            };

            Lease.decode = function decode(r, l) {
                if (!(r instanceof $Reader))
                    r = $Reader.create(r);
                var c = l === undefined ? r.len : r.pos + l, m = new $root.waves.InvokeScriptResult.Lease();
                while (r.pos < c) {
                    var t = r.uint32();
                    switch (t >>> 3) {
                    case 1:
                        m.recipient = $root.waves.Recipient.decode(r, r.uint32());
                        break;
                    case 2:
                        m.amount = r.int64();
                        break;
                    case 3:
                        m.nonce = r.int64();
                        break;
                    case 4:
                        m.leaseId = r.bytes();
                        break;
                    default:
                        r.skipType(t & 7);
                        break;
                    }
                }
                return m;
            };

            return Lease;
        })();

        InvokeScriptResult.LeaseCancel = (function() {

            function LeaseCancel(p) {
                if (p)
                    for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                        if (p[ks[i]] != null)
                            this[ks[i]] = p[ks[i]];
            }

            LeaseCancel.prototype.leaseId = $util.newBuffer([]);

            LeaseCancel.encode = function encode(m, w) {
                if (!w)
                    w = $Writer.create();
                if (m.leaseId != null && m.hasOwnProperty("leaseId"))
                    w.uint32(10).bytes(m.leaseId);
                return w;
            };

            LeaseCancel.decode = function decode(r, l) {
                if (!(r instanceof $Reader))
                    r = $Reader.create(r);
                var c = l === undefined ? r.len : r.pos + l, m = new $root.waves.InvokeScriptResult.LeaseCancel();
                while (r.pos < c) {
                    var t = r.uint32();
                    switch (t >>> 3) {
                    case 1:
                        m.leaseId = r.bytes();
                        break;
                    default:
                        r.skipType(t & 7);
                        break;
                    }
                }
                return m;
            };

            return LeaseCancel;
        })();

        InvokeScriptResult.ErrorMessage = (function() {

            function ErrorMessage(p) {
                if (p)
                    for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                        if (p[ks[i]] != null)
                            this[ks[i]] = p[ks[i]];
            }

            ErrorMessage.prototype.code = 0;
            ErrorMessage.prototype.text = "";

            ErrorMessage.encode = function encode(m, w) {
                if (!w)
                    w = $Writer.create();
                if (m.code != null && m.hasOwnProperty("code"))
                    w.uint32(8).int32(m.code);
                if (m.text != null && m.hasOwnProperty("text"))
                    w.uint32(18).string(m.text);
                return w;
            };

            ErrorMessage.decode = function decode(r, l) {
                if (!(r instanceof $Reader))
                    r = $Reader.create(r);
                var c = l === undefined ? r.len : r.pos + l, m = new $root.waves.InvokeScriptResult.ErrorMessage();
                while (r.pos < c) {
                    var t = r.uint32();
                    switch (t >>> 3) {
                    case 1:
                        m.code = r.int32();
                        break;
                    case 2:
                        m.text = r.string();
                        break;
                    default:
                        r.skipType(t & 7);
                        break;
                    }
                }
                return m;
            };

            return ErrorMessage;
        })();

        InvokeScriptResult.Call = (function() {

            function Call(p) {
                this.argsBytes = [];
                this.args = [];
                if (p)
                    for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                        if (p[ks[i]] != null)
                            this[ks[i]] = p[ks[i]];
            }

            Call.prototype["function"] = "";
            Call.prototype.argsBytes = $util.emptyArray;
            Call.prototype.args = $util.emptyArray;

            Call.encode = function encode(m, w) {
                if (!w)
                    w = $Writer.create();
                if (m["function"] != null && m.hasOwnProperty("function"))
                    w.uint32(10).string(m["function"]);
                if (m.argsBytes != null && m.argsBytes.length) {
                    for (var i = 0; i < m.argsBytes.length; ++i)
                        w.uint32(18).bytes(m.argsBytes[i]);
                }
                if (m.args != null && m.args.length) {
                    for (var i = 0; i < m.args.length; ++i)
                        $root.waves.InvokeScriptResult.Call.Argument.encode(m.args[i], w.uint32(26).fork()).ldelim();
                }
                return w;
            };

            Call.decode = function decode(r, l) {
                if (!(r instanceof $Reader))
                    r = $Reader.create(r);
                var c = l === undefined ? r.len : r.pos + l, m = new $root.waves.InvokeScriptResult.Call();
                while (r.pos < c) {
                    var t = r.uint32();
                    switch (t >>> 3) {
                    case 1:
                        m["function"] = r.string();
                        break;
                    case 2:
                        if (!(m.argsBytes && m.argsBytes.length))
                            m.argsBytes = [];
                        m.argsBytes.push(r.bytes());
                        break;
                    case 3:
                        if (!(m.args && m.args.length))
                            m.args = [];
                        m.args.push($root.waves.InvokeScriptResult.Call.Argument.decode(r, r.uint32()));
                        break;
                    default:
                        r.skipType(t & 7);
                        break;
                    }
                }
                return m;
            };

            Call.Argument = (function() {

                function Argument(p) {
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }

                Argument.prototype.integerValue = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
                Argument.prototype.binaryValue = $util.newBuffer([]);
                Argument.prototype.stringValue = "";
                Argument.prototype.booleanValue = false;
                Argument.prototype.caseObj = $util.newBuffer([]);
                Argument.prototype.list = null;

                var $oneOfFields;

                Object.defineProperty(Argument.prototype, "value", {
                    get: $util.oneOfGetter($oneOfFields = ["integerValue", "binaryValue", "stringValue", "booleanValue", "caseObj", "list"]),
                    set: $util.oneOfSetter($oneOfFields)
                });

                Argument.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    if (m.integerValue != null && m.hasOwnProperty("integerValue"))
                        w.uint32(8).int64(m.integerValue);
                    if (m.binaryValue != null && m.hasOwnProperty("binaryValue"))
                        w.uint32(18).bytes(m.binaryValue);
                    if (m.stringValue != null && m.hasOwnProperty("stringValue"))
                        w.uint32(26).string(m.stringValue);
                    if (m.booleanValue != null && m.hasOwnProperty("booleanValue"))
                        w.uint32(32).bool(m.booleanValue);
                    if (m.caseObj != null && m.hasOwnProperty("caseObj"))
                        w.uint32(42).bytes(m.caseObj);
                    if (m.list != null && m.hasOwnProperty("list"))
                        $root.waves.InvokeScriptResult.Call.Argument.List.encode(m.list, w.uint32(82).fork()).ldelim();
                    return w;
                };

                Argument.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.waves.InvokeScriptResult.Call.Argument();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                        case 1:
                            m.integerValue = r.int64();
                            break;
                        case 2:
                            m.binaryValue = r.bytes();
                            break;
                        case 3:
                            m.stringValue = r.string();
                            break;
                        case 4:
                            m.booleanValue = r.bool();
                            break;
                        case 5:
                            m.caseObj = r.bytes();
                            break;
                        case 10:
                            m.list = $root.waves.InvokeScriptResult.Call.Argument.List.decode(r, r.uint32());
                            break;
                        default:
                            r.skipType(t & 7);
                            break;
                        }
                    }
                    return m;
                };

                Argument.List = (function() {

                    function List(p) {
                        this.items = [];
                        if (p)
                            for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                                if (p[ks[i]] != null)
                                    this[ks[i]] = p[ks[i]];
                    }

                    List.prototype.items = $util.emptyArray;

                    List.encode = function encode(m, w) {
                        if (!w)
                            w = $Writer.create();
                        if (m.items != null && m.items.length) {
                            for (var i = 0; i < m.items.length; ++i)
                                $root.waves.InvokeScriptResult.Call.Argument.encode(m.items[i], w.uint32(10).fork()).ldelim();
                        }
                        return w;
                    };

                    List.decode = function decode(r, l) {
                        if (!(r instanceof $Reader))
                            r = $Reader.create(r);
                        var c = l === undefined ? r.len : r.pos + l, m = new $root.waves.InvokeScriptResult.Call.Argument.List();
                        while (r.pos < c) {
                            var t = r.uint32();
                            switch (t >>> 3) {
                            case 1:
                                if (!(m.items && m.items.length))
                                    m.items = [];
                                m.items.push($root.waves.InvokeScriptResult.Call.Argument.decode(r, r.uint32()));
                                break;
                            default:
                                r.skipType(t & 7);
                                break;
                            }
                        }
                        return m;
                    };

                    return List;
                })();

                return Argument;
            })();

            return Call;
        })();

        InvokeScriptResult.Invocation = (function() {

            function Invocation(p) {
                this.payments = [];
                if (p)
                    for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                        if (p[ks[i]] != null)
                            this[ks[i]] = p[ks[i]];
            }

            Invocation.prototype.dApp = $util.newBuffer([]);
            Invocation.prototype.call = null;
            Invocation.prototype.payments = $util.emptyArray;
            Invocation.prototype.stateChanges = null;

            Invocation.encode = function encode(m, w) {
                if (!w)
                    w = $Writer.create();
                if (m.dApp != null && m.hasOwnProperty("dApp"))
                    w.uint32(10).bytes(m.dApp);
                if (m.call != null && m.hasOwnProperty("call"))
                    $root.waves.InvokeScriptResult.Call.encode(m.call, w.uint32(18).fork()).ldelim();
                if (m.payments != null && m.payments.length) {
                    for (var i = 0; i < m.payments.length; ++i)
                        $root.waves.Amount.encode(m.payments[i], w.uint32(26).fork()).ldelim();
                }
                if (m.stateChanges != null && m.hasOwnProperty("stateChanges"))
                    $root.waves.InvokeScriptResult.encode(m.stateChanges, w.uint32(34).fork()).ldelim();
                return w;
            };

            Invocation.decode = function decode(r, l) {
                if (!(r instanceof $Reader))
                    r = $Reader.create(r);
                var c = l === undefined ? r.len : r.pos + l, m = new $root.waves.InvokeScriptResult.Invocation();
                while (r.pos < c) {
                    var t = r.uint32();
                    switch (t >>> 3) {
                    case 1:
                        m.dApp = r.bytes();
                        break;
                    case 2:
                        m.call = $root.waves.InvokeScriptResult.Call.decode(r, r.uint32());
                        break;
                    case 3:
                        if (!(m.payments && m.payments.length))
                            m.payments = [];
                        m.payments.push($root.waves.Amount.decode(r, r.uint32()));
                        break;
                    case 4:
                        m.stateChanges = $root.waves.InvokeScriptResult.decode(r, r.uint32());
                        break;
                    default:
                        r.skipType(t & 7);
                        break;
                    }
                }
                return m;
            };

            return Invocation;
        })();

        return InvokeScriptResult;
    })();

    waves.DAppMeta = (function() {

        function DAppMeta(p) {
            this.funcs = [];
            this.compactNameAndOriginalNamePairList = [];
            this.originalNames = [];
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        DAppMeta.prototype.version = 0;
        DAppMeta.prototype.funcs = $util.emptyArray;
        DAppMeta.prototype.compactNameAndOriginalNamePairList = $util.emptyArray;
        DAppMeta.prototype.originalNames = $util.emptyArray;

        DAppMeta.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.version != null && m.hasOwnProperty("version"))
                w.uint32(8).int32(m.version);
            if (m.funcs != null && m.funcs.length) {
                for (var i = 0; i < m.funcs.length; ++i)
                    $root.waves.DAppMeta.CallableFuncSignature.encode(m.funcs[i], w.uint32(18).fork()).ldelim();
            }
            if (m.compactNameAndOriginalNamePairList != null && m.compactNameAndOriginalNamePairList.length) {
                for (var i = 0; i < m.compactNameAndOriginalNamePairList.length; ++i)
                    $root.waves.DAppMeta.CompactNameAndOriginalNamePair.encode(m.compactNameAndOriginalNamePairList[i], w.uint32(26).fork()).ldelim();
            }
            if (m.originalNames != null && m.originalNames.length) {
                for (var i = 0; i < m.originalNames.length; ++i)
                    w.uint32(34).string(m.originalNames[i]);
            }
            return w;
        };

        DAppMeta.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.waves.DAppMeta();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.version = r.int32();
                    break;
                case 2:
                    if (!(m.funcs && m.funcs.length))
                        m.funcs = [];
                    m.funcs.push($root.waves.DAppMeta.CallableFuncSignature.decode(r, r.uint32()));
                    break;
                case 3:
                    if (!(m.compactNameAndOriginalNamePairList && m.compactNameAndOriginalNamePairList.length))
                        m.compactNameAndOriginalNamePairList = [];
                    m.compactNameAndOriginalNamePairList.push($root.waves.DAppMeta.CompactNameAndOriginalNamePair.decode(r, r.uint32()));
                    break;
                case 4:
                    if (!(m.originalNames && m.originalNames.length))
                        m.originalNames = [];
                    m.originalNames.push(r.string());
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        DAppMeta.CallableFuncSignature = (function() {

            function CallableFuncSignature(p) {
                if (p)
                    for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                        if (p[ks[i]] != null)
                            this[ks[i]] = p[ks[i]];
            }

            CallableFuncSignature.prototype.types = $util.newBuffer([]);

            CallableFuncSignature.encode = function encode(m, w) {
                if (!w)
                    w = $Writer.create();
                if (m.types != null && m.hasOwnProperty("types"))
                    w.uint32(10).bytes(m.types);
                return w;
            };

            CallableFuncSignature.decode = function decode(r, l) {
                if (!(r instanceof $Reader))
                    r = $Reader.create(r);
                var c = l === undefined ? r.len : r.pos + l, m = new $root.waves.DAppMeta.CallableFuncSignature();
                while (r.pos < c) {
                    var t = r.uint32();
                    switch (t >>> 3) {
                    case 1:
                        m.types = r.bytes();
                        break;
                    default:
                        r.skipType(t & 7);
                        break;
                    }
                }
                return m;
            };

            return CallableFuncSignature;
        })();

        DAppMeta.CompactNameAndOriginalNamePair = (function() {

            function CompactNameAndOriginalNamePair(p) {
                if (p)
                    for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                        if (p[ks[i]] != null)
                            this[ks[i]] = p[ks[i]];
            }

            CompactNameAndOriginalNamePair.prototype.compactName = "";
            CompactNameAndOriginalNamePair.prototype.originalName = "";

            CompactNameAndOriginalNamePair.encode = function encode(m, w) {
                if (!w)
                    w = $Writer.create();
                if (m.compactName != null && m.hasOwnProperty("compactName"))
                    w.uint32(10).string(m.compactName);
                if (m.originalName != null && m.hasOwnProperty("originalName"))
                    w.uint32(18).string(m.originalName);
                return w;
            };

            CompactNameAndOriginalNamePair.decode = function decode(r, l) {
                if (!(r instanceof $Reader))
                    r = $Reader.create(r);
                var c = l === undefined ? r.len : r.pos + l, m = new $root.waves.DAppMeta.CompactNameAndOriginalNamePair();
                while (r.pos < c) {
                    var t = r.uint32();
                    switch (t >>> 3) {
                    case 1:
                        m.compactName = r.string();
                        break;
                    case 2:
                        m.originalName = r.string();
                        break;
                    default:
                        r.skipType(t & 7);
                        break;
                    }
                }
                return m;
            };

            return CompactNameAndOriginalNamePair;
        })();

        return DAppMeta;
    })();

    waves.node = (function() {

        var node = {};

        node.grpc = (function() {

            var grpc = {};

            grpc.AccountsApi = (function() {

                function AccountsApi(rpcImpl, requestDelimited, responseDelimited) {
                    $protobuf.rpc.Service.call(this, rpcImpl, requestDelimited, responseDelimited);
                }

                (AccountsApi.prototype = Object.create($protobuf.rpc.Service.prototype)).constructor = AccountsApi;


                Object.defineProperty(AccountsApi.prototype.getBalances = function getBalances(request, callback) {
                    return this.rpcCall(getBalances, $root.waves.node.grpc.BalancesRequest, $root.waves.node.grpc.BalanceResponse, request, callback);
                }, "name", { value: "GetBalances" });


                Object.defineProperty(AccountsApi.prototype.getScript = function getScript(request, callback) {
                    return this.rpcCall(getScript, $root.waves.node.grpc.AccountRequest, $root.waves.node.grpc.ScriptData, request, callback);
                }, "name", { value: "GetScript" });


                Object.defineProperty(AccountsApi.prototype.getActiveLeases = function getActiveLeases(request, callback) {
                    return this.rpcCall(getActiveLeases, $root.waves.node.grpc.AccountRequest, $root.waves.node.grpc.LeaseResponse, request, callback);
                }, "name", { value: "GetActiveLeases" });


                Object.defineProperty(AccountsApi.prototype.getDataEntries = function getDataEntries(request, callback) {
                    return this.rpcCall(getDataEntries, $root.waves.node.grpc.DataRequest, $root.waves.node.grpc.DataEntryResponse, request, callback);
                }, "name", { value: "GetDataEntries" });


                Object.defineProperty(AccountsApi.prototype.resolveAlias = function resolveAlias(request, callback) {
                    return this.rpcCall(resolveAlias, $root.google.protobuf.StringValue, $root.google.protobuf.BytesValue, request, callback);
                }, "name", { value: "ResolveAlias" });

                return AccountsApi;
            })();

            grpc.AccountRequest = (function() {

                function AccountRequest(p) {
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }

                AccountRequest.prototype.address = $util.newBuffer([]);

                AccountRequest.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    if (m.address != null && m.hasOwnProperty("address"))
                        w.uint32(10).bytes(m.address);
                    return w;
                };

                AccountRequest.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.waves.node.grpc.AccountRequest();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                        case 1:
                            m.address = r.bytes();
                            break;
                        default:
                            r.skipType(t & 7);
                            break;
                        }
                    }
                    return m;
                };

                return AccountRequest;
            })();

            grpc.DataRequest = (function() {

                function DataRequest(p) {
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }

                DataRequest.prototype.address = $util.newBuffer([]);
                DataRequest.prototype.key = "";

                DataRequest.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    if (m.address != null && m.hasOwnProperty("address"))
                        w.uint32(10).bytes(m.address);
                    if (m.key != null && m.hasOwnProperty("key"))
                        w.uint32(18).string(m.key);
                    return w;
                };

                DataRequest.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.waves.node.grpc.DataRequest();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                        case 1:
                            m.address = r.bytes();
                            break;
                        case 2:
                            m.key = r.string();
                            break;
                        default:
                            r.skipType(t & 7);
                            break;
                        }
                    }
                    return m;
                };

                return DataRequest;
            })();

            grpc.BalancesRequest = (function() {

                function BalancesRequest(p) {
                    this.assets = [];
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }

                BalancesRequest.prototype.address = $util.newBuffer([]);
                BalancesRequest.prototype.assets = $util.emptyArray;

                BalancesRequest.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    if (m.address != null && m.hasOwnProperty("address"))
                        w.uint32(10).bytes(m.address);
                    if (m.assets != null && m.assets.length) {
                        for (var i = 0; i < m.assets.length; ++i)
                            w.uint32(34).bytes(m.assets[i]);
                    }
                    return w;
                };

                BalancesRequest.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.waves.node.grpc.BalancesRequest();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                        case 1:
                            m.address = r.bytes();
                            break;
                        case 4:
                            if (!(m.assets && m.assets.length))
                                m.assets = [];
                            m.assets.push(r.bytes());
                            break;
                        default:
                            r.skipType(t & 7);
                            break;
                        }
                    }
                    return m;
                };

                return BalancesRequest;
            })();

            grpc.BalanceResponse = (function() {

                function BalanceResponse(p) {
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }

                BalanceResponse.prototype.waves = null;
                BalanceResponse.prototype.asset = null;

                var $oneOfFields;

                Object.defineProperty(BalanceResponse.prototype, "balance", {
                    get: $util.oneOfGetter($oneOfFields = ["waves", "asset"]),
                    set: $util.oneOfSetter($oneOfFields)
                });

                BalanceResponse.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    if (m.waves != null && m.hasOwnProperty("waves"))
                        $root.waves.node.grpc.BalanceResponse.WavesBalances.encode(m.waves, w.uint32(10).fork()).ldelim();
                    if (m.asset != null && m.hasOwnProperty("asset"))
                        $root.waves.Amount.encode(m.asset, w.uint32(18).fork()).ldelim();
                    return w;
                };

                BalanceResponse.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.waves.node.grpc.BalanceResponse();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                        case 1:
                            m.waves = $root.waves.node.grpc.BalanceResponse.WavesBalances.decode(r, r.uint32());
                            break;
                        case 2:
                            m.asset = $root.waves.Amount.decode(r, r.uint32());
                            break;
                        default:
                            r.skipType(t & 7);
                            break;
                        }
                    }
                    return m;
                };

                BalanceResponse.WavesBalances = (function() {

                    function WavesBalances(p) {
                        if (p)
                            for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                                if (p[ks[i]] != null)
                                    this[ks[i]] = p[ks[i]];
                    }

                    WavesBalances.prototype.regular = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
                    WavesBalances.prototype.generating = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
                    WavesBalances.prototype.available = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
                    WavesBalances.prototype.effective = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
                    WavesBalances.prototype.leaseIn = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
                    WavesBalances.prototype.leaseOut = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

                    WavesBalances.encode = function encode(m, w) {
                        if (!w)
                            w = $Writer.create();
                        if (m.regular != null && m.hasOwnProperty("regular"))
                            w.uint32(8).int64(m.regular);
                        if (m.generating != null && m.hasOwnProperty("generating"))
                            w.uint32(16).int64(m.generating);
                        if (m.available != null && m.hasOwnProperty("available"))
                            w.uint32(24).int64(m.available);
                        if (m.effective != null && m.hasOwnProperty("effective"))
                            w.uint32(32).int64(m.effective);
                        if (m.leaseIn != null && m.hasOwnProperty("leaseIn"))
                            w.uint32(40).int64(m.leaseIn);
                        if (m.leaseOut != null && m.hasOwnProperty("leaseOut"))
                            w.uint32(48).int64(m.leaseOut);
                        return w;
                    };

                    WavesBalances.decode = function decode(r, l) {
                        if (!(r instanceof $Reader))
                            r = $Reader.create(r);
                        var c = l === undefined ? r.len : r.pos + l, m = new $root.waves.node.grpc.BalanceResponse.WavesBalances();
                        while (r.pos < c) {
                            var t = r.uint32();
                            switch (t >>> 3) {
                            case 1:
                                m.regular = r.int64();
                                break;
                            case 2:
                                m.generating = r.int64();
                                break;
                            case 3:
                                m.available = r.int64();
                                break;
                            case 4:
                                m.effective = r.int64();
                                break;
                            case 5:
                                m.leaseIn = r.int64();
                                break;
                            case 6:
                                m.leaseOut = r.int64();
                                break;
                            default:
                                r.skipType(t & 7);
                                break;
                            }
                        }
                        return m;
                    };

                    return WavesBalances;
                })();

                return BalanceResponse;
            })();

            grpc.DataEntryResponse = (function() {

                function DataEntryResponse(p) {
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }

                DataEntryResponse.prototype.address = $util.newBuffer([]);
                DataEntryResponse.prototype.entry = null;

                DataEntryResponse.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    if (m.address != null && m.hasOwnProperty("address"))
                        w.uint32(10).bytes(m.address);
                    if (m.entry != null && m.hasOwnProperty("entry"))
                        $root.waves.DataTransactionData.DataEntry.encode(m.entry, w.uint32(18).fork()).ldelim();
                    return w;
                };

                DataEntryResponse.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.waves.node.grpc.DataEntryResponse();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                        case 1:
                            m.address = r.bytes();
                            break;
                        case 2:
                            m.entry = $root.waves.DataTransactionData.DataEntry.decode(r, r.uint32());
                            break;
                        default:
                            r.skipType(t & 7);
                            break;
                        }
                    }
                    return m;
                };

                return DataEntryResponse;
            })();

            grpc.ScriptData = (function() {

                function ScriptData(p) {
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }

                ScriptData.prototype.scriptBytes = $util.newBuffer([]);
                ScriptData.prototype.scriptText = "";
                ScriptData.prototype.complexity = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

                ScriptData.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    if (m.scriptBytes != null && m.hasOwnProperty("scriptBytes"))
                        w.uint32(10).bytes(m.scriptBytes);
                    if (m.scriptText != null && m.hasOwnProperty("scriptText"))
                        w.uint32(18).string(m.scriptText);
                    if (m.complexity != null && m.hasOwnProperty("complexity"))
                        w.uint32(24).int64(m.complexity);
                    return w;
                };

                ScriptData.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.waves.node.grpc.ScriptData();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                        case 1:
                            m.scriptBytes = r.bytes();
                            break;
                        case 2:
                            m.scriptText = r.string();
                            break;
                        case 3:
                            m.complexity = r.int64();
                            break;
                        default:
                            r.skipType(t & 7);
                            break;
                        }
                    }
                    return m;
                };

                return ScriptData;
            })();

            grpc.LeaseResponse = (function() {

                function LeaseResponse(p) {
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }

                LeaseResponse.prototype.leaseId = $util.newBuffer([]);
                LeaseResponse.prototype.originTransactionId = $util.newBuffer([]);
                LeaseResponse.prototype.sender = $util.newBuffer([]);
                LeaseResponse.prototype.recipient = null;
                LeaseResponse.prototype.amount = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
                LeaseResponse.prototype.height = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

                LeaseResponse.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    if (m.leaseId != null && m.hasOwnProperty("leaseId"))
                        w.uint32(10).bytes(m.leaseId);
                    if (m.originTransactionId != null && m.hasOwnProperty("originTransactionId"))
                        w.uint32(18).bytes(m.originTransactionId);
                    if (m.sender != null && m.hasOwnProperty("sender"))
                        w.uint32(26).bytes(m.sender);
                    if (m.recipient != null && m.hasOwnProperty("recipient"))
                        $root.waves.Recipient.encode(m.recipient, w.uint32(34).fork()).ldelim();
                    if (m.amount != null && m.hasOwnProperty("amount"))
                        w.uint32(40).int64(m.amount);
                    if (m.height != null && m.hasOwnProperty("height"))
                        w.uint32(48).int64(m.height);
                    return w;
                };

                LeaseResponse.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.waves.node.grpc.LeaseResponse();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                        case 1:
                            m.leaseId = r.bytes();
                            break;
                        case 2:
                            m.originTransactionId = r.bytes();
                            break;
                        case 3:
                            m.sender = r.bytes();
                            break;
                        case 4:
                            m.recipient = $root.waves.Recipient.decode(r, r.uint32());
                            break;
                        case 5:
                            m.amount = r.int64();
                            break;
                        case 6:
                            m.height = r.int64();
                            break;
                        default:
                            r.skipType(t & 7);
                            break;
                        }
                    }
                    return m;
                };

                return LeaseResponse;
            })();

            grpc.AssetsApi = (function() {

                function AssetsApi(rpcImpl, requestDelimited, responseDelimited) {
                    $protobuf.rpc.Service.call(this, rpcImpl, requestDelimited, responseDelimited);
                }

                (AssetsApi.prototype = Object.create($protobuf.rpc.Service.prototype)).constructor = AssetsApi;


                Object.defineProperty(AssetsApi.prototype.getInfo = function getInfo(request, callback) {
                    return this.rpcCall(getInfo, $root.waves.node.grpc.AssetRequest, $root.waves.node.grpc.AssetInfoResponse, request, callback);
                }, "name", { value: "GetInfo" });


                Object.defineProperty(AssetsApi.prototype.getNFTList = function getNFTList(request, callback) {
                    return this.rpcCall(getNFTList, $root.waves.node.grpc.NFTRequest, $root.waves.node.grpc.NFTResponse, request, callback);
                }, "name", { value: "GetNFTList" });

                return AssetsApi;
            })();

            grpc.AssetRequest = (function() {

                function AssetRequest(p) {
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }

                AssetRequest.prototype.assetId = $util.newBuffer([]);

                AssetRequest.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    if (m.assetId != null && m.hasOwnProperty("assetId"))
                        w.uint32(10).bytes(m.assetId);
                    return w;
                };

                AssetRequest.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.waves.node.grpc.AssetRequest();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                        case 1:
                            m.assetId = r.bytes();
                            break;
                        default:
                            r.skipType(t & 7);
                            break;
                        }
                    }
                    return m;
                };

                return AssetRequest;
            })();

            grpc.NFTRequest = (function() {

                function NFTRequest(p) {
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }

                NFTRequest.prototype.address = $util.newBuffer([]);
                NFTRequest.prototype.limit = 0;
                NFTRequest.prototype.afterAssetId = $util.newBuffer([]);

                NFTRequest.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    if (m.address != null && m.hasOwnProperty("address"))
                        w.uint32(10).bytes(m.address);
                    if (m.limit != null && m.hasOwnProperty("limit"))
                        w.uint32(16).int32(m.limit);
                    if (m.afterAssetId != null && m.hasOwnProperty("afterAssetId"))
                        w.uint32(26).bytes(m.afterAssetId);
                    return w;
                };

                NFTRequest.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.waves.node.grpc.NFTRequest();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                        case 1:
                            m.address = r.bytes();
                            break;
                        case 2:
                            m.limit = r.int32();
                            break;
                        case 3:
                            m.afterAssetId = r.bytes();
                            break;
                        default:
                            r.skipType(t & 7);
                            break;
                        }
                    }
                    return m;
                };

                return NFTRequest;
            })();

            grpc.NFTResponse = (function() {

                function NFTResponse(p) {
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }

                NFTResponse.prototype.assetId = $util.newBuffer([]);
                NFTResponse.prototype.assetInfo = null;

                NFTResponse.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    if (m.assetId != null && m.hasOwnProperty("assetId"))
                        w.uint32(10).bytes(m.assetId);
                    if (m.assetInfo != null && m.hasOwnProperty("assetInfo"))
                        $root.waves.node.grpc.AssetInfoResponse.encode(m.assetInfo, w.uint32(18).fork()).ldelim();
                    return w;
                };

                NFTResponse.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.waves.node.grpc.NFTResponse();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                        case 1:
                            m.assetId = r.bytes();
                            break;
                        case 2:
                            m.assetInfo = $root.waves.node.grpc.AssetInfoResponse.decode(r, r.uint32());
                            break;
                        default:
                            r.skipType(t & 7);
                            break;
                        }
                    }
                    return m;
                };

                return NFTResponse;
            })();

            grpc.AssetInfoResponse = (function() {

                function AssetInfoResponse(p) {
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }

                AssetInfoResponse.prototype.issuer = $util.newBuffer([]);
                AssetInfoResponse.prototype.name = "";
                AssetInfoResponse.prototype.description = "";
                AssetInfoResponse.prototype.decimals = 0;
                AssetInfoResponse.prototype.reissuable = false;
                AssetInfoResponse.prototype.totalVolume = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
                AssetInfoResponse.prototype.script = null;
                AssetInfoResponse.prototype.sponsorship = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
                AssetInfoResponse.prototype.issueTransaction = null;
                AssetInfoResponse.prototype.sponsorBalance = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

                AssetInfoResponse.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    if (m.issuer != null && m.hasOwnProperty("issuer"))
                        w.uint32(10).bytes(m.issuer);
                    if (m.name != null && m.hasOwnProperty("name"))
                        w.uint32(18).string(m.name);
                    if (m.description != null && m.hasOwnProperty("description"))
                        w.uint32(26).string(m.description);
                    if (m.decimals != null && m.hasOwnProperty("decimals"))
                        w.uint32(32).int32(m.decimals);
                    if (m.reissuable != null && m.hasOwnProperty("reissuable"))
                        w.uint32(40).bool(m.reissuable);
                    if (m.totalVolume != null && m.hasOwnProperty("totalVolume"))
                        w.uint32(48).int64(m.totalVolume);
                    if (m.script != null && m.hasOwnProperty("script"))
                        $root.waves.node.grpc.ScriptData.encode(m.script, w.uint32(58).fork()).ldelim();
                    if (m.sponsorship != null && m.hasOwnProperty("sponsorship"))
                        w.uint32(64).int64(m.sponsorship);
                    if (m.sponsorBalance != null && m.hasOwnProperty("sponsorBalance"))
                        w.uint32(80).int64(m.sponsorBalance);
                    if (m.issueTransaction != null && m.hasOwnProperty("issueTransaction"))
                        $root.waves.SignedTransaction.encode(m.issueTransaction, w.uint32(90).fork()).ldelim();
                    return w;
                };

                AssetInfoResponse.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.waves.node.grpc.AssetInfoResponse();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                        case 1:
                            m.issuer = r.bytes();
                            break;
                        case 2:
                            m.name = r.string();
                            break;
                        case 3:
                            m.description = r.string();
                            break;
                        case 4:
                            m.decimals = r.int32();
                            break;
                        case 5:
                            m.reissuable = r.bool();
                            break;
                        case 6:
                            m.totalVolume = r.int64();
                            break;
                        case 7:
                            m.script = $root.waves.node.grpc.ScriptData.decode(r, r.uint32());
                            break;
                        case 8:
                            m.sponsorship = r.int64();
                            break;
                        case 11:
                            m.issueTransaction = $root.waves.SignedTransaction.decode(r, r.uint32());
                            break;
                        case 10:
                            m.sponsorBalance = r.int64();
                            break;
                        default:
                            r.skipType(t & 7);
                            break;
                        }
                    }
                    return m;
                };

                return AssetInfoResponse;
            })();

            grpc.BlockchainApi = (function() {

                function BlockchainApi(rpcImpl, requestDelimited, responseDelimited) {
                    $protobuf.rpc.Service.call(this, rpcImpl, requestDelimited, responseDelimited);
                }

                (BlockchainApi.prototype = Object.create($protobuf.rpc.Service.prototype)).constructor = BlockchainApi;


                Object.defineProperty(BlockchainApi.prototype.getActivationStatus = function getActivationStatus(request, callback) {
                    return this.rpcCall(getActivationStatus, $root.waves.node.grpc.ActivationStatusRequest, $root.waves.node.grpc.ActivationStatusResponse, request, callback);
                }, "name", { value: "GetActivationStatus" });


                Object.defineProperty(BlockchainApi.prototype.getBaseTarget = function getBaseTarget(request, callback) {
                    return this.rpcCall(getBaseTarget, $root.google.protobuf.Empty, $root.waves.node.grpc.BaseTargetResponse, request, callback);
                }, "name", { value: "GetBaseTarget" });


                Object.defineProperty(BlockchainApi.prototype.getCumulativeScore = function getCumulativeScore(request, callback) {
                    return this.rpcCall(getCumulativeScore, $root.google.protobuf.Empty, $root.waves.node.grpc.ScoreResponse, request, callback);
                }, "name", { value: "GetCumulativeScore" });

                return BlockchainApi;
            })();

            grpc.ActivationStatusRequest = (function() {

                function ActivationStatusRequest(p) {
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }

                ActivationStatusRequest.prototype.height = 0;

                ActivationStatusRequest.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    if (m.height != null && m.hasOwnProperty("height"))
                        w.uint32(8).int32(m.height);
                    return w;
                };

                ActivationStatusRequest.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.waves.node.grpc.ActivationStatusRequest();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                        case 1:
                            m.height = r.int32();
                            break;
                        default:
                            r.skipType(t & 7);
                            break;
                        }
                    }
                    return m;
                };

                return ActivationStatusRequest;
            })();

            grpc.ActivationStatusResponse = (function() {

                function ActivationStatusResponse(p) {
                    this.features = [];
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }

                ActivationStatusResponse.prototype.height = 0;
                ActivationStatusResponse.prototype.votingInterval = 0;
                ActivationStatusResponse.prototype.votingThreshold = 0;
                ActivationStatusResponse.prototype.nextCheck = 0;
                ActivationStatusResponse.prototype.features = $util.emptyArray;

                ActivationStatusResponse.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    if (m.height != null && m.hasOwnProperty("height"))
                        w.uint32(8).int32(m.height);
                    if (m.votingInterval != null && m.hasOwnProperty("votingInterval"))
                        w.uint32(16).int32(m.votingInterval);
                    if (m.votingThreshold != null && m.hasOwnProperty("votingThreshold"))
                        w.uint32(24).int32(m.votingThreshold);
                    if (m.nextCheck != null && m.hasOwnProperty("nextCheck"))
                        w.uint32(32).int32(m.nextCheck);
                    if (m.features != null && m.features.length) {
                        for (var i = 0; i < m.features.length; ++i)
                            $root.waves.node.grpc.FeatureActivationStatus.encode(m.features[i], w.uint32(42).fork()).ldelim();
                    }
                    return w;
                };

                ActivationStatusResponse.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.waves.node.grpc.ActivationStatusResponse();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                        case 1:
                            m.height = r.int32();
                            break;
                        case 2:
                            m.votingInterval = r.int32();
                            break;
                        case 3:
                            m.votingThreshold = r.int32();
                            break;
                        case 4:
                            m.nextCheck = r.int32();
                            break;
                        case 5:
                            if (!(m.features && m.features.length))
                                m.features = [];
                            m.features.push($root.waves.node.grpc.FeatureActivationStatus.decode(r, r.uint32()));
                            break;
                        default:
                            r.skipType(t & 7);
                            break;
                        }
                    }
                    return m;
                };

                return ActivationStatusResponse;
            })();

            grpc.FeatureActivationStatus = (function() {

                function FeatureActivationStatus(p) {
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }

                FeatureActivationStatus.prototype.id = 0;
                FeatureActivationStatus.prototype.description = "";
                FeatureActivationStatus.prototype.blockchainStatus = 0;
                FeatureActivationStatus.prototype.nodeStatus = 0;
                FeatureActivationStatus.prototype.activationHeight = 0;
                FeatureActivationStatus.prototype.supportingBlocks = 0;

                FeatureActivationStatus.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    if (m.id != null && m.hasOwnProperty("id"))
                        w.uint32(8).int32(m.id);
                    if (m.description != null && m.hasOwnProperty("description"))
                        w.uint32(18).string(m.description);
                    if (m.blockchainStatus != null && m.hasOwnProperty("blockchainStatus"))
                        w.uint32(24).int32(m.blockchainStatus);
                    if (m.nodeStatus != null && m.hasOwnProperty("nodeStatus"))
                        w.uint32(32).int32(m.nodeStatus);
                    if (m.activationHeight != null && m.hasOwnProperty("activationHeight"))
                        w.uint32(40).int32(m.activationHeight);
                    if (m.supportingBlocks != null && m.hasOwnProperty("supportingBlocks"))
                        w.uint32(48).int32(m.supportingBlocks);
                    return w;
                };

                FeatureActivationStatus.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.waves.node.grpc.FeatureActivationStatus();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                        case 1:
                            m.id = r.int32();
                            break;
                        case 2:
                            m.description = r.string();
                            break;
                        case 3:
                            m.blockchainStatus = r.int32();
                            break;
                        case 4:
                            m.nodeStatus = r.int32();
                            break;
                        case 5:
                            m.activationHeight = r.int32();
                            break;
                        case 6:
                            m.supportingBlocks = r.int32();
                            break;
                        default:
                            r.skipType(t & 7);
                            break;
                        }
                    }
                    return m;
                };

                FeatureActivationStatus.BlockchainFeatureStatus = (function() {
                    var valuesById = {}, values = Object.create(valuesById);
                    values[valuesById[0] = "UNDEFINED"] = 0;
                    values[valuesById[1] = "APPROVED"] = 1;
                    values[valuesById[2] = "ACTIVATED"] = 2;
                    return values;
                })();

                FeatureActivationStatus.NodeFeatureStatus = (function() {
                    var valuesById = {}, values = Object.create(valuesById);
                    values[valuesById[0] = "NOT_IMPLEMENTED"] = 0;
                    values[valuesById[1] = "IMPLEMENTED"] = 1;
                    values[valuesById[2] = "VOTED"] = 2;
                    return values;
                })();

                return FeatureActivationStatus;
            })();

            grpc.BaseTargetResponse = (function() {

                function BaseTargetResponse(p) {
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }

                BaseTargetResponse.prototype.baseTarget = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

                BaseTargetResponse.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    if (m.baseTarget != null && m.hasOwnProperty("baseTarget"))
                        w.uint32(8).int64(m.baseTarget);
                    return w;
                };

                BaseTargetResponse.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.waves.node.grpc.BaseTargetResponse();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                        case 1:
                            m.baseTarget = r.int64();
                            break;
                        default:
                            r.skipType(t & 7);
                            break;
                        }
                    }
                    return m;
                };

                return BaseTargetResponse;
            })();

            grpc.ScoreResponse = (function() {

                function ScoreResponse(p) {
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }

                ScoreResponse.prototype.score = $util.newBuffer([]);

                ScoreResponse.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    if (m.score != null && m.hasOwnProperty("score"))
                        w.uint32(10).bytes(m.score);
                    return w;
                };

                ScoreResponse.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.waves.node.grpc.ScoreResponse();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                        case 1:
                            m.score = r.bytes();
                            break;
                        default:
                            r.skipType(t & 7);
                            break;
                        }
                    }
                    return m;
                };

                return ScoreResponse;
            })();

            grpc.BlocksApi = (function() {

                function BlocksApi(rpcImpl, requestDelimited, responseDelimited) {
                    $protobuf.rpc.Service.call(this, rpcImpl, requestDelimited, responseDelimited);
                }

                (BlocksApi.prototype = Object.create($protobuf.rpc.Service.prototype)).constructor = BlocksApi;


                Object.defineProperty(BlocksApi.prototype.getBlock = function getBlock(request, callback) {
                    return this.rpcCall(getBlock, $root.waves.node.grpc.BlockRequest, $root.waves.node.grpc.BlockWithHeight, request, callback);
                }, "name", { value: "GetBlock" });


                Object.defineProperty(BlocksApi.prototype.getBlockRange = function getBlockRange(request, callback) {
                    return this.rpcCall(getBlockRange, $root.waves.node.grpc.BlockRangeRequest, $root.waves.node.grpc.BlockWithHeight, request, callback);
                }, "name", { value: "GetBlockRange" });


                Object.defineProperty(BlocksApi.prototype.getCurrentHeight = function getCurrentHeight(request, callback) {
                    return this.rpcCall(getCurrentHeight, $root.google.protobuf.Empty, $root.google.protobuf.UInt32Value, request, callback);
                }, "name", { value: "GetCurrentHeight" });

                return BlocksApi;
            })();

            grpc.BlockRequest = (function() {

                function BlockRequest(p) {
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }

                BlockRequest.prototype.blockId = $util.newBuffer([]);
                BlockRequest.prototype.height = 0;
                BlockRequest.prototype.includeTransactions = false;

                var $oneOfFields;

                Object.defineProperty(BlockRequest.prototype, "request", {
                    get: $util.oneOfGetter($oneOfFields = ["blockId", "height"]),
                    set: $util.oneOfSetter($oneOfFields)
                });

                BlockRequest.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    if (m.blockId != null && m.hasOwnProperty("blockId"))
                        w.uint32(10).bytes(m.blockId);
                    if (m.height != null && m.hasOwnProperty("height"))
                        w.uint32(16).int32(m.height);
                    if (m.includeTransactions != null && m.hasOwnProperty("includeTransactions"))
                        w.uint32(800).bool(m.includeTransactions);
                    return w;
                };

                BlockRequest.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.waves.node.grpc.BlockRequest();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                        case 1:
                            m.blockId = r.bytes();
                            break;
                        case 2:
                            m.height = r.int32();
                            break;
                        case 100:
                            m.includeTransactions = r.bool();
                            break;
                        default:
                            r.skipType(t & 7);
                            break;
                        }
                    }
                    return m;
                };

                return BlockRequest;
            })();

            grpc.BlockRangeRequest = (function() {

                function BlockRangeRequest(p) {
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }

                BlockRangeRequest.prototype.fromHeight = 0;
                BlockRangeRequest.prototype.toHeight = 0;
                BlockRangeRequest.prototype.generatorPublicKey = $util.newBuffer([]);
                BlockRangeRequest.prototype.generatorAddress = $util.newBuffer([]);
                BlockRangeRequest.prototype.includeTransactions = false;

                var $oneOfFields;

                Object.defineProperty(BlockRangeRequest.prototype, "filter", {
                    get: $util.oneOfGetter($oneOfFields = ["generatorPublicKey", "generatorAddress"]),
                    set: $util.oneOfSetter($oneOfFields)
                });

                BlockRangeRequest.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    if (m.fromHeight != null && m.hasOwnProperty("fromHeight"))
                        w.uint32(8).uint32(m.fromHeight);
                    if (m.toHeight != null && m.hasOwnProperty("toHeight"))
                        w.uint32(16).uint32(m.toHeight);
                    if (m.generatorPublicKey != null && m.hasOwnProperty("generatorPublicKey"))
                        w.uint32(26).bytes(m.generatorPublicKey);
                    if (m.generatorAddress != null && m.hasOwnProperty("generatorAddress"))
                        w.uint32(34).bytes(m.generatorAddress);
                    if (m.includeTransactions != null && m.hasOwnProperty("includeTransactions"))
                        w.uint32(800).bool(m.includeTransactions);
                    return w;
                };

                BlockRangeRequest.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.waves.node.grpc.BlockRangeRequest();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                        case 1:
                            m.fromHeight = r.uint32();
                            break;
                        case 2:
                            m.toHeight = r.uint32();
                            break;
                        case 3:
                            m.generatorPublicKey = r.bytes();
                            break;
                        case 4:
                            m.generatorAddress = r.bytes();
                            break;
                        case 100:
                            m.includeTransactions = r.bool();
                            break;
                        default:
                            r.skipType(t & 7);
                            break;
                        }
                    }
                    return m;
                };

                return BlockRangeRequest;
            })();

            grpc.BlockWithHeight = (function() {

                function BlockWithHeight(p) {
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }

                BlockWithHeight.prototype.block = null;
                BlockWithHeight.prototype.height = 0;

                BlockWithHeight.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    if (m.block != null && m.hasOwnProperty("block"))
                        $root.waves.Block.encode(m.block, w.uint32(10).fork()).ldelim();
                    if (m.height != null && m.hasOwnProperty("height"))
                        w.uint32(16).uint32(m.height);
                    return w;
                };

                BlockWithHeight.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.waves.node.grpc.BlockWithHeight();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                        case 1:
                            m.block = $root.waves.Block.decode(r, r.uint32());
                            break;
                        case 2:
                            m.height = r.uint32();
                            break;
                        default:
                            r.skipType(t & 7);
                            break;
                        }
                    }
                    return m;
                };

                return BlockWithHeight;
            })();

            grpc.TransactionsApi = (function() {

                function TransactionsApi(rpcImpl, requestDelimited, responseDelimited) {
                    $protobuf.rpc.Service.call(this, rpcImpl, requestDelimited, responseDelimited);
                }

                (TransactionsApi.prototype = Object.create($protobuf.rpc.Service.prototype)).constructor = TransactionsApi;


                Object.defineProperty(TransactionsApi.prototype.getTransactions = function getTransactions(request, callback) {
                    return this.rpcCall(getTransactions, $root.waves.node.grpc.TransactionsRequest, $root.waves.node.grpc.TransactionResponse, request, callback);
                }, "name", { value: "GetTransactions" });


                Object.defineProperty(TransactionsApi.prototype.getStateChanges = function getStateChanges(request, callback) {
                    return this.rpcCall(getStateChanges, $root.waves.node.grpc.TransactionsRequest, $root.waves.node.grpc.InvokeScriptResultResponse, request, callback);
                }, "name", { value: "GetStateChanges" });


                Object.defineProperty(TransactionsApi.prototype.getStatuses = function getStatuses(request, callback) {
                    return this.rpcCall(getStatuses, $root.waves.node.grpc.TransactionsByIdRequest, $root.waves.node.grpc.TransactionStatus, request, callback);
                }, "name", { value: "GetStatuses" });


                Object.defineProperty(TransactionsApi.prototype.getUnconfirmed = function getUnconfirmed(request, callback) {
                    return this.rpcCall(getUnconfirmed, $root.waves.node.grpc.TransactionsRequest, $root.waves.node.grpc.TransactionResponse, request, callback);
                }, "name", { value: "GetUnconfirmed" });


                Object.defineProperty(TransactionsApi.prototype.sign = function sign(request, callback) {
                    return this.rpcCall(sign, $root.waves.node.grpc.SignRequest, $root.waves.SignedTransaction, request, callback);
                }, "name", { value: "Sign" });


                Object.defineProperty(TransactionsApi.prototype.broadcast = function broadcast(request, callback) {
                    return this.rpcCall(broadcast, $root.waves.SignedTransaction, $root.waves.SignedTransaction, request, callback);
                }, "name", { value: "Broadcast" });

                return TransactionsApi;
            })();

            grpc.ApplicationStatus = (function() {
                var valuesById = {}, values = Object.create(valuesById);
                values[valuesById[0] = "UNKNOWN"] = 0;
                values[valuesById[1] = "SUCCEEDED"] = 1;
                values[valuesById[2] = "SCRIPT_EXECUTION_FAILED"] = 2;
                return values;
            })();

            grpc.TransactionStatus = (function() {

                function TransactionStatus(p) {
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }

                TransactionStatus.prototype.id = $util.newBuffer([]);
                TransactionStatus.prototype.status = 0;
                TransactionStatus.prototype.height = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
                TransactionStatus.prototype.applicationStatus = 0;

                TransactionStatus.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    if (m.id != null && m.hasOwnProperty("id"))
                        w.uint32(10).bytes(m.id);
                    if (m.status != null && m.hasOwnProperty("status"))
                        w.uint32(16).int32(m.status);
                    if (m.height != null && m.hasOwnProperty("height"))
                        w.uint32(24).int64(m.height);
                    if (m.applicationStatus != null && m.hasOwnProperty("applicationStatus"))
                        w.uint32(32).int32(m.applicationStatus);
                    return w;
                };

                TransactionStatus.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.waves.node.grpc.TransactionStatus();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                        case 1:
                            m.id = r.bytes();
                            break;
                        case 2:
                            m.status = r.int32();
                            break;
                        case 3:
                            m.height = r.int64();
                            break;
                        case 4:
                            m.applicationStatus = r.int32();
                            break;
                        default:
                            r.skipType(t & 7);
                            break;
                        }
                    }
                    return m;
                };

                TransactionStatus.Status = (function() {
                    var valuesById = {}, values = Object.create(valuesById);
                    values[valuesById[0] = "NOT_EXISTS"] = 0;
                    values[valuesById[1] = "UNCONFIRMED"] = 1;
                    values[valuesById[2] = "CONFIRMED"] = 2;
                    return values;
                })();

                return TransactionStatus;
            })();

            grpc.TransactionResponse = (function() {

                function TransactionResponse(p) {
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }

                TransactionResponse.prototype.id = $util.newBuffer([]);
                TransactionResponse.prototype.height = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
                TransactionResponse.prototype.transaction = null;
                TransactionResponse.prototype.applicationStatus = 0;
                TransactionResponse.prototype.invokeScriptResult = null;

                TransactionResponse.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    if (m.id != null && m.hasOwnProperty("id"))
                        w.uint32(10).bytes(m.id);
                    if (m.height != null && m.hasOwnProperty("height"))
                        w.uint32(16).int64(m.height);
                    if (m.transaction != null && m.hasOwnProperty("transaction"))
                        $root.waves.SignedTransaction.encode(m.transaction, w.uint32(26).fork()).ldelim();
                    if (m.applicationStatus != null && m.hasOwnProperty("applicationStatus"))
                        w.uint32(32).int32(m.applicationStatus);
                    if (m.invokeScriptResult != null && m.hasOwnProperty("invokeScriptResult"))
                        $root.waves.InvokeScriptResult.encode(m.invokeScriptResult, w.uint32(42).fork()).ldelim();
                    return w;
                };

                TransactionResponse.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.waves.node.grpc.TransactionResponse();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                        case 1:
                            m.id = r.bytes();
                            break;
                        case 2:
                            m.height = r.int64();
                            break;
                        case 3:
                            m.transaction = $root.waves.SignedTransaction.decode(r, r.uint32());
                            break;
                        case 4:
                            m.applicationStatus = r.int32();
                            break;
                        case 5:
                            m.invokeScriptResult = $root.waves.InvokeScriptResult.decode(r, r.uint32());
                            break;
                        default:
                            r.skipType(t & 7);
                            break;
                        }
                    }
                    return m;
                };

                return TransactionResponse;
            })();

            grpc.TransactionsRequest = (function() {

                function TransactionsRequest(p) {
                    this.transactionIds = [];
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }

                TransactionsRequest.prototype.sender = $util.newBuffer([]);
                TransactionsRequest.prototype.recipient = null;
                TransactionsRequest.prototype.transactionIds = $util.emptyArray;

                TransactionsRequest.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    if (m.sender != null && m.hasOwnProperty("sender"))
                        w.uint32(10).bytes(m.sender);
                    if (m.recipient != null && m.hasOwnProperty("recipient"))
                        $root.waves.Recipient.encode(m.recipient, w.uint32(18).fork()).ldelim();
                    if (m.transactionIds != null && m.transactionIds.length) {
                        for (var i = 0; i < m.transactionIds.length; ++i)
                            w.uint32(26).bytes(m.transactionIds[i]);
                    }
                    return w;
                };

                TransactionsRequest.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.waves.node.grpc.TransactionsRequest();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                        case 1:
                            m.sender = r.bytes();
                            break;
                        case 2:
                            m.recipient = $root.waves.Recipient.decode(r, r.uint32());
                            break;
                        case 3:
                            if (!(m.transactionIds && m.transactionIds.length))
                                m.transactionIds = [];
                            m.transactionIds.push(r.bytes());
                            break;
                        default:
                            r.skipType(t & 7);
                            break;
                        }
                    }
                    return m;
                };

                return TransactionsRequest;
            })();

            grpc.TransactionsByIdRequest = (function() {

                function TransactionsByIdRequest(p) {
                    this.transactionIds = [];
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }

                TransactionsByIdRequest.prototype.transactionIds = $util.emptyArray;

                TransactionsByIdRequest.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    if (m.transactionIds != null && m.transactionIds.length) {
                        for (var i = 0; i < m.transactionIds.length; ++i)
                            w.uint32(26).bytes(m.transactionIds[i]);
                    }
                    return w;
                };

                TransactionsByIdRequest.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.waves.node.grpc.TransactionsByIdRequest();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                        case 3:
                            if (!(m.transactionIds && m.transactionIds.length))
                                m.transactionIds = [];
                            m.transactionIds.push(r.bytes());
                            break;
                        default:
                            r.skipType(t & 7);
                            break;
                        }
                    }
                    return m;
                };

                return TransactionsByIdRequest;
            })();

            grpc.CalculateFeeResponse = (function() {

                function CalculateFeeResponse(p) {
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }

                CalculateFeeResponse.prototype.assetId = $util.newBuffer([]);
                CalculateFeeResponse.prototype.amount = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

                CalculateFeeResponse.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    if (m.assetId != null && m.hasOwnProperty("assetId"))
                        w.uint32(10).bytes(m.assetId);
                    if (m.amount != null && m.hasOwnProperty("amount"))
                        w.uint32(16).uint64(m.amount);
                    return w;
                };

                CalculateFeeResponse.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.waves.node.grpc.CalculateFeeResponse();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                        case 1:
                            m.assetId = r.bytes();
                            break;
                        case 2:
                            m.amount = r.uint64();
                            break;
                        default:
                            r.skipType(t & 7);
                            break;
                        }
                    }
                    return m;
                };

                return CalculateFeeResponse;
            })();

            grpc.SignRequest = (function() {

                function SignRequest(p) {
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }

                SignRequest.prototype.transaction = null;
                SignRequest.prototype.signerPublicKey = $util.newBuffer([]);

                SignRequest.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    if (m.transaction != null && m.hasOwnProperty("transaction"))
                        $root.waves.Transaction.encode(m.transaction, w.uint32(10).fork()).ldelim();
                    if (m.signerPublicKey != null && m.hasOwnProperty("signerPublicKey"))
                        w.uint32(18).bytes(m.signerPublicKey);
                    return w;
                };

                SignRequest.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.waves.node.grpc.SignRequest();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                        case 1:
                            m.transaction = $root.waves.Transaction.decode(r, r.uint32());
                            break;
                        case 2:
                            m.signerPublicKey = r.bytes();
                            break;
                        default:
                            r.skipType(t & 7);
                            break;
                        }
                    }
                    return m;
                };

                return SignRequest;
            })();

            grpc.InvokeScriptResultResponse = (function() {

                function InvokeScriptResultResponse(p) {
                    if (p)
                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                            if (p[ks[i]] != null)
                                this[ks[i]] = p[ks[i]];
                }

                InvokeScriptResultResponse.prototype.transaction = null;
                InvokeScriptResultResponse.prototype.result = null;

                InvokeScriptResultResponse.encode = function encode(m, w) {
                    if (!w)
                        w = $Writer.create();
                    if (m.transaction != null && m.hasOwnProperty("transaction"))
                        $root.waves.SignedTransaction.encode(m.transaction, w.uint32(10).fork()).ldelim();
                    if (m.result != null && m.hasOwnProperty("result"))
                        $root.waves.InvokeScriptResult.encode(m.result, w.uint32(18).fork()).ldelim();
                    return w;
                };

                InvokeScriptResultResponse.decode = function decode(r, l) {
                    if (!(r instanceof $Reader))
                        r = $Reader.create(r);
                    var c = l === undefined ? r.len : r.pos + l, m = new $root.waves.node.grpc.InvokeScriptResultResponse();
                    while (r.pos < c) {
                        var t = r.uint32();
                        switch (t >>> 3) {
                        case 1:
                            m.transaction = $root.waves.SignedTransaction.decode(r, r.uint32());
                            break;
                        case 2:
                            m.result = $root.waves.InvokeScriptResult.decode(r, r.uint32());
                            break;
                        default:
                            r.skipType(t & 7);
                            break;
                        }
                    }
                    return m;
                };

                return InvokeScriptResultResponse;
            })();

            return grpc;
        })();

        return node;
    })();

    waves.AssetPair = (function() {

        function AssetPair(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        AssetPair.prototype.amountAssetId = $util.newBuffer([]);
        AssetPair.prototype.priceAssetId = $util.newBuffer([]);

        AssetPair.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.amountAssetId != null && m.hasOwnProperty("amountAssetId"))
                w.uint32(10).bytes(m.amountAssetId);
            if (m.priceAssetId != null && m.hasOwnProperty("priceAssetId"))
                w.uint32(18).bytes(m.priceAssetId);
            return w;
        };

        AssetPair.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.waves.AssetPair();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.amountAssetId = r.bytes();
                    break;
                case 2:
                    m.priceAssetId = r.bytes();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        return AssetPair;
    })();

    waves.Order = (function() {

        function Order(p) {
            this.proofs = [];
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        Order.prototype.chainId = 0;
        Order.prototype.matcherPublicKey = $util.newBuffer([]);
        Order.prototype.assetPair = null;
        Order.prototype.orderSide = 0;
        Order.prototype.amount = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
        Order.prototype.price = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
        Order.prototype.timestamp = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
        Order.prototype.expiration = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
        Order.prototype.matcherFee = null;
        Order.prototype.version = 0;
        Order.prototype.proofs = $util.emptyArray;
        Order.prototype.priceMode = 0;
        Order.prototype.senderPublicKey = $util.newBuffer([]);
        Order.prototype.eip712Signature = $util.newBuffer([]);

        var $oneOfFields;

        Object.defineProperty(Order.prototype, "sender", {
            get: $util.oneOfGetter($oneOfFields = ["senderPublicKey", "eip712Signature"]),
            set: $util.oneOfSetter($oneOfFields)
        });

        Order.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.chainId != null && m.hasOwnProperty("chainId"))
                w.uint32(8).int32(m.chainId);
            if (m.senderPublicKey != null && m.hasOwnProperty("senderPublicKey"))
                w.uint32(18).bytes(m.senderPublicKey);
            if (m.matcherPublicKey != null && m.hasOwnProperty("matcherPublicKey"))
                w.uint32(26).bytes(m.matcherPublicKey);
            if (m.assetPair != null && m.hasOwnProperty("assetPair"))
                $root.waves.AssetPair.encode(m.assetPair, w.uint32(34).fork()).ldelim();
            if (m.orderSide != null && m.hasOwnProperty("orderSide"))
                w.uint32(40).int32(m.orderSide);
            if (m.amount != null && m.hasOwnProperty("amount"))
                w.uint32(48).int64(m.amount);
            if (m.price != null && m.hasOwnProperty("price"))
                w.uint32(56).int64(m.price);
            if (m.timestamp != null && m.hasOwnProperty("timestamp"))
                w.uint32(64).int64(m.timestamp);
            if (m.expiration != null && m.hasOwnProperty("expiration"))
                w.uint32(72).int64(m.expiration);
            if (m.matcherFee != null && m.hasOwnProperty("matcherFee"))
                $root.waves.Amount.encode(m.matcherFee, w.uint32(82).fork()).ldelim();
            if (m.version != null && m.hasOwnProperty("version"))
                w.uint32(88).int32(m.version);
            if (m.proofs != null && m.proofs.length) {
                for (var i = 0; i < m.proofs.length; ++i)
                    w.uint32(98).bytes(m.proofs[i]);
            }
            if (m.eip712Signature != null && m.hasOwnProperty("eip712Signature"))
                w.uint32(106).bytes(m.eip712Signature);
            if (m.priceMode != null && m.hasOwnProperty("priceMode"))
                w.uint32(112).int32(m.priceMode);
            return w;
        };

        Order.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.waves.Order();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.chainId = r.int32();
                    break;
                case 3:
                    m.matcherPublicKey = r.bytes();
                    break;
                case 4:
                    m.assetPair = $root.waves.AssetPair.decode(r, r.uint32());
                    break;
                case 5:
                    m.orderSide = r.int32();
                    break;
                case 6:
                    m.amount = r.int64();
                    break;
                case 7:
                    m.price = r.int64();
                    break;
                case 8:
                    m.timestamp = r.int64();
                    break;
                case 9:
                    m.expiration = r.int64();
                    break;
                case 10:
                    m.matcherFee = $root.waves.Amount.decode(r, r.uint32());
                    break;
                case 11:
                    m.version = r.int32();
                    break;
                case 12:
                    if (!(m.proofs && m.proofs.length))
                        m.proofs = [];
                    m.proofs.push(r.bytes());
                    break;
                case 14:
                    m.priceMode = r.int32();
                    break;
                case 2:
                    m.senderPublicKey = r.bytes();
                    break;
                case 13:
                    m.eip712Signature = r.bytes();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        Order.Side = (function() {
            var valuesById = {}, values = Object.create(valuesById);
            values[valuesById[0] = "BUY"] = 0;
            values[valuesById[1] = "SELL"] = 1;
            return values;
        })();

        Order.PriceMode = (function() {
            var valuesById = {}, values = Object.create(valuesById);
            values[valuesById[0] = "DEFAULT"] = 0;
            values[valuesById[1] = "FIXED_DECIMALS"] = 1;
            values[valuesById[2] = "ASSET_DECIMALS"] = 2;
            return values;
        })();

        return Order;
    })();

    waves.Recipient = (function() {

        function Recipient(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        Recipient.prototype.publicKeyHash = $util.newBuffer([]);
        Recipient.prototype.alias = "";

        var $oneOfFields;

        Object.defineProperty(Recipient.prototype, "recipient", {
            get: $util.oneOfGetter($oneOfFields = ["publicKeyHash", "alias"]),
            set: $util.oneOfSetter($oneOfFields)
        });

        Recipient.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.publicKeyHash != null && m.hasOwnProperty("publicKeyHash"))
                w.uint32(10).bytes(m.publicKeyHash);
            if (m.alias != null && m.hasOwnProperty("alias"))
                w.uint32(18).string(m.alias);
            return w;
        };

        Recipient.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.waves.Recipient();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.publicKeyHash = r.bytes();
                    break;
                case 2:
                    m.alias = r.string();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        return Recipient;
    })();

    waves.SignedTransaction = (function() {

        function SignedTransaction(p) {
            this.proofs = [];
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        SignedTransaction.prototype.wavesTransaction = null;
        SignedTransaction.prototype.ethereumTransaction = $util.newBuffer([]);
        SignedTransaction.prototype.proofs = $util.emptyArray;

        var $oneOfFields;

        Object.defineProperty(SignedTransaction.prototype, "transaction", {
            get: $util.oneOfGetter($oneOfFields = ["wavesTransaction", "ethereumTransaction"]),
            set: $util.oneOfSetter($oneOfFields)
        });

        SignedTransaction.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.wavesTransaction != null && m.hasOwnProperty("wavesTransaction"))
                $root.waves.Transaction.encode(m.wavesTransaction, w.uint32(10).fork()).ldelim();
            if (m.proofs != null && m.proofs.length) {
                for (var i = 0; i < m.proofs.length; ++i)
                    w.uint32(18).bytes(m.proofs[i]);
            }
            if (m.ethereumTransaction != null && m.hasOwnProperty("ethereumTransaction"))
                w.uint32(26).bytes(m.ethereumTransaction);
            return w;
        };

        SignedTransaction.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.waves.SignedTransaction();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.wavesTransaction = $root.waves.Transaction.decode(r, r.uint32());
                    break;
                case 3:
                    m.ethereumTransaction = r.bytes();
                    break;
                case 2:
                    if (!(m.proofs && m.proofs.length))
                        m.proofs = [];
                    m.proofs.push(r.bytes());
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        return SignedTransaction;
    })();

    waves.Transaction = (function() {

        function Transaction(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        Transaction.prototype.chainId = 0;
        Transaction.prototype.senderPublicKey = $util.newBuffer([]);
        Transaction.prototype.fee = null;
        Transaction.prototype.timestamp = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
        Transaction.prototype.version = 0;
        Transaction.prototype.genesis = null;
        Transaction.prototype.payment = null;
        Transaction.prototype.issue = null;
        Transaction.prototype.transfer = null;
        Transaction.prototype.reissue = null;
        Transaction.prototype.burn = null;
        Transaction.prototype.exchange = null;
        Transaction.prototype.lease = null;
        Transaction.prototype.leaseCancel = null;
        Transaction.prototype.createAlias = null;
        Transaction.prototype.massTransfer = null;
        Transaction.prototype.dataTransaction = null;
        Transaction.prototype.setScript = null;
        Transaction.prototype.sponsorFee = null;
        Transaction.prototype.setAssetScript = null;
        Transaction.prototype.invokeScript = null;
        Transaction.prototype.updateAssetInfo = null;
        Transaction.prototype.invokeExpression = null;

        var $oneOfFields;

        Object.defineProperty(Transaction.prototype, "data", {
            get: $util.oneOfGetter($oneOfFields = ["genesis", "payment", "issue", "transfer", "reissue", "burn", "exchange", "lease", "leaseCancel", "createAlias", "massTransfer", "dataTransaction", "setScript", "sponsorFee", "setAssetScript", "invokeScript", "updateAssetInfo", "invokeExpression"]),
            set: $util.oneOfSetter($oneOfFields)
        });

        Transaction.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.chainId != null && m.hasOwnProperty("chainId"))
                w.uint32(8).int32(m.chainId);
            if (m.senderPublicKey != null && m.hasOwnProperty("senderPublicKey"))
                w.uint32(18).bytes(m.senderPublicKey);
            if (m.fee != null && m.hasOwnProperty("fee"))
                $root.waves.Amount.encode(m.fee, w.uint32(26).fork()).ldelim();
            if (m.timestamp != null && m.hasOwnProperty("timestamp"))
                w.uint32(32).int64(m.timestamp);
            if (m.version != null && m.hasOwnProperty("version"))
                w.uint32(40).int32(m.version);
            if (m.genesis != null && m.hasOwnProperty("genesis"))
                $root.waves.GenesisTransactionData.encode(m.genesis, w.uint32(810).fork()).ldelim();
            if (m.payment != null && m.hasOwnProperty("payment"))
                $root.waves.PaymentTransactionData.encode(m.payment, w.uint32(818).fork()).ldelim();
            if (m.issue != null && m.hasOwnProperty("issue"))
                $root.waves.IssueTransactionData.encode(m.issue, w.uint32(826).fork()).ldelim();
            if (m.transfer != null && m.hasOwnProperty("transfer"))
                $root.waves.TransferTransactionData.encode(m.transfer, w.uint32(834).fork()).ldelim();
            if (m.reissue != null && m.hasOwnProperty("reissue"))
                $root.waves.ReissueTransactionData.encode(m.reissue, w.uint32(842).fork()).ldelim();
            if (m.burn != null && m.hasOwnProperty("burn"))
                $root.waves.BurnTransactionData.encode(m.burn, w.uint32(850).fork()).ldelim();
            if (m.exchange != null && m.hasOwnProperty("exchange"))
                $root.waves.ExchangeTransactionData.encode(m.exchange, w.uint32(858).fork()).ldelim();
            if (m.lease != null && m.hasOwnProperty("lease"))
                $root.waves.LeaseTransactionData.encode(m.lease, w.uint32(866).fork()).ldelim();
            if (m.leaseCancel != null && m.hasOwnProperty("leaseCancel"))
                $root.waves.LeaseCancelTransactionData.encode(m.leaseCancel, w.uint32(874).fork()).ldelim();
            if (m.createAlias != null && m.hasOwnProperty("createAlias"))
                $root.waves.CreateAliasTransactionData.encode(m.createAlias, w.uint32(882).fork()).ldelim();
            if (m.massTransfer != null && m.hasOwnProperty("massTransfer"))
                $root.waves.MassTransferTransactionData.encode(m.massTransfer, w.uint32(890).fork()).ldelim();
            if (m.dataTransaction != null && m.hasOwnProperty("dataTransaction"))
                $root.waves.DataTransactionData.encode(m.dataTransaction, w.uint32(898).fork()).ldelim();
            if (m.setScript != null && m.hasOwnProperty("setScript"))
                $root.waves.SetScriptTransactionData.encode(m.setScript, w.uint32(906).fork()).ldelim();
            if (m.sponsorFee != null && m.hasOwnProperty("sponsorFee"))
                $root.waves.SponsorFeeTransactionData.encode(m.sponsorFee, w.uint32(914).fork()).ldelim();
            if (m.setAssetScript != null && m.hasOwnProperty("setAssetScript"))
                $root.waves.SetAssetScriptTransactionData.encode(m.setAssetScript, w.uint32(922).fork()).ldelim();
            if (m.invokeScript != null && m.hasOwnProperty("invokeScript"))
                $root.waves.InvokeScriptTransactionData.encode(m.invokeScript, w.uint32(930).fork()).ldelim();
            if (m.updateAssetInfo != null && m.hasOwnProperty("updateAssetInfo"))
                $root.waves.UpdateAssetInfoTransactionData.encode(m.updateAssetInfo, w.uint32(938).fork()).ldelim();
            if (m.invokeExpression != null && m.hasOwnProperty("invokeExpression"))
                $root.waves.InvokeExpressionTransactionData.encode(m.invokeExpression, w.uint32(954).fork()).ldelim();
            return w;
        };

        Transaction.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.waves.Transaction();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.chainId = r.int32();
                    break;
                case 2:
                    m.senderPublicKey = r.bytes();
                    break;
                case 3:
                    m.fee = $root.waves.Amount.decode(r, r.uint32());
                    break;
                case 4:
                    m.timestamp = r.int64();
                    break;
                case 5:
                    m.version = r.int32();
                    break;
                case 101:
                    m.genesis = $root.waves.GenesisTransactionData.decode(r, r.uint32());
                    break;
                case 102:
                    m.payment = $root.waves.PaymentTransactionData.decode(r, r.uint32());
                    break;
                case 103:
                    m.issue = $root.waves.IssueTransactionData.decode(r, r.uint32());
                    break;
                case 104:
                    m.transfer = $root.waves.TransferTransactionData.decode(r, r.uint32());
                    break;
                case 105:
                    m.reissue = $root.waves.ReissueTransactionData.decode(r, r.uint32());
                    break;
                case 106:
                    m.burn = $root.waves.BurnTransactionData.decode(r, r.uint32());
                    break;
                case 107:
                    m.exchange = $root.waves.ExchangeTransactionData.decode(r, r.uint32());
                    break;
                case 108:
                    m.lease = $root.waves.LeaseTransactionData.decode(r, r.uint32());
                    break;
                case 109:
                    m.leaseCancel = $root.waves.LeaseCancelTransactionData.decode(r, r.uint32());
                    break;
                case 110:
                    m.createAlias = $root.waves.CreateAliasTransactionData.decode(r, r.uint32());
                    break;
                case 111:
                    m.massTransfer = $root.waves.MassTransferTransactionData.decode(r, r.uint32());
                    break;
                case 112:
                    m.dataTransaction = $root.waves.DataTransactionData.decode(r, r.uint32());
                    break;
                case 113:
                    m.setScript = $root.waves.SetScriptTransactionData.decode(r, r.uint32());
                    break;
                case 114:
                    m.sponsorFee = $root.waves.SponsorFeeTransactionData.decode(r, r.uint32());
                    break;
                case 115:
                    m.setAssetScript = $root.waves.SetAssetScriptTransactionData.decode(r, r.uint32());
                    break;
                case 116:
                    m.invokeScript = $root.waves.InvokeScriptTransactionData.decode(r, r.uint32());
                    break;
                case 117:
                    m.updateAssetInfo = $root.waves.UpdateAssetInfoTransactionData.decode(r, r.uint32());
                    break;
                case 119:
                    m.invokeExpression = $root.waves.InvokeExpressionTransactionData.decode(r, r.uint32());
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        return Transaction;
    })();

    waves.GenesisTransactionData = (function() {

        function GenesisTransactionData(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        GenesisTransactionData.prototype.recipientAddress = $util.newBuffer([]);
        GenesisTransactionData.prototype.amount = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        GenesisTransactionData.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.recipientAddress != null && m.hasOwnProperty("recipientAddress"))
                w.uint32(10).bytes(m.recipientAddress);
            if (m.amount != null && m.hasOwnProperty("amount"))
                w.uint32(16).int64(m.amount);
            return w;
        };

        GenesisTransactionData.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.waves.GenesisTransactionData();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.recipientAddress = r.bytes();
                    break;
                case 2:
                    m.amount = r.int64();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        return GenesisTransactionData;
    })();

    waves.PaymentTransactionData = (function() {

        function PaymentTransactionData(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        PaymentTransactionData.prototype.recipientAddress = $util.newBuffer([]);
        PaymentTransactionData.prototype.amount = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        PaymentTransactionData.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.recipientAddress != null && m.hasOwnProperty("recipientAddress"))
                w.uint32(10).bytes(m.recipientAddress);
            if (m.amount != null && m.hasOwnProperty("amount"))
                w.uint32(16).int64(m.amount);
            return w;
        };

        PaymentTransactionData.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.waves.PaymentTransactionData();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.recipientAddress = r.bytes();
                    break;
                case 2:
                    m.amount = r.int64();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        return PaymentTransactionData;
    })();

    waves.TransferTransactionData = (function() {

        function TransferTransactionData(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        TransferTransactionData.prototype.recipient = null;
        TransferTransactionData.prototype.amount = null;
        TransferTransactionData.prototype.attachment = $util.newBuffer([]);

        TransferTransactionData.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.recipient != null && m.hasOwnProperty("recipient"))
                $root.waves.Recipient.encode(m.recipient, w.uint32(10).fork()).ldelim();
            if (m.amount != null && m.hasOwnProperty("amount"))
                $root.waves.Amount.encode(m.amount, w.uint32(18).fork()).ldelim();
            if (m.attachment != null && m.hasOwnProperty("attachment"))
                w.uint32(26).bytes(m.attachment);
            return w;
        };

        TransferTransactionData.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.waves.TransferTransactionData();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.recipient = $root.waves.Recipient.decode(r, r.uint32());
                    break;
                case 2:
                    m.amount = $root.waves.Amount.decode(r, r.uint32());
                    break;
                case 3:
                    m.attachment = r.bytes();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        return TransferTransactionData;
    })();

    waves.CreateAliasTransactionData = (function() {

        function CreateAliasTransactionData(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        CreateAliasTransactionData.prototype.alias = "";

        CreateAliasTransactionData.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.alias != null && m.hasOwnProperty("alias"))
                w.uint32(10).string(m.alias);
            return w;
        };

        CreateAliasTransactionData.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.waves.CreateAliasTransactionData();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.alias = r.string();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        return CreateAliasTransactionData;
    })();

    waves.DataTransactionData = (function() {

        function DataTransactionData(p) {
            this.data = [];
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        DataTransactionData.prototype.data = $util.emptyArray;

        DataTransactionData.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.data != null && m.data.length) {
                for (var i = 0; i < m.data.length; ++i)
                    $root.waves.DataTransactionData.DataEntry.encode(m.data[i], w.uint32(10).fork()).ldelim();
            }
            return w;
        };

        DataTransactionData.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.waves.DataTransactionData();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    if (!(m.data && m.data.length))
                        m.data = [];
                    m.data.push($root.waves.DataTransactionData.DataEntry.decode(r, r.uint32()));
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        DataTransactionData.DataEntry = (function() {

            function DataEntry(p) {
                if (p)
                    for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                        if (p[ks[i]] != null)
                            this[ks[i]] = p[ks[i]];
            }

            DataEntry.prototype.key = "";
            DataEntry.prototype.intValue = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
            DataEntry.prototype.boolValue = false;
            DataEntry.prototype.binaryValue = $util.newBuffer([]);
            DataEntry.prototype.stringValue = "";

            var $oneOfFields;

            Object.defineProperty(DataEntry.prototype, "value", {
                get: $util.oneOfGetter($oneOfFields = ["intValue", "boolValue", "binaryValue", "stringValue"]),
                set: $util.oneOfSetter($oneOfFields)
            });

            DataEntry.encode = function encode(m, w) {
                if (!w)
                    w = $Writer.create();
                if (m.key != null && m.hasOwnProperty("key"))
                    w.uint32(10).string(m.key);
                if (m.intValue != null && m.hasOwnProperty("intValue"))
                    w.uint32(80).int64(m.intValue);
                if (m.boolValue != null && m.hasOwnProperty("boolValue"))
                    w.uint32(88).bool(m.boolValue);
                if (m.binaryValue != null && m.hasOwnProperty("binaryValue"))
                    w.uint32(98).bytes(m.binaryValue);
                if (m.stringValue != null && m.hasOwnProperty("stringValue"))
                    w.uint32(106).string(m.stringValue);
                return w;
            };

            DataEntry.decode = function decode(r, l) {
                if (!(r instanceof $Reader))
                    r = $Reader.create(r);
                var c = l === undefined ? r.len : r.pos + l, m = new $root.waves.DataTransactionData.DataEntry();
                while (r.pos < c) {
                    var t = r.uint32();
                    switch (t >>> 3) {
                    case 1:
                        m.key = r.string();
                        break;
                    case 10:
                        m.intValue = r.int64();
                        break;
                    case 11:
                        m.boolValue = r.bool();
                        break;
                    case 12:
                        m.binaryValue = r.bytes();
                        break;
                    case 13:
                        m.stringValue = r.string();
                        break;
                    default:
                        r.skipType(t & 7);
                        break;
                    }
                }
                return m;
            };

            return DataEntry;
        })();

        return DataTransactionData;
    })();

    waves.MassTransferTransactionData = (function() {

        function MassTransferTransactionData(p) {
            this.transfers = [];
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        MassTransferTransactionData.prototype.assetId = $util.newBuffer([]);
        MassTransferTransactionData.prototype.transfers = $util.emptyArray;
        MassTransferTransactionData.prototype.attachment = $util.newBuffer([]);

        MassTransferTransactionData.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.assetId != null && m.hasOwnProperty("assetId"))
                w.uint32(10).bytes(m.assetId);
            if (m.transfers != null && m.transfers.length) {
                for (var i = 0; i < m.transfers.length; ++i)
                    $root.waves.MassTransferTransactionData.Transfer.encode(m.transfers[i], w.uint32(18).fork()).ldelim();
            }
            if (m.attachment != null && m.hasOwnProperty("attachment"))
                w.uint32(26).bytes(m.attachment);
            return w;
        };

        MassTransferTransactionData.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.waves.MassTransferTransactionData();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.assetId = r.bytes();
                    break;
                case 2:
                    if (!(m.transfers && m.transfers.length))
                        m.transfers = [];
                    m.transfers.push($root.waves.MassTransferTransactionData.Transfer.decode(r, r.uint32()));
                    break;
                case 3:
                    m.attachment = r.bytes();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        MassTransferTransactionData.Transfer = (function() {

            function Transfer(p) {
                if (p)
                    for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                        if (p[ks[i]] != null)
                            this[ks[i]] = p[ks[i]];
            }

            Transfer.prototype.recipient = null;
            Transfer.prototype.amount = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

            Transfer.encode = function encode(m, w) {
                if (!w)
                    w = $Writer.create();
                if (m.recipient != null && m.hasOwnProperty("recipient"))
                    $root.waves.Recipient.encode(m.recipient, w.uint32(10).fork()).ldelim();
                if (m.amount != null && m.hasOwnProperty("amount"))
                    w.uint32(16).int64(m.amount);
                return w;
            };

            Transfer.decode = function decode(r, l) {
                if (!(r instanceof $Reader))
                    r = $Reader.create(r);
                var c = l === undefined ? r.len : r.pos + l, m = new $root.waves.MassTransferTransactionData.Transfer();
                while (r.pos < c) {
                    var t = r.uint32();
                    switch (t >>> 3) {
                    case 1:
                        m.recipient = $root.waves.Recipient.decode(r, r.uint32());
                        break;
                    case 2:
                        m.amount = r.int64();
                        break;
                    default:
                        r.skipType(t & 7);
                        break;
                    }
                }
                return m;
            };

            return Transfer;
        })();

        return MassTransferTransactionData;
    })();

    waves.LeaseTransactionData = (function() {

        function LeaseTransactionData(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        LeaseTransactionData.prototype.recipient = null;
        LeaseTransactionData.prototype.amount = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        LeaseTransactionData.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.recipient != null && m.hasOwnProperty("recipient"))
                $root.waves.Recipient.encode(m.recipient, w.uint32(10).fork()).ldelim();
            if (m.amount != null && m.hasOwnProperty("amount"))
                w.uint32(16).int64(m.amount);
            return w;
        };

        LeaseTransactionData.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.waves.LeaseTransactionData();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.recipient = $root.waves.Recipient.decode(r, r.uint32());
                    break;
                case 2:
                    m.amount = r.int64();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        return LeaseTransactionData;
    })();

    waves.LeaseCancelTransactionData = (function() {

        function LeaseCancelTransactionData(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        LeaseCancelTransactionData.prototype.leaseId = $util.newBuffer([]);

        LeaseCancelTransactionData.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.leaseId != null && m.hasOwnProperty("leaseId"))
                w.uint32(10).bytes(m.leaseId);
            return w;
        };

        LeaseCancelTransactionData.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.waves.LeaseCancelTransactionData();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.leaseId = r.bytes();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        return LeaseCancelTransactionData;
    })();

    waves.BurnTransactionData = (function() {

        function BurnTransactionData(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        BurnTransactionData.prototype.assetAmount = null;

        BurnTransactionData.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.assetAmount != null && m.hasOwnProperty("assetAmount"))
                $root.waves.Amount.encode(m.assetAmount, w.uint32(10).fork()).ldelim();
            return w;
        };

        BurnTransactionData.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.waves.BurnTransactionData();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.assetAmount = $root.waves.Amount.decode(r, r.uint32());
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        return BurnTransactionData;
    })();

    waves.IssueTransactionData = (function() {

        function IssueTransactionData(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        IssueTransactionData.prototype.name = "";
        IssueTransactionData.prototype.description = "";
        IssueTransactionData.prototype.amount = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
        IssueTransactionData.prototype.decimals = 0;
        IssueTransactionData.prototype.reissuable = false;
        IssueTransactionData.prototype.script = $util.newBuffer([]);

        IssueTransactionData.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.name != null && m.hasOwnProperty("name"))
                w.uint32(10).string(m.name);
            if (m.description != null && m.hasOwnProperty("description"))
                w.uint32(18).string(m.description);
            if (m.amount != null && m.hasOwnProperty("amount"))
                w.uint32(24).int64(m.amount);
            if (m.decimals != null && m.hasOwnProperty("decimals"))
                w.uint32(32).int32(m.decimals);
            if (m.reissuable != null && m.hasOwnProperty("reissuable"))
                w.uint32(40).bool(m.reissuable);
            if (m.script != null && m.hasOwnProperty("script"))
                w.uint32(50).bytes(m.script);
            return w;
        };

        IssueTransactionData.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.waves.IssueTransactionData();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.name = r.string();
                    break;
                case 2:
                    m.description = r.string();
                    break;
                case 3:
                    m.amount = r.int64();
                    break;
                case 4:
                    m.decimals = r.int32();
                    break;
                case 5:
                    m.reissuable = r.bool();
                    break;
                case 6:
                    m.script = r.bytes();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        return IssueTransactionData;
    })();

    waves.ReissueTransactionData = (function() {

        function ReissueTransactionData(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        ReissueTransactionData.prototype.assetAmount = null;
        ReissueTransactionData.prototype.reissuable = false;

        ReissueTransactionData.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.assetAmount != null && m.hasOwnProperty("assetAmount"))
                $root.waves.Amount.encode(m.assetAmount, w.uint32(10).fork()).ldelim();
            if (m.reissuable != null && m.hasOwnProperty("reissuable"))
                w.uint32(16).bool(m.reissuable);
            return w;
        };

        ReissueTransactionData.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.waves.ReissueTransactionData();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.assetAmount = $root.waves.Amount.decode(r, r.uint32());
                    break;
                case 2:
                    m.reissuable = r.bool();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        return ReissueTransactionData;
    })();

    waves.SetAssetScriptTransactionData = (function() {

        function SetAssetScriptTransactionData(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        SetAssetScriptTransactionData.prototype.assetId = $util.newBuffer([]);
        SetAssetScriptTransactionData.prototype.script = $util.newBuffer([]);

        SetAssetScriptTransactionData.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.assetId != null && m.hasOwnProperty("assetId"))
                w.uint32(10).bytes(m.assetId);
            if (m.script != null && m.hasOwnProperty("script"))
                w.uint32(18).bytes(m.script);
            return w;
        };

        SetAssetScriptTransactionData.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.waves.SetAssetScriptTransactionData();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.assetId = r.bytes();
                    break;
                case 2:
                    m.script = r.bytes();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        return SetAssetScriptTransactionData;
    })();

    waves.SetScriptTransactionData = (function() {

        function SetScriptTransactionData(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        SetScriptTransactionData.prototype.script = $util.newBuffer([]);

        SetScriptTransactionData.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.script != null && m.hasOwnProperty("script"))
                w.uint32(10).bytes(m.script);
            return w;
        };

        SetScriptTransactionData.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.waves.SetScriptTransactionData();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.script = r.bytes();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        return SetScriptTransactionData;
    })();

    waves.ExchangeTransactionData = (function() {

        function ExchangeTransactionData(p) {
            this.orders = [];
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        ExchangeTransactionData.prototype.amount = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
        ExchangeTransactionData.prototype.price = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
        ExchangeTransactionData.prototype.buyMatcherFee = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
        ExchangeTransactionData.prototype.sellMatcherFee = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
        ExchangeTransactionData.prototype.orders = $util.emptyArray;

        ExchangeTransactionData.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.amount != null && m.hasOwnProperty("amount"))
                w.uint32(8).int64(m.amount);
            if (m.price != null && m.hasOwnProperty("price"))
                w.uint32(16).int64(m.price);
            if (m.buyMatcherFee != null && m.hasOwnProperty("buyMatcherFee"))
                w.uint32(24).int64(m.buyMatcherFee);
            if (m.sellMatcherFee != null && m.hasOwnProperty("sellMatcherFee"))
                w.uint32(32).int64(m.sellMatcherFee);
            if (m.orders != null && m.orders.length) {
                for (var i = 0; i < m.orders.length; ++i)
                    $root.waves.Order.encode(m.orders[i], w.uint32(42).fork()).ldelim();
            }
            return w;
        };

        ExchangeTransactionData.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.waves.ExchangeTransactionData();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.amount = r.int64();
                    break;
                case 2:
                    m.price = r.int64();
                    break;
                case 3:
                    m.buyMatcherFee = r.int64();
                    break;
                case 4:
                    m.sellMatcherFee = r.int64();
                    break;
                case 5:
                    if (!(m.orders && m.orders.length))
                        m.orders = [];
                    m.orders.push($root.waves.Order.decode(r, r.uint32()));
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        return ExchangeTransactionData;
    })();

    waves.SponsorFeeTransactionData = (function() {

        function SponsorFeeTransactionData(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        SponsorFeeTransactionData.prototype.minFee = null;

        SponsorFeeTransactionData.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.minFee != null && m.hasOwnProperty("minFee"))
                $root.waves.Amount.encode(m.minFee, w.uint32(10).fork()).ldelim();
            return w;
        };

        SponsorFeeTransactionData.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.waves.SponsorFeeTransactionData();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.minFee = $root.waves.Amount.decode(r, r.uint32());
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        return SponsorFeeTransactionData;
    })();

    waves.InvokeScriptTransactionData = (function() {

        function InvokeScriptTransactionData(p) {
            this.payments = [];
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        InvokeScriptTransactionData.prototype.dApp = null;
        InvokeScriptTransactionData.prototype.functionCall = $util.newBuffer([]);
        InvokeScriptTransactionData.prototype.payments = $util.emptyArray;

        InvokeScriptTransactionData.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.dApp != null && m.hasOwnProperty("dApp"))
                $root.waves.Recipient.encode(m.dApp, w.uint32(10).fork()).ldelim();
            if (m.functionCall != null && m.hasOwnProperty("functionCall"))
                w.uint32(18).bytes(m.functionCall);
            if (m.payments != null && m.payments.length) {
                for (var i = 0; i < m.payments.length; ++i)
                    $root.waves.Amount.encode(m.payments[i], w.uint32(26).fork()).ldelim();
            }
            return w;
        };

        InvokeScriptTransactionData.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.waves.InvokeScriptTransactionData();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.dApp = $root.waves.Recipient.decode(r, r.uint32());
                    break;
                case 2:
                    m.functionCall = r.bytes();
                    break;
                case 3:
                    if (!(m.payments && m.payments.length))
                        m.payments = [];
                    m.payments.push($root.waves.Amount.decode(r, r.uint32()));
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        return InvokeScriptTransactionData;
    })();

    waves.UpdateAssetInfoTransactionData = (function() {

        function UpdateAssetInfoTransactionData(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        UpdateAssetInfoTransactionData.prototype.assetId = $util.newBuffer([]);
        UpdateAssetInfoTransactionData.prototype.name = "";
        UpdateAssetInfoTransactionData.prototype.description = "";

        UpdateAssetInfoTransactionData.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.assetId != null && m.hasOwnProperty("assetId"))
                w.uint32(10).bytes(m.assetId);
            if (m.name != null && m.hasOwnProperty("name"))
                w.uint32(18).string(m.name);
            if (m.description != null && m.hasOwnProperty("description"))
                w.uint32(26).string(m.description);
            return w;
        };

        UpdateAssetInfoTransactionData.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.waves.UpdateAssetInfoTransactionData();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.assetId = r.bytes();
                    break;
                case 2:
                    m.name = r.string();
                    break;
                case 3:
                    m.description = r.string();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        return UpdateAssetInfoTransactionData;
    })();

    waves.InvokeExpressionTransactionData = (function() {

        function InvokeExpressionTransactionData(p) {
            if (p)
                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                    if (p[ks[i]] != null)
                        this[ks[i]] = p[ks[i]];
        }

        InvokeExpressionTransactionData.prototype.expression = $util.newBuffer([]);

        InvokeExpressionTransactionData.encode = function encode(m, w) {
            if (!w)
                w = $Writer.create();
            if (m.expression != null && m.hasOwnProperty("expression"))
                w.uint32(10).bytes(m.expression);
            return w;
        };

        InvokeExpressionTransactionData.decode = function decode(r, l) {
            if (!(r instanceof $Reader))
                r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l, m = new $root.waves.InvokeExpressionTransactionData();
            while (r.pos < c) {
                var t = r.uint32();
                switch (t >>> 3) {
                case 1:
                    m.expression = r.bytes();
                    break;
                default:
                    r.skipType(t & 7);
                    break;
                }
            }
            return m;
        };

        return InvokeExpressionTransactionData;
    })();

    return waves;
})();

$root.google = (function() {

    var google = {};

    google.protobuf = (function() {

        var protobuf = {};

        protobuf.DoubleValue = (function() {

            function DoubleValue(p) {
                if (p)
                    for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                        if (p[ks[i]] != null)
                            this[ks[i]] = p[ks[i]];
            }

            DoubleValue.prototype.value = 0;

            DoubleValue.encode = function encode(m, w) {
                if (!w)
                    w = $Writer.create();
                if (m.value != null && m.hasOwnProperty("value"))
                    w.uint32(9).double(m.value);
                return w;
            };

            DoubleValue.decode = function decode(r, l) {
                if (!(r instanceof $Reader))
                    r = $Reader.create(r);
                var c = l === undefined ? r.len : r.pos + l, m = new $root.google.protobuf.DoubleValue();
                while (r.pos < c) {
                    var t = r.uint32();
                    switch (t >>> 3) {
                    case 1:
                        m.value = r.double();
                        break;
                    default:
                        r.skipType(t & 7);
                        break;
                    }
                }
                return m;
            };

            return DoubleValue;
        })();

        protobuf.FloatValue = (function() {

            function FloatValue(p) {
                if (p)
                    for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                        if (p[ks[i]] != null)
                            this[ks[i]] = p[ks[i]];
            }

            FloatValue.prototype.value = 0;

            FloatValue.encode = function encode(m, w) {
                if (!w)
                    w = $Writer.create();
                if (m.value != null && m.hasOwnProperty("value"))
                    w.uint32(13).float(m.value);
                return w;
            };

            FloatValue.decode = function decode(r, l) {
                if (!(r instanceof $Reader))
                    r = $Reader.create(r);
                var c = l === undefined ? r.len : r.pos + l, m = new $root.google.protobuf.FloatValue();
                while (r.pos < c) {
                    var t = r.uint32();
                    switch (t >>> 3) {
                    case 1:
                        m.value = r.float();
                        break;
                    default:
                        r.skipType(t & 7);
                        break;
                    }
                }
                return m;
            };

            return FloatValue;
        })();

        protobuf.Int64Value = (function() {

            function Int64Value(p) {
                if (p)
                    for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                        if (p[ks[i]] != null)
                            this[ks[i]] = p[ks[i]];
            }

            Int64Value.prototype.value = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

            Int64Value.encode = function encode(m, w) {
                if (!w)
                    w = $Writer.create();
                if (m.value != null && m.hasOwnProperty("value"))
                    w.uint32(8).int64(m.value);
                return w;
            };

            Int64Value.decode = function decode(r, l) {
                if (!(r instanceof $Reader))
                    r = $Reader.create(r);
                var c = l === undefined ? r.len : r.pos + l, m = new $root.google.protobuf.Int64Value();
                while (r.pos < c) {
                    var t = r.uint32();
                    switch (t >>> 3) {
                    case 1:
                        m.value = r.int64();
                        break;
                    default:
                        r.skipType(t & 7);
                        break;
                    }
                }
                return m;
            };

            return Int64Value;
        })();

        protobuf.UInt64Value = (function() {

            function UInt64Value(p) {
                if (p)
                    for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                        if (p[ks[i]] != null)
                            this[ks[i]] = p[ks[i]];
            }

            UInt64Value.prototype.value = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

            UInt64Value.encode = function encode(m, w) {
                if (!w)
                    w = $Writer.create();
                if (m.value != null && m.hasOwnProperty("value"))
                    w.uint32(8).uint64(m.value);
                return w;
            };

            UInt64Value.decode = function decode(r, l) {
                if (!(r instanceof $Reader))
                    r = $Reader.create(r);
                var c = l === undefined ? r.len : r.pos + l, m = new $root.google.protobuf.UInt64Value();
                while (r.pos < c) {
                    var t = r.uint32();
                    switch (t >>> 3) {
                    case 1:
                        m.value = r.uint64();
                        break;
                    default:
                        r.skipType(t & 7);
                        break;
                    }
                }
                return m;
            };

            return UInt64Value;
        })();

        protobuf.Int32Value = (function() {

            function Int32Value(p) {
                if (p)
                    for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                        if (p[ks[i]] != null)
                            this[ks[i]] = p[ks[i]];
            }

            Int32Value.prototype.value = 0;

            Int32Value.encode = function encode(m, w) {
                if (!w)
                    w = $Writer.create();
                if (m.value != null && m.hasOwnProperty("value"))
                    w.uint32(8).int32(m.value);
                return w;
            };

            Int32Value.decode = function decode(r, l) {
                if (!(r instanceof $Reader))
                    r = $Reader.create(r);
                var c = l === undefined ? r.len : r.pos + l, m = new $root.google.protobuf.Int32Value();
                while (r.pos < c) {
                    var t = r.uint32();
                    switch (t >>> 3) {
                    case 1:
                        m.value = r.int32();
                        break;
                    default:
                        r.skipType(t & 7);
                        break;
                    }
                }
                return m;
            };

            return Int32Value;
        })();

        protobuf.UInt32Value = (function() {

            function UInt32Value(p) {
                if (p)
                    for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                        if (p[ks[i]] != null)
                            this[ks[i]] = p[ks[i]];
            }

            UInt32Value.prototype.value = 0;

            UInt32Value.encode = function encode(m, w) {
                if (!w)
                    w = $Writer.create();
                if (m.value != null && m.hasOwnProperty("value"))
                    w.uint32(8).uint32(m.value);
                return w;
            };

            UInt32Value.decode = function decode(r, l) {
                if (!(r instanceof $Reader))
                    r = $Reader.create(r);
                var c = l === undefined ? r.len : r.pos + l, m = new $root.google.protobuf.UInt32Value();
                while (r.pos < c) {
                    var t = r.uint32();
                    switch (t >>> 3) {
                    case 1:
                        m.value = r.uint32();
                        break;
                    default:
                        r.skipType(t & 7);
                        break;
                    }
                }
                return m;
            };

            return UInt32Value;
        })();

        protobuf.BoolValue = (function() {

            function BoolValue(p) {
                if (p)
                    for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                        if (p[ks[i]] != null)
                            this[ks[i]] = p[ks[i]];
            }

            BoolValue.prototype.value = false;

            BoolValue.encode = function encode(m, w) {
                if (!w)
                    w = $Writer.create();
                if (m.value != null && m.hasOwnProperty("value"))
                    w.uint32(8).bool(m.value);
                return w;
            };

            BoolValue.decode = function decode(r, l) {
                if (!(r instanceof $Reader))
                    r = $Reader.create(r);
                var c = l === undefined ? r.len : r.pos + l, m = new $root.google.protobuf.BoolValue();
                while (r.pos < c) {
                    var t = r.uint32();
                    switch (t >>> 3) {
                    case 1:
                        m.value = r.bool();
                        break;
                    default:
                        r.skipType(t & 7);
                        break;
                    }
                }
                return m;
            };

            return BoolValue;
        })();

        protobuf.StringValue = (function() {

            function StringValue(p) {
                if (p)
                    for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                        if (p[ks[i]] != null)
                            this[ks[i]] = p[ks[i]];
            }

            StringValue.prototype.value = "";

            StringValue.encode = function encode(m, w) {
                if (!w)
                    w = $Writer.create();
                if (m.value != null && m.hasOwnProperty("value"))
                    w.uint32(10).string(m.value);
                return w;
            };

            StringValue.decode = function decode(r, l) {
                if (!(r instanceof $Reader))
                    r = $Reader.create(r);
                var c = l === undefined ? r.len : r.pos + l, m = new $root.google.protobuf.StringValue();
                while (r.pos < c) {
                    var t = r.uint32();
                    switch (t >>> 3) {
                    case 1:
                        m.value = r.string();
                        break;
                    default:
                        r.skipType(t & 7);
                        break;
                    }
                }
                return m;
            };

            return StringValue;
        })();

        protobuf.BytesValue = (function() {

            function BytesValue(p) {
                if (p)
                    for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                        if (p[ks[i]] != null)
                            this[ks[i]] = p[ks[i]];
            }

            BytesValue.prototype.value = $util.newBuffer([]);

            BytesValue.encode = function encode(m, w) {
                if (!w)
                    w = $Writer.create();
                if (m.value != null && m.hasOwnProperty("value"))
                    w.uint32(10).bytes(m.value);
                return w;
            };

            BytesValue.decode = function decode(r, l) {
                if (!(r instanceof $Reader))
                    r = $Reader.create(r);
                var c = l === undefined ? r.len : r.pos + l, m = new $root.google.protobuf.BytesValue();
                while (r.pos < c) {
                    var t = r.uint32();
                    switch (t >>> 3) {
                    case 1:
                        m.value = r.bytes();
                        break;
                    default:
                        r.skipType(t & 7);
                        break;
                    }
                }
                return m;
            };

            return BytesValue;
        })();

        protobuf.Empty = (function() {

            function Empty(p) {
                if (p)
                    for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
                        if (p[ks[i]] != null)
                            this[ks[i]] = p[ks[i]];
            }

            Empty.encode = function encode(m, w) {
                if (!w)
                    w = $Writer.create();
                return w;
            };

            Empty.decode = function decode(r, l) {
                if (!(r instanceof $Reader))
                    r = $Reader.create(r);
                var c = l === undefined ? r.len : r.pos + l, m = new $root.google.protobuf.Empty();
                while (r.pos < c) {
                    var t = r.uint32();
                    switch (t >>> 3) {
                    default:
                        r.skipType(t & 7);
                        break;
                    }
                }
                return m;
            };

            return Empty;
        })();

        return protobuf;
    })();

    return google;
})();

module.exports = $root;

},{"protobufjs/minimal":"Myh2"}],"gaMD":[function(require,module,exports) {
"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.scriptToProto = exports.dataEntryToProto = exports.signedTxToProto = exports.txToProto = exports.protoBytesToOrder = exports.orderToProtoBytes = exports.protoTxDataToTx = exports.protoBytesToTx = exports.protoBytesToSignedTx = exports.signedTxToProtoBytes = exports.txToProtoBytes = void 0;
const wavesProto = __importStar(require("@waves/protobuf-serialization"));
const ts_lib_crypto_1 = require("@waves/ts-lib-crypto");
const marshall_1 = require("@waves/marshall");
const ts_types_1 = require("@waves/ts-types");
const generic_1 = require("./generic");
const long_1 = __importDefault(require("long"));
const invokeScriptCallSchema = Object.assign({}, marshall_1.schemas.txFields.functionCall[1]);
const recipientFromProto = (recipient, chainId) => {
    if (recipient.alias) {
        return `alias:${String.fromCharCode(chainId)}:${recipient.alias}`;
    }
    const rawAddress = ts_lib_crypto_1.concat([1], [chainId], recipient.publicKeyHash);
    const checkSum = ts_lib_crypto_1.keccak(ts_lib_crypto_1.blake2b(rawAddress)).slice(0, 4);
    return ts_lib_crypto_1.base58Encode(ts_lib_crypto_1.concat(rawAddress, checkSum));
};
function convertNumber(n) {
    const maxJsNumber = Math.pow(2, 53) - 1;
    return n.toNumber() > maxJsNumber ? n.toString() : n.toNumber();
}
function txToProtoBytes(obj) {
    return new Uint8Array(wavesProto.waves.Transaction.encode(exports.txToProto(obj)).finish());
}
exports.txToProtoBytes = txToProtoBytes;
function signedTxToProtoBytes(obj) {
    return new Uint8Array(wavesProto.waves.SignedTransaction.encode(exports.signedTxToProto(obj)).finish());
}
exports.signedTxToProtoBytes = signedTxToProtoBytes;
function protoBytesToSignedTx(bytes) {
    const txData = wavesProto.waves.SignedTransaction.decode(bytes);
    const tx = protoTxDataToTx(txData.transaction);
    const signedTx = Object.assign(Object.assign({}, tx), { proofs: (txData.proofs || []).map(uint8Array2proof) });
    return signedTx;
}
exports.protoBytesToSignedTx = protoBytesToSignedTx;
function protoBytesToTx(bytes) {
    const t = wavesProto.waves.Transaction.decode(bytes);
    const res = protoTxDataToTx(t);
    return res;
}
exports.protoBytesToTx = protoBytesToTx;
function protoTxDataToTx(t) {
    // | 'invokeExpression'
    let res = {
        version: t.version,
        type: typeByName[t.data],
        senderPublicKey: ts_lib_crypto_1.base58Encode(t.senderPublicKey),
        timestamp: t.timestamp.toNumber(),
        fee: convertNumber(t.fee.amount),
    };
    if (t.fee.hasOwnProperty('assetId')) {
        res.feeAssetId = ts_lib_crypto_1.base58Encode(t.fee.assetId);
    }
    else {
        res.feeAssetId = null;
    }
    if (t.hasOwnProperty('chainId')) {
        res.chainId = t.chainId;
    }
    switch (t.data) {
        case 'issue':
            res.name = t.issue.name;
            res.description = t.issue.description;
            res.quantity = convertNumber(t.issue.amount);
            res.decimals = t.issue.decimals;
            res.reissuable = t.issue.reissuable;
            res.script = (t.issue.hasOwnProperty('script')) ? generic_1.base64Prefix(ts_lib_crypto_1.base64Encode(t.issue.script)) : null;
            break;
        case 'transfer':
            res.amount = convertNumber(t.transfer.amount.amount);
            res.recipient = recipientFromProto(t.transfer.recipient, t.chainId);
            res.attachment = (t.transfer.hasOwnProperty('attachment')) ? ts_lib_crypto_1.base58Encode(t.transfer.attachment) : '';
            res.assetId = (t.transfer.amount.hasOwnProperty('assetId')) ? ts_lib_crypto_1.base58Encode(t.transfer.amount.assetId) : null;
            break;
        case 'reissue':
            res.quantity = convertNumber(t.reissue.assetAmount.amount);
            res.assetId = t.reissue.assetAmount.assetId == null ? null : ts_lib_crypto_1.base58Encode(t.reissue.assetAmount.assetId);
            res.reissuable = t.reissue.reissuable;
            break;
        case 'burn':
            res.amount = convertNumber(t.burn.assetAmount.amount);
            res.assetId = ts_lib_crypto_1.base58Encode(t.burn.assetAmount.assetId);
            break;
        case 'exchange':
            res.amount = convertNumber(t.exchange.amount);
            res.price = convertNumber(t.exchange.price);
            res.buyMatcherFee = convertNumber(t.exchange.buyMatcherFee);
            res.sellMatcherFee = convertNumber(t.exchange.sellMatcherFee);
            res.order1 = orderFromProto(t.exchange.orders[0]);
            res.order2 = orderFromProto(t.exchange.orders[1]);
            break;
        case 'lease':
            res.recipient = recipientFromProto(t.lease.recipient, t.chainId);
            res.amount = convertNumber(t.lease.amount);
            break;
        case 'leaseCancel':
            res.leaseId = ts_lib_crypto_1.base58Encode(t.leaseCancel.leaseId);
            break;
        case 'createAlias':
            res.alias = t.createAlias.alias;
            break;
        case 'massTransfer':
            res.assetId = (t.massTransfer.hasOwnProperty('assetId')) ? ts_lib_crypto_1.base58Encode(t.massTransfer.assetId) : null;
            res.attachment = (t.massTransfer.hasOwnProperty('attachment')) ? ts_lib_crypto_1.base58Encode(t.massTransfer.attachment) : '';
            res.transfers = t.massTransfer.transfers.map(({ amount, recipient }) => ({
                amount: convertNumber(amount),
                recipient: recipientFromProto(recipient, t.chainId),
            }));
            break;
        case 'dataTransaction':
            res.data = t.dataTransaction.data.map(de => {
                if (de.hasOwnProperty('binaryValue'))
                    return {
                        key: de.key,
                        type: 'binary',
                        value: generic_1.base64Prefix(ts_lib_crypto_1.base64Encode(de.binaryValue)),
                    };
                if (de.hasOwnProperty('boolValue'))
                    return { key: de.key, type: 'boolean', value: de.boolValue };
                if (de.hasOwnProperty('intValue'))
                    return {
                        key: de.key,
                        type: 'integer',
                        value: convertNumber(de.intValue)
                    };
                if (de.hasOwnProperty('stringValue'))
                    return { key: de.key, type: 'string', value: de.stringValue };
                return { key: de.key, value: null };
            });
            break;
        case 'setScript':
            res.script = (t.setScript.hasOwnProperty('script')) ? generic_1.base64Prefix(ts_lib_crypto_1.base64Encode(t.setScript.script)) : null;
            break;
        case 'sponsorFee':
            res.minSponsoredAssetFee = convertNumber(t.sponsorFee.minFee.amount);
            res.assetId = ts_lib_crypto_1.base58Encode(t.sponsorFee.minFee.assetId);
            break;
        case 'setAssetScript':
            res.assetId = ts_lib_crypto_1.base58Encode(t.setAssetScript.assetId);
            res.script = generic_1.base64Prefix(ts_lib_crypto_1.base64Encode(t.setAssetScript.script));
            break;
        case 'invokeScript':
            res.dApp = recipientFromProto(t.invokeScript.dApp, t.chainId);
            if (t.invokeScript.functionCall != null) {
                res.call = marshall_1.binary.parserFromSchema(invokeScriptCallSchema)(t.invokeScript.functionCall).value; //todo: export function call from marshall and use it directly
            }
            res.payment = t.invokeScript.payments.map(p => ({
                amount: convertNumber(p.amount),
                assetId: p.hasOwnProperty('assetId') ? ts_lib_crypto_1.base58Encode(p.assetId) : null
            }));
            break;
        case 'updateAssetInfo':
            res.assetId = ts_lib_crypto_1.base58Encode(t.updateAssetInfo.assetId);
            res.name = t.updateAssetInfo.name;
            res.description = t.updateAssetInfo.description;
            break;
        // case 'invokeExpression':
        //     res.expression = t.invokeExpression?.expression == null ? null : base64Prefix(base64Encode(t.invokeExpression?.expression))
        //     break
        default:
            throw new Error(`Unsupported tx type ${t.data}`);
    }
    if (res.hasOwnProperty('chainId')) {
        res.sender = ts_lib_crypto_1.address({ publicKey: t.senderPublicKey }, t.chainId);
    }
    else {
        let recipient = res.recipient || res.dApp || (res.transfers && res.transfers[0] && res.transfers[0].recipient);
        if (recipient) {
            res.sender = ts_lib_crypto_1.address({ publicKey: t.senderPublicKey }, generic_1.chainIdFromRecipient(recipient));
        }
    }
    return res;
}
exports.protoTxDataToTx = protoTxDataToTx;
function orderToProtoBytes(obj) {
    return wavesProto.waves.Order.encode(orderToProto(obj)).finish();
}
exports.orderToProtoBytes = orderToProtoBytes;
function protoBytesToOrder(bytes) {
    const o = wavesProto.waves.Order.decode(bytes);
    return orderFromProto(o);
}
exports.protoBytesToOrder = protoBytesToOrder;
const getCommonFields = (_a) => {
    var { senderPublicKey, fee, timestamp, type, version } = _a, rest = __rest(_a, ["senderPublicKey", "fee", "timestamp", "type", "version"]);
    const typename = nameByType[type];
    let chainId = rest.chainId;
    if (chainId == null) {
        const r = rest;
        let recipient = r.recipient || r.dApp || (r.transfers && r.transfers[0] && r.transfers[0].recipient);
        if (recipient) {
            chainId = generic_1.chainIdFromRecipient(recipient);
        }
    }
    return {
        version,
        type,
        chainId,
        senderPublicKey: ts_lib_crypto_1.base58Decode(senderPublicKey),
        timestamp: long_1.default.fromValue(timestamp),
        fee: amountToProto(fee, rest.feeAssetId),
        data: typename,
    };
};
const getCommonSignedFields = (tx) => {
    const fields = getCommonFields(tx);
    if (tx.hasOwnProperty('proofs')) {
        fields.proofs = tx.proofs;
    }
    return fields;
};
const getIssueData = (t) => ({
    name: t.name,
    description: t.description === '' ? null : t.description,
    amount: long_1.default.fromValue(t.quantity),
    decimals: t.decimals === 0 ? null : t.decimals,
    reissuable: t.reissuable ? true : undefined,
    script: t.script == null ? null : exports.scriptToProto(t.script),
});
const getTransferData = (t) => ({
    recipient: recipientToProto(t.recipient),
    amount: amountToProto(t.amount, t.assetId),
    attachment: t.attachment == null || t.attachment == '' ? undefined : ts_lib_crypto_1.base58Decode(t.attachment),
});
const getReissueData = (t) => ({
    assetAmount: amountToProto(t.quantity, t.assetId),
    reissuable: t.reissuable ? true : undefined,
});
const getBurnData = (t) => ({
    assetAmount: amountToProto(t.amount || t.amount, t.assetId),
});
const getExchangeData = (t) => ({
    amount: long_1.default.fromValue(t.amount),
    price: long_1.default.fromValue(t.price),
    buyMatcherFee: long_1.default.fromValue(t.buyMatcherFee),
    sellMatcherFee: long_1.default.fromValue(t.sellMatcherFee),
    orders: [orderToProto(Object.assign({ chainId: t.chainId }, t.order1)), orderToProto(Object.assign({ chainId: t.chainId }, t.order2))],
});
const getLeaseData = (t) => ({
    recipient: recipientToProto(t.recipient),
    amount: long_1.default.fromValue(t.amount),
});
const getCancelLeaseData = (t) => ({
    leaseId: ts_lib_crypto_1.base58Decode(t.leaseId),
});
const getAliasData = (t) => ({ alias: t.alias });
const getMassTransferData = (t) => ({
    assetId: t.assetId == null ? null : ts_lib_crypto_1.base58Decode(t.assetId),
    attachment: t.attachment == null || t.attachment == '' ? undefined : ts_lib_crypto_1.base58Decode(t.attachment),
    transfers: t.transfers.map(massTransferItemToProto),
});
const getDataTxData = (t) => ({
    data: t.data.map(exports.dataEntryToProto),
});
const getSetScriptData = (t) => ({
    script: t.script == null ? null : exports.scriptToProto(t.script),
});
const getSponsorData = (t) => ({
    minFee: t.minSponsoredAssetFee === null ? amountToProto(0, t.assetId) : amountToProto(t.minSponsoredAssetFee, t.assetId),
});
const getSetAssetScriptData = (t) => ({
    assetId: ts_lib_crypto_1.base58Decode(t.assetId),
    script: t.script == null ? null : exports.scriptToProto(t.script),
});
const getInvokeData = (t) => ({
    dApp: recipientToProto(t.dApp),
    functionCall: marshall_1.binary.serializerFromSchema(marshall_1.schemas.invokeScriptSchemaV1.schema[5][1])(t.call),
    payments: t.payment == null ? null : t.payment.map(({ amount, assetId }) => amountToProto(amount, assetId)),
});
const getUpdateAssetInfoData = (t) => {
    return {
        assetId: ts_lib_crypto_1.base58Decode(t.assetId),
        name: t.name,
        description: t.description === '' ? null : t.description,
    };
};
// const getInvokeExpressionData = (t: InvokeExpressionTransaction): wavesProto.waves.IInvokeExpressionTransactionData => {
//     return {
//         expression: t.expression == null ? null : scriptToProto(t.expression),
//     }
// }
const getTxData = (t) => {
    let txData;
    switch (t.type) {
        case ts_types_1.TRANSACTION_TYPE.ISSUE:
            txData = getIssueData(t);
            break;
        case ts_types_1.TRANSACTION_TYPE.TRANSFER:
            txData = getTransferData(t);
            break;
        case ts_types_1.TRANSACTION_TYPE.REISSUE:
            txData = getReissueData(t);
            break;
        case ts_types_1.TRANSACTION_TYPE.BURN:
            txData = getBurnData(t);
            break;
        case ts_types_1.TRANSACTION_TYPE.LEASE:
            txData = getLeaseData(t);
            break;
        case ts_types_1.TRANSACTION_TYPE.CANCEL_LEASE:
            txData = getCancelLeaseData(t);
            break;
        case ts_types_1.TRANSACTION_TYPE.ALIAS:
            txData = getAliasData(t);
            break;
        case ts_types_1.TRANSACTION_TYPE.MASS_TRANSFER:
            txData = getMassTransferData(t);
            break;
        case ts_types_1.TRANSACTION_TYPE.DATA:
            txData = getDataTxData(t);
            break;
        case ts_types_1.TRANSACTION_TYPE.SET_SCRIPT:
            txData = getSetScriptData(t);
            break;
        case ts_types_1.TRANSACTION_TYPE.SET_ASSET_SCRIPT:
            txData = getSetAssetScriptData(t);
            break;
        case ts_types_1.TRANSACTION_TYPE.SPONSORSHIP:
            txData = getSponsorData(t);
            break;
        case ts_types_1.TRANSACTION_TYPE.EXCHANGE:
            txData = getExchangeData(t);
            break;
        case ts_types_1.TRANSACTION_TYPE.INVOKE_SCRIPT:
            txData = getInvokeData(t);
            break;
        case ts_types_1.TRANSACTION_TYPE.UPDATE_ASSET_INFO:
            txData = getUpdateAssetInfoData(t);
            break;
        // case TRANSACTION_TYPE.INVOKE_EXPRESSION:
        //     txData = getInvokeExpressionData(t)
        //     break
    }
    return txData;
};
exports.txToProto = (t) => {
    const common = getCommonFields(t);
    const txData = getTxData(t);
    return Object.assign(Object.assign({}, common), { [common.data]: txData });
};
exports.signedTxToProto = (t) => {
    const common = getCommonSignedFields(t);
    const txData = getTxData(t);
    return {
        wavesTransaction: Object.assign(Object.assign({}, common), { [common.data]: txData }),
        proofs: (t.proofs || []).map(proof2Uint8Array),
    };
};
const orderToProto = (o) => {
    var _a;
    let priceMode;
    if (o.version === 4 && 'priceMode' in o) {
        if (o.priceMode === 0 || o.priceMode === 'default') {
            priceMode = undefined;
        }
        o.priceMode === 'assetDecimals'
            ? priceMode = wavesProto.waves.Order.PriceMode.ASSET_DECIMALS
            : priceMode = wavesProto.waves.Order.PriceMode.FIXED_DECIMALS;
    }
    else
        priceMode = undefined;
    const isNullOrWaves = (asset) => asset == null || asset.toLowerCase() == 'waves';
    return ({
        chainId: o.chainId,
        senderPublicKey: o.senderPublicKey ? ts_lib_crypto_1.base58Decode(o.senderPublicKey) : null,
        matcherPublicKey: ts_lib_crypto_1.base58Decode(o.matcherPublicKey),
        assetPair: {
            amountAssetId: isNullOrWaves(o.assetPair.amountAsset) ? null : ts_lib_crypto_1.base58Decode(o.assetPair.amountAsset),
            priceAssetId: isNullOrWaves(o.assetPair.priceAsset) ? null : ts_lib_crypto_1.base58Decode(o.assetPair.priceAsset),
        },
        orderSide: o.orderType === 'buy' ? undefined : wavesProto.waves.Order.Side.SELL,
        amount: long_1.default.fromValue(o.amount),
        price: long_1.default.fromValue(o.price),
        timestamp: long_1.default.fromValue(o.timestamp),
        expiration: long_1.default.fromValue(o.expiration),
        matcherFee: amountToProto(o.matcherFee, o.matcherFeeAssetId ? o.matcherFeeAssetId : null),
        version: o.version,
        proofs: (_a = o.proofs) === null || _a === void 0 ? void 0 : _a.map(ts_lib_crypto_1.base58Decode),
        eip712Signature: o.eip712Signature ? ts_lib_crypto_1.base16Decode(o.eip712Signature.slice(2)) : undefined,
        priceMode: priceMode,
    });
};
const orderFromProto = (po) => {
    var _a;
    let priceMode;
    if (po.version === 4 && po.priceMode) {
        po.priceMode === 1
            ? priceMode = 'fixedDecimals'
            : priceMode = 'assetDecimals';
    }
    return {
        version: po.version,
        senderPublicKey: ts_lib_crypto_1.base58Encode(po.senderPublicKey),
        matcherPublicKey: ts_lib_crypto_1.base58Encode(po.matcherPublicKey),
        assetPair: {
            amountAsset: po.assetPair.amountAssetId == null ? null : ts_lib_crypto_1.base58Encode(po.assetPair.amountAssetId),
            priceAsset: po.assetPair.priceAssetId == null ? null : ts_lib_crypto_1.base58Encode(po.assetPair.priceAssetId),
        },
        // @ts-ignore
        chainId: po.chainId,
        orderType: po.orderSide === wavesProto.waves.Order.Side.BUY ? 'buy' : 'sell',
        amount: convertNumber(po.amount),
        price: convertNumber(po.price),
        timestamp: po.timestamp.toNumber(),
        expiration: po.expiration.toNumber(),
        matcherFee: convertNumber(po.matcherFee.amount),
        matcherFeeAssetId: po.matcherFee.assetId == null ? null : ts_lib_crypto_1.base58Encode(po.matcherFee.assetId),
        // @ts-ignore
        priceMode: priceMode,
        eip712Signature: ((_a = po.eip712Signature) === null || _a === void 0 ? void 0 : _a.length) ? `0x${ts_lib_crypto_1.base16Encode(po.eip712Signature)}` : undefined
    };
};
const recipientToProto = (r) => ({
    alias: r.startsWith('alias') ? r.slice(8) : undefined,
    publicKeyHash: !r.startsWith('alias') ? ts_lib_crypto_1.base58Decode(r).slice(2, -4) : undefined,
});
const amountToProto = (a, assetId) => ({
    amount: a == 0 ? null : long_1.default.fromValue(a),
    assetId: assetId == null ? null : ts_lib_crypto_1.base58Decode(assetId),
});
const massTransferItemToProto = (mti) => ({
    recipient: recipientToProto(mti.recipient),
    amount: mti.amount == 0 ? null : long_1.default.fromValue(mti.amount),
});
exports.dataEntryToProto = (de) => ({
    key: de.key,
    intValue: de.type === 'integer' ? long_1.default.fromValue(de.value) : undefined,
    boolValue: de.type === 'boolean' ? de.value : undefined,
    binaryValue: de.type === 'binary' ? ts_lib_crypto_1.base64Decode((de.value.startsWith('base64:') ? de.value.slice(7) : de.value)) : undefined,
    stringValue: de.type === 'string' ? de.value : undefined,
});
exports.scriptToProto = (s) => {
    return s ? ts_lib_crypto_1.base64Decode(s.toString().startsWith('base64:') ? s.slice(7) : s) : null;
};
const nameByType = {
    1: 'genesis',
    2: 'payment',
    3: 'issue',
    4: 'transfer',
    5: 'reissue',
    6: 'burn',
    7: 'exchange',
    8: 'lease',
    9: 'leaseCancel',
    10: 'createAlias',
    11: 'massTransfer',
    12: 'dataTransaction',
    13: 'setScript',
    14: 'sponsorFee',
    15: 'setAssetScript',
    16: 'invokeScript',
    17: 'updateAssetInfo',
};
const typeByName = {
    'genesis': 1,
    'payment': 2,
    'issue': 3,
    'transfer': 4,
    'reissue': 5,
    'burn': 6,
    'exchange': 7,
    'lease': 8,
    'leaseCancel': 9,
    'createAlias': 10,
    'massTransfer': 11,
    'dataTransaction': 12,
    'setScript': 13,
    'sponsorFee': 14,
    'setAssetScript': 15,
    'invokeScript': 16,
    'updateAssetInfo': 17,
};
const proof2Uint8Array = (proof) => {
    return ts_lib_crypto_1.base58Decode(proof);
};
const uint8Array2proof = (proofBytes) => {
    return ts_lib_crypto_1.base58Encode(proofBytes);
};

},{"@waves/protobuf-serialization":"lm95","@waves/ts-lib-crypto":"X6Ht","@waves/marshall":"PoKl","@waves/ts-types":"UGFq","./generic":"d2z1","long":"YvD4"}],"O2KI":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.DEFAULT_VERSIONS = void 0;
exports.DEFAULT_VERSIONS = {
    ISSUE: 3,
    TRANSFER: 3,
    REISSUE: 3,
    BURN: 3,
    EXCHANGE: 3,
    LEASE: 3,
    CANCEL_LEASE: 3,
    ALIAS: 3,
    MASS_TRANSFER: 2,
    DATA: 2,
    SET_SCRIPT: 2,
    SPONSORSHIP: 2,
    SET_ASSET_SCRIPT: 2,
    INVOKE_SCRIPT: 2,
    UPDATE_ASSET_INFO: 1,
    INVOKE_EXPRESSION: 1,
};

},{}],"TbQ7":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.massTransfer = void 0;
const generic_1 = require("../generic");
const ts_lib_crypto_1 = require("@waves/ts-lib-crypto");
const marshall_1 = require("@waves/marshall");
const validators_1 = require("../validators");
const proto_serialize_1 = require("../proto-serialize");
const defaultVersions_1 = require("../defaultVersions");
const ts_types_1 = require("@waves/ts-types");
function massTransfer(paramsOrTx, seed) {
    var _a;
    const type = ts_types_1.TRANSACTION_TYPE.MASS_TRANSFER;
    const version = paramsOrTx.version || defaultVersions_1.DEFAULT_VERSIONS.MASS_TRANSFER;
    const seedsAndIndexes = generic_1.convertToPairs(seed);
    const senderPublicKey = generic_1.getSenderPublicKey(seedsAndIndexes, paramsOrTx);
    if (!Array.isArray(paramsOrTx.transfers) || paramsOrTx.transfers.length === 0)
        throw new Error('Should contain at least one transfer');
    const tx = {
        type,
        version,
        senderPublicKey,
        assetId: generic_1.normalizeAssetId(paramsOrTx.assetId),
        transfers: paramsOrTx.transfers,
        fee: generic_1.fee(paramsOrTx, 100000 + Math.ceil(0.5 * paramsOrTx.transfers.length) * 100000),
        timestamp: paramsOrTx.timestamp || Date.now(),
        attachment: paramsOrTx.attachment || '',
        proofs: paramsOrTx.proofs || [],
        chainId: generic_1.networkByte(paramsOrTx.chainId, generic_1.chainIdFromRecipient((_a = paramsOrTx.transfers[0]) === null || _a === void 0 ? void 0 : _a.recipient)),
        id: '',
    };
    validators_1.validate.massTransfer(tx);
    const bytes = version > 1 ? proto_serialize_1.txToProtoBytes(tx) : marshall_1.binary.serializeTx(tx);
    seedsAndIndexes.forEach(([s, i]) => generic_1.addProof(tx, ts_lib_crypto_1.signBytes(s, bytes), i));
    tx.id = ts_lib_crypto_1.base58Encode(ts_lib_crypto_1.blake2b(bytes));
    return tx;
}
exports.massTransfer = massTransfer;

},{"../generic":"d2z1","@waves/ts-lib-crypto":"X6Ht","@waves/marshall":"PoKl","../validators":"bRjQ","../proto-serialize":"gaMD","../defaultVersions":"O2KI","@waves/ts-types":"UGFq"}],"R2Ho":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.reissue = void 0;
const ts_lib_crypto_1 = require("@waves/ts-lib-crypto");
const generic_1 = require("../generic");
const marshall_1 = require("@waves/marshall");
const validators_1 = require("../validators");
const proto_serialize_1 = require("../proto-serialize");
const defaultVersions_1 = require("../defaultVersions");
const ts_types_1 = require("@waves/ts-types");
function reissue(paramsOrTx, seed) {
    const type = ts_types_1.TRANSACTION_TYPE.REISSUE;
    const version = paramsOrTx.version || defaultVersions_1.DEFAULT_VERSIONS.REISSUE;
    const seedsAndIndexes = generic_1.convertToPairs(seed);
    const senderPublicKey = generic_1.getSenderPublicKey(seedsAndIndexes, paramsOrTx);
    const tx = {
        type,
        version,
        senderPublicKey,
        assetId: paramsOrTx.assetId,
        quantity: paramsOrTx.quantity,
        reissuable: paramsOrTx.reissuable,
        chainId: generic_1.networkByte(paramsOrTx.chainId, 87),
        fee: generic_1.fee(paramsOrTx, 100000),
        timestamp: paramsOrTx.timestamp || Date.now(),
        proofs: paramsOrTx.proofs || [],
        id: '',
    };
    validators_1.validate.reissue(tx);
    const bytes = version > 2 ? proto_serialize_1.txToProtoBytes(tx) : marshall_1.binary.serializeTx(tx);
    seedsAndIndexes.forEach(([s, i]) => generic_1.addProof(tx, ts_lib_crypto_1.signBytes(s, bytes), i));
    tx.id = ts_lib_crypto_1.base58Encode(ts_lib_crypto_1.blake2b(bytes));
    return tx;
}
exports.reissue = reissue;

},{"@waves/ts-lib-crypto":"X6Ht","../generic":"d2z1","@waves/marshall":"PoKl","../validators":"bRjQ","../proto-serialize":"gaMD","../defaultVersions":"O2KI","@waves/ts-types":"UGFq"}],"l99E":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.burn = void 0;
const marshall_1 = require("@waves/marshall");
const ts_lib_crypto_1 = require("@waves/ts-lib-crypto");
const generic_1 = require("../generic");
const validators_1 = require("../validators");
const proto_serialize_1 = require("../proto-serialize");
const defaultVersions_1 = require("../defaultVersions");
const ts_types_1 = require("@waves/ts-types");
function burn(paramsOrTx, seed) {
    const type = ts_types_1.TRANSACTION_TYPE.BURN;
    const version = paramsOrTx.version || defaultVersions_1.DEFAULT_VERSIONS.BURN;
    const seedsAndIndexes = generic_1.convertToPairs(seed);
    const senderPublicKey = generic_1.getSenderPublicKey(seedsAndIndexes, paramsOrTx);
    const tx = {
        type,
        version,
        senderPublicKey,
        assetId: paramsOrTx.assetId,
        amount: paramsOrTx.amount,
        chainId: generic_1.networkByte(paramsOrTx.chainId, 87),
        fee: generic_1.fee(paramsOrTx, 100000),
        timestamp: paramsOrTx.timestamp || Date.now(),
        proofs: paramsOrTx.proofs || [],
        id: '',
    };
    validators_1.validate.burn(tx);
    const bytes = version > 2 ? proto_serialize_1.txToProtoBytes(tx) : marshall_1.binary.serializeTx(tx);
    seedsAndIndexes.forEach(([s, i]) => generic_1.addProof(tx, ts_lib_crypto_1.signBytes(s, bytes), i));
    tx.id = ts_lib_crypto_1.base58Encode(ts_lib_crypto_1.blake2b(bytes));
    return tx;
}
exports.burn = burn;

},{"@waves/marshall":"PoKl","@waves/ts-lib-crypto":"X6Ht","../generic":"d2z1","../validators":"bRjQ","../proto-serialize":"gaMD","../defaultVersions":"O2KI","@waves/ts-types":"UGFq"}],"TbVV":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.exchange = void 0;
const marshall_1 = require("@waves/marshall");
const ts_lib_crypto_1 = require("@waves/ts-lib-crypto");
const generic_1 = require("../generic");
const validators_1 = require("../validators");
const proto_serialize_1 = require("../proto-serialize");
const defaultVersions_1 = require("../defaultVersions");
const ts_types_1 = require("@waves/ts-types");
/* @echo DOCS */
function exchange(paramsOrTx, seed) {
    const type = ts_types_1.TRANSACTION_TYPE.EXCHANGE;
    const version = paramsOrTx.version || defaultVersions_1.DEFAULT_VERSIONS.EXCHANGE;
    const seedsAndIndexes = generic_1.convertToPairs(seed);
    const senderPublicKey = generic_1.getSenderPublicKey(seedsAndIndexes, paramsOrTx);
    const tx = {
        type,
        version,
        senderPublicKey,
        order1: paramsOrTx.order1,
        order2: paramsOrTx.order2,
        price: paramsOrTx.price,
        amount: paramsOrTx.amount,
        buyMatcherFee: paramsOrTx.buyMatcherFee,
        sellMatcherFee: paramsOrTx.sellMatcherFee,
        fee: generic_1.fee(paramsOrTx, 100000),
        timestamp: paramsOrTx.timestamp || Date.now(),
        proofs: paramsOrTx.proofs || [],
        chainId: generic_1.networkByte(paramsOrTx.chainId, 87),
        id: '',
    };
    validators_1.validate.exchange(tx);
    const bytes = version > 2 ? proto_serialize_1.txToProtoBytes(tx) : marshall_1.binary.serializeTx(tx);
    seedsAndIndexes.forEach(([s, i]) => generic_1.addProof(tx, ts_lib_crypto_1.signBytes(s, bytes), i));
    return Object.assign(Object.assign({}, tx), { id: ts_lib_crypto_1.base58Encode(ts_lib_crypto_1.blake2b(bytes)) });
}
exports.exchange = exchange;

},{"@waves/marshall":"PoKl","@waves/ts-lib-crypto":"X6Ht","../generic":"d2z1","../validators":"bRjQ","../proto-serialize":"gaMD","../defaultVersions":"O2KI","@waves/ts-types":"UGFq"}],"MsyY":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.lease = void 0;
const ts_lib_crypto_1 = require("@waves/ts-lib-crypto");
const generic_1 = require("../generic");
const marshall_1 = require("@waves/marshall");
const validators_1 = require("../validators");
const proto_serialize_1 = require("../proto-serialize");
const defaultVersions_1 = require("../defaultVersions");
const ts_types_1 = require("@waves/ts-types");
function lease(paramsOrTx, seed) {
    const type = ts_types_1.TRANSACTION_TYPE.LEASE;
    const version = paramsOrTx.version || defaultVersions_1.DEFAULT_VERSIONS.LEASE;
    const seedsAndIndexes = generic_1.convertToPairs(seed);
    const senderPublicKey = generic_1.getSenderPublicKey(seedsAndIndexes, paramsOrTx);
    const tx = {
        type,
        version,
        senderPublicKey,
        amount: paramsOrTx.amount,
        recipient: paramsOrTx.recipient,
        fee: generic_1.fee(paramsOrTx, 100000),
        timestamp: paramsOrTx.timestamp || Date.now(),
        proofs: paramsOrTx.proofs || [],
        chainId: generic_1.networkByte(paramsOrTx.chainId, 87),
        id: '',
    };
    validators_1.validate.lease(tx);
    const bytes = version > 2 ? proto_serialize_1.txToProtoBytes(tx) : marshall_1.binary.serializeTx(tx);
    seedsAndIndexes.forEach(([s, i]) => generic_1.addProof(tx, ts_lib_crypto_1.signBytes(s, bytes), i));
    tx.id = ts_lib_crypto_1.base58Encode(ts_lib_crypto_1.blake2b(bytes));
    return tx;
}
exports.lease = lease;

},{"@waves/ts-lib-crypto":"X6Ht","../generic":"d2z1","@waves/marshall":"PoKl","../validators":"bRjQ","../proto-serialize":"gaMD","../defaultVersions":"O2KI","@waves/ts-types":"UGFq"}],"Zpzc":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.cancelLease = void 0;
const marshall_1 = require("@waves/marshall");
const ts_lib_crypto_1 = require("@waves/ts-lib-crypto");
const generic_1 = require("../generic");
const validators_1 = require("../validators");
const proto_serialize_1 = require("../proto-serialize");
const defaultVersions_1 = require("../defaultVersions");
const ts_types_1 = require("@waves/ts-types");
function cancelLease(paramsOrTx, seed) {
    const type = ts_types_1.TRANSACTION_TYPE.CANCEL_LEASE;
    const version = paramsOrTx.version || defaultVersions_1.DEFAULT_VERSIONS.CANCEL_LEASE;
    const seedsAndIndexes = generic_1.convertToPairs(seed);
    const senderPublicKey = generic_1.getSenderPublicKey(seedsAndIndexes, paramsOrTx);
    const tx = {
        type,
        version,
        senderPublicKey,
        leaseId: paramsOrTx.leaseId,
        fee: generic_1.fee(paramsOrTx, 100000),
        timestamp: paramsOrTx.timestamp || Date.now(),
        chainId: generic_1.networkByte(paramsOrTx.chainId, 87),
        proofs: paramsOrTx.proofs || [],
        id: '',
    };
    validators_1.validate.cancelLease(tx);
    const bytes = version > 2 ? proto_serialize_1.txToProtoBytes(tx) : marshall_1.binary.serializeTx(tx);
    seedsAndIndexes.forEach(([s, i]) => generic_1.addProof(tx, ts_lib_crypto_1.signBytes(s, bytes), i));
    tx.id = ts_lib_crypto_1.base58Encode(ts_lib_crypto_1.blake2b(bytes));
    return tx;
}
exports.cancelLease = cancelLease;

},{"@waves/marshall":"PoKl","@waves/ts-lib-crypto":"X6Ht","../generic":"d2z1","../validators":"bRjQ","../proto-serialize":"gaMD","../defaultVersions":"O2KI","@waves/ts-types":"UGFq"}],"n1o2":[function(require,module,exports) {
var Buffer = require("buffer").Buffer;
"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.data = void 0;
/**
 * @module index
 */
const wavesProto = __importStar(require("@waves/protobuf-serialization"));
const marshall_1 = require("@waves/marshall");
const ts_lib_crypto_1 = require("@waves/ts-lib-crypto");
const generic_1 = require("../generic");
const validators_1 = require("../validators");
const proto_serialize_1 = require("../proto-serialize");
const defaultVersions_1 = require("../defaultVersions");
const ts_types_1 = require("@waves/ts-types");
const { BASE58_STRING, BASE64_STRING, BYTE, BYTES, COUNT, LEN, LONG, SHORT, STRING, } = marshall_1.serializePrimitives;
const typeMap = {
    integer: ['integer', 0, LONG],
    number: ['integer', 0, LONG],
    boolean: ['boolean', 1, BYTE],
    string: ['string', 3, LEN(SHORT)(STRING)],
    binary: ['binary', 2, (s) => LEN(SHORT)(BASE64_STRING)(s)],
    _: ['binary', 2, LEN(SHORT)(BYTES)],
};
const mapType = (value, type) => {
    return !!type ? typeMap[type] : typeMap[typeof value] || typeMap['_'];
};
const convertValue = (type, value, opt) => {
    return type === 'binary' && (Uint8Array.prototype.isPrototypeOf(value) || Array.isArray(value))
        ? 'base64:' + Buffer.from(value).toString('base64')
        : value;
};
function data(paramsOrTx, seed) {
    var _a;
    const type = ts_types_1.TRANSACTION_TYPE.DATA;
    const version = paramsOrTx.version || defaultVersions_1.DEFAULT_VERSIONS.DATA;
    const seedsAndIndexes = generic_1.convertToPairs(seed);
    const senderPublicKey = generic_1.getSenderPublicKey(seedsAndIndexes, paramsOrTx);
    if (!Array.isArray(paramsOrTx.data))
        throw new Error('["data should be array"]');
    if (paramsOrTx.data.some((x) => x.value === null) && paramsOrTx.version === 1)
        throw new Error('The value of the "value" field can only be null in a version greater than 1.');
    const _timestamp = paramsOrTx.timestamp || Date.now();
    const dataEntriesWithTypes = ((_a = paramsOrTx.data) !== null && _a !== void 0 ? _a : []).map((x) => {
        if (x.value == null)
            return x;
        if (x.type) {
            if (validators_1.validate.dataFieldValidator(x)) {
                return Object.assign(Object.assign({}, x), { value: convertValue(x.type, x.value, 'defined') });
            }
            else
                throw new Error(`type "${x.type}" does not match value "${x.value}"(${typeof x.value})`);
        }
        else {
            const type = mapType(x.value, x.type)[0];
            return {
                type,
                key: x.key,
                value: convertValue(type, x.value, 'not defined'),
            };
        }
    });
    const schema = (x) => {
        return ts_lib_crypto_1.concat(LEN(SHORT)(STRING)(x.key), [mapType(x.value, x.type)[1]], mapType(x.value, x.type)[2](x.value));
    };
    let computedFee;
    if (version < 2) {
        let bytes = ts_lib_crypto_1.concat(BYTE(ts_types_1.TRANSACTION_TYPE.DATA), BYTE(1), BASE58_STRING(senderPublicKey), COUNT(SHORT)(schema)(dataEntriesWithTypes), LONG(_timestamp));
        computedFee = (Math.floor(1 + (bytes.length - 1) / 1024) * 100000);
    }
    else {
        let protoEntries = dataEntriesWithTypes.map(proto_serialize_1.dataEntryToProto);
        let dataBytes = wavesProto.waves.DataTransactionData.encode({ data: protoEntries }).finish();
        computedFee = (Math.ceil(dataBytes.length / 1024) * 100000);
    }
    const tx = {
        type,
        version,
        senderPublicKey,
        fee: generic_1.fee(paramsOrTx, computedFee),
        timestamp: _timestamp,
        proofs: paramsOrTx.proofs || [],
        chainId: generic_1.networkByte(paramsOrTx.chainId, 87),
        id: '',
        data: dataEntriesWithTypes,
    };
    validators_1.validate.data(tx);
    const bytes1 = version > 1 ? proto_serialize_1.txToProtoBytes(tx) : marshall_1.binary.serializeTx(tx);
    seedsAndIndexes.forEach(([s, i]) => generic_1.addProof(tx, ts_lib_crypto_1.signBytes(s, bytes1), i));
    tx.id = ts_lib_crypto_1.base58Encode(ts_lib_crypto_1.blake2b(bytes1));
    return tx;
}
exports.data = data;

},{"@waves/protobuf-serialization":"lm95","@waves/marshall":"PoKl","@waves/ts-lib-crypto":"X6Ht","../generic":"d2z1","../validators":"bRjQ","../proto-serialize":"gaMD","../defaultVersions":"O2KI","@waves/ts-types":"UGFq","buffer":"XyCw"}],"VhL2":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.issue = void 0;
const ts_lib_crypto_1 = require("@waves/ts-lib-crypto");
const generic_1 = require("../generic");
const marshall_1 = require("@waves/marshall");
const validators_1 = require("../validators");
const proto_serialize_1 = require("../proto-serialize");
const defaultVersions_1 = require("../defaultVersions");
const ts_types_1 = require("@waves/ts-types");
function issue(paramsOrTx, seed) {
    const type = ts_types_1.TRANSACTION_TYPE.ISSUE;
    const version = paramsOrTx.version || defaultVersions_1.DEFAULT_VERSIONS.ISSUE;
    const seedsAndIndexes = generic_1.convertToPairs(seed);
    const senderPublicKey = generic_1.getSenderPublicKey(seedsAndIndexes, paramsOrTx);
    const tx = {
        type,
        version,
        senderPublicKey,
        name: paramsOrTx.name,
        description: paramsOrTx.description,
        quantity: paramsOrTx.quantity,
        script: paramsOrTx.script == null ? null : generic_1.base64Prefix(paramsOrTx.script),
        decimals: paramsOrTx.decimals == null ? 8 : paramsOrTx.decimals,
        reissuable: paramsOrTx.reissuable || false,
        fee: checkForNFT(paramsOrTx) ? generic_1.fee(paramsOrTx, 100000) : generic_1.fee(paramsOrTx, 100000000),
        timestamp: paramsOrTx.timestamp || Date.now(),
        chainId: generic_1.networkByte(paramsOrTx.chainId, 87),
        proofs: paramsOrTx.proofs || [],
        id: '',
    };
    validators_1.validate.issue(tx);
    const bytes = version > 2 ? proto_serialize_1.txToProtoBytes(tx) : marshall_1.binary.serializeTx(tx);
    seedsAndIndexes.forEach(([s, i]) => generic_1.addProof(tx, ts_lib_crypto_1.signBytes(s, bytes), i));
    tx.id = ts_lib_crypto_1.base58Encode(ts_lib_crypto_1.blake2b(bytes));
    return tx;
}
exports.issue = issue;
const checkForNFT = (paramsOrTx) => {
    return paramsOrTx.quantity === 1 && paramsOrTx.reissuable == false && paramsOrTx.decimals == 0;
};

},{"@waves/ts-lib-crypto":"X6Ht","../generic":"d2z1","@waves/marshall":"PoKl","../validators":"bRjQ","../proto-serialize":"gaMD","../defaultVersions":"O2KI","@waves/ts-types":"UGFq"}],"jTCR":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.transfer = void 0;
const ts_lib_crypto_1 = require("@waves/ts-lib-crypto");
const generic_1 = require("../generic");
const validators_1 = require("../validators");
const marshall_1 = require("@waves/marshall");
const proto_serialize_1 = require("../proto-serialize");
const defaultVersions_1 = require("../defaultVersions");
const ts_types_1 = require("@waves/ts-types");
function transfer(paramsOrTx, seed) {
    const type = ts_types_1.TRANSACTION_TYPE.TRANSFER;
    const version = paramsOrTx.version || defaultVersions_1.DEFAULT_VERSIONS.TRANSFER;
    const seedsAndIndexes = generic_1.convertToPairs(seed);
    const senderPublicKey = generic_1.getSenderPublicKey(seedsAndIndexes, paramsOrTx);
    const tx = {
        type,
        version,
        senderPublicKey,
        assetId: generic_1.normalizeAssetId(paramsOrTx.assetId),
        recipient: paramsOrTx.recipient,
        amount: paramsOrTx.amount,
        attachment: paramsOrTx.attachment || '',
        fee: generic_1.fee(paramsOrTx, 100000),
        feeAssetId: generic_1.normalizeAssetId(paramsOrTx.feeAssetId),
        timestamp: paramsOrTx.timestamp || Date.now(),
        proofs: paramsOrTx.proofs || [],
        chainId: generic_1.networkByte(paramsOrTx.chainId, generic_1.chainIdFromRecipient(paramsOrTx.recipient)),
        id: '',
    };
    validators_1.validate.transfer(tx);
    const bytes = version > 2 ? proto_serialize_1.txToProtoBytes(tx) : marshall_1.binary.serializeTx(tx);
    seedsAndIndexes.forEach(([s, i]) => generic_1.addProof(tx, ts_lib_crypto_1.signBytes(s, bytes), i));
    tx.id = ts_lib_crypto_1.base58Encode(ts_lib_crypto_1.blake2b(bytes));
    return tx;
}
exports.transfer = transfer;

},{"@waves/ts-lib-crypto":"X6Ht","../generic":"d2z1","../validators":"bRjQ","@waves/marshall":"PoKl","../proto-serialize":"gaMD","../defaultVersions":"O2KI","@waves/ts-types":"UGFq"}],"rXPq":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.alias = void 0;
const marshall_1 = require("@waves/marshall");
const ts_lib_crypto_1 = require("@waves/ts-lib-crypto");
const proto_serialize_1 = require("../proto-serialize");
const generic_1 = require("../generic");
const validators_1 = require("../validators");
const defaultVersions_1 = require("../defaultVersions");
const ts_types_1 = require("@waves/ts-types");
function alias(paramsOrTx, seed) {
    const type = ts_types_1.TRANSACTION_TYPE.ALIAS;
    const version = paramsOrTx.version || defaultVersions_1.DEFAULT_VERSIONS.ALIAS;
    const seedsAndIndexes = generic_1.convertToPairs(seed);
    const senderPublicKey = generic_1.getSenderPublicKey(seedsAndIndexes, paramsOrTx);
    const tx = {
        type,
        version,
        senderPublicKey,
        alias: paramsOrTx.alias,
        fee: generic_1.fee(paramsOrTx, 100000),
        timestamp: paramsOrTx.timestamp || Date.now(),
        chainId: generic_1.networkByte(paramsOrTx.chainId, 87),
        proofs: paramsOrTx.proofs || [],
        id: '',
    };
    validators_1.validate.alias(tx);
    const bytes = version > 2 ? proto_serialize_1.txToProtoBytes(tx) : marshall_1.binary.serializeTx(tx);
    const idBytes = version > 2 ? bytes : [bytes[0], ...bytes.slice(36, -16)];
    seedsAndIndexes.forEach(([s, i]) => generic_1.addProof(tx, ts_lib_crypto_1.signBytes(s, bytes), i));
    tx.id = ts_lib_crypto_1.base58Encode(ts_lib_crypto_1.blake2b(Uint8Array.from(idBytes)));
    return tx;
}
exports.alias = alias;

},{"@waves/marshall":"PoKl","@waves/ts-lib-crypto":"X6Ht","../proto-serialize":"gaMD","../generic":"d2z1","../validators":"bRjQ","../defaultVersions":"O2KI","@waves/ts-types":"UGFq"}],"Ee9g":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.setScript = void 0;
const ts_lib_crypto_1 = require("@waves/ts-lib-crypto");
const generic_1 = require("../generic");
const marshall_1 = require("@waves/marshall");
const validators_1 = require("../validators");
const proto_serialize_1 = require("../proto-serialize");
const defaultVersions_1 = require("../defaultVersions");
const ts_types_1 = require("@waves/ts-types");
function setScript(paramsOrTx, seed) {
    const type = ts_types_1.TRANSACTION_TYPE.SET_SCRIPT;
    const version = paramsOrTx.version || defaultVersions_1.DEFAULT_VERSIONS.SET_SCRIPT;
    const seedsAndIndexes = generic_1.convertToPairs(seed);
    const senderPublicKey = generic_1.getSenderPublicKey(seedsAndIndexes, paramsOrTx);
    if (paramsOrTx.script === undefined)
        throw new Error('Script field cannot be undefined. Use null explicitly to remove script');
    let scriptBytes = proto_serialize_1.scriptToProto(paramsOrTx.script);
    const computedFee = scriptBytes != null ? (Math.ceil(scriptBytes.length / 1024) * 100000) : 500000;
    const tx = {
        type,
        version,
        senderPublicKey,
        chainId: generic_1.networkByte(paramsOrTx.chainId, 87),
        fee: generic_1.fee(paramsOrTx, computedFee),
        timestamp: paramsOrTx.timestamp || Date.now(),
        proofs: paramsOrTx.proofs || [],
        id: '',
        script: generic_1.base64Prefix(paramsOrTx.script),
    };
    validators_1.validate.setScript(tx);
    const bytes = version > 1 ? proto_serialize_1.txToProtoBytes(tx) : marshall_1.binary.serializeTx(tx);
    seedsAndIndexes.forEach(([s, i]) => generic_1.addProof(tx, ts_lib_crypto_1.signBytes(s, bytes), i));
    tx.id = ts_lib_crypto_1.base58Encode(ts_lib_crypto_1.blake2b(bytes));
    return tx;
}
exports.setScript = setScript;

},{"@waves/ts-lib-crypto":"X6Ht","../generic":"d2z1","@waves/marshall":"PoKl","../validators":"bRjQ","../proto-serialize":"gaMD","../defaultVersions":"O2KI","@waves/ts-types":"UGFq"}],"UGFJ":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.setAssetScript = void 0;
const ts_lib_crypto_1 = require("@waves/ts-lib-crypto");
const generic_1 = require("../generic");
const marshall_1 = require("@waves/marshall");
const validators_1 = require("../validators");
const proto_serialize_1 = require("../proto-serialize");
const defaultVersions_1 = require("../defaultVersions");
const ts_types_1 = require("@waves/ts-types");
function setAssetScript(paramsOrTx, seed) {
    const type = ts_types_1.TRANSACTION_TYPE.SET_ASSET_SCRIPT;
    const version = paramsOrTx.version || defaultVersions_1.DEFAULT_VERSIONS.SET_ASSET_SCRIPT;
    const seedsAndIndexes = generic_1.convertToPairs(seed);
    const senderPublicKey = generic_1.getSenderPublicKey(seedsAndIndexes, paramsOrTx);
    if (paramsOrTx.script == null)
        throw new Error('Asset script cannot be empty');
    const tx = {
        type,
        version,
        senderPublicKey,
        assetId: paramsOrTx.assetId,
        chainId: generic_1.networkByte(paramsOrTx.chainId, 87),
        fee: generic_1.fee(paramsOrTx, 100000000),
        timestamp: paramsOrTx.timestamp || Date.now(),
        proofs: paramsOrTx.proofs || [],
        id: '',
        script: generic_1.base64Prefix(paramsOrTx.script) || '',
    };
    validators_1.validate.setAssetScript(tx);
    const bytes = version > 1 ? proto_serialize_1.txToProtoBytes(tx) : marshall_1.binary.serializeTx(tx);
    seedsAndIndexes.forEach(([s, i]) => generic_1.addProof(tx, ts_lib_crypto_1.signBytes(s, bytes), i));
    tx.id = ts_lib_crypto_1.base58Encode(ts_lib_crypto_1.blake2b(bytes));
    return tx;
}
exports.setAssetScript = setAssetScript;

},{"@waves/ts-lib-crypto":"X6Ht","../generic":"d2z1","@waves/marshall":"PoKl","../validators":"bRjQ","../proto-serialize":"gaMD","../defaultVersions":"O2KI","@waves/ts-types":"UGFq"}],"Yyww":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.sponsorship = void 0;
const ts_lib_crypto_1 = require("@waves/ts-lib-crypto");
const generic_1 = require("../generic");
const marshall_1 = require("@waves/marshall");
const validators_1 = require("../validators");
const proto_serialize_1 = require("../proto-serialize");
const defaultVersions_1 = require("../defaultVersions");
const ts_types_1 = require("@waves/ts-types");
function sponsorship(paramsOrTx, seed) {
    const type = ts_types_1.TRANSACTION_TYPE.SPONSORSHIP;
    const version = paramsOrTx.version || defaultVersions_1.DEFAULT_VERSIONS.SPONSORSHIP;
    const seedsAndIndexes = generic_1.convertToPairs(seed);
    const senderPublicKey = generic_1.getSenderPublicKey(seedsAndIndexes, paramsOrTx);
    const tx = {
        type,
        version,
        senderPublicKey,
        minSponsoredAssetFee: paramsOrTx.minSponsoredAssetFee,
        assetId: paramsOrTx.assetId,
        fee: generic_1.fee(paramsOrTx, 1e5),
        timestamp: paramsOrTx.timestamp || Date.now(),
        chainId: generic_1.networkByte(paramsOrTx.chainId, 87),
        proofs: paramsOrTx.proofs || [],
        id: '',
    };
    validators_1.validate.sponsorship(tx);
    const bytes = version > 1 ? proto_serialize_1.txToProtoBytes(tx) : marshall_1.binary.serializeTx(tx);
    seedsAndIndexes.forEach(([s, i]) => generic_1.addProof(tx, ts_lib_crypto_1.signBytes(s, bytes), i));
    tx.id = ts_lib_crypto_1.base58Encode(ts_lib_crypto_1.blake2b(bytes));
    return tx;
}
exports.sponsorship = sponsorship;

},{"@waves/ts-lib-crypto":"X6Ht","../generic":"d2z1","@waves/marshall":"PoKl","../validators":"bRjQ","../proto-serialize":"gaMD","../defaultVersions":"O2KI","@waves/ts-types":"UGFq"}],"LoNZ":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.order = void 0;
/**
 * @module index
 */
const ts_lib_crypto_1 = require("@waves/ts-lib-crypto");
const generic_1 = require("../generic");
const marshall_1 = require("@waves/marshall");
const validators_1 = require("../validators");
const proto_serialize_1 = require("../proto-serialize");
function order(paramsOrOrder, seed) {
    const amountAsset = generic_1.isOrder(paramsOrOrder) ? paramsOrOrder.assetPair.amountAsset : paramsOrOrder.amountAsset;
    const priceAsset = generic_1.isOrder(paramsOrOrder) ? paramsOrOrder.assetPair.priceAsset : paramsOrOrder.priceAsset;
    const proofs = generic_1.isOrder(paramsOrOrder) ? paramsOrOrder.proofs : [];
    const { matcherFee, matcherPublicKey, price, amount, orderType, expiration, timestamp } = paramsOrOrder;
    const t = timestamp || Date.now();
    const seedsAndIndexes = generic_1.convertToPairs(seed);
    const senderPublicKey = paramsOrOrder.senderPublicKey || generic_1.getSenderPublicKey(seedsAndIndexes, paramsOrOrder);
    // Use old versionless order only if it is set to null explicitly
    const version = paramsOrOrder.version === null ? undefined : paramsOrOrder.version;
    const ord = {
        orderType,
        version,
        assetPair: {
            amountAsset,
            priceAsset,
        },
        price,
        amount,
        timestamp: t,
        expiration: expiration || t + 29 * 24 * 60 * 60 * 1000,
        matcherFee: matcherFee || 300000,
        matcherPublicKey,
        senderPublicKey,
        proofs,
        matcherFeeAssetId: null,
        id: '',
        priceMode: paramsOrOrder.priceMode,
    };
    if (ord.version >= 3) {
        ord.matcherFeeAssetId = paramsOrOrder.matcherFeeAssetId === 'WAVES' ? null : paramsOrOrder.matcherFeeAssetId;
    }
    if (ord.version === 4) {
        ord.priceMode = paramsOrOrder.priceMode || 'fixedDecimals';
        // @ts-ignore
        ord.chainId = generic_1.networkByte(paramsOrOrder.chainId, 87);
        if (paramsOrOrder.eip712Signature)
            ord.eip712Signature = paramsOrOrder.eip712Signature;
    }
    const bytes = ord.version > 3 ? proto_serialize_1.orderToProtoBytes(ord) : marshall_1.binary.serializeOrder(ord);
    seedsAndIndexes.forEach(([s, i]) => generic_1.addProof(ord, ts_lib_crypto_1.signBytes(s, bytes), i));
    validators_1.validate.order(ord);
    ord.id = ts_lib_crypto_1.base58Encode(ts_lib_crypto_1.blake2b(bytes));
    // OrderV1 uses signature instead of proofs
    // @ts-ignore
    if (ord.version === undefined || ord.version === 1)
        ord.signature = ord.proofs && ord.proofs[0];
    return ord;
}
exports.order = order;

},{"@waves/ts-lib-crypto":"X6Ht","../generic":"d2z1","@waves/marshall":"PoKl","../validators":"bRjQ","../proto-serialize":"gaMD"}],"yVfM":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.cancelOrder = exports.cancelOrderParamsToBytes = void 0;
/**
 * @module index
 */
const ts_lib_crypto_1 = require("@waves/ts-lib-crypto");
const marshall_1 = require("@waves/marshall");
const { BASE58_STRING } = marshall_1.serializePrimitives;
const generic_1 = require("../generic");
const validators_1 = require("../validators");
exports.cancelOrderParamsToBytes = (cancelOrderParams) => ts_lib_crypto_1.concat(BASE58_STRING(cancelOrderParams.sender), BASE58_STRING(cancelOrderParams.orderId));
function cancelOrder(params, seed) {
    const seedsAndIndexes = generic_1.convertToPairs(seed);
    const senderPublicKey = params.senderPublicKey || generic_1.getSenderPublicKey(seedsAndIndexes, { senderPublicKey: undefined });
    const bytes = ts_lib_crypto_1.concat(BASE58_STRING(senderPublicKey), BASE58_STRING(params.orderId));
    const signature = params.signature || (seed != null && ts_lib_crypto_1.signBytes(seed, bytes)) || '';
    const hash = ts_lib_crypto_1.base58Encode(ts_lib_crypto_1.blake2b(Uint8Array.from(bytes)));
    const cancelOrderBody = {
        sender: senderPublicKey,
        orderId: params.orderId,
        signature,
        hash,
    };
    validators_1.validate.cancelOrder(cancelOrderBody);
    return cancelOrderBody;
}
exports.cancelOrder = cancelOrder;

},{"@waves/ts-lib-crypto":"X6Ht","@waves/marshall":"PoKl","../generic":"d2z1","../validators":"bRjQ"}],"Kcwr":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.serializeCustomData = exports.customData = void 0;
/**
 * @module index
 */
const ts_lib_crypto_1 = require("@waves/ts-lib-crypto");
const marshall_1 = require("@waves/marshall");
const marshall_2 = require("@waves/marshall");
const validators_1 = require("../validators");
/**
 * Signs [[TCustomData]]
 */
function customData(cData, seed) {
    validators_1.validate.customData(cData);
    let bytes = serializeCustomData(cData);
    const hash = ts_lib_crypto_1.base58Encode(ts_lib_crypto_1.blake2b(bytes));
    const pk = cData.publicKey ? cData.publicKey : seed && ts_lib_crypto_1.publicKey(seed);
    const signature = seed && ts_lib_crypto_1.signBytes(seed, bytes);
    return Object.assign(Object.assign({}, cData), { hash, publicKey: pk, signature });
}
exports.customData = customData;
function serializeCustomData(d) {
    if (d.version === 1) {
        return ts_lib_crypto_1.concat([255, 255, 255, 1], marshall_1.serializePrimitives.BASE64_STRING(d.binary));
    }
    else if (d.version === 2) {
        const ser = marshall_2.binary.serializerFromSchema(marshall_1.schemas.txFields.data[1]);
        return ts_lib_crypto_1.concat([255, 255, 255, 2], ser(d.data));
    }
    else {
        //@ts-ignore
        throw new Error(`Invalid CustomData version: ${d.version}`);
    }
}
exports.serializeCustomData = serializeCustomData;

},{"@waves/ts-lib-crypto":"X6Ht","@waves/marshall":"PoKl","../validators":"bRjQ"}],"VhEU":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.auth = exports.serializeAuthData = void 0;
/**
 * @module index
 */
const ts_lib_crypto_1 = require("@waves/ts-lib-crypto");
const marshall_1 = require("@waves/marshall");
const { STRING, LEN, SHORT } = marshall_1.serializePrimitives;
const generic_1 = require("../generic");
const validators_1 = require("../validators");
exports.serializeAuthData = (auth) => ts_lib_crypto_1.concat(LEN(SHORT)(STRING)('WavesWalletAuthentication'), LEN(SHORT)(STRING)(auth.host || ''), LEN(SHORT)(STRING)(auth.data || ''));
function auth(params, seed, chainId) {
    const seedsAndIndexes = generic_1.convertToPairs(seed);
    const publicKey = params.publicKey || generic_1.getSenderPublicKey(seedsAndIndexes, { senderPublicKey: undefined });
    validators_1.validate.auth(params);
    const rx = {
        hash: '',
        signature: '',
        host: params.host,
        data: params.data,
        publicKey,
        address: ts_lib_crypto_1.address({ publicKey }, chainId),
    };
    const bytes = exports.serializeAuthData(rx);
    rx.signature = (seed != null && ts_lib_crypto_1.signBytes(seed, bytes)) || '';
    rx.hash = ts_lib_crypto_1.base58Encode(ts_lib_crypto_1.blake2b(Uint8Array.from(bytes)));
    return rx;
}
exports.auth = auth;

},{"@waves/ts-lib-crypto":"X6Ht","@waves/marshall":"PoKl","../generic":"d2z1","../validators":"bRjQ"}],"Ucb3":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.wavesAuth = exports.serializeWavesAuthData = void 0;
/**
 * @module index
 */
const ts_lib_crypto_1 = require("@waves/ts-lib-crypto");
const marshall_1 = require("@waves/marshall");
const { LONG, BASE58_STRING } = marshall_1.serializePrimitives;
const generic_1 = require("../generic");
const validators_1 = require("../validators");
exports.serializeWavesAuthData = (auth) => ts_lib_crypto_1.concat(BASE58_STRING(auth.publicKey), LONG(auth.timestamp));
function wavesAuth(params, seed, chainId) {
    const seedsAndIndexes = generic_1.convertToPairs(seed);
    const publicKey = params.publicKey || generic_1.getSenderPublicKey(seedsAndIndexes, { senderPublicKey: undefined });
    const timestamp = params.timestamp || Date.now();
    validators_1.validate.wavesAuth({ publicKey, timestamp });
    const rx = {
        hash: '',
        signature: '',
        timestamp,
        publicKey,
        address: ts_lib_crypto_1.address({ publicKey }, chainId),
    };
    const bytes = exports.serializeWavesAuthData(rx);
    rx.signature = seedsAndIndexes.map(([seed]) => ts_lib_crypto_1.signBytes(seed, bytes))[0] || '';
    rx.hash = ts_lib_crypto_1.base58Encode(ts_lib_crypto_1.blake2b(Uint8Array.from(bytes)));
    return rx;
}
exports.wavesAuth = wavesAuth;

},{"@waves/ts-lib-crypto":"X6Ht","@waves/marshall":"PoKl","../generic":"d2z1","../validators":"bRjQ"}],"TGR1":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.invokeScript = void 0;
const ts_lib_crypto_1 = require("@waves/ts-lib-crypto");
const generic_1 = require("../generic");
const marshall_1 = require("@waves/marshall");
const validators_1 = require("../validators");
const proto_serialize_1 = require("../proto-serialize");
const defaultVersions_1 = require("../defaultVersions");
const ts_types_1 = require("@waves/ts-types");
function invokeScript(paramsOrTx, seed) {
    const type = ts_types_1.TRANSACTION_TYPE.INVOKE_SCRIPT;
    const version = paramsOrTx.version || defaultVersions_1.DEFAULT_VERSIONS.INVOKE_SCRIPT;
    const seedsAndIndexes = generic_1.convertToPairs(seed);
    const senderPublicKey = generic_1.getSenderPublicKey(seedsAndIndexes, paramsOrTx);
    const tx = {
        type,
        version,
        senderPublicKey,
        dApp: paramsOrTx.dApp,
        call: callField(paramsOrTx),
        payment: mapPayment(paramsOrTx.payment),
        fee: generic_1.fee(paramsOrTx, 500000),
        feeAssetId: generic_1.normalizeAssetId(paramsOrTx.feeAssetId),
        timestamp: paramsOrTx.timestamp || Date.now(),
        chainId: generic_1.networkByte(paramsOrTx.chainId, 87),
        proofs: paramsOrTx.proofs || [],
        id: '',
    };
    validators_1.validate.invokeScript(tx);
    const bytes = version > 1 ? proto_serialize_1.txToProtoBytes(tx) : marshall_1.binary.serializeTx(tx);
    seedsAndIndexes.forEach(([s, i]) => generic_1.addProof(tx, ts_lib_crypto_1.signBytes(s, bytes), i));
    tx.id = ts_lib_crypto_1.base58Encode(ts_lib_crypto_1.base58Encode(ts_lib_crypto_1.blake2b(bytes)));
    return tx;
}
exports.invokeScript = invokeScript;
const mapPayment = (payments) => payments == null
    ? []
    : payments.map(pmt => (Object.assign(Object.assign({}, pmt), { assetId: pmt.assetId === 'WAVES' ? null : pmt.assetId })));
const callField = (paramsOrTx) => {
    return !!paramsOrTx.call ? Object.assign({ args: paramsOrTx.call.args || [] }, paramsOrTx.call) : null;
};

},{"@waves/ts-lib-crypto":"X6Ht","../generic":"d2z1","@waves/marshall":"PoKl","../validators":"bRjQ","../proto-serialize":"gaMD","../defaultVersions":"O2KI","@waves/ts-types":"UGFq"}],"DPCA":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.updateAssetInfo = void 0;
const ts_lib_crypto_1 = require("@waves/ts-lib-crypto");
const generic_1 = require("../generic");
const validators_1 = require("../validators");
const proto_serialize_1 = require("../proto-serialize");
const defaultVersions_1 = require("../defaultVersions");
const ts_types_1 = require("@waves/ts-types");
function updateAssetInfo(paramsOrTx, seed) {
    const type = ts_types_1.TRANSACTION_TYPE.UPDATE_ASSET_INFO;
    const version = paramsOrTx.version || defaultVersions_1.DEFAULT_VERSIONS.UPDATE_ASSET_INFO;
    const seedsAndIndexes = generic_1.convertToPairs(seed);
    const senderPublicKey = generic_1.getSenderPublicKey(seedsAndIndexes, paramsOrTx);
    const tx = {
        type,
        version,
        senderPublicKey,
        name: paramsOrTx.name,
        description: paramsOrTx.description,
        assetId: paramsOrTx.assetId,
        fee: generic_1.fee(paramsOrTx, 100000),
        timestamp: paramsOrTx.timestamp || Date.now(),
        proofs: paramsOrTx.proofs || [],
        chainId: generic_1.networkByte(paramsOrTx.chainId, 87),
        id: '',
    };
    validators_1.validate.updateAssetInfo(tx);
    const bytes = proto_serialize_1.txToProtoBytes(tx);
    seedsAndIndexes.forEach(([s, i]) => generic_1.addProof(tx, ts_lib_crypto_1.signBytes(s, bytes), i));
    tx.id = ts_lib_crypto_1.base58Encode(ts_lib_crypto_1.blake2b(bytes));
    return tx;
}
exports.updateAssetInfo = updateAssetInfo;

},{"@waves/ts-lib-crypto":"X6Ht","../generic":"d2z1","../validators":"bRjQ","../proto-serialize":"gaMD","../defaultVersions":"O2KI","@waves/ts-types":"UGFq"}],"N0R4":[function(require,module,exports) {
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.cancelSubmittedOrder = exports.submitOrder = exports.verifyWavesAuthData = exports.verifyAuthData = exports.verifyCustomData = exports.verify = exports.serialize = exports.signTx = exports.txTypeMap = void 0;
const marshall_1 = require("@waves/marshall");
const ts_lib_crypto_1 = require("@waves/ts-lib-crypto");
const request_1 = __importDefault(require("@waves/node-api-js/cjs/tools/request"));
const stringify_1 = __importDefault(require("@waves/node-api-js/cjs/tools/stringify"));
const issue_1 = require("./transactions/issue");
const transfer_1 = require("./transactions/transfer");
const reissue_1 = require("./transactions/reissue");
const burn_1 = require("./transactions/burn");
const lease_1 = require("./transactions/lease");
const cancel_lease_1 = require("./transactions/cancel-lease");
const data_1 = require("./transactions/data");
const mass_transfer_1 = require("./transactions/mass-transfer");
const alias_1 = require("./transactions/alias");
const set_script_1 = require("./transactions/set-script");
const generic_1 = require("./generic");
const set_asset_script_1 = require("./transactions/set-asset-script");
const exchange_1 = require("./transactions/exchange");
const sponsorship_1 = require("./transactions/sponsorship");
const invoke_script_1 = require("./transactions/invoke-script");
const custom_data_1 = require("./requests/custom-data");
const auth_1 = require("./requests/auth");
const wavesAuth_1 = require("./requests/wavesAuth");
const ts_types_1 = require("@waves/ts-types");
const update_asset_info_1 = require("./transactions/update-asset-info");
exports.txTypeMap = {
    [ts_types_1.TRANSACTION_TYPE.ISSUE]: { sign: (x, seed) => issue_1.issue(x, seed) },
    [ts_types_1.TRANSACTION_TYPE.TRANSFER]: { sign: (x, seed) => transfer_1.transfer(x, seed) },
    [ts_types_1.TRANSACTION_TYPE.REISSUE]: { sign: (x, seed) => reissue_1.reissue(x, seed) },
    [ts_types_1.TRANSACTION_TYPE.BURN]: { sign: (x, seed) => burn_1.burn(x, seed) },
    [ts_types_1.TRANSACTION_TYPE.LEASE]: { sign: (x, seed) => lease_1.lease(x, seed) },
    [ts_types_1.TRANSACTION_TYPE.CANCEL_LEASE]: { sign: (x, seed) => cancel_lease_1.cancelLease(x, seed) },
    [ts_types_1.TRANSACTION_TYPE.ALIAS]: { sign: (x, seed) => alias_1.alias(x, seed) },
    [ts_types_1.TRANSACTION_TYPE.MASS_TRANSFER]: { sign: (x, seed) => mass_transfer_1.massTransfer(x, seed) },
    [ts_types_1.TRANSACTION_TYPE.DATA]: { sign: (x, seed) => data_1.data(x, seed) },
    [ts_types_1.TRANSACTION_TYPE.SET_SCRIPT]: { sign: (x, seed) => set_script_1.setScript(x, seed) },
    [ts_types_1.TRANSACTION_TYPE.SET_ASSET_SCRIPT]: { sign: (x, seed) => set_asset_script_1.setAssetScript(x, seed) },
    [ts_types_1.TRANSACTION_TYPE.SPONSORSHIP]: { sign: (x, seed) => sponsorship_1.sponsorship(x, seed) },
    [ts_types_1.TRANSACTION_TYPE.EXCHANGE]: { sign: (x, seed) => exchange_1.exchange(x, seed) },
    [ts_types_1.TRANSACTION_TYPE.INVOKE_SCRIPT]: { sign: (x, seed) => invoke_script_1.invokeScript(x, seed) },
    [ts_types_1.TRANSACTION_TYPE.UPDATE_ASSET_INFO]: { sign: (x, seed) => update_asset_info_1.updateAssetInfo(x, seed) },
};
/**
 * Signs arbitrary transaction. Can also create signed transaction if provided params have type field
 * @param tx
 * @param seed
 */
function signTx(tx, seed) {
    if (!exports.txTypeMap[tx.type])
        throw new Error(`Unknown tx type: ${tx.type}`);
    return exports.txTypeMap[tx.type].sign(tx, seed);
}
exports.signTx = signTx;
/**
 * Converts transaction or order object to Uint8Array
 * @param obj transaction or order
 */
function serialize(obj) {
    if (generic_1.isOrder(obj))
        return marshall_1.binary.serializeOrder(obj);
    return marshall_1.binary.serializeTx(obj);
}
exports.serialize = serialize;
/**
 * Verifies signature of transaction or order
 * @param obj
 * @param proofN - proof index. Takes first proof by default
 * @param publicKey - takes senderPublicKey by default
 */
function verify(obj, proofN = 0, publicKey) {
    publicKey = publicKey || obj.senderPublicKey;
    const bytes = serialize(obj);
    const signature = obj.version == null ? obj.signature : obj.proofs[proofN];
    return ts_lib_crypto_1.verifySignature(publicKey, bytes, signature);
}
exports.verify = verify;
function verifyCustomData(data) {
    const bytes = custom_data_1.serializeCustomData(data);
    return ts_lib_crypto_1.verifySignature(data.publicKey, bytes, data.signature);
}
exports.verifyCustomData = verifyCustomData;
function verifyAuthData(authData, params, chainId) {
    chainId = chainId || 'W';
    const bytes = auth_1.serializeAuthData(params);
    const myAddress = ts_lib_crypto_1.address({ publicKey: authData.publicKey }, chainId);
    return myAddress === authData.address && ts_lib_crypto_1.verifySignature(authData.publicKey, bytes, authData.signature);
}
exports.verifyAuthData = verifyAuthData;
function verifyWavesAuthData(authData, params, chainId) {
    chainId = chainId || 'W';
    const bytes = wavesAuth_1.serializeWavesAuthData(params);
    const myAddress = ts_lib_crypto_1.address({ publicKey: authData.publicKey }, chainId);
    return myAddress === authData.address && ts_lib_crypto_1.verifySignature(authData.publicKey, bytes, authData.signature);
}
exports.verifyWavesAuthData = verifyWavesAuthData;
function submitOrder(ord, opts) {
    let endpoint, matcherUrl;
    if (typeof opts === 'string') {
        matcherUrl = opts;
        endpoint = 'matcher/orderbook';
    }
    else {
        matcherUrl = opts.matcherUrl;
        endpoint = opts.market ? 'matcher/orderbook/market' : 'matcher/orderbook';
    }
    return request_1.default({
        base: matcherUrl,
        url: endpoint,
        options: { method: 'POST', body: stringify_1.default(ord), headers: { 'Content-Type': 'application/json' } },
    });
}
exports.submitOrder = submitOrder;
/**
 * Sends cancel order command to matcher. Since matcher api requires amountAsset and priceAsset in request url,
 * this function requires them as params
 * @param co - signed cancelOrder object
 * @param amountAsset - amount asset of the order to be canceled
 * @param priceAsset - price asset of the order to be canceled
 * @param matcherUrl - matcher address to send order cancel to. E.g. https://matcher.waves.exchange/
 */
function cancelSubmittedOrder(co, amountAsset, priceAsset, matcherUrl) {
    const endpoint = `matcher/orderbook/${amountAsset || 'WAVES'}/${priceAsset || 'WAVES'}/cancel`;
    return request_1.default({
        base: matcherUrl,
        url: endpoint,
        options: { method: 'POST', body: stringify_1.default(co), headers: { 'Content-Type': 'application/json' } },
    });
}
exports.cancelSubmittedOrder = cancelSubmittedOrder;

},{"@waves/marshall":"PoKl","@waves/ts-lib-crypto":"X6Ht","@waves/node-api-js/cjs/tools/request":"q2VP","@waves/node-api-js/cjs/tools/stringify":"uYAP","./transactions/issue":"VhL2","./transactions/transfer":"jTCR","./transactions/reissue":"R2Ho","./transactions/burn":"l99E","./transactions/lease":"MsyY","./transactions/cancel-lease":"Zpzc","./transactions/data":"n1o2","./transactions/mass-transfer":"TbQ7","./transactions/alias":"rXPq","./transactions/set-script":"Ee9g","./generic":"d2z1","./transactions/set-asset-script":"UGFJ","./transactions/exchange":"TbVV","./transactions/sponsorship":"Yyww","./transactions/invoke-script":"TGR1","./requests/custom-data":"Kcwr","./requests/auth":"VhEU","./requests/wavesAuth":"Ucb3","@waves/ts-types":"UGFq","./transactions/update-asset-info":"DPCA"}],"axBK":[function(require,module,exports) {
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.fetchRewards = void 0;
var request_1 = __importDefault(require("../../tools/request"));
/**
 * GET /blockchain/rewards
 * Current reward status
 */
function fetchRewards(base, height, options) {
    if (options === void 0) { options = Object.create(null); }
    return request_1.default({
        base: base,
        url: height ? "/blockchain/rewards/" + height : '/blockchain/rewards',
        options: options
    });
}
exports.fetchRewards = fetchRewards;

},{"../../tools/request":"q2VP"}],"p3P4":[function(require,module,exports) {
"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.debugValidate = exports.debugStateWaves = exports.debugStateHash = exports.debugState = exports.debugRollbackTo = exports.debugRollback = exports.debugPrint = exports.fetchPortfolios = exports.fetchMinerInfo = exports.fetchDebugInfo = exports.fetchConfigInfo = exports.postPeerToTheBanList = exports.fetchStateChangesByTxId = exports.fetchStateChangesByAddress = exports.fetchBalanceHistory = void 0;
var request_1 = __importStar(require("../../tools/request"));
var query_1 = __importDefault(require("../../tools/query"));
/**
 * Waves balance history
 * @param base
 * @param address
 */
function fetchBalanceHistory(base, address, options) {
    if (options === void 0) { options = Object.create(null); }
    return request_1.default({
        base: base,
        url: "/debug/balances/history/" + address,
        options: options
    });
}
exports.fetchBalanceHistory = fetchBalanceHistory;
/**
 * Get list of transactions with state changes where specified address has been involved
 * @param base
 * @param address
 * @param limit
 * @param after
 */
function fetchStateChangesByAddress(base, address, limit, after, options) {
    if (options === void 0) { options = Object.create(null); }
    return request_1.default({
        base: base,
        url: "/debug/stateChanges/address/" + address + "/limit/" + limit + query_1.default({ after: after }),
        options: options
    });
}
exports.fetchStateChangesByAddress = fetchStateChangesByAddress;
/**
 * Get invokeScript transaction state changes
 * @param base
 * @param txId
 */
function fetchStateChangesByTxId(base, txId, options) {
    if (options === void 0) { options = Object.create(null); }
    return request_1.default({
        base: base,
        url: "/transactions/info/" + txId,
        options: options
    });
}
exports.fetchStateChangesByTxId = fetchStateChangesByTxId;
function postPeerToTheBanList(base, peer) {
    return fetch(base + "/debug/blacklist", {
        method: "POST",
        body: peer,
        headers: {
            "Content-Type": "application/json"
        }
    }).then(request_1.parseResponse);
}
exports.postPeerToTheBanList = postPeerToTheBanList;
function fetchConfigInfo(base, apiKey) {
    return fetch(base + "/debug/configInfo", {
        method: "GET",
        headers: {
            "X-API-Key": apiKey,
            "Content-Type": "application/json"
        }
    }).then(request_1.parseResponse);
}
exports.fetchConfigInfo = fetchConfigInfo;
function fetchDebugInfo(base, apiKey) {
    return fetch(base + "/debug/info", {
        method: "GET",
        headers: {
            "X-API-Key": apiKey,
            "Content-Type": "application/json"
        }
    }).then(request_1.parseResponse);
}
exports.fetchDebugInfo = fetchDebugInfo;
function fetchMinerInfo(base, apiKey) {
    return fetch(base + "/debug/minerInfo", {
        method: "GET",
        headers: {
            "X-API-Key": apiKey,
            "Content-Type": "application/json"
        }
    }).then(request_1.parseResponse);
}
exports.fetchMinerInfo = fetchMinerInfo;
function fetchPortfolios(base, address, apiKey) {
    return fetch(base + "/debug/portfolios/" + address, {
        method: "GET",
        headers: {
            "X-API-Key": apiKey,
            "Content-Type": "application/json"
        }
    }).then(request_1.parseResponse);
}
exports.fetchPortfolios = fetchPortfolios;
function debugPrint(base, message, apiKey) {
    return fetch(base + "/debug/print", {
        method: "POST",
        headers: {
            "X-API-Key": apiKey,
            "Content-Type": "application/json"
        },
        body: JSON.stringify({ message: message })
    }).then(request_1.parseResponse);
}
exports.debugPrint = debugPrint;
/**
 * Removes all blocks after a given height. Max number of blocks back from the current height is set by waves.db.max-rollback-depth, 2000 by default
 * @param base
 * @param height
 * @param returnTransactionsToUtx
 * @param apiKey
 */
function debugRollback(base, height, returnTransactionsToUtx, apiKey) {
    return fetch(base + "/debug/rollback", {
        method: "POST",
        headers: {
            "X-API-Key": apiKey,
            "Content-Type": "application/json"
        },
        body: JSON.stringify({
            rollbackTo: height,
            returnTransactionsToUtx: returnTransactionsToUtx
        })
    }).then(request_1.parseResponse);
}
exports.debugRollback = debugRollback;
/**
 * Rollback the state to the block with a given ID
 * @param base
 * @param height
 * @param returnTransactionsToUtx
 * @param apiKey
 */
function debugRollbackTo(base, id, apiKey) {
    return fetch(base + "/debug/rollback-to/" + id, {
        method: "DELETE",
        headers: {
            "X-API-Key": apiKey,
            "Content-Type": "application/json"
        },
    }).then(request_1.parseResponse);
}
exports.debugRollbackTo = debugRollbackTo;
/**
 * Regular address balance at the current height
 * @param base
 * @param apiKey
 */
function debugState(base, apiKey) {
    return fetch(base + "/debug/state", {
        method: "GET",
        headers: {
            "X-API-Key": apiKey,
            "Content-Type": "application/json"
        },
    }).then(request_1.parseResponse);
}
exports.debugState = debugState;
/**
 * Get state hash at height. Available only if node configuration contains waves.db.store-state-hashes = true option
 * @param base
 * @param height
 */
function debugStateHash(base, height, options) {
    if (options === void 0) { options = Object.create(null); }
    return request_1.default({
        base: base,
        url: "/debug/stateHash/" + height,
        options: options
    });
}
exports.debugStateHash = debugStateHash;
/**
 * Regular address balance at the height. Max number of blocks back from the current height is set by waves.db.max-rollback-depth, 2000 by default
 * @param base
 * @param height
 * @param apiKey
 */
function debugStateWaves(base, height, apiKey) {
    return fetch(base + "/debug/stateWaves/" + height, {
        method: "GET",
        headers: {
            "X-API-Key": apiKey,
            "Content-Type": "application/json"
        },
    }).then(request_1.parseResponse);
}
exports.debugStateWaves = debugStateWaves;
/**
 * Validates a transaction and measures time spent in milliseconds. You should use the JSON transaction format with proofs
 * @param base
 * @param transaction
 */
function debugValidate(base, transaction) {
    return fetch(base + "/debug/validate", {
        method: "POST",
        headers: {
            "Content-Type": "application/json"
        },
        body: transaction
    }).then(request_1.parseResponse);
}
exports.debugValidate = debugValidate;
// @TODO need API key:
// GET /debug/stateWaves/{height}
// POST /debug/rollback
// DELETE /debug/rollback-to/{id}
// GET /debug/portfolios/{address}
// GET /debug/minerInfo
// GET /debug/historyInfo
// GET /debug/historyInfo
// GET /debug/info
// POST /debug/validate
// GET /debug/blocks/{howMany}
// POST /debug/blacklist
// POST /debug/print
// GET /debug/state

},{"../../tools/request":"q2VP","../../tools/query":"sZco"}],"zthF":[function(require,module,exports) {
"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.broadcast = exports.stateChanges = exports.rewards = exports.scriptMeta = exports.scriptInfo = exports.accountDataByKey = exports.accountData = exports.assetBalance = exports.balanceDetails = exports.balance = exports.transactionById = exports.waitNBlocks = exports.waitForTxWithNConfirmations = exports.waitForTx = exports.waitForHeight = exports.currentHeight = void 0;
const tx_route = __importStar(require("@waves/node-api-js/cjs/api-node/transactions"));
const blocks_route = __importStar(require("@waves/node-api-js/cjs/api-node/blocks"));
const addresses_route = __importStar(require("@waves/node-api-js/cjs/api-node/addresses"));
const assets_route = __importStar(require("@waves/node-api-js/cjs/api-node/assets"));
const rewards_route = __importStar(require("@waves/node-api-js/cjs/api-node/rewards"));
const debug_route = __importStar(require("@waves/node-api-js/cjs/api-node/debug"));
const delay = (timeout) => {
    const t = {};
    const p = new Promise((resolve, _) => {
        t.resolve = resolve;
        t.id = setTimeout(resolve, timeout);
    });
    p.cancel = () => {
        t.resolve();
        clearTimeout(t.id);
    };
    return p;
};
const rerun = (f, expired, t = 1000) => delay(t).then(_ => expired ?
    Promise.reject(new Error('Tx wait stopped: timeout')) :
    f());
const DEFAULT_NODE_REQUEST_OPTIONS = {
    timeout: 120000,
    apiBase: 'https://nodes.wavesplatform.com',
};
exports.currentHeight = (apiBase) => __awaiter(void 0, void 0, void 0, function* () {
    return blocks_route.fetchHeight(apiBase).then(({ height }) => height);
});
function waitForHeight(height, options) {
    return __awaiter(this, void 0, void 0, function* () {
        const { timeout, apiBase } = Object.assign(Object.assign({}, DEFAULT_NODE_REQUEST_OPTIONS), options);
        let expired = false;
        const to = delay(timeout);
        to.then(() => expired = true);
        const promise = () => exports.currentHeight(apiBase)
            .then(x => {
            if (x >= height) {
                to.cancel();
                return x;
            }
            else {
                return rerun(promise, expired, 10000);
            }
        }).catch(_ => rerun(promise, expired));
        return promise();
    });
}
exports.waitForHeight = waitForHeight;
/**
 * Resolves when specified txId is mined into block
 * @param txId - waves address as base58 string
 * @param options
 */
function waitForTx(txId, options, requestOptions) {
    return __awaiter(this, void 0, void 0, function* () {
        const { timeout, apiBase } = Object.assign(Object.assign({}, DEFAULT_NODE_REQUEST_OPTIONS), options);
        let expired = false;
        const to = delay(timeout);
        to.then(() => expired = true);
        const promise = () => tx_route.fetchInfo(apiBase, txId, requestOptions)
            .then(x => {
            to.cancel();
            return x; //todo: fix types
        })
            .catch(_ => delay(1000)
            .then(_ => expired ?
            Promise.reject(new Error('Tx wait stopped: timeout')) :
            promise()));
        return promise();
    });
}
exports.waitForTx = waitForTx;
const process400 = (resp) => resp.status === 400
    ? Promise.reject(Object.assign(new Error(), resp.data))
    : resp;
function waitForTxWithNConfirmations(txId, confirmations, options, requestOptions) {
    return __awaiter(this, void 0, void 0, function* () {
        const { timeout } = Object.assign(Object.assign({}, DEFAULT_NODE_REQUEST_OPTIONS), options);
        let expired = false;
        const to = delay(timeout);
        to.then(() => expired = true);
        let tx = yield waitForTx(txId, options, requestOptions);
        let txHeight = tx.height;
        let currentHeight = tx.height;
        while (txHeight + confirmations > currentHeight) {
            if (expired)
                throw new Error('Tx wait stopped: timeout');
            yield waitForHeight(txHeight + confirmations, options);
            tx = yield waitForTx(txId, options, requestOptions);
            txHeight = tx.height;
        }
        return tx;
    });
}
exports.waitForTxWithNConfirmations = waitForTxWithNConfirmations;
function waitNBlocks(blocksCount, options = DEFAULT_NODE_REQUEST_OPTIONS, requestOptions) {
    return __awaiter(this, void 0, void 0, function* () {
        const { apiBase } = Object.assign(Object.assign({}, DEFAULT_NODE_REQUEST_OPTIONS), options);
        const height = yield exports.currentHeight(apiBase);
        const target = height + blocksCount;
        // console.log(`current height: ${height} target: ${target}`)
        return yield waitForHeight(target, options);
    });
}
exports.waitNBlocks = waitNBlocks;
/**
 * Get account effective balance
 * @param txId - transaction ID as base58 string
 * @param nodeUrl - node address to ask balance from. E.g. https://nodes.wavesplatform.com/
 */
function transactionById(txId, nodeUrl, requestOptions) {
    return __awaiter(this, void 0, void 0, function* () {
        return tx_route.fetchInfo(nodeUrl, txId, requestOptions); //todo: fix types
    });
}
exports.transactionById = transactionById;
/**
 * Get account effective balance
 * @param address - waves address as base58 string
 * @param nodeUrl - node address to ask balance from. E.g. https://nodes.wavesplatform.com/
 */
function balance(address, nodeUrl, requestOptions) {
    return __awaiter(this, void 0, void 0, function* () {
        return addresses_route.fetchBalance(nodeUrl, address, requestOptions).then(d => +d.balance);
    });
}
exports.balance = balance;
/**
 * Retrieve full information about waves account balance. Effective, generating etc
 * @param address - waves address as base58 string
 * @param nodeUrl - node address to ask balance from. E.g. https://nodes.wavesplatform.com/
 */
function balanceDetails(address, nodeUrl, requestOptions) {
    return __awaiter(this, void 0, void 0, function* () {
        return addresses_route.fetchBalanceDetails(nodeUrl, address, requestOptions);
    });
}
exports.balanceDetails = balanceDetails;
/**
 * Retrieve information about specific asset account balance
 * @param assetId - id of asset
 * @param address - waves address as base58 string
 * @param nodeUrl - node address to ask balance from. E.g. https://nodes.wavesplatform.com/
 */
function assetBalance(assetId, address, nodeUrl, requestOptions) {
    return __awaiter(this, void 0, void 0, function* () {
        return assets_route.fetchBalanceAddressAssetId(nodeUrl, address, assetId, requestOptions)
            .then(x => x.balance);
    });
}
exports.assetBalance = assetBalance;
function accountData(options, nodeUrl, requestOptions) {
    return __awaiter(this, void 0, void 0, function* () {
        let address;
        let match;
        if (typeof options === 'string') {
            address = options;
            match = undefined;
        }
        else {
            address = options.address;
            match = options.match && encodeURIComponent(typeof options.match === 'string'
                ? options.match
                : options.match.source);
        }
        const data = yield addresses_route.data(nodeUrl, address, { matches: match }, requestOptions); //todo fix type
        return data.reduce((acc, item) => (Object.assign(Object.assign({}, acc), { [item.key]: item })), {});
    });
}
exports.accountData = accountData;
/**
 * Get data from account dictionary by key
 * @param address - waves address as base58 string
 * @param key - dictionary key
 * @param nodeUrl - node address to ask data from. E.g. https://nodes.wavesplatform.com/
 */
function accountDataByKey(key, address, nodeUrl, requestOptions) {
    return __awaiter(this, void 0, void 0, function* () {
        return addresses_route.fetchDataKey(nodeUrl, address, key, requestOptions).catch((e) => {
            if (e.error === 304)
                return null;
            else
                throw e;
        });
    });
}
exports.accountDataByKey = accountDataByKey;
/**
 * Get account script info
 * @param address - waves address as base58 string
 * @param nodeUrl - node address to ask data from. E.g. https://nodes.wavesplatform.com/
 */
function scriptInfo(address, nodeUrl, requestOptions) {
    return __awaiter(this, void 0, void 0, function* () {
        return addresses_route.fetchScriptInfo(nodeUrl, address, requestOptions);
    });
}
exports.scriptInfo = scriptInfo;
/**
 * Get account script meta, i.e., available callable functions
 * @param address - waves address as base58 string
 * @param nodeUrl - node address to ask data from. E.g. https://nodes.wavesplatform.com/
 */
function scriptMeta(address, nodeUrl) {
    return __awaiter(this, void 0, void 0, function* () {
        return addresses_route.fetchScriptInfoMeta(nodeUrl, address);
    });
}
exports.scriptMeta = scriptMeta;
function rewards(...args) {
    return __awaiter(this, void 0, void 0, function* () {
        let nodeUrl;
        let _height = undefined;
        if (args[1] !== undefined) {
            nodeUrl = args[1];
            _height = args[0];
        }
        else {
            nodeUrl = args[0];
        }
        return rewards_route.fetchRewards(nodeUrl, _height);
    });
}
exports.rewards = rewards;
/**
 * Get invokeScript tx state changes
 * @param transactionId - invokeScript transaction id as base58 string
 * @param nodeUrl - node address to ask data from. E.g. https://nodes.wavesplatform.com/
 */
function stateChanges(transactionId, nodeUrl, requestOptions) {
    return __awaiter(this, void 0, void 0, function* () {
        return debug_route.fetchStateChangesByTxId(nodeUrl, transactionId, requestOptions).then((t) => t.stateChanges); //todo: fix types
    });
}
exports.stateChanges = stateChanges;
/**
 * Sends transaction to waves node
 * IMPORTANT: You cannot broadcast order. Orders should be sent to matcher via submitOrder method
 * @param tx - transaction to send
 * @param nodeUrl - node address to send tx to. E.g. https://nodes.wavesplatform.com/
 */
function broadcast(tx, nodeUrl, requestOptions) {
    return tx_route.broadcast(nodeUrl, tx, requestOptions);
}
exports.broadcast = broadcast;

},{"@waves/node-api-js/cjs/api-node/transactions":"okTM","@waves/node-api-js/cjs/api-node/blocks":"KJKX","@waves/node-api-js/cjs/api-node/addresses":"lmIF","@waves/node-api-js/cjs/api-node/assets":"ZNem","@waves/node-api-js/cjs/api-node/rewards":"axBK","@waves/node-api-js/cjs/api-node/debug":"p3P4"}],"C6wH":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.makeTxBytes = exports.makeTx = void 0;
const issue_1 = require("./transactions/issue");
const transfer_1 = require("./transactions/transfer");
const reissue_1 = require("./transactions/reissue");
const burn_1 = require("./transactions/burn");
const lease_1 = require("./transactions/lease");
const cancel_lease_1 = require("./transactions/cancel-lease");
const alias_1 = require("./transactions/alias");
const mass_transfer_1 = require("./transactions/mass-transfer");
const data_1 = require("./transactions/data");
const set_script_1 = require("./transactions/set-script");
const set_asset_script_1 = require("./transactions/set-asset-script");
const sponsorship_1 = require("./transactions/sponsorship");
const exchange_1 = require("./transactions/exchange");
const invoke_script_1 = require("./transactions/invoke-script");
const update_asset_info_1 = require("./transactions/update-asset-info");
const proto_serialize_1 = require("./proto-serialize");
const marshall_1 = require("@waves/marshall");
const ts_types_1 = require("@waves/ts-types");
/**
 * Makes transaction from params. Validates all fields and calculates id
 */
function makeTx(params) {
    switch (params.type) {
        case ts_types_1.TRANSACTION_TYPE.ISSUE:
            return issue_1.issue(params);
        case ts_types_1.TRANSACTION_TYPE.TRANSFER:
            return transfer_1.transfer(params);
        case ts_types_1.TRANSACTION_TYPE.REISSUE:
            return reissue_1.reissue(params);
        case ts_types_1.TRANSACTION_TYPE.BURN:
            return burn_1.burn(params);
        case ts_types_1.TRANSACTION_TYPE.LEASE:
            return lease_1.lease(params);
        case ts_types_1.TRANSACTION_TYPE.CANCEL_LEASE:
            return cancel_lease_1.cancelLease(params);
        case ts_types_1.TRANSACTION_TYPE.ALIAS:
            return alias_1.alias(params);
        case ts_types_1.TRANSACTION_TYPE.MASS_TRANSFER:
            return mass_transfer_1.massTransfer(params);
        case ts_types_1.TRANSACTION_TYPE.DATA:
            return data_1.data(params);
        case ts_types_1.TRANSACTION_TYPE.SET_SCRIPT:
            return set_script_1.setScript(params);
        case ts_types_1.TRANSACTION_TYPE.SET_ASSET_SCRIPT:
            return set_asset_script_1.setAssetScript(params);
        case ts_types_1.TRANSACTION_TYPE.SPONSORSHIP:
            return sponsorship_1.sponsorship(params);
        case ts_types_1.TRANSACTION_TYPE.EXCHANGE:
            return exchange_1.exchange(params);
        case ts_types_1.TRANSACTION_TYPE.INVOKE_SCRIPT:
            return invoke_script_1.invokeScript(params);
        case ts_types_1.TRANSACTION_TYPE.UPDATE_ASSET_INFO:
            return update_asset_info_1.updateAssetInfo(params);
        // case TRANSACTION_TYPE.INVOKE_EXPRESSION:
        //     return txToProtoBytes(params as any) as any
        default:
            throw new Error(`Unknown tx type: ${params.type}`);
    }
}
exports.makeTx = makeTx;
/**
 * Makes transaction bytes from validated transaction
 */
function makeTxBytes(tx) {
    switch (tx.type) {
        case ts_types_1.TRANSACTION_TYPE.ISSUE:
            return tx.version > 2 ? proto_serialize_1.txToProtoBytes(tx) : marshall_1.binary.serializeTx(tx);
        case ts_types_1.TRANSACTION_TYPE.TRANSFER:
            return tx.version > 2 ? proto_serialize_1.txToProtoBytes(tx) : marshall_1.binary.serializeTx(tx);
        case ts_types_1.TRANSACTION_TYPE.REISSUE:
            return tx.version > 2 ? proto_serialize_1.txToProtoBytes(tx) : marshall_1.binary.serializeTx(tx);
        case ts_types_1.TRANSACTION_TYPE.BURN:
            return tx.version > 2 ? proto_serialize_1.txToProtoBytes(tx) : marshall_1.binary.serializeTx(tx);
        case ts_types_1.TRANSACTION_TYPE.LEASE:
            return tx.version > 2 ? proto_serialize_1.txToProtoBytes(tx) : marshall_1.binary.serializeTx(tx);
        case ts_types_1.TRANSACTION_TYPE.CANCEL_LEASE:
            return tx.version > 2 ? proto_serialize_1.txToProtoBytes(tx) : marshall_1.binary.serializeTx(tx);
        case ts_types_1.TRANSACTION_TYPE.ALIAS:
            return tx.version > 2 ? proto_serialize_1.txToProtoBytes(tx) : marshall_1.binary.serializeTx(tx);
        case ts_types_1.TRANSACTION_TYPE.MASS_TRANSFER:
            return tx.version > 1 ? proto_serialize_1.txToProtoBytes(tx) : marshall_1.binary.serializeTx(tx);
        case ts_types_1.TRANSACTION_TYPE.DATA:
            return tx.version > 1 ? proto_serialize_1.txToProtoBytes(tx) : marshall_1.binary.serializeTx(tx);
        case ts_types_1.TRANSACTION_TYPE.SET_SCRIPT:
            return tx.version > 1 ? proto_serialize_1.txToProtoBytes(tx) : marshall_1.binary.serializeTx(tx);
        case ts_types_1.TRANSACTION_TYPE.SET_ASSET_SCRIPT:
            return tx.version > 1 ? proto_serialize_1.txToProtoBytes(tx) : marshall_1.binary.serializeTx(tx);
        case ts_types_1.TRANSACTION_TYPE.SPONSORSHIP:
            return tx.version > 1 ? proto_serialize_1.txToProtoBytes(tx) : marshall_1.binary.serializeTx(tx);
        case ts_types_1.TRANSACTION_TYPE.EXCHANGE:
            return tx.version > 2 ? proto_serialize_1.txToProtoBytes(tx) : marshall_1.binary.serializeTx(tx);
        case ts_types_1.TRANSACTION_TYPE.INVOKE_SCRIPT:
            return tx.version > 1 ? proto_serialize_1.txToProtoBytes(tx) : marshall_1.binary.serializeTx(tx);
        case ts_types_1.TRANSACTION_TYPE.UPDATE_ASSET_INFO:
            return proto_serialize_1.txToProtoBytes(tx);
        // case TRANSACTION_TYPE.INVOKE_EXPRESSION:
        //     return txToProtoBytes(tx as any)
        default:
            throw new Error(`Unknown tx type: ${tx.type}`);
    }
}
exports.makeTxBytes = makeTxBytes;

},{"./transactions/issue":"VhL2","./transactions/transfer":"jTCR","./transactions/reissue":"R2Ho","./transactions/burn":"l99E","./transactions/lease":"MsyY","./transactions/cancel-lease":"Zpzc","./transactions/alias":"rXPq","./transactions/mass-transfer":"TbQ7","./transactions/data":"n1o2","./transactions/set-script":"Ee9g","./transactions/set-asset-script":"UGFJ","./transactions/sponsorship":"Yyww","./transactions/exchange":"TbVV","./transactions/invoke-script":"TGR1","./transactions/update-asset-info":"DPCA","./proto-serialize":"gaMD","@waves/marshall":"PoKl","@waves/ts-types":"UGFq"}],"QNGQ":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.decryptSeed = exports.encryptSeed = exports.strengthenPassword = exports.generateNewSeed = exports.Seed = void 0;
/**
 * @module seedUtils
 */
const ts_lib_crypto_1 = require("@waves/ts-lib-crypto");
Object.defineProperty(exports, "encryptSeed", { enumerable: true, get: function () { return ts_lib_crypto_1.encryptSeed; } });
Object.defineProperty(exports, "decryptSeed", { enumerable: true, get: function () { return ts_lib_crypto_1.decryptSeed; } });
const marshall_1 = require("@waves/marshall");
class Seed {
    constructor(phrase, chainId) {
        if (phrase.length < 12) {
            throw new Error('Your seed length is less than allowed in config');
        }
        this.phrase = phrase;
        this.address = ts_lib_crypto_1.address(phrase, chainId);
        this.keyPair = {
            privateKey: ts_lib_crypto_1.privateKey(phrase),
            publicKey: ts_lib_crypto_1.publicKey(phrase),
        };
        Object.freeze(this);
        Object.freeze(this.keyPair);
    }
    encrypt(password, encryptionRounds) {
        return Seed.encryptSeedPhrase(this.phrase, password, encryptionRounds);
    }
    static encryptSeedPhrase(seedPhrase, password, encryptionRounds = 5000) {
        if (password && password.length < 8) {
            // logger.warn('Your password may be too weak');
        }
        if (encryptionRounds < 1000) {
            // logger.warn('Encryption rounds may be too few');
        }
        if (seedPhrase.length < 12) {
            throw new Error('The seed phrase you are trying to encrypt is too short');
        }
        return ts_lib_crypto_1.encryptSeed(seedPhrase, password, encryptionRounds);
    }
    static decryptSeedPhrase(encryptedSeedPhrase, password, encryptionRounds = 5000) {
        const wrongPasswordMessage = 'The password is wrong';
        let phrase;
        try {
            phrase = ts_lib_crypto_1.decryptSeed(encryptedSeedPhrase, password, encryptionRounds);
        }
        catch (e) {
            throw new Error(wrongPasswordMessage);
        }
        if (phrase === '' || phrase.length < 12) {
            throw new Error(wrongPasswordMessage);
        }
        return phrase;
    }
    static create(words = 15) {
        const phrase = generateNewSeed(words);
        const minimumSeedLength = 12;
        if (phrase.length < minimumSeedLength) {
            // If you see that error you should increase the number of words in the generated seed
            throw new Error(`The resulted seed length is less than the minimum length (${minimumSeedLength})`);
        }
        return new Seed(phrase);
    }
    static fromExistingPhrase(phrase) {
        const minimumSeedLength = 12;
        if (phrase.length < minimumSeedLength) {
            // If you see that error you should increase the number of words or set it lower in the config
            throw new Error(`The resulted seed length is less than the minimum length (${minimumSeedLength})`);
        }
        return new Seed(phrase);
    }
}
exports.Seed = Seed;
function generateNewSeed(length = 15) {
    return ts_lib_crypto_1.randomSeed(length);
}
exports.generateNewSeed = generateNewSeed;
function strengthenPassword(password, rounds = 5000) {
    while (rounds--) {
        const bytes = marshall_1.serializePrimitives.STRING(password);
        password = ts_lib_crypto_1.base16Encode(ts_lib_crypto_1.sha256(bytes));
    }
    return password;
}
exports.strengthenPassword = strengthenPassword;

},{"@waves/ts-lib-crypto":"X6Ht","@waves/marshall":"PoKl"}],"ET8R":[function(require,module,exports) {
"use strict";
// This software is released under the MIT License.
// https://opensource.org/licenses/MIT
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.protoSerialize = exports.validators = exports.nodeInteraction = exports.seedUtils = exports.libs = void 0;
var mass_transfer_1 = require("./transactions/mass-transfer");
Object.defineProperty(exports, "massTransfer", { enumerable: true, get: function () { return mass_transfer_1.massTransfer; } });
var reissue_1 = require("./transactions/reissue");
Object.defineProperty(exports, "reissue", { enumerable: true, get: function () { return reissue_1.reissue; } });
var burn_1 = require("./transactions/burn");
Object.defineProperty(exports, "burn", { enumerable: true, get: function () { return burn_1.burn; } });
var exchange_1 = require("./transactions/exchange");
Object.defineProperty(exports, "exchange", { enumerable: true, get: function () { return exchange_1.exchange; } });
var lease_1 = require("./transactions/lease");
Object.defineProperty(exports, "lease", { enumerable: true, get: function () { return lease_1.lease; } });
var cancel_lease_1 = require("./transactions/cancel-lease");
Object.defineProperty(exports, "cancelLease", { enumerable: true, get: function () { return cancel_lease_1.cancelLease; } });
var data_1 = require("./transactions/data");
Object.defineProperty(exports, "data", { enumerable: true, get: function () { return data_1.data; } });
var issue_1 = require("./transactions/issue");
Object.defineProperty(exports, "issue", { enumerable: true, get: function () { return issue_1.issue; } });
var transfer_1 = require("./transactions/transfer");
Object.defineProperty(exports, "transfer", { enumerable: true, get: function () { return transfer_1.transfer; } });
var alias_1 = require("./transactions/alias");
Object.defineProperty(exports, "alias", { enumerable: true, get: function () { return alias_1.alias; } });
var set_script_1 = require("./transactions/set-script");
Object.defineProperty(exports, "setScript", { enumerable: true, get: function () { return set_script_1.setScript; } });
var set_asset_script_1 = require("./transactions/set-asset-script");
Object.defineProperty(exports, "setAssetScript", { enumerable: true, get: function () { return set_asset_script_1.setAssetScript; } });
var sponsorship_1 = require("./transactions/sponsorship");
Object.defineProperty(exports, "sponsorship", { enumerable: true, get: function () { return sponsorship_1.sponsorship; } });
var order_1 = require("./requests/order");
Object.defineProperty(exports, "order", { enumerable: true, get: function () { return order_1.order; } });
var cancel_order_1 = require("./requests/cancel-order");
Object.defineProperty(exports, "cancelOrder", { enumerable: true, get: function () { return cancel_order_1.cancelOrder; } });
var custom_data_1 = require("./requests/custom-data");
Object.defineProperty(exports, "customData", { enumerable: true, get: function () { return custom_data_1.customData; } });
Object.defineProperty(exports, "serializeCustomData", { enumerable: true, get: function () { return custom_data_1.serializeCustomData; } });
var auth_1 = require("./requests/auth");
Object.defineProperty(exports, "auth", { enumerable: true, get: function () { return auth_1.auth; } });
var wavesAuth_1 = require("./requests/wavesAuth");
Object.defineProperty(exports, "wavesAuth", { enumerable: true, get: function () { return wavesAuth_1.wavesAuth; } });
var invoke_script_1 = require("./transactions/invoke-script");
Object.defineProperty(exports, "invokeScript", { enumerable: true, get: function () { return invoke_script_1.invokeScript; } });
var update_asset_info_1 = require("./transactions/update-asset-info");
Object.defineProperty(exports, "updateAssetInfo", { enumerable: true, get: function () { return update_asset_info_1.updateAssetInfo; } });
var general_1 = require("./general");
Object.defineProperty(exports, "signTx", { enumerable: true, get: function () { return general_1.signTx; } });
Object.defineProperty(exports, "verify", { enumerable: true, get: function () { return general_1.verify; } });
Object.defineProperty(exports, "serialize", { enumerable: true, get: function () { return general_1.serialize; } });
Object.defineProperty(exports, "submitOrder", { enumerable: true, get: function () { return general_1.submitOrder; } });
Object.defineProperty(exports, "cancelSubmittedOrder", { enumerable: true, get: function () { return general_1.cancelSubmittedOrder; } });
Object.defineProperty(exports, "verifyAuthData", { enumerable: true, get: function () { return general_1.verifyAuthData; } });
Object.defineProperty(exports, "verifyCustomData", { enumerable: true, get: function () { return general_1.verifyCustomData; } });
Object.defineProperty(exports, "verifyWavesAuthData", { enumerable: true, get: function () { return general_1.verifyWavesAuthData; } });
var nodeInteraction_1 = require("./nodeInteraction");
Object.defineProperty(exports, "waitForTx", { enumerable: true, get: function () { return nodeInteraction_1.waitForTx; } });
Object.defineProperty(exports, "broadcast", { enumerable: true, get: function () { return nodeInteraction_1.broadcast; } });
var make_tx_1 = require("./make-tx");
Object.defineProperty(exports, "makeTx", { enumerable: true, get: function () { return make_tx_1.makeTx; } });
Object.defineProperty(exports, "makeTxBytes", { enumerable: true, get: function () { return make_tx_1.makeTxBytes; } });
// internal libraries access
const crypto = __importStar(require("@waves/ts-lib-crypto"));
const marshall = __importStar(require("@waves/marshall"));
// import * as nodeApiJs from '@waves/node-api-js'
const libs = {
    crypto,
    marshall,
};
exports.libs = libs;
const seedUtils = __importStar(require("./seedUtils"));
exports.seedUtils = seedUtils;
const nodeInteraction = __importStar(require("./nodeInteraction"));
exports.nodeInteraction = nodeInteraction;
const validators = __importStar(require("./validators"));
exports.validators = validators;
const protoSerialize = __importStar(require("./proto-serialize"));
exports.protoSerialize = protoSerialize;

},{"./transactions/mass-transfer":"TbQ7","./transactions/reissue":"R2Ho","./transactions/burn":"l99E","./transactions/exchange":"TbVV","./transactions/lease":"MsyY","./transactions/cancel-lease":"Zpzc","./transactions/data":"n1o2","./transactions/issue":"VhL2","./transactions/transfer":"jTCR","./transactions/alias":"rXPq","./transactions/set-script":"Ee9g","./transactions/set-asset-script":"UGFJ","./transactions/sponsorship":"Yyww","./requests/order":"LoNZ","./requests/cancel-order":"yVfM","./requests/custom-data":"Kcwr","./requests/auth":"VhEU","./requests/wavesAuth":"Ucb3","./transactions/invoke-script":"TGR1","./transactions/update-asset-info":"DPCA","./general":"N0R4","./nodeInteraction":"zthF","./make-tx":"C6wH","@waves/ts-lib-crypto":"X6Ht","@waves/marshall":"PoKl","./seedUtils":"QNGQ","./validators":"bRjQ","./proto-serialize":"gaMD"}],"AvNi":[function(require,module,exports) {
var define;
!function(e,t){"object"==typeof exports&&"object"==typeof module?module.exports=t():"function"==typeof define&&define.amd?define([],t):"object"==typeof exports?exports.providerSeed=t():e.providerSeed=t()}(this,(function(){return function(e){var t={};function r(n){if(t[n])return t[n].exports;var i=t[n]={i:n,l:!1,exports:{}};return e[n].call(i.exports,i,i.exports,r),i.l=!0,i.exports}return r.m=e,r.c=t,r.d=function(e,t,n){r.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:n})},r.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},r.t=function(e,t){if(1&t&&(e=r(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(r.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var i in e)r.d(n,i,function(t){return e[t]}.bind(null,i));return n},r.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return r.d(t,"a",t),t},r.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},r.p="",r(r.s=87)}([function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.GENESIS_TYPE=1,t.PAYMENT_TYPE=2,t.ISSUE_TYPE=3,t.TRANSFER_TYPE=4,t.REISSUE_TYPE=5,t.BURN_TYPE=6,t.EXCHANGE_TYPE=7,t.LEASE_TYPE=8,t.CANCEL_LEASE_TYPE=9,t.ALIAS_TYPE=10,t.MASS_TRANSFER_TYPE=11,t.DATA_TYPE=12,t.SET_SCRIPT_TYPE=13,t.SPONSORSHIP_TYPE=14,t.SET_ASSET_SCRIPT_TYPE=15,t.INVOKE_SCRIPT_TYPE=16,t.UPDATE_ASSET_INFO_TYPE=17,t.INVOKE_EXPRESSION_TYPE=18,t.INTEGER_DATA_TYPE="integer",t.BOOLEAN_DATA_TYPE="boolean",t.STRING_DATA_TYPE="string",t.BINARY_DATA_TYPE="binary",t.TRANSACTION_TYPE={GENESIS:t.GENESIS_TYPE,PAYMENT:t.PAYMENT_TYPE,ISSUE:t.ISSUE_TYPE,TRANSFER:t.TRANSFER_TYPE,REISSUE:t.REISSUE_TYPE,BURN:t.BURN_TYPE,EXCHANGE:t.EXCHANGE_TYPE,LEASE:t.LEASE_TYPE,CANCEL_LEASE:t.CANCEL_LEASE_TYPE,ALIAS:t.ALIAS_TYPE,MASS_TRANSFER:t.MASS_TRANSFER_TYPE,DATA:t.DATA_TYPE,SET_SCRIPT:t.SET_SCRIPT_TYPE,SPONSORSHIP:t.SPONSORSHIP_TYPE,SET_ASSET_SCRIPT:t.SET_ASSET_SCRIPT_TYPE,INVOKE_SCRIPT:t.INVOKE_SCRIPT_TYPE,UPDATE_ASSET_INFO:t.UPDATE_ASSET_INFO_TYPE,INVOKE_EXPRESSION:t.INVOKE_EXPRESSION_TYPE},t.DATA_FIELD_TYPE={INTEGER:t.INTEGER_DATA_TYPE,BOOLEAN:t.BOOLEAN_DATA_TYPE,STRING:t.STRING_DATA_TYPE,BINARY:t.BINARY_DATA_TYPE}},function(e,t){e.exports={options:{usePureJavaScript:!1}}},function(e,t,r){"use strict";var n;Object.defineProperty(t,"__esModule",{value:!0});var i=r(58),a=r(61);t.seedWordsList=a.seedWordsList;var s=r(64);t.ChaidId=s.ChaidId;var o=r(63);t.Seed=o.Seed;var u=r(37);t.isPrivateKey=u.isPrivateKey,t.isPublicKey=u.isPublicKey;var c=r(58);t.crypto=c.crypto,function(e){for(var r in e)t.hasOwnProperty(r)||(t[r]=e[r])}(r(22)),t.signBytes=(n=i.crypto({output:"Base58"})).signBytes,t.keyPair=n.keyPair,t.publicKey=n.publicKey,t.privateKey=n.privateKey,t.address=n.address,t.buildAddress=n.buildAddress,t.blake2b=n.blake2b,t.keccak=n.keccak,t.sha256=n.sha256,t.sharedKey=n.sharedKey,t.seedWithNonce=n.seedWithNonce,t.base64Encode=n.base64Encode,t.base64Decode=n.base64Decode,t.base58Encode=n.base58Encode,t.base58Decode=n.base58Decode,t.base16Encode=n.base16Encode,t.base16Decode=n.base16Decode,t.stringToBytes=n.stringToBytes,t.bytesToString=n.bytesToString,t.random=n.random,t.randomSeed=n.randomSeed,t.randomBytes=n.randomBytes,t.verifySignature=n.verifySignature,t.verifyPublicKey=n.verifyPublicKey,t.verifyAddress=n.verifyAddress,t.messageDecrypt=n.messageDecrypt,t.messageEncrypt=n.messageEncrypt,t.aesDecrypt=n.aesDecrypt,t.aesEncrypt=n.aesEncrypt,t.encryptSeed=n.encryptSeed,t.decryptSeed=n.decryptSeed,t.rsaKeyPair=n.rsaKeyPair,t.rsaKeyPairSync=n.rsaKeyPairSync,t.rsaSign=n.rsaSign,t.rsaVerify=n.rsaVerify,t.merkleVerify=n.merkleVerify,t.split=n.split,t.concat=n.concat},function(e,t,r){(function(t,n,i,a){var s=r(1),o=r(94),u=e.exports=s.util=s.util||{};function c(e){if(8!==e&&16!==e&&24!==e&&32!==e)throw new Error("Only 8, 16, 24, or 32 bits supported: "+e)}function l(e){if(this.data="",this.read=0,"string"==typeof e)this.data=e;else if(u.isArrayBuffer(e)||u.isArrayBufferView(e))if(void 0!==a&&e instanceof a)this.data=e.toString("binary");else{var t=new Uint8Array(e);try{this.data=String.fromCharCode.apply(null,t)}catch(e){for(var r=0;r<t.length;++r)this.putByte(t[r])}}else(e instanceof l||"object"==typeof e&&"string"==typeof e.data&&"number"==typeof e.read)&&(this.data=e.data,this.read=e.read);this._constructedStringLength=0}!function(){if(void 0!==t&&t.nextTick&&!t.browser)return u.nextTick=t.nextTick,void(u.setImmediate="function"==typeof n?n:u.nextTick);if("function"==typeof n)return u.setImmediate=function(){return n.apply(void 0,arguments)},void(u.nextTick=function(e){return n(e)});if(u.setImmediate=function(e){setTimeout(e,0)},"undefined"!=typeof window&&"function"==typeof window.postMessage){var e="forge.setImmediate",r=[];u.setImmediate=function(t){r.push(t),1===r.length&&window.postMessage(e,"*")},window.addEventListener("message",(function(t){if(t.source===window&&t.data===e){t.stopPropagation();var n=r.slice();r.length=0,n.forEach((function(e){e()}))}}),!0)}if("undefined"!=typeof MutationObserver){var i=Date.now(),a=!0,s=document.createElement("div");r=[];new MutationObserver((function(){var e=r.slice();r.length=0,e.forEach((function(e){e()}))})).observe(s,{attributes:!0});var o=u.setImmediate;u.setImmediate=function(e){Date.now()-i>15?(i=Date.now(),o(e)):(r.push(e),1===r.length&&s.setAttribute("a",a=!a))}}u.nextTick=u.setImmediate}(),u.isNodejs=void 0!==t&&t.versions&&t.versions.node,u.globalScope=u.isNodejs?i:"undefined"==typeof self?window:self,u.isArray=Array.isArray||function(e){return"[object Array]"===Object.prototype.toString.call(e)},u.isArrayBuffer=function(e){return"undefined"!=typeof ArrayBuffer&&e instanceof ArrayBuffer},u.isArrayBufferView=function(e){return e&&u.isArrayBuffer(e.buffer)&&void 0!==e.byteLength},u.ByteBuffer=l,u.ByteStringBuffer=l;u.ByteStringBuffer.prototype._optimizeConstructedString=function(e){this._constructedStringLength+=e,this._constructedStringLength>4096&&(this.data.substr(0,1),this._constructedStringLength=0)},u.ByteStringBuffer.prototype.length=function(){return this.data.length-this.read},u.ByteStringBuffer.prototype.isEmpty=function(){return this.length()<=0},u.ByteStringBuffer.prototype.putByte=function(e){return this.putBytes(String.fromCharCode(e))},u.ByteStringBuffer.prototype.fillWithByte=function(e,t){e=String.fromCharCode(e);for(var r=this.data;t>0;)1&t&&(r+=e),(t>>>=1)>0&&(e+=e);return this.data=r,this._optimizeConstructedString(t),this},u.ByteStringBuffer.prototype.putBytes=function(e){return this.data+=e,this._optimizeConstructedString(e.length),this},u.ByteStringBuffer.prototype.putString=function(e){return this.putBytes(u.encodeUtf8(e))},u.ByteStringBuffer.prototype.putInt16=function(e){return this.putBytes(String.fromCharCode(e>>8&255)+String.fromCharCode(255&e))},u.ByteStringBuffer.prototype.putInt24=function(e){return this.putBytes(String.fromCharCode(e>>16&255)+String.fromCharCode(e>>8&255)+String.fromCharCode(255&e))},u.ByteStringBuffer.prototype.putInt32=function(e){return this.putBytes(String.fromCharCode(e>>24&255)+String.fromCharCode(e>>16&255)+String.fromCharCode(e>>8&255)+String.fromCharCode(255&e))},u.ByteStringBuffer.prototype.putInt16Le=function(e){return this.putBytes(String.fromCharCode(255&e)+String.fromCharCode(e>>8&255))},u.ByteStringBuffer.prototype.putInt24Le=function(e){return this.putBytes(String.fromCharCode(255&e)+String.fromCharCode(e>>8&255)+String.fromCharCode(e>>16&255))},u.ByteStringBuffer.prototype.putInt32Le=function(e){return this.putBytes(String.fromCharCode(255&e)+String.fromCharCode(e>>8&255)+String.fromCharCode(e>>16&255)+String.fromCharCode(e>>24&255))},u.ByteStringBuffer.prototype.putInt=function(e,t){c(t);var r="";do{t-=8,r+=String.fromCharCode(e>>t&255)}while(t>0);return this.putBytes(r)},u.ByteStringBuffer.prototype.putSignedInt=function(e,t){return e<0&&(e+=2<<t-1),this.putInt(e,t)},u.ByteStringBuffer.prototype.putBuffer=function(e){return this.putBytes(e.getBytes())},u.ByteStringBuffer.prototype.getByte=function(){return this.data.charCodeAt(this.read++)},u.ByteStringBuffer.prototype.getInt16=function(){var e=this.data.charCodeAt(this.read)<<8^this.data.charCodeAt(this.read+1);return this.read+=2,e},u.ByteStringBuffer.prototype.getInt24=function(){var e=this.data.charCodeAt(this.read)<<16^this.data.charCodeAt(this.read+1)<<8^this.data.charCodeAt(this.read+2);return this.read+=3,e},u.ByteStringBuffer.prototype.getInt32=function(){var e=this.data.charCodeAt(this.read)<<24^this.data.charCodeAt(this.read+1)<<16^this.data.charCodeAt(this.read+2)<<8^this.data.charCodeAt(this.read+3);return this.read+=4,e},u.ByteStringBuffer.prototype.getInt16Le=function(){var e=this.data.charCodeAt(this.read)^this.data.charCodeAt(this.read+1)<<8;return this.read+=2,e},u.ByteStringBuffer.prototype.getInt24Le=function(){var e=this.data.charCodeAt(this.read)^this.data.charCodeAt(this.read+1)<<8^this.data.charCodeAt(this.read+2)<<16;return this.read+=3,e},u.ByteStringBuffer.prototype.getInt32Le=function(){var e=this.data.charCodeAt(this.read)^this.data.charCodeAt(this.read+1)<<8^this.data.charCodeAt(this.read+2)<<16^this.data.charCodeAt(this.read+3)<<24;return this.read+=4,e},u.ByteStringBuffer.prototype.getInt=function(e){c(e);var t=0;do{t=(t<<8)+this.data.charCodeAt(this.read++),e-=8}while(e>0);return t},u.ByteStringBuffer.prototype.getSignedInt=function(e){var t=this.getInt(e),r=2<<e-2;return t>=r&&(t-=r<<1),t},u.ByteStringBuffer.prototype.getBytes=function(e){var t;return e?(e=Math.min(this.length(),e),t=this.data.slice(this.read,this.read+e),this.read+=e):0===e?t="":(t=0===this.read?this.data:this.data.slice(this.read),this.clear()),t},u.ByteStringBuffer.prototype.bytes=function(e){return void 0===e?this.data.slice(this.read):this.data.slice(this.read,this.read+e)},u.ByteStringBuffer.prototype.at=function(e){return this.data.charCodeAt(this.read+e)},u.ByteStringBuffer.prototype.setAt=function(e,t){return this.data=this.data.substr(0,this.read+e)+String.fromCharCode(t)+this.data.substr(this.read+e+1),this},u.ByteStringBuffer.prototype.last=function(){return this.data.charCodeAt(this.data.length-1)},u.ByteStringBuffer.prototype.copy=function(){var e=u.createBuffer(this.data);return e.read=this.read,e},u.ByteStringBuffer.prototype.compact=function(){return this.read>0&&(this.data=this.data.slice(this.read),this.read=0),this},u.ByteStringBuffer.prototype.clear=function(){return this.data="",this.read=0,this},u.ByteStringBuffer.prototype.truncate=function(e){var t=Math.max(0,this.length()-e);return this.data=this.data.substr(this.read,t),this.read=0,this},u.ByteStringBuffer.prototype.toHex=function(){for(var e="",t=this.read;t<this.data.length;++t){var r=this.data.charCodeAt(t);r<16&&(e+="0"),e+=r.toString(16)}return e},u.ByteStringBuffer.prototype.toString=function(){return u.decodeUtf8(this.bytes())},u.DataBuffer=function(e,t){t=t||{},this.read=t.readOffset||0,this.growSize=t.growSize||1024;var r=u.isArrayBuffer(e),n=u.isArrayBufferView(e);if(r||n)return this.data=r?new DataView(e):new DataView(e.buffer,e.byteOffset,e.byteLength),void(this.write="writeOffset"in t?t.writeOffset:this.data.byteLength);this.data=new DataView(new ArrayBuffer(0)),this.write=0,null!=e&&this.putBytes(e),"writeOffset"in t&&(this.write=t.writeOffset)},u.DataBuffer.prototype.length=function(){return this.write-this.read},u.DataBuffer.prototype.isEmpty=function(){return this.length()<=0},u.DataBuffer.prototype.accommodate=function(e,t){if(this.length()>=e)return this;t=Math.max(t||this.growSize,e);var r=new Uint8Array(this.data.buffer,this.data.byteOffset,this.data.byteLength),n=new Uint8Array(this.length()+t);return n.set(r),this.data=new DataView(n.buffer),this},u.DataBuffer.prototype.putByte=function(e){return this.accommodate(1),this.data.setUint8(this.write++,e),this},u.DataBuffer.prototype.fillWithByte=function(e,t){this.accommodate(t);for(var r=0;r<t;++r)this.data.setUint8(e);return this},u.DataBuffer.prototype.putBytes=function(e,t){if(u.isArrayBufferView(e)){var r=(n=new Uint8Array(e.buffer,e.byteOffset,e.byteLength)).byteLength-n.byteOffset;return this.accommodate(r),new Uint8Array(this.data.buffer,this.write).set(n),this.write+=r,this}if(u.isArrayBuffer(e)){var n=new Uint8Array(e);return this.accommodate(n.byteLength),new Uint8Array(this.data.buffer).set(n,this.write),this.write+=n.byteLength,this}if(e instanceof u.DataBuffer||"object"==typeof e&&"number"==typeof e.read&&"number"==typeof e.write&&u.isArrayBufferView(e.data)){n=new Uint8Array(e.data.byteLength,e.read,e.length());return this.accommodate(n.byteLength),new Uint8Array(e.data.byteLength,this.write).set(n),this.write+=n.byteLength,this}if(e instanceof u.ByteStringBuffer&&(e=e.data,t="binary"),t=t||"binary","string"==typeof e){var i;if("hex"===t)return this.accommodate(Math.ceil(e.length/2)),i=new Uint8Array(this.data.buffer,this.write),this.write+=u.binary.hex.decode(e,i,this.write),this;if("base64"===t)return this.accommodate(3*Math.ceil(e.length/4)),i=new Uint8Array(this.data.buffer,this.write),this.write+=u.binary.base64.decode(e,i,this.write),this;if("utf8"===t&&(e=u.encodeUtf8(e),t="binary"),"binary"===t||"raw"===t)return this.accommodate(e.length),i=new Uint8Array(this.data.buffer,this.write),this.write+=u.binary.raw.decode(i),this;if("utf16"===t)return this.accommodate(2*e.length),i=new Uint16Array(this.data.buffer,this.write),this.write+=u.text.utf16.encode(i),this;throw new Error("Invalid encoding: "+t)}throw Error("Invalid parameter: "+e)},u.DataBuffer.prototype.putBuffer=function(e){return this.putBytes(e),e.clear(),this},u.DataBuffer.prototype.putString=function(e){return this.putBytes(e,"utf16")},u.DataBuffer.prototype.putInt16=function(e){return this.accommodate(2),this.data.setInt16(this.write,e),this.write+=2,this},u.DataBuffer.prototype.putInt24=function(e){return this.accommodate(3),this.data.setInt16(this.write,e>>8&65535),this.data.setInt8(this.write,e>>16&255),this.write+=3,this},u.DataBuffer.prototype.putInt32=function(e){return this.accommodate(4),this.data.setInt32(this.write,e),this.write+=4,this},u.DataBuffer.prototype.putInt16Le=function(e){return this.accommodate(2),this.data.setInt16(this.write,e,!0),this.write+=2,this},u.DataBuffer.prototype.putInt24Le=function(e){return this.accommodate(3),this.data.setInt8(this.write,e>>16&255),this.data.setInt16(this.write,e>>8&65535,!0),this.write+=3,this},u.DataBuffer.prototype.putInt32Le=function(e){return this.accommodate(4),this.data.setInt32(this.write,e,!0),this.write+=4,this},u.DataBuffer.prototype.putInt=function(e,t){c(t),this.accommodate(t/8);do{t-=8,this.data.setInt8(this.write++,e>>t&255)}while(t>0);return this},u.DataBuffer.prototype.putSignedInt=function(e,t){return c(t),this.accommodate(t/8),e<0&&(e+=2<<t-1),this.putInt(e,t)},u.DataBuffer.prototype.getByte=function(){return this.data.getInt8(this.read++)},u.DataBuffer.prototype.getInt16=function(){var e=this.data.getInt16(this.read);return this.read+=2,e},u.DataBuffer.prototype.getInt24=function(){var e=this.data.getInt16(this.read)<<8^this.data.getInt8(this.read+2);return this.read+=3,e},u.DataBuffer.prototype.getInt32=function(){var e=this.data.getInt32(this.read);return this.read+=4,e},u.DataBuffer.prototype.getInt16Le=function(){var e=this.data.getInt16(this.read,!0);return this.read+=2,e},u.DataBuffer.prototype.getInt24Le=function(){var e=this.data.getInt8(this.read)^this.data.getInt16(this.read+1,!0)<<8;return this.read+=3,e},u.DataBuffer.prototype.getInt32Le=function(){var e=this.data.getInt32(this.read,!0);return this.read+=4,e},u.DataBuffer.prototype.getInt=function(e){c(e);var t=0;do{t=(t<<8)+this.data.getInt8(this.read++),e-=8}while(e>0);return t},u.DataBuffer.prototype.getSignedInt=function(e){var t=this.getInt(e),r=2<<e-2;return t>=r&&(t-=r<<1),t},u.DataBuffer.prototype.getBytes=function(e){var t;return e?(e=Math.min(this.length(),e),t=this.data.slice(this.read,this.read+e),this.read+=e):0===e?t="":(t=0===this.read?this.data:this.data.slice(this.read),this.clear()),t},u.DataBuffer.prototype.bytes=function(e){return void 0===e?this.data.slice(this.read):this.data.slice(this.read,this.read+e)},u.DataBuffer.prototype.at=function(e){return this.data.getUint8(this.read+e)},u.DataBuffer.prototype.setAt=function(e,t){return this.data.setUint8(e,t),this},u.DataBuffer.prototype.last=function(){return this.data.getUint8(this.write-1)},u.DataBuffer.prototype.copy=function(){return new u.DataBuffer(this)},u.DataBuffer.prototype.compact=function(){if(this.read>0){var e=new Uint8Array(this.data.buffer,this.read),t=new Uint8Array(e.byteLength);t.set(e),this.data=new DataView(t),this.write-=this.read,this.read=0}return this},u.DataBuffer.prototype.clear=function(){return this.data=new DataView(new ArrayBuffer(0)),this.read=this.write=0,this},u.DataBuffer.prototype.truncate=function(e){return this.write=Math.max(0,this.length()-e),this.read=Math.min(this.read,this.write),this},u.DataBuffer.prototype.toHex=function(){for(var e="",t=this.read;t<this.data.byteLength;++t){var r=this.data.getUint8(t);r<16&&(e+="0"),e+=r.toString(16)}return e},u.DataBuffer.prototype.toString=function(e){var t=new Uint8Array(this.data,this.read,this.length());if("binary"===(e=e||"utf8")||"raw"===e)return u.binary.raw.encode(t);if("hex"===e)return u.binary.hex.encode(t);if("base64"===e)return u.binary.base64.encode(t);if("utf8"===e)return u.text.utf8.decode(t);if("utf16"===e)return u.text.utf16.decode(t);throw new Error("Invalid encoding: "+e)},u.createBuffer=function(e,t){return t=t||"raw",void 0!==e&&"utf8"===t&&(e=u.encodeUtf8(e)),new u.ByteBuffer(e)},u.fillString=function(e,t){for(var r="";t>0;)1&t&&(r+=e),(t>>>=1)>0&&(e+=e);return r},u.xorBytes=function(e,t,r){for(var n="",i="",a="",s=0,o=0;r>0;--r,++s)i=e.charCodeAt(s)^t.charCodeAt(s),o>=10&&(n+=a,a="",o=0),a+=String.fromCharCode(i),++o;return n+=a},u.hexToBytes=function(e){var t="",r=0;for(!0&e.length&&(r=1,t+=String.fromCharCode(parseInt(e[0],16)));r<e.length;r+=2)t+=String.fromCharCode(parseInt(e.substr(r,2),16));return t},u.bytesToHex=function(e){return u.createBuffer(e).toHex()},u.int32ToBytes=function(e){return String.fromCharCode(e>>24&255)+String.fromCharCode(e>>16&255)+String.fromCharCode(e>>8&255)+String.fromCharCode(255&e)};var f="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=",p=[62,-1,-1,-1,63,52,53,54,55,56,57,58,59,60,61,-1,-1,-1,64,-1,-1,-1,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,-1,-1,-1,-1,-1,-1,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51],d="123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz";u.encode64=function(e,t){for(var r,n,i,a="",s="",o=0;o<e.length;)r=e.charCodeAt(o++),n=e.charCodeAt(o++),i=e.charCodeAt(o++),a+=f.charAt(r>>2),a+=f.charAt((3&r)<<4|n>>4),isNaN(n)?a+="==":(a+=f.charAt((15&n)<<2|i>>6),a+=isNaN(i)?"=":f.charAt(63&i)),t&&a.length>t&&(s+=a.substr(0,t)+"\r\n",a=a.substr(t));return s+=a},u.decode64=function(e){e=e.replace(/[^A-Za-z0-9\+\/\=]/g,"");for(var t,r,n,i,a="",s=0;s<e.length;)t=p[e.charCodeAt(s++)-43],r=p[e.charCodeAt(s++)-43],n=p[e.charCodeAt(s++)-43],i=p[e.charCodeAt(s++)-43],a+=String.fromCharCode(t<<2|r>>4),64!==n&&(a+=String.fromCharCode((15&r)<<4|n>>2),64!==i&&(a+=String.fromCharCode((3&n)<<6|i)));return a},u.encodeUtf8=function(e){return unescape(encodeURIComponent(e))},u.decodeUtf8=function(e){return decodeURIComponent(escape(e))},u.binary={raw:{},hex:{},base64:{},base58:{},baseN:{encode:o.encode,decode:o.decode}},u.binary.raw.encode=function(e){return String.fromCharCode.apply(null,e)},u.binary.raw.decode=function(e,t,r){var n=t;n||(n=new Uint8Array(e.length));for(var i=r=r||0,a=0;a<e.length;++a)n[i++]=e.charCodeAt(a);return t?i-r:n},u.binary.hex.encode=u.bytesToHex,u.binary.hex.decode=function(e,t,r){var n=t;n||(n=new Uint8Array(Math.ceil(e.length/2)));var i=0,a=r=r||0;for(1&e.length&&(i=1,n[a++]=parseInt(e[0],16));i<e.length;i+=2)n[a++]=parseInt(e.substr(i,2),16);return t?a-r:n},u.binary.base64.encode=function(e,t){for(var r,n,i,a="",s="",o=0;o<e.byteLength;)r=e[o++],n=e[o++],i=e[o++],a+=f.charAt(r>>2),a+=f.charAt((3&r)<<4|n>>4),isNaN(n)?a+="==":(a+=f.charAt((15&n)<<2|i>>6),a+=isNaN(i)?"=":f.charAt(63&i)),t&&a.length>t&&(s+=a.substr(0,t)+"\r\n",a=a.substr(t));return s+=a},u.binary.base64.decode=function(e,t,r){var n,i,a,s,o=t;o||(o=new Uint8Array(3*Math.ceil(e.length/4))),e=e.replace(/[^A-Za-z0-9\+\/\=]/g,"");for(var u=0,c=r=r||0;u<e.length;)n=p[e.charCodeAt(u++)-43],i=p[e.charCodeAt(u++)-43],a=p[e.charCodeAt(u++)-43],s=p[e.charCodeAt(u++)-43],o[c++]=n<<2|i>>4,64!==a&&(o[c++]=(15&i)<<4|a>>2,64!==s&&(o[c++]=(3&a)<<6|s));return t?c-r:o.subarray(0,c)},u.binary.base58.encode=function(e,t){return u.binary.baseN.encode(e,d,t)},u.binary.base58.decode=function(e,t){return u.binary.baseN.decode(e,d,t)},u.text={utf8:{},utf16:{}},u.text.utf8.encode=function(e,t,r){e=u.encodeUtf8(e);var n=t;n||(n=new Uint8Array(e.length));for(var i=r=r||0,a=0;a<e.length;++a)n[i++]=e.charCodeAt(a);return t?i-r:n},u.text.utf8.decode=function(e){return u.decodeUtf8(String.fromCharCode.apply(null,e))},u.text.utf16.encode=function(e,t,r){var n=t;n||(n=new Uint8Array(2*e.length));for(var i=new Uint16Array(n.buffer),a=r=r||0,s=r,o=0;o<e.length;++o)i[s++]=e.charCodeAt(o),a+=2;return t?a-r:n},u.text.utf16.decode=function(e){return String.fromCharCode.apply(null,new Uint16Array(e.buffer))},u.deflate=function(e,t,r){if(t=u.decode64(e.deflate(u.encode64(t)).rval),r){var n=2;32&t.charCodeAt(1)&&(n=6),t=t.substring(n,t.length-4)}return t},u.inflate=function(e,t,r){var n=e.inflate(u.encode64(t)).rval;return null===n?null:u.decode64(n)};var h=function(e,t,r){if(!e)throw new Error("WebStorage not available.");var n;if(null===r?n=e.removeItem(t):(r=u.encode64(JSON.stringify(r)),n=e.setItem(t,r)),void 0!==n&&!0!==n.rval){var i=new Error(n.error.message);throw i.id=n.error.id,i.name=n.error.name,i}},y=function(e,t){if(!e)throw new Error("WebStorage not available.");var r=e.getItem(t);if(e.init)if(null===r.rval){if(r.error){var n=new Error(r.error.message);throw n.id=r.error.id,n.name=r.error.name,n}r=null}else r=r.rval;return null!==r&&(r=JSON.parse(u.decode64(r))),r},g=function(e,t,r,n){var i=y(e,t);null===i&&(i={}),i[r]=n,h(e,t,i)},v=function(e,t,r){var n=y(e,t);return null!==n&&(n=r in n?n[r]:null),n},m=function(e,t,r){var n=y(e,t);if(null!==n&&r in n){delete n[r];var i=!0;for(var a in n){i=!1;break}i&&(n=null),h(e,t,n)}},b=function(e,t){h(e,t,null)},E=function(e,t,r){var n,i=null;void 0===r&&(r=["web","flash"]);var a=!1,s=null;for(var o in r){n=r[o];try{if("flash"===n||"both"===n){if(null===t[0])throw new Error("Flash local storage not available.");i=e.apply(this,t),a="flash"===n}"web"!==n&&"both"!==n||(t[0]=localStorage,i=e.apply(this,t),a=!0)}catch(e){s=e}if(a)break}if(!a)throw s;return i};u.setItem=function(e,t,r,n,i){E(g,arguments,i)},u.getItem=function(e,t,r,n){return E(v,arguments,n)},u.removeItem=function(e,t,r,n){E(m,arguments,n)},u.clearItems=function(e,t,r){E(b,arguments,r)},u.parseUrl=function(e){var t=/^(https?):\/\/([^:&^\/]*):?(\d*)(.*)$/g;t.lastIndex=0;var r=t.exec(e),n=null===r?null:{full:e,scheme:r[1],host:r[2],port:r[3],path:r[4]};return n&&(n.fullHost=n.host,n.port?(80!==n.port&&"http"===n.scheme||443!==n.port&&"https"===n.scheme)&&(n.fullHost+=":"+n.port):"http"===n.scheme?n.port=80:"https"===n.scheme&&(n.port=443),n.full=n.scheme+"://"+n.fullHost),n};var S=null;u.getQueryVariables=function(e){var t,r=function(e){for(var t={},r=e.split("&"),n=0;n<r.length;n++){var i,a,s=r[n].indexOf("=");s>0?(i=r[n].substring(0,s),a=r[n].substring(s+1)):(i=r[n],a=null),i in t||(t[i]=[]),i in Object.prototype||null===a||t[i].push(unescape(a))}return t};return void 0===e?(null===S&&(S="undefined"!=typeof window&&window.location&&window.location.search?r(window.location.search.substring(1)):{}),t=S):t=r(e),t},u.parseFragment=function(e){var t=e,r="",n=e.indexOf("?");n>0&&(t=e.substring(0,n),r=e.substring(n+1));var i=t.split("/");return i.length>0&&""===i[0]&&i.shift(),{pathString:t,queryString:r,path:i,query:""===r?{}:u.getQueryVariables(r)}},u.makeRequest=function(e){var t=u.parseFragment(e),r={path:t.pathString,query:t.queryString,getPath:function(e){return void 0===e?t.path:t.path[e]},getQuery:function(e,r){var n;return void 0===e?n=t.query:(n=t.query[e])&&void 0!==r&&(n=n[r]),n},getQueryLast:function(e,t){var n=r.getQuery(e);return n?n[n.length-1]:t}};return r},u.makeLink=function(e,t,r){e=jQuery.isArray(e)?e.join("/"):e;var n=jQuery.param(t||{});return r=r||"",e+(n.length>0?"?"+n:"")+(r.length>0?"#"+r:"")},u.setPath=function(e,t,r){if("object"==typeof e&&null!==e)for(var n=0,i=t.length;n<i;){var a=t[n++];if(n==i)e[a]=r;else{var s=a in e;(!s||s&&"object"!=typeof e[a]||s&&null===e[a])&&(e[a]={}),e=e[a]}}},u.getPath=function(e,t,r){for(var n=0,i=t.length,a=!0;a&&n<i&&"object"==typeof e&&null!==e;){var s=t[n++];(a=s in e)&&(e=e[s])}return a?e:r},u.deletePath=function(e,t){if("object"==typeof e&&null!==e)for(var r=0,n=t.length;r<n;){var i=t[r++];if(r==n)delete e[i];else{if(!(i in e)||"object"!=typeof e[i]||null===e[i])break;e=e[i]}}},u.isEmpty=function(e){for(var t in e)if(e.hasOwnProperty(t))return!1;return!0},u.format=function(e){for(var t,r,n=/%./g,i=0,a=[],s=0;t=n.exec(e);){(r=e.substring(s,n.lastIndex-2)).length>0&&a.push(r),s=n.lastIndex;var o=t[0][1];switch(o){case"s":case"o":i<arguments.length?a.push(arguments[1+i++]):a.push("<?>");break;case"%":a.push("%");break;default:a.push("<%"+o+"?>")}}return a.push(e.substring(s)),a.join("")},u.formatNumber=function(e,t,r,n){var i=e,a=isNaN(t=Math.abs(t))?2:t,s=void 0===r?",":r,o=void 0===n?".":n,u=i<0?"-":"",c=parseInt(i=Math.abs(+i||0).toFixed(a),10)+"",l=c.length>3?c.length%3:0;return u+(l?c.substr(0,l)+o:"")+c.substr(l).replace(/(\d{3})(?=\d)/g,"$1"+o)+(a?s+Math.abs(i-c).toFixed(a).slice(2):"")},u.formatSize=function(e){return e=e>=1073741824?u.formatNumber(e/1073741824,2,".","")+" GiB":e>=1048576?u.formatNumber(e/1048576,2,".","")+" MiB":e>=1024?u.formatNumber(e/1024,0)+" KiB":u.formatNumber(e,0)+" bytes"},u.bytesFromIP=function(e){return-1!==e.indexOf(".")?u.bytesFromIPv4(e):-1!==e.indexOf(":")?u.bytesFromIPv6(e):null},u.bytesFromIPv4=function(e){if(4!==(e=e.split(".")).length)return null;for(var t=u.createBuffer(),r=0;r<e.length;++r){var n=parseInt(e[r],10);if(isNaN(n))return null;t.putByte(n)}return t.getBytes()},u.bytesFromIPv6=function(e){for(var t=0,r=2*(8-(e=e.split(":").filter((function(e){return 0===e.length&&++t,!0}))).length+t),n=u.createBuffer(),i=0;i<8;++i)if(e[i]&&0!==e[i].length){var a=u.hexToBytes(e[i]);a.length<2&&n.putByte(0),n.putBytes(a)}else n.fillWithByte(0,r),r=0;return n.getBytes()},u.bytesToIP=function(e){return 4===e.length?u.bytesToIPv4(e):16===e.length?u.bytesToIPv6(e):null},u.bytesToIPv4=function(e){if(4!==e.length)return null;for(var t=[],r=0;r<e.length;++r)t.push(e.charCodeAt(r));return t.join(".")},u.bytesToIPv6=function(e){if(16!==e.length)return null;for(var t=[],r=[],n=0,i=0;i<e.length;i+=2){for(var a=u.bytesToHex(e[i]+e[i+1]);"0"===a[0]&&"0"!==a;)a=a.substr(1);if("0"===a){var s=r[r.length-1],o=t.length;s&&o===s.end+1?(s.end=o,s.end-s.start>r[n].end-r[n].start&&(n=r.length-1)):r.push({start:o,end:o})}t.push(a)}if(r.length>0){var c=r[n];c.end-c.start>0&&(t.splice(c.start,c.end-c.start+1,""),0===c.start&&t.unshift(""),7===c.end&&t.push(""))}return t.join(":")},u.estimateCores=function(e,t){if("function"==typeof e&&(t=e,e={}),e=e||{},"cores"in u&&!e.update)return t(null,u.cores);if("undefined"!=typeof navigator&&"hardwareConcurrency"in navigator&&navigator.hardwareConcurrency>0)return u.cores=navigator.hardwareConcurrency,t(null,u.cores);if("undefined"==typeof Worker)return u.cores=1,t(null,u.cores);if("undefined"==typeof Blob)return u.cores=2,t(null,u.cores);var r=URL.createObjectURL(new Blob(["(",function(){self.addEventListener("message",(function(e){for(var t=Date.now(),r=t+4;Date.now()<r;);self.postMessage({st:t,et:r})}))}.toString(),")()"],{type:"application/javascript"}));!function e(n,i,a){if(0===i){var s=Math.floor(n.reduce((function(e,t){return e+t}),0)/n.length);return u.cores=Math.max(1,s),URL.revokeObjectURL(r),t(null,u.cores)}!function(e,t){for(var n=[],i=[],a=0;a<e;++a){var s=new Worker(r);s.addEventListener("message",(function(r){if(i.push(r.data),i.length===e){for(var a=0;a<e;++a)n[a].terminate();t(null,i)}})),n.push(s)}for(a=0;a<e;++a)n[a].postMessage(a)}(a,(function(t,r){n.push(function(e,t){for(var r=[],n=0;n<e;++n)for(var i=t[n],a=r[n]=[],s=0;s<e;++s)if(n!==s){var o=t[s];(i.st>o.st&&i.st<o.et||o.st>i.st&&o.st<i.et)&&a.push(s)}return r.reduce((function(e,t){return Math.max(e,t.length)}),0)}(a,r)),e(n,i-1,a)}))}([],5,16)}}).call(this,r(25),r(92).setImmediate,r(17),r(16).Buffer)},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(23),i=r(74),a=r(117),s=r(118);t.json=s;const o=r(29);t.serializePrimitives=o;const u=r(41);t.parsePrimitives=u;const c=r(23);t.schemas=c;const l={serializerFromSchema:i.serializerFromSchema,serializeTx:i.serializeTx,serializeOrder:i.serializeOrder,parserFromSchema:a.parserFromSchema,parseTx:a.parseTx,parseOrder:a.parseOrder};function f(e,t,r,n){const s=i.serializerFromSchema(t,n),o=a.parserFromSchema(t,r)(s(e)).value;return Object.assign({},e,o)}t.binary=l,t.convertLongFields=f,t.convertTxLongFields=function(e,t,r){const{type:i,version:a}=e;return f(e,n.getTransactionSchema(i,a),t,r)}},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.chainIdFromRecipient=t.normalizeAssetId=t.fee=t.networkByte=t.isOrder=t.convertToPairs=t.addProof=t.base64Prefix=t.getSenderPublicKey=t.mapObj=void 0;const n=r(2);t.mapObj=(e,t)=>Object.entries(e).map(([e,r])=>[e,t(r)]).reduce((e,[t,r])=>Object.assign(Object.assign({},e),{[t]:r}),{}),t.getSenderPublicKey=function(e,t){if(0===e.length&&null==t.senderPublicKey)throw new Error("Please provide either seed or senderPublicKey");return null==t.senderPublicKey?n.publicKey(e[0][0]):t.senderPublicKey},t.base64Prefix=e=>null==e||"base64:"===e.slice(0,7)?e:"base64:"+e,t.addProof=function(e,t,r){if(null==r)return e.proofs=[...e.proofs,t],e;if(null!=e.proofs&&e.proofs[r])throw new Error(`Proof at index ${r} already exists.`);for(let t=e.proofs.length;t<r;t++)e.proofs.push("");return e.proofs[r]=t,e},t.convertToPairs=function(e){return null==e?[]:"string"==typeof e||"privateKey"in e?[[e,void 0]]:Array.isArray(e)?e.map((e,t)=>[e,t]).filter(([e,t])=>e):Object.keys(e).map(e=>parseInt(e)).filter(e=>!isNaN(e)).sort().map(t=>[e[t],t])},t.isOrder=e=>void 0!==e.assetPair,t.networkByte=function(e,t){switch(typeof e){case"string":return e.charCodeAt(0);case"number":return e;default:return t}},t.fee=function(e,t){return e.fee?e.fee:e.additionalFee?t+e.additionalFee:t},t.normalizeAssetId=function(e){return"WAVES"===(e=e||null)?null:e},t.chainIdFromRecipient=function(e){if(e.startsWith("alias"))return e.charCodeAt(6);try{return n.base58Decode(e)[1]}catch(t){throw new Error("Invalid recipient: "+e)}}},function(e,t,r){"use strict";var n=this&&this.__createBinding||(Object.create?function(e,t,r,n){void 0===n&&(n=r),Object.defineProperty(e,n,{enumerable:!0,get:function(){return t[r]}})}:function(e,t,r,n){void 0===n&&(n=r),e[n]=t[r]}),i=this&&this.__exportStar||function(e,t){for(var r in e)"default"===r||t.hasOwnProperty(r)||n(t,e,r)};Object.defineProperty(t,"__esModule",{value:!0}),t.validate=void 0,i(r(7),t);const a=r(120),s=r(121),o=r(122),u=r(123),c=r(124),l=r(125),f=r(126),p=r(127),d=r(128),h=r(129),y=r(130),g=r(131),v=r(132),m=r(133),b=r(134),E=r(135),S=r(75),T=r(136),A=r(137),w=r(138),I=r(139);t.validate={transfer:a.transferValidator,massTransfer:s.massTransferValidator,alias:o.aliasValidator,issue:y.issueValidator,reissue:h.reissueValidator,sponsorship:f.sponsorshipValidator,burn:u.burnValidator,setAssetScript:p.setAssetScriptValidator,cancelLease:c.cancelLeaseValidator,data:l.dataValidator,lease:g.leaseValidator,setScript:d.setScriptValidator,invokeScript:v.invokeValidator,exchange:m.exchangeValidator,updateAssetInfo:b.updateAssetInfoValidator,invokeExpression:E.invokeExpressionValidator,cancelOrder:T.cancelOrderValidator,customData:A.customDataValidator,order:S.orderValidator,wavesAuth:I.authValidator,auth:w.authValidator}},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.getError=t.validateByShema=t.isRecipient=t.exception=t.isValidAssetDescription=t.isValidAssetName=t.isValidDeleteRequest=t.isValidData=t.isValidDataPair=t.isAttachment=t.isAssetId=t.isPublicKey=t.isHash=t.isValidAlias=t.isValidAliasName=t.isValidAddress=t.isBase64=t.isBase58=t.bytesLength=t.isArray=t.isByteArray=t.isBoolean=t.isNumberLike=t.isNumber=t.isString=t.isRequired=t.orEq=t.isEq=t.ifElse=t.gte=t.lte=t.prop=t.validatePipe=t.pipe=t.nope=t.defaultValue=void 0;const n=r(2),i=140,a={AVAILABLE_CHARS:"-.0123456789@_abcdefghijklmnopqrstuvwxyz",MAX_ALIAS_LENGTH:30,MIN_ALIAS_LENGTH:4},s=4,o=16,u=1e3;t.defaultValue=e=>()=>e,t.nope=e=>e,t.pipe=(...e)=>t=>e.reduce((e,t)=>t(e),t),t.validatePipe=(...e)=>t=>{let r=!0;for(const n of e)if(r=!!n(t),!r)return!1;return r},t.prop=e=>t=>t?t[e]:void 0,t.lte=e=>t=>e>=t,t.gte=e=>t=>e<=t,t.ifElse=(e,t,r)=>n=>e(n)?t(n):r(n),t.isEq=e=>r=>{switch(!0){case t.isNumber(r)&&t.isNumber(e):return Number(r)===Number(e);case t.isString(r)&&t.isString(e):return String(e)===String(r);case t.isBoolean(r)&&t.isBoolean(e):return Boolean(r)===Boolean(e);default:return e===r}},t.orEq=e=>r=>e.some(t.isEq(r)),t.isRequired=e=>t=>!e||null!=t,t.isString=e=>"string"==typeof e||e instanceof String,t.isNumber=e=>("number"==typeof e||e instanceof Number)&&!isNaN(Number(e)),t.isNumberLike=e=>!(null==e||isNaN(Number(e))||!e&&0!==e),t.isBoolean=e=>null!=e&&("boolean"==typeof e||e instanceof Boolean),t.isByteArray=e=>{if(!e)return!1;const r=new Uint8Array(e);return r.length===e.length&&r.every((r,n)=>t.isEq(r)(e[n]))},t.isArray=e=>Array.isArray(e),t.bytesLength=e=>t=>{try{return Uint8Array.from(t).length===e}catch(e){return!1}},t.isBase58=e=>{try{n.base58Decode(e)}catch(e){return!1}return!0},t.isBase64=e=>{try{e=e.replace(/^base64:/,""),n.base64Decode(e)}catch(e){return!1}return!0},t.isValidAddress=(e,r)=>{if("string"!=typeof e||!t.isBase58(e))return!1;let i=n.base58Decode(e);if(1!==i[0])return!1;if(null!=r&&i[1]!=r)return!1;let a=i.slice(0,22),s=i.slice(22,26),o=n.keccak(n.blake2b(a)).slice(0,4);for(let e=0;e<4;e++)if(s[e]!==o[e])return!1;return!0};var c;t.isValidAliasName=t.ifElse((c=a.AVAILABLE_CHARS,e=>e.split("").every(e=>c.includes(e))),t.pipe(t.prop("length"),t.validatePipe(t.lte(a.MAX_ALIAS_LENGTH),t.gte(a.MIN_ALIAS_LENGTH))),t.defaultValue(!1)),t.isValidAlias=t.validatePipe(t.isString,t.pipe(e=>e.split(":"),t.ifElse(e=>"alias"!==e[0]||3!==e.length,t.defaultValue(!1),t.pipe(t.prop(2),t.isValidAliasName)))),t.isHash=t.validatePipe(t.isRequired(!0),t.isBase58,t.pipe(e=>n.base58Decode(e),t.bytesLength(32))),t.isPublicKey=t.isHash,t.isAssetId=t.ifElse(t.orEq(["",null,void 0,"WAVES"]),t.defaultValue(!0),t.isHash),t.isAttachment=t.ifElse(t.orEq([null,void 0]),t.defaultValue(!0),t.ifElse(t.validatePipe(t.isArray,e=>e.every(t.isValidDataPair)),t.defaultValue(!0),t.pipe(t.ifElse(t.isBase58,n.base58Decode,t.nope),t.ifElse(t.isByteArray,t.pipe(t.prop("length"),t.lte(i)),t.defaultValue(!1)))));const l={integer:t.isNumberLike,boolean:t.isBoolean,string:t.isString,binary:t.isBase64,list:t.isArray};t.isValidDataPair=e=>!(!l[e.type]||!l[e.type](e.value)),t.isValidData=t.validatePipe(t.isRequired(!0),t.pipe(t.prop("key"),t.validatePipe(t.isString,e=>!!e)),t.isValidDataPair),t.isValidDeleteRequest=t.validatePipe(t.isRequired(!0),t.pipe(t.prop("key"),t.validatePipe(t.isString,e=>!!e)),({type:e,value:t})=>null==e&&null==t),t.isValidAssetName=t.validatePipe(t.isRequired(!0),t.isString,t.pipe(n.stringToBytes,t.prop("length"),t.ifElse(t.gte(s),t.lte(o),t.defaultValue(!1)))),t.isValidAssetDescription=t.ifElse(t.isRequired(!1),t.defaultValue(!0),t.pipe(n.stringToBytes,t.prop("length"),t.lte(u))),t.exception=e=>{throw new Error(e)},t.isRecipient=t.ifElse(t.isValidAddress,t.defaultValue(!0),t.isValidAlias),t.validateByShema=(e,r)=>n=>(Object.entries(e).forEach(([e,i])=>{const a=t.prop(e)(n||{});i(a)||t.exception(r(e,a))}),!0),t.getError=(e,t)=>`tx "${e}", has wrong data: ${JSON.stringify(t)}. Check tx data.`},function(e,t,r){"use strict";var n=this&&this.__createBinding||(Object.create?function(e,t,r,n){void 0===n&&(n=r),Object.defineProperty(e,n,{enumerable:!0,get:function(){return t[r]}})}:function(e,t,r,n){void 0===n&&(n=r),e[n]=t[r]}),i=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),a=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var r in e)"default"!==r&&Object.hasOwnProperty.call(e,r)&&n(t,e,r);return i(t,e),t},s=this&&this.__rest||function(e,t){var r={};for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&t.indexOf(n)<0&&(r[n]=e[n]);if(null!=e&&"function"==typeof Object.getOwnPropertySymbols){var i=0;for(n=Object.getOwnPropertySymbols(e);i<n.length;i++)t.indexOf(n[i])<0&&Object.prototype.propertyIsEnumerable.call(e,n[i])&&(r[n[i]]=e[n[i]])}return r},o=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.dataEntryToProto=t.signedTxToProto=t.txToProto=t.protoBytesToOrder=t.orderToProtoBytes=t.protoTxDataToTx=t.protoBytesToTx=t.protoBytesToSignedTx=t.signedTxToProtoBytes=t.txToProtoBytes=void 0;const u=a(r(76)),c=r(2),l=r(4),f=r(0),p=r(5),d=o(r(40)),h=Object.assign({},l.schemas.txFields.functionCall[1]),y=(e,t)=>{if(e.alias)return`alias:${String.fromCharCode(t)}:${e.alias}`;const r=c.concat([1],[t],e.publicKeyHash),n=c.keccak(c.blake2b(r)).slice(0,4);return c.base58Encode(c.concat(r,n))};function g(e){const t=Math.pow(2,53)-1;return e.toNumber()>t?e.toString():e.toNumber()}function v(e){var t,r;let n={version:e.version,type:B[e.data],senderPublicKey:c.base58Encode(e.senderPublicKey),timestamp:e.timestamp.toNumber(),fee:g(e.fee.amount)};switch(e.fee.hasOwnProperty("assetId")&&(n.feeAssetId=c.base58Encode(e.fee.assetId)),e.hasOwnProperty("chainId")&&(n.chainId=e.chainId),e.data){case"issue":n.name=e.issue.name,n.description=e.issue.description,n.quantity=g(e.issue.amount),n.decimals=e.issue.decimals,n.reissuable=e.issue.reissuable,e.issue.hasOwnProperty("script")&&(n.script=e.issue.script&&p.base64Prefix(c.base64Encode(e.issue.script)));break;case"transfer":n.amount=g(e.transfer.amount.amount),n.recipient=y(e.transfer.recipient,e.chainId),e.transfer.hasOwnProperty("attachment")&&(n.attachment=null==e.transfer.attachment?null:c.base58Encode(e.transfer.attachment)),e.transfer.hasOwnProperty("assetId")&&(n.assetId=null==e.transfer.amount.assetId?null:c.base58Encode(e.transfer.amount.assetId));break;case"reissue":n.quantity=g(e.reissue.assetAmount.amount),n.assetId=null==e.reissue.assetAmount.assetId?null:c.base58Encode(e.reissue.assetAmount.assetId),n.reissuable=e.reissue.reissuable;break;case"burn":n.amount=g(e.burn.assetAmount.amount),n.assetId=c.base58Encode(e.burn.assetAmount.assetId);break;case"exchange":n.amount=g(e.exchange.amount),n.price=g(e.exchange.price),n.buyMatcherFee=g(e.exchange.buyMatcherFee),n.sellMatcherFee=g(e.exchange.sellMatcherFee),n.order1=S(e.exchange.orders[0]),n.order2=S(e.exchange.orders[1]);break;case"lease":n.recipient=y(e.lease.recipient,e.chainId),n.amount=g(e.lease.amount);break;case"leaseCancel":n.leaseId=c.base58Encode(e.leaseCancel.leaseId);break;case"createAlias":n.alias=e.createAlias.alias;break;case"massTransfer":e.massTransfer.hasOwnProperty("assetId")&&(n.assetId=null==e.massTransfer.assetId?null:c.base58Encode(e.massTransfer.assetId)),e.massTransfer.hasOwnProperty("attachment")?n.attachment=null==e.massTransfer.attachment?"":c.base58Encode(e.massTransfer.attachment):n.attachment="",n.transfers=e.massTransfer.transfers.map(({amount:t,recipient:r})=>({amount:g(t),recipient:y(r,e.chainId)}));break;case"dataTransaction":n.data=e.dataTransaction.data.map(e=>e.hasOwnProperty("binaryValue")?{key:e.key,type:"binary",value:p.base64Prefix(c.base64Encode(e.binaryValue))}:e.hasOwnProperty("boolValue")?{key:e.key,type:"boolean",value:e.boolValue}:e.hasOwnProperty("intValue")?{key:e.key,type:"integer",value:g(e.intValue)}:e.hasOwnProperty("stringValue")?{key:e.key,type:"string",value:e.stringValue}:{key:e.key});break;case"setScript":n.script=null==e.setScript.script?null:p.base64Prefix(c.base64Encode(e.setScript.script));break;case"sponsorFee":n.minSponsoredAssetFee=g(e.sponsorFee.minFee.amount),n.assetId=c.base58Encode(e.sponsorFee.minFee.assetId);break;case"setAssetScript":n.assetId=c.base58Encode(e.setAssetScript.assetId),n.script=p.base64Prefix(c.base64Encode(e.setAssetScript.script));break;case"invokeScript":n.dApp=y(e.invokeScript.dApp,e.chainId),null!=e.invokeScript.functionCall&&(n.call=l.binary.parserFromSchema(h)(e.invokeScript.functionCall).value),n.payment=e.invokeScript.payments.map(e=>({amount:g(e.amount),assetId:null==e.assetId?null:c.base58Encode(e.assetId)}));break;case"updateAssetInfo":n.assetId=c.base58Encode(e.updateAssetInfo.assetId),n.name=e.updateAssetInfo.name,n.description=e.updateAssetInfo.description;break;case"invokeExpression":n.expression=null==(null===(t=e.invokeExpression)||void 0===t?void 0:t.expression)?null:p.base64Prefix(c.base64Encode(null===(r=e.invokeExpression)||void 0===r?void 0:r.expression));break;default:throw new Error("Unsupported tx type "+e.data)}return n}t.txToProtoBytes=function(e){return new Uint8Array(u.waves.Transaction.encode(t.txToProto(e)).finish())},t.signedTxToProtoBytes=function(e){return new Uint8Array(u.waves.SignedTransaction.encode(t.signedTxToProto(e)).finish())},t.protoBytesToSignedTx=function(e){const t=u.waves.SignedTransaction.decode(e),r=v(t.transaction);return Object.assign(Object.assign({},r),{proofs:(t.proofs||[]).map(P)})},t.protoBytesToTx=function(e){return v(u.waves.Transaction.decode(e))},t.protoTxDataToTx=v,t.orderToProtoBytes=function(e){return u.waves.Order.encode(E(e)).finish()},t.protoBytesToOrder=function(e){const t=u.waves.Order.decode(e);return S(t)};const m=e=>{var{senderPublicKey:t,fee:r,timestamp:n,type:i,version:a}=e,o=s(e,["senderPublicKey","fee","timestamp","type","version"]);const u=C[i];let l=o.chainId;if(null==l){const e=o;let t=e.recipient||e.dApp||e.transfers&&e.transfers[0]&&e.transfers[0].recipient;t&&(l=p.chainIdFromRecipient(t))}return{version:a,type:i,chainId:l,senderPublicKey:c.base58Decode(t),timestamp:d.default.fromValue(n),fee:A(r,o.feeAssetId),data:u}},b=e=>{let r;switch(e.type){case f.TRANSACTION_TYPE.ISSUE:r=(e=>({name:e.name,description:""===e.description?null:e.description,amount:d.default.fromValue(e.quantity),decimals:0===e.decimals?null:e.decimals,reissuable:!!e.reissuable||void 0,script:null==e.script?null:I(e.script)}))(e);break;case f.TRANSACTION_TYPE.TRANSFER:r=(e=>({recipient:T(e.recipient),amount:A(e.amount,e.assetId),attachment:null==e.attachment||""==e.attachment?void 0:c.base58Decode(e.attachment)}))(e);break;case f.TRANSACTION_TYPE.REISSUE:r=(e=>({assetAmount:A(e.quantity,e.assetId),reissuable:!!e.reissuable||void 0}))(e);break;case f.TRANSACTION_TYPE.BURN:r=(e=>({assetAmount:A(e.amount||e.amount,e.assetId)}))(e);break;case f.TRANSACTION_TYPE.LEASE:r=(e=>({recipient:T(e.recipient),amount:d.default.fromValue(e.amount)}))(e);break;case f.TRANSACTION_TYPE.CANCEL_LEASE:r=(e=>({leaseId:c.base58Decode(e.leaseId)}))(e);break;case f.TRANSACTION_TYPE.ALIAS:r=(e=>({alias:e.alias}))(e);break;case f.TRANSACTION_TYPE.MASS_TRANSFER:r=(e=>({assetId:null==e.assetId?null:c.base58Decode(e.assetId),attachment:null==e.attachment||""==e.attachment?void 0:c.base58Decode(e.attachment),transfers:e.transfers.map(w)}))(e);break;case f.TRANSACTION_TYPE.DATA:r=(e=>({data:e.data.map(t.dataEntryToProto)}))(e);break;case f.TRANSACTION_TYPE.SET_SCRIPT:r=(e=>({script:null==e.script?null:I(e.script)}))(e);break;case f.TRANSACTION_TYPE.SET_ASSET_SCRIPT:r=(e=>({assetId:c.base58Decode(e.assetId),script:null==e.script?null:I(e.script)}))(e);break;case f.TRANSACTION_TYPE.SPONSORSHIP:r=(e=>({minFee:null===e.minSponsoredAssetFee?A(0,e.assetId):A(e.minSponsoredAssetFee,e.assetId)}))(e);break;case f.TRANSACTION_TYPE.EXCHANGE:r=(e=>({amount:d.default.fromValue(e.amount),price:d.default.fromValue(e.price),buyMatcherFee:d.default.fromValue(e.buyMatcherFee),sellMatcherFee:d.default.fromValue(e.sellMatcherFee),orders:[E(Object.assign({chainId:e.chainId},e.order1)),E(Object.assign({chainId:e.chainId},e.order2))]}))(e);break;case f.TRANSACTION_TYPE.INVOKE_SCRIPT:r=(e=>({dApp:T(e.dApp),functionCall:l.binary.serializerFromSchema(l.schemas.invokeScriptSchemaV1.schema[5][1])(e.call),payments:null==e.payment?null:e.payment.map(({amount:e,assetId:t})=>A(e,t))}))(e);break;case f.TRANSACTION_TYPE.UPDATE_ASSET_INFO:r=(e=>({assetId:c.base58Decode(e.assetId),name:e.name,description:""===e.description?null:e.description}))(e);break;case f.TRANSACTION_TYPE.INVOKE_EXPRESSION:r=(e=>({expression:null==e.expression?null:I(e.expression)}))(e)}return r};t.txToProto=e=>{const t=m(e),r=b(e);return Object.assign(Object.assign({},t),{[t.data]:r})},t.signedTxToProto=e=>{const t=(e=>{const t=m(e);return e.hasOwnProperty("proofs")&&(t.proofs=e.proofs),t})(e),r=b(e);return{transaction:Object.assign(Object.assign({},t),{[t.data]:r}),proofs:(e.proofs||[]).map(k)}};const E=e=>({chainId:e.chainId,senderPublicKey:c.base58Decode(e.senderPublicKey),matcherPublicKey:c.base58Decode(e.matcherPublicKey),assetPair:{amountAssetId:null==e.assetPair.amountAsset?null:c.base58Decode(e.assetPair.amountAsset),priceAssetId:null==e.assetPair.priceAsset?null:c.base58Decode(e.assetPair.priceAsset)},orderSide:"buy"===e.orderType?void 0:u.waves.Order.Side.SELL,amount:d.default.fromValue(e.amount),price:d.default.fromValue(e.price),timestamp:d.default.fromValue(e.timestamp),expiration:d.default.fromValue(e.expiration),matcherFee:A(e.matcherFee,null),version:e.version,proofs:e.proofs.map(c.base58Decode)}),S=e=>({version:e.version,senderPublicKey:c.base58Encode(e.senderPublicKey),matcherPublicKey:c.base58Encode(e.matcherPublicKey),assetPair:{amountAsset:null==e.assetPair.amountAssetId?null:c.base58Encode(e.assetPair.amountAssetId),priceAsset:null==e.assetPair.priceAssetId?null:c.base58Encode(e.assetPair.priceAssetId)},chainId:e.chainId,orderType:e.orderSide===u.waves.Order.Side.BUY?"buy":"sell",amount:g(e.amount),price:g(e.price),timestamp:e.timestamp.toNumber(),expiration:e.expiration.toNumber(),matcherFee:g(e.matcherFee.amount),matcherFeeAssetId:null==e.matcherFee.assetId?null:c.base58Encode(e.matcherFee.assetId)}),T=e=>({alias:e.startsWith("alias")?e.slice(8):void 0,publicKeyHash:e.startsWith("alias")?void 0:c.base58Decode(e).slice(2,-4)}),A=(e,t)=>({amount:0==e?null:d.default.fromValue(e),assetId:null==t?null:c.base58Decode(t)}),w=e=>({recipient:T(e.recipient),amount:0==e.amount?null:d.default.fromValue(e.amount)});t.dataEntryToProto=e=>({key:e.key,intValue:"integer"===e.type?d.default.fromValue(e.value):void 0,boolValue:"boolean"===e.type?e.value:void 0,binaryValue:"binary"===e.type?c.base64Decode(e.value.startsWith("base64:")?e.value.slice(7):e.value):void 0,stringValue:"string"===e.type?e.value:void 0});const I=e=>c.base64Decode(e.startsWith("base64:")?e.slice(7):e),C={1:"genesis",2:"payment",3:"issue",4:"transfer",5:"reissue",6:"burn",7:"exchange",8:"lease",9:"leaseCancel",10:"createAlias",11:"massTransfer",12:"dataTransaction",13:"setScript",14:"sponsorFee",15:"setAssetScript",16:"invokeScript",17:"updateAssetInfo",18:"invokeExpression"},B={genesis:1,payment:2,issue:3,transfer:4,reissue:5,burn:6,exchange:7,lease:8,leaseCancel:9,createAlias:10,massTransfer:11,dataTransaction:12,setScript:13,sponsorFee:14,setAssetScript:15,invokeScript:16,updateAssetInfo:17,invokeExpression:18},k=e=>c.base58Decode(e),P=e=>c.base58Encode(e)},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.DEFAULT_VERSIONS=void 0,t.DEFAULT_VERSIONS={ISSUE:3,TRANSFER:3,REISSUE:3,BURN:3,EXCHANGE:3,LEASE:3,CANCEL_LEASE:3,ALIAS:3,MASS_TRANSFER:2,DATA:2,SET_SCRIPT:2,SPONSORSHIP:2,SET_ASSET_SCRIPT:2,INVOKE_SCRIPT:2,UPDATE_ASSET_INFO:1,INVOKE_EXPRESSION:1}},function(e,t,r){var n=r(1);e.exports=n.md=n.md||{},n.md.algorithms=n.md.algorithms||{}},function(e,t,r){"use strict";var n=this&&this.__read||function(e,t){var r="function"==typeof Symbol&&e[Symbol.iterator];if(!r)return e;var n,i,a=r.call(e),s=[];try{for(;(void 0===t||t-- >0)&&!(n=a.next()).done;)s.push(n.value)}catch(e){i={error:e}}finally{try{n&&!n.done&&(r=a.return)&&r.call(a)}finally{if(i)throw i.error}}return s},i=this&&this.__spread||function(){for(var e=[],t=0;t<arguments.length;t++)e=e.concat(n(arguments[t]));return e};Object.defineProperty(t,"__esModule",{value:!0});var a=r(12),s=r(97);t.stringToBytes=function(e,t){if(void 0===t&&(t="utf8"),"utf8"===t)return s.strToUtf8Array(e);if("raw"===t)return Uint8Array.from(i(e).map((function(e){return e.charCodeAt(0)})));throw new Error("Unsupported encoding "+t)},t.bytesToString=function(e,t){if(void 0===t&&(t="utf8"),"utf8"===t)return s.utf8ArrayToStr(Array.from(a._fromIn(e)));if("raw"===t)return Array.from(a._fromIn(e)).map((function(e){return String.fromCharCode(e)})).join("");throw new Error("Unsupported encoding "+t)},t.binaryStringToBytes=function(e){return Uint8Array.from(i(e).map((function(e){return e.charCodeAt(0)})))},t.bytesToBinaryString=function(e){return Array.from(a._fromIn(e)).map((function(e){return String.fromCharCode(e)})).join("")}},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=r(26),i=r(11),a=function(e){return"string"==typeof e||e instanceof String},s=function(e){return e instanceof Uint8Array};t._fromIn=function(e){return a(e)?n.base58Decode(e):s(e)?e:Uint8Array.from(e)},t._fromRawIn=function(e){return a(e)?i.stringToBytes(e):s(e)?e:Uint8Array.from(e)}},function(e,t,r){var n=r(1);r(32),r(60),r(95),r(3),n.random&&n.random.getBytes?e.exports=n.random:function(t){var r={},i=new Array(4),a=n.util.createBuffer();function s(){var e=n.prng.create(r);return e.getBytes=function(t,r){return e.generate(t,r)},e.getBytesSync=function(t){return e.generate(t)},e}r.formatKey=function(e){var t=n.util.createBuffer(e);return(e=new Array(4))[0]=t.getInt32(),e[1]=t.getInt32(),e[2]=t.getInt32(),e[3]=t.getInt32(),n.aes._expandKey(e,!1)},r.formatSeed=function(e){var t=n.util.createBuffer(e);return(e=new Array(4))[0]=t.getInt32(),e[1]=t.getInt32(),e[2]=t.getInt32(),e[3]=t.getInt32(),e},r.cipher=function(e,t){return n.aes._updateBlock(e,t,i,!1),a.putInt32(i[0]),a.putInt32(i[1]),a.putInt32(i[2]),a.putInt32(i[3]),a.getBytes()},r.increment=function(e){return++e[3],e},r.md=n.md.sha256;var o=s(),u=null,c=n.util.globalScope,l=c.crypto||c.msCrypto;if(l&&l.getRandomValues&&(u=function(e){return l.getRandomValues(e)}),n.options.usePureJavaScript||!n.util.isNodejs&&!u){if("undefined"==typeof window||window.document,o.collectInt(+new Date,32),"undefined"!=typeof navigator){var f="";for(var p in navigator)try{"string"==typeof navigator[p]&&(f+=navigator[p])}catch(e){}o.collect(f),f=null}t&&(t().mousemove((function(e){o.collectInt(e.clientX,16),o.collectInt(e.clientY,16)})),t().keypress((function(e){o.collectInt(e.charCode,8)})))}if(n.random)for(var p in o)n.random[p]=o[p];else n.random=o;n.random.createInstance=s,e.exports=n.random}("undefined"!=typeof jQuery?jQuery:null)},function(e,t,r){"use strict";(function(e){var n=t;function i(e,t,r){for(var n=Object.keys(t),i=0;i<n.length;++i)void 0!==e[n[i]]&&r||(e[n[i]]=t[n[i]]);return e}function a(e){function t(e,r){if(!(this instanceof t))return new t(e,r);Object.defineProperty(this,"message",{get:function(){return e}}),Error.captureStackTrace?Error.captureStackTrace(this,t):Object.defineProperty(this,"stack",{value:(new Error).stack||""}),r&&i(this,r)}return(t.prototype=Object.create(Error.prototype)).constructor=t,Object.defineProperty(t.prototype,"name",{get:function(){return e}}),t.prototype.toString=function(){return this.name+": "+this.message},t}n.asPromise=r(142),n.base64=r(143),n.EventEmitter=r(144),n.float=r(145),n.inquire=r(146),n.utf8=r(147),n.pool=r(148),n.LongBits=r(149),n.isNode=Boolean(void 0!==e&&e&&e.process&&e.process.versions&&e.process.versions.node),n.global=n.isNode&&e||"undefined"!=typeof window&&window||"undefined"!=typeof self&&self||this,n.emptyArray=Object.freeze?Object.freeze([]):[],n.emptyObject=Object.freeze?Object.freeze({}):{},n.isInteger=Number.isInteger||function(e){return"number"==typeof e&&isFinite(e)&&Math.floor(e)===e},n.isString=function(e){return"string"==typeof e||e instanceof String},n.isObject=function(e){return e&&"object"==typeof e},n.isset=n.isSet=function(e,t){var r=e[t];return!(null==r||!e.hasOwnProperty(t))&&("object"!=typeof r||(Array.isArray(r)?r.length:Object.keys(r).length)>0)},n.Buffer=function(){try{var e=n.inquire("buffer").Buffer;return e.prototype.utf8Write?e:null}catch(e){return null}}(),n._Buffer_from=null,n._Buffer_allocUnsafe=null,n.newBuffer=function(e){return"number"==typeof e?n.Buffer?n._Buffer_allocUnsafe(e):new n.Array(e):n.Buffer?n._Buffer_from(e):"undefined"==typeof Uint8Array?e:new Uint8Array(e)},n.Array="undefined"!=typeof Uint8Array?Uint8Array:Array,n.Long=n.global.dcodeIO&&n.global.dcodeIO.Long||n.global.Long||n.inquire("long"),n.key2Re=/^true|false|0|1$/,n.key32Re=/^-?(?:0|[1-9][0-9]*)$/,n.key64Re=/^(?:[\\x00-\\xff]{8}|-?(?:0|[1-9][0-9]*))$/,n.longToHash=function(e){return e?n.LongBits.from(e).toHash():n.LongBits.zeroHash},n.longFromHash=function(e,t){var r=n.LongBits.fromHash(e);return n.Long?n.Long.fromBits(r.lo,r.hi,t):r.toNumber(Boolean(t))},n.merge=i,n.lcFirst=function(e){return e.charAt(0).toLowerCase()+e.substring(1)},n.newError=a,n.ProtocolError=a("ProtocolError"),n.oneOfGetter=function(e){for(var t={},r=0;r<e.length;++r)t[e[r]]=1;return function(){for(var e=Object.keys(this),r=e.length-1;r>-1;--r)if(1===t[e[r]]&&void 0!==this[e[r]]&&null!==this[e[r]])return e[r]}},n.oneOfSetter=function(e){return function(t){for(var r=0;r<e.length;++r)e[r]!==t&&delete this[e[r]]}},n.toJSONOptions={longs:String,enums:String,bytes:String,json:!0},n._configure=function(){var e=n.Buffer;e?(n._Buffer_from=e.from!==Uint8Array.from&&e.from||function(t,r){return new e(t,r)},n._Buffer_allocUnsafe=e.allocUnsafe||function(t){return new e(t)}):n._Buffer_from=n._Buffer_allocUnsafe=null}}).call(this,r(17))},function(e,t,r){"use strict";var n=this&&this.__assign||function(){return(n=Object.assign||function(e){for(var t,r=1,n=arguments.length;r<n;r++)for(var i in t=arguments[r])Object.prototype.hasOwnProperty.call(t,i)&&(e[i]=t[i]);return e}).apply(this,arguments)},i=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});var a=i(r(158)),s=i(r(159)),o="function"==typeof fetch?fetch:r(160);function u(e){return e.text().then((function(t){return e.ok?s.default(t):Promise.reject(function(e){try{return JSON.parse(e)}catch(t){return e}}(t))}))}t.default=function(e){return o(a.default(e.url,e.base),function(e){void 0===e&&(e=Object.create(null));return n({credentials:"include"},e)}(e.options)).then(u)}},function(e,t,r){"use strict";(function(e){
/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <http://feross.org>
 * @license  MIT
 */
var n=r(31),i=r(90),a=r(91);function s(){return u.TYPED_ARRAY_SUPPORT?2147483647:1073741823}function o(e,t){if(s()<t)throw new RangeError("Invalid typed array length");return u.TYPED_ARRAY_SUPPORT?(e=new Uint8Array(t)).__proto__=u.prototype:(null===e&&(e=new u(t)),e.length=t),e}function u(e,t,r){if(!(u.TYPED_ARRAY_SUPPORT||this instanceof u))return new u(e,t,r);if("number"==typeof e){if("string"==typeof t)throw new Error("If encoding is specified then the first argument must be a string");return f(this,e)}return c(this,e,t,r)}function c(e,t,r,n){if("number"==typeof t)throw new TypeError('"value" argument must not be a number');return"undefined"!=typeof ArrayBuffer&&t instanceof ArrayBuffer?function(e,t,r,n){if(t.byteLength,r<0||t.byteLength<r)throw new RangeError("'offset' is out of bounds");if(t.byteLength<r+(n||0))throw new RangeError("'length' is out of bounds");t=void 0===r&&void 0===n?new Uint8Array(t):void 0===n?new Uint8Array(t,r):new Uint8Array(t,r,n);u.TYPED_ARRAY_SUPPORT?(e=t).__proto__=u.prototype:e=p(e,t);return e}(e,t,r,n):"string"==typeof t?function(e,t,r){"string"==typeof r&&""!==r||(r="utf8");if(!u.isEncoding(r))throw new TypeError('"encoding" must be a valid string encoding');var n=0|h(t,r),i=(e=o(e,n)).write(t,r);i!==n&&(e=e.slice(0,i));return e}(e,t,r):function(e,t){if(u.isBuffer(t)){var r=0|d(t.length);return 0===(e=o(e,r)).length||t.copy(e,0,0,r),e}if(t){if("undefined"!=typeof ArrayBuffer&&t.buffer instanceof ArrayBuffer||"length"in t)return"number"!=typeof t.length||(n=t.length)!=n?o(e,0):p(e,t);if("Buffer"===t.type&&a(t.data))return p(e,t.data)}var n;throw new TypeError("First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.")}(e,t)}function l(e){if("number"!=typeof e)throw new TypeError('"size" argument must be a number');if(e<0)throw new RangeError('"size" argument must not be negative')}function f(e,t){if(l(t),e=o(e,t<0?0:0|d(t)),!u.TYPED_ARRAY_SUPPORT)for(var r=0;r<t;++r)e[r]=0;return e}function p(e,t){var r=t.length<0?0:0|d(t.length);e=o(e,r);for(var n=0;n<r;n+=1)e[n]=255&t[n];return e}function d(e){if(e>=s())throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x"+s().toString(16)+" bytes");return 0|e}function h(e,t){if(u.isBuffer(e))return e.length;if("undefined"!=typeof ArrayBuffer&&"function"==typeof ArrayBuffer.isView&&(ArrayBuffer.isView(e)||e instanceof ArrayBuffer))return e.byteLength;"string"!=typeof e&&(e=""+e);var r=e.length;if(0===r)return 0;for(var n=!1;;)switch(t){case"ascii":case"latin1":case"binary":return r;case"utf8":case"utf-8":case void 0:return M(e).length;case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return 2*r;case"hex":return r>>>1;case"base64":return K(e).length;default:if(n)return M(e).length;t=(""+t).toLowerCase(),n=!0}}function y(e,t,r){var n=!1;if((void 0===t||t<0)&&(t=0),t>this.length)return"";if((void 0===r||r>this.length)&&(r=this.length),r<=0)return"";if((r>>>=0)<=(t>>>=0))return"";for(e||(e="utf8");;)switch(e){case"hex":return P(this,t,r);case"utf8":case"utf-8":return C(this,t,r);case"ascii":return B(this,t,r);case"latin1":case"binary":return k(this,t,r);case"base64":return I(this,t,r);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return O(this,t,r);default:if(n)throw new TypeError("Unknown encoding: "+e);e=(e+"").toLowerCase(),n=!0}}function g(e,t,r){var n=e[t];e[t]=e[r],e[r]=n}function v(e,t,r,n,i){if(0===e.length)return-1;if("string"==typeof r?(n=r,r=0):r>2147483647?r=2147483647:r<-2147483648&&(r=-2147483648),r=+r,isNaN(r)&&(r=i?0:e.length-1),r<0&&(r=e.length+r),r>=e.length){if(i)return-1;r=e.length-1}else if(r<0){if(!i)return-1;r=0}if("string"==typeof t&&(t=u.from(t,n)),u.isBuffer(t))return 0===t.length?-1:m(e,t,r,n,i);if("number"==typeof t)return t&=255,u.TYPED_ARRAY_SUPPORT&&"function"==typeof Uint8Array.prototype.indexOf?i?Uint8Array.prototype.indexOf.call(e,t,r):Uint8Array.prototype.lastIndexOf.call(e,t,r):m(e,[t],r,n,i);throw new TypeError("val must be string, number or Buffer")}function m(e,t,r,n,i){var a,s=1,o=e.length,u=t.length;if(void 0!==n&&("ucs2"===(n=String(n).toLowerCase())||"ucs-2"===n||"utf16le"===n||"utf-16le"===n)){if(e.length<2||t.length<2)return-1;s=2,o/=2,u/=2,r/=2}function c(e,t){return 1===s?e[t]:e.readUInt16BE(t*s)}if(i){var l=-1;for(a=r;a<o;a++)if(c(e,a)===c(t,-1===l?0:a-l)){if(-1===l&&(l=a),a-l+1===u)return l*s}else-1!==l&&(a-=a-l),l=-1}else for(r+u>o&&(r=o-u),a=r;a>=0;a--){for(var f=!0,p=0;p<u;p++)if(c(e,a+p)!==c(t,p)){f=!1;break}if(f)return a}return-1}function b(e,t,r,n){r=Number(r)||0;var i=e.length-r;n?(n=Number(n))>i&&(n=i):n=i;var a=t.length;if(a%2!=0)throw new TypeError("Invalid hex string");n>a/2&&(n=a/2);for(var s=0;s<n;++s){var o=parseInt(t.substr(2*s,2),16);if(isNaN(o))return s;e[r+s]=o}return s}function E(e,t,r,n){return F(M(t,e.length-r),e,r,n)}function S(e,t,r,n){return F(function(e){for(var t=[],r=0;r<e.length;++r)t.push(255&e.charCodeAt(r));return t}(t),e,r,n)}function T(e,t,r,n){return S(e,t,r,n)}function A(e,t,r,n){return F(K(t),e,r,n)}function w(e,t,r,n){return F(function(e,t){for(var r,n,i,a=[],s=0;s<e.length&&!((t-=2)<0);++s)r=e.charCodeAt(s),n=r>>8,i=r%256,a.push(i),a.push(n);return a}(t,e.length-r),e,r,n)}function I(e,t,r){return 0===t&&r===e.length?n.fromByteArray(e):n.fromByteArray(e.slice(t,r))}function C(e,t,r){r=Math.min(e.length,r);for(var n=[],i=t;i<r;){var a,s,o,u,c=e[i],l=null,f=c>239?4:c>223?3:c>191?2:1;if(i+f<=r)switch(f){case 1:c<128&&(l=c);break;case 2:128==(192&(a=e[i+1]))&&(u=(31&c)<<6|63&a)>127&&(l=u);break;case 3:a=e[i+1],s=e[i+2],128==(192&a)&&128==(192&s)&&(u=(15&c)<<12|(63&a)<<6|63&s)>2047&&(u<55296||u>57343)&&(l=u);break;case 4:a=e[i+1],s=e[i+2],o=e[i+3],128==(192&a)&&128==(192&s)&&128==(192&o)&&(u=(15&c)<<18|(63&a)<<12|(63&s)<<6|63&o)>65535&&u<1114112&&(l=u)}null===l?(l=65533,f=1):l>65535&&(l-=65536,n.push(l>>>10&1023|55296),l=56320|1023&l),n.push(l),i+=f}return function(e){var t=e.length;if(t<=4096)return String.fromCharCode.apply(String,e);var r="",n=0;for(;n<t;)r+=String.fromCharCode.apply(String,e.slice(n,n+=4096));return r}(n)}t.Buffer=u,t.SlowBuffer=function(e){+e!=e&&(e=0);return u.alloc(+e)},t.INSPECT_MAX_BYTES=50,u.TYPED_ARRAY_SUPPORT=void 0!==e.TYPED_ARRAY_SUPPORT?e.TYPED_ARRAY_SUPPORT:function(){try{var e=new Uint8Array(1);return e.__proto__={__proto__:Uint8Array.prototype,foo:function(){return 42}},42===e.foo()&&"function"==typeof e.subarray&&0===e.subarray(1,1).byteLength}catch(e){return!1}}(),t.kMaxLength=s(),u.poolSize=8192,u._augment=function(e){return e.__proto__=u.prototype,e},u.from=function(e,t,r){return c(null,e,t,r)},u.TYPED_ARRAY_SUPPORT&&(u.prototype.__proto__=Uint8Array.prototype,u.__proto__=Uint8Array,"undefined"!=typeof Symbol&&Symbol.species&&u[Symbol.species]===u&&Object.defineProperty(u,Symbol.species,{value:null,configurable:!0})),u.alloc=function(e,t,r){return function(e,t,r,n){return l(t),t<=0?o(e,t):void 0!==r?"string"==typeof n?o(e,t).fill(r,n):o(e,t).fill(r):o(e,t)}(null,e,t,r)},u.allocUnsafe=function(e){return f(null,e)},u.allocUnsafeSlow=function(e){return f(null,e)},u.isBuffer=function(e){return!(null==e||!e._isBuffer)},u.compare=function(e,t){if(!u.isBuffer(e)||!u.isBuffer(t))throw new TypeError("Arguments must be Buffers");if(e===t)return 0;for(var r=e.length,n=t.length,i=0,a=Math.min(r,n);i<a;++i)if(e[i]!==t[i]){r=e[i],n=t[i];break}return r<n?-1:n<r?1:0},u.isEncoding=function(e){switch(String(e).toLowerCase()){case"hex":case"utf8":case"utf-8":case"ascii":case"latin1":case"binary":case"base64":case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return!0;default:return!1}},u.concat=function(e,t){if(!a(e))throw new TypeError('"list" argument must be an Array of Buffers');if(0===e.length)return u.alloc(0);var r;if(void 0===t)for(t=0,r=0;r<e.length;++r)t+=e[r].length;var n=u.allocUnsafe(t),i=0;for(r=0;r<e.length;++r){var s=e[r];if(!u.isBuffer(s))throw new TypeError('"list" argument must be an Array of Buffers');s.copy(n,i),i+=s.length}return n},u.byteLength=h,u.prototype._isBuffer=!0,u.prototype.swap16=function(){var e=this.length;if(e%2!=0)throw new RangeError("Buffer size must be a multiple of 16-bits");for(var t=0;t<e;t+=2)g(this,t,t+1);return this},u.prototype.swap32=function(){var e=this.length;if(e%4!=0)throw new RangeError("Buffer size must be a multiple of 32-bits");for(var t=0;t<e;t+=4)g(this,t,t+3),g(this,t+1,t+2);return this},u.prototype.swap64=function(){var e=this.length;if(e%8!=0)throw new RangeError("Buffer size must be a multiple of 64-bits");for(var t=0;t<e;t+=8)g(this,t,t+7),g(this,t+1,t+6),g(this,t+2,t+5),g(this,t+3,t+4);return this},u.prototype.toString=function(){var e=0|this.length;return 0===e?"":0===arguments.length?C(this,0,e):y.apply(this,arguments)},u.prototype.equals=function(e){if(!u.isBuffer(e))throw new TypeError("Argument must be a Buffer");return this===e||0===u.compare(this,e)},u.prototype.inspect=function(){var e="",r=t.INSPECT_MAX_BYTES;return this.length>0&&(e=this.toString("hex",0,r).match(/.{2}/g).join(" "),this.length>r&&(e+=" ... ")),"<Buffer "+e+">"},u.prototype.compare=function(e,t,r,n,i){if(!u.isBuffer(e))throw new TypeError("Argument must be a Buffer");if(void 0===t&&(t=0),void 0===r&&(r=e?e.length:0),void 0===n&&(n=0),void 0===i&&(i=this.length),t<0||r>e.length||n<0||i>this.length)throw new RangeError("out of range index");if(n>=i&&t>=r)return 0;if(n>=i)return-1;if(t>=r)return 1;if(this===e)return 0;for(var a=(i>>>=0)-(n>>>=0),s=(r>>>=0)-(t>>>=0),o=Math.min(a,s),c=this.slice(n,i),l=e.slice(t,r),f=0;f<o;++f)if(c[f]!==l[f]){a=c[f],s=l[f];break}return a<s?-1:s<a?1:0},u.prototype.includes=function(e,t,r){return-1!==this.indexOf(e,t,r)},u.prototype.indexOf=function(e,t,r){return v(this,e,t,r,!0)},u.prototype.lastIndexOf=function(e,t,r){return v(this,e,t,r,!1)},u.prototype.write=function(e,t,r,n){if(void 0===t)n="utf8",r=this.length,t=0;else if(void 0===r&&"string"==typeof t)n=t,r=this.length,t=0;else{if(!isFinite(t))throw new Error("Buffer.write(string, encoding, offset[, length]) is no longer supported");t|=0,isFinite(r)?(r|=0,void 0===n&&(n="utf8")):(n=r,r=void 0)}var i=this.length-t;if((void 0===r||r>i)&&(r=i),e.length>0&&(r<0||t<0)||t>this.length)throw new RangeError("Attempt to write outside buffer bounds");n||(n="utf8");for(var a=!1;;)switch(n){case"hex":return b(this,e,t,r);case"utf8":case"utf-8":return E(this,e,t,r);case"ascii":return S(this,e,t,r);case"latin1":case"binary":return T(this,e,t,r);case"base64":return A(this,e,t,r);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return w(this,e,t,r);default:if(a)throw new TypeError("Unknown encoding: "+n);n=(""+n).toLowerCase(),a=!0}},u.prototype.toJSON=function(){return{type:"Buffer",data:Array.prototype.slice.call(this._arr||this,0)}};function B(e,t,r){var n="";r=Math.min(e.length,r);for(var i=t;i<r;++i)n+=String.fromCharCode(127&e[i]);return n}function k(e,t,r){var n="";r=Math.min(e.length,r);for(var i=t;i<r;++i)n+=String.fromCharCode(e[i]);return n}function P(e,t,r){var n=e.length;(!t||t<0)&&(t=0),(!r||r<0||r>n)&&(r=n);for(var i="",a=t;a<r;++a)i+=x(e[a]);return i}function O(e,t,r){for(var n=e.slice(t,r),i="",a=0;a<n.length;a+=2)i+=String.fromCharCode(n[a]+256*n[a+1]);return i}function N(e,t,r){if(e%1!=0||e<0)throw new RangeError("offset is not uint");if(e+t>r)throw new RangeError("Trying to access beyond buffer length")}function _(e,t,r,n,i,a){if(!u.isBuffer(e))throw new TypeError('"buffer" argument must be a Buffer instance');if(t>i||t<a)throw new RangeError('"value" argument is out of bounds');if(r+n>e.length)throw new RangeError("Index out of range")}function R(e,t,r,n){t<0&&(t=65535+t+1);for(var i=0,a=Math.min(e.length-r,2);i<a;++i)e[r+i]=(t&255<<8*(n?i:1-i))>>>8*(n?i:1-i)}function L(e,t,r,n){t<0&&(t=4294967295+t+1);for(var i=0,a=Math.min(e.length-r,4);i<a;++i)e[r+i]=t>>>8*(n?i:3-i)&255}function U(e,t,r,n,i,a){if(r+n>e.length)throw new RangeError("Index out of range");if(r<0)throw new RangeError("Index out of range")}function D(e,t,r,n,a){return a||U(e,0,r,4),i.write(e,t,r,n,23,4),r+4}function V(e,t,r,n,a){return a||U(e,0,r,8),i.write(e,t,r,n,52,8),r+8}u.prototype.slice=function(e,t){var r,n=this.length;if((e=~~e)<0?(e+=n)<0&&(e=0):e>n&&(e=n),(t=void 0===t?n:~~t)<0?(t+=n)<0&&(t=0):t>n&&(t=n),t<e&&(t=e),u.TYPED_ARRAY_SUPPORT)(r=this.subarray(e,t)).__proto__=u.prototype;else{var i=t-e;r=new u(i,void 0);for(var a=0;a<i;++a)r[a]=this[a+e]}return r},u.prototype.readUIntLE=function(e,t,r){e|=0,t|=0,r||N(e,t,this.length);for(var n=this[e],i=1,a=0;++a<t&&(i*=256);)n+=this[e+a]*i;return n},u.prototype.readUIntBE=function(e,t,r){e|=0,t|=0,r||N(e,t,this.length);for(var n=this[e+--t],i=1;t>0&&(i*=256);)n+=this[e+--t]*i;return n},u.prototype.readUInt8=function(e,t){return t||N(e,1,this.length),this[e]},u.prototype.readUInt16LE=function(e,t){return t||N(e,2,this.length),this[e]|this[e+1]<<8},u.prototype.readUInt16BE=function(e,t){return t||N(e,2,this.length),this[e]<<8|this[e+1]},u.prototype.readUInt32LE=function(e,t){return t||N(e,4,this.length),(this[e]|this[e+1]<<8|this[e+2]<<16)+16777216*this[e+3]},u.prototype.readUInt32BE=function(e,t){return t||N(e,4,this.length),16777216*this[e]+(this[e+1]<<16|this[e+2]<<8|this[e+3])},u.prototype.readIntLE=function(e,t,r){e|=0,t|=0,r||N(e,t,this.length);for(var n=this[e],i=1,a=0;++a<t&&(i*=256);)n+=this[e+a]*i;return n>=(i*=128)&&(n-=Math.pow(2,8*t)),n},u.prototype.readIntBE=function(e,t,r){e|=0,t|=0,r||N(e,t,this.length);for(var n=t,i=1,a=this[e+--n];n>0&&(i*=256);)a+=this[e+--n]*i;return a>=(i*=128)&&(a-=Math.pow(2,8*t)),a},u.prototype.readInt8=function(e,t){return t||N(e,1,this.length),128&this[e]?-1*(255-this[e]+1):this[e]},u.prototype.readInt16LE=function(e,t){t||N(e,2,this.length);var r=this[e]|this[e+1]<<8;return 32768&r?4294901760|r:r},u.prototype.readInt16BE=function(e,t){t||N(e,2,this.length);var r=this[e+1]|this[e]<<8;return 32768&r?4294901760|r:r},u.prototype.readInt32LE=function(e,t){return t||N(e,4,this.length),this[e]|this[e+1]<<8|this[e+2]<<16|this[e+3]<<24},u.prototype.readInt32BE=function(e,t){return t||N(e,4,this.length),this[e]<<24|this[e+1]<<16|this[e+2]<<8|this[e+3]},u.prototype.readFloatLE=function(e,t){return t||N(e,4,this.length),i.read(this,e,!0,23,4)},u.prototype.readFloatBE=function(e,t){return t||N(e,4,this.length),i.read(this,e,!1,23,4)},u.prototype.readDoubleLE=function(e,t){return t||N(e,8,this.length),i.read(this,e,!0,52,8)},u.prototype.readDoubleBE=function(e,t){return t||N(e,8,this.length),i.read(this,e,!1,52,8)},u.prototype.writeUIntLE=function(e,t,r,n){(e=+e,t|=0,r|=0,n)||_(this,e,t,r,Math.pow(2,8*r)-1,0);var i=1,a=0;for(this[t]=255&e;++a<r&&(i*=256);)this[t+a]=e/i&255;return t+r},u.prototype.writeUIntBE=function(e,t,r,n){(e=+e,t|=0,r|=0,n)||_(this,e,t,r,Math.pow(2,8*r)-1,0);var i=r-1,a=1;for(this[t+i]=255&e;--i>=0&&(a*=256);)this[t+i]=e/a&255;return t+r},u.prototype.writeUInt8=function(e,t,r){return e=+e,t|=0,r||_(this,e,t,1,255,0),u.TYPED_ARRAY_SUPPORT||(e=Math.floor(e)),this[t]=255&e,t+1},u.prototype.writeUInt16LE=function(e,t,r){return e=+e,t|=0,r||_(this,e,t,2,65535,0),u.TYPED_ARRAY_SUPPORT?(this[t]=255&e,this[t+1]=e>>>8):R(this,e,t,!0),t+2},u.prototype.writeUInt16BE=function(e,t,r){return e=+e,t|=0,r||_(this,e,t,2,65535,0),u.TYPED_ARRAY_SUPPORT?(this[t]=e>>>8,this[t+1]=255&e):R(this,e,t,!1),t+2},u.prototype.writeUInt32LE=function(e,t,r){return e=+e,t|=0,r||_(this,e,t,4,4294967295,0),u.TYPED_ARRAY_SUPPORT?(this[t+3]=e>>>24,this[t+2]=e>>>16,this[t+1]=e>>>8,this[t]=255&e):L(this,e,t,!0),t+4},u.prototype.writeUInt32BE=function(e,t,r){return e=+e,t|=0,r||_(this,e,t,4,4294967295,0),u.TYPED_ARRAY_SUPPORT?(this[t]=e>>>24,this[t+1]=e>>>16,this[t+2]=e>>>8,this[t+3]=255&e):L(this,e,t,!1),t+4},u.prototype.writeIntLE=function(e,t,r,n){if(e=+e,t|=0,!n){var i=Math.pow(2,8*r-1);_(this,e,t,r,i-1,-i)}var a=0,s=1,o=0;for(this[t]=255&e;++a<r&&(s*=256);)e<0&&0===o&&0!==this[t+a-1]&&(o=1),this[t+a]=(e/s>>0)-o&255;return t+r},u.prototype.writeIntBE=function(e,t,r,n){if(e=+e,t|=0,!n){var i=Math.pow(2,8*r-1);_(this,e,t,r,i-1,-i)}var a=r-1,s=1,o=0;for(this[t+a]=255&e;--a>=0&&(s*=256);)e<0&&0===o&&0!==this[t+a+1]&&(o=1),this[t+a]=(e/s>>0)-o&255;return t+r},u.prototype.writeInt8=function(e,t,r){return e=+e,t|=0,r||_(this,e,t,1,127,-128),u.TYPED_ARRAY_SUPPORT||(e=Math.floor(e)),e<0&&(e=255+e+1),this[t]=255&e,t+1},u.prototype.writeInt16LE=function(e,t,r){return e=+e,t|=0,r||_(this,e,t,2,32767,-32768),u.TYPED_ARRAY_SUPPORT?(this[t]=255&e,this[t+1]=e>>>8):R(this,e,t,!0),t+2},u.prototype.writeInt16BE=function(e,t,r){return e=+e,t|=0,r||_(this,e,t,2,32767,-32768),u.TYPED_ARRAY_SUPPORT?(this[t]=e>>>8,this[t+1]=255&e):R(this,e,t,!1),t+2},u.prototype.writeInt32LE=function(e,t,r){return e=+e,t|=0,r||_(this,e,t,4,2147483647,-2147483648),u.TYPED_ARRAY_SUPPORT?(this[t]=255&e,this[t+1]=e>>>8,this[t+2]=e>>>16,this[t+3]=e>>>24):L(this,e,t,!0),t+4},u.prototype.writeInt32BE=function(e,t,r){return e=+e,t|=0,r||_(this,e,t,4,2147483647,-2147483648),e<0&&(e=4294967295+e+1),u.TYPED_ARRAY_SUPPORT?(this[t]=e>>>24,this[t+1]=e>>>16,this[t+2]=e>>>8,this[t+3]=255&e):L(this,e,t,!1),t+4},u.prototype.writeFloatLE=function(e,t,r){return D(this,e,t,!0,r)},u.prototype.writeFloatBE=function(e,t,r){return D(this,e,t,!1,r)},u.prototype.writeDoubleLE=function(e,t,r){return V(this,e,t,!0,r)},u.prototype.writeDoubleBE=function(e,t,r){return V(this,e,t,!1,r)},u.prototype.copy=function(e,t,r,n){if(r||(r=0),n||0===n||(n=this.length),t>=e.length&&(t=e.length),t||(t=0),n>0&&n<r&&(n=r),n===r)return 0;if(0===e.length||0===this.length)return 0;if(t<0)throw new RangeError("targetStart out of bounds");if(r<0||r>=this.length)throw new RangeError("sourceStart out of bounds");if(n<0)throw new RangeError("sourceEnd out of bounds");n>this.length&&(n=this.length),e.length-t<n-r&&(n=e.length-t+r);var i,a=n-r;if(this===e&&r<t&&t<n)for(i=a-1;i>=0;--i)e[i+t]=this[i+r];else if(a<1e3||!u.TYPED_ARRAY_SUPPORT)for(i=0;i<a;++i)e[i+t]=this[i+r];else Uint8Array.prototype.set.call(e,this.subarray(r,r+a),t);return a},u.prototype.fill=function(e,t,r,n){if("string"==typeof e){if("string"==typeof t?(n=t,t=0,r=this.length):"string"==typeof r&&(n=r,r=this.length),1===e.length){var i=e.charCodeAt(0);i<256&&(e=i)}if(void 0!==n&&"string"!=typeof n)throw new TypeError("encoding must be a string");if("string"==typeof n&&!u.isEncoding(n))throw new TypeError("Unknown encoding: "+n)}else"number"==typeof e&&(e&=255);if(t<0||this.length<t||this.length<r)throw new RangeError("Out of range index");if(r<=t)return this;var a;if(t>>>=0,r=void 0===r?this.length:r>>>0,e||(e=0),"number"==typeof e)for(a=t;a<r;++a)this[a]=e;else{var s=u.isBuffer(e)?e:M(new u(e,n).toString()),o=s.length;for(a=0;a<r-t;++a)this[a+t]=s[a%o]}return this};var j=/[^+\/0-9A-Za-z-_]/g;function x(e){return e<16?"0"+e.toString(16):e.toString(16)}function M(e,t){var r;t=t||1/0;for(var n=e.length,i=null,a=[],s=0;s<n;++s){if((r=e.charCodeAt(s))>55295&&r<57344){if(!i){if(r>56319){(t-=3)>-1&&a.push(239,191,189);continue}if(s+1===n){(t-=3)>-1&&a.push(239,191,189);continue}i=r;continue}if(r<56320){(t-=3)>-1&&a.push(239,191,189),i=r;continue}r=65536+(i-55296<<10|r-56320)}else i&&(t-=3)>-1&&a.push(239,191,189);if(i=null,r<128){if((t-=1)<0)break;a.push(r)}else if(r<2048){if((t-=2)<0)break;a.push(r>>6|192,63&r|128)}else if(r<65536){if((t-=3)<0)break;a.push(r>>12|224,r>>6&63|128,63&r|128)}else{if(!(r<1114112))throw new Error("Invalid code point");if((t-=4)<0)break;a.push(r>>18|240,r>>12&63|128,r>>6&63|128,63&r|128)}}return a}function K(e){return n.toByteArray(function(e){if((e=function(e){return e.trim?e.trim():e.replace(/^\s+|\s+$/g,"")}(e).replace(j,"")).length<2)return"";for(;e.length%4!=0;)e+="=";return e}(e))}function F(e,t,r,n){for(var i=0;i<n&&!(i+r>=t.length||i>=e.length);++i)t[i+r]=e[i];return i}}).call(this,r(17))},function(e,t){var r;r=function(){return this}();try{r=r||new Function("return this")()}catch(e){"object"==typeof window&&(r=window)}e.exports=r},function(e,t,r){"use strict";var n=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var r in e)Object.hasOwnProperty.call(e,r)&&(t[r]=e[r]);return t.default=e,t};Object.defineProperty(t,"__esModule",{value:!0});var i=r(12),a=r(98),s=n(r(35)),o=n(r(10));r(60);var u=n(r(99)),c=r(11);t._hashChain=function(e){return i._fromIn(t.keccak(t.blake2b(i._fromIn(e))))},t.sha256=function(e){var t=o.algorithms.sha256.create();return t.update(c.bytesToString(e,"raw")),c.stringToBytes(t.digest().getBytes(),"raw")},t.blake2b=function(e){return u.blake2b(i._fromIn(e),null,32)},t.keccak=function(e){return i._fromIn(a.keccak256.array(i._fromIn(e)))},t.hmacSHA256=function(e,t){var r=s.create();return r.start("sha256",c.bytesToString(i._fromIn(t),"raw")),r.update(c.bytesToString(i._fromIn(e),"raw")),c.stringToBytes(r.digest().getBytes(),"raw")}},function(e,t,r){var n=r(1);r(3),r(20);var i=e.exports=n.asn1=n.asn1||{};function a(e,t,r){if(r>t){var n=new Error("Too few bytes to parse DER.");throw n.available=e.length(),n.remaining=t,n.requested=r,n}}i.Class={UNIVERSAL:0,APPLICATION:64,CONTEXT_SPECIFIC:128,PRIVATE:192},i.Type={NONE:0,BOOLEAN:1,INTEGER:2,BITSTRING:3,OCTETSTRING:4,NULL:5,OID:6,ODESC:7,EXTERNAL:8,REAL:9,ENUMERATED:10,EMBEDDED:11,UTF8:12,ROID:13,SEQUENCE:16,SET:17,PRINTABLESTRING:19,IA5STRING:22,UTCTIME:23,GENERALIZEDTIME:24,BMPSTRING:30},i.create=function(e,t,r,a,s){if(n.util.isArray(a)){for(var o=[],u=0;u<a.length;++u)void 0!==a[u]&&o.push(a[u]);a=o}var c={tagClass:e,type:t,constructed:r,composed:r||n.util.isArray(a),value:a};return s&&"bitStringContents"in s&&(c.bitStringContents=s.bitStringContents,c.original=i.copy(c)),c},i.copy=function(e,t){var r;if(n.util.isArray(e)){r=[];for(var a=0;a<e.length;++a)r.push(i.copy(e[a],t));return r}return"string"==typeof e?e:(r={tagClass:e.tagClass,type:e.type,constructed:e.constructed,composed:e.composed,value:i.copy(e.value,t)},t&&!t.excludeBitStringContents&&(r.bitStringContents=e.bitStringContents),r)},i.equals=function(e,t,r){if(n.util.isArray(e)){if(!n.util.isArray(t))return!1;if(e.length!==t.length)return!1;for(var a=0;a<e.length;++a)if(!i.equals(e[a],t[a]))return!1;return!0}if(typeof e!=typeof t)return!1;if("string"==typeof e)return e===t;var s=e.tagClass===t.tagClass&&e.type===t.type&&e.constructed===t.constructed&&e.composed===t.composed&&i.equals(e.value,t.value);return r&&r.includeBitStringContents&&(s=s&&e.bitStringContents===t.bitStringContents),s},i.getBerValueLength=function(e){var t=e.getByte();if(128!==t)return 128&t?e.getInt((127&t)<<3):t};i.fromDer=function(e,t){return void 0===t&&(t={strict:!0,decodeBitStrings:!0}),"boolean"==typeof t&&(t={strict:t,decodeBitStrings:!0}),"strict"in t||(t.strict=!0),"decodeBitStrings"in t||(t.decodeBitStrings=!0),"string"==typeof e&&(e=n.util.createBuffer(e)),function e(t,r,n,s){var o;a(t,r,2);var u=t.getByte();r--;var c=192&u,l=31&u;o=t.length();var f,p,d=function(e,t){var r=e.getByte();if(t--,128!==r){var n;if(128&r){var i=127&r;a(e,t,i),n=e.getInt(i<<3)}else n=r;if(n<0)throw new Error("Negative length: "+n);return n}}(t,r);if(r-=o-t.length(),void 0!==d&&d>r){if(s.strict){var h=new Error("Too few bytes to read ASN.1 value.");throw h.available=t.length(),h.remaining=r,h.requested=d,h}d=r}var y=32==(32&u);if(y)if(f=[],void 0===d)for(;;){if(a(t,r,2),t.bytes(2)===String.fromCharCode(0,0)){t.getBytes(2),r-=2;break}o=t.length(),f.push(e(t,r,n+1,s)),r-=o-t.length()}else for(;d>0;)o=t.length(),f.push(e(t,d,n+1,s)),r-=o-t.length(),d-=o-t.length();void 0===f&&c===i.Class.UNIVERSAL&&l===i.Type.BITSTRING&&(p=t.bytes(d));if(void 0===f&&s.decodeBitStrings&&c===i.Class.UNIVERSAL&&l===i.Type.BITSTRING&&d>1){var g=t.read,v=r,m=0;if(l===i.Type.BITSTRING&&(a(t,r,1),m=t.getByte(),r--),0===m)try{o=t.length();var b={verbose:s.verbose,strict:!0,decodeBitStrings:!0},E=e(t,r,n+1,b),S=o-t.length();r-=S,l==i.Type.BITSTRING&&S++;var T=E.tagClass;S!==d||T!==i.Class.UNIVERSAL&&T!==i.Class.CONTEXT_SPECIFIC||(f=[E])}catch(e){}void 0===f&&(t.read=g,r=v)}if(void 0===f){if(void 0===d){if(s.strict)throw new Error("Non-constructed ASN.1 object of indefinite length.");d=r}if(l===i.Type.BMPSTRING)for(f="";d>0;d-=2)a(t,r,2),f+=String.fromCharCode(t.getInt16()),r-=2;else f=t.getBytes(d)}var A=void 0===p?null:{bitStringContents:p};return i.create(c,l,y,f,A)}(e,e.length(),0,t)},i.toDer=function(e){var t=n.util.createBuffer(),r=e.tagClass|e.type,a=n.util.createBuffer(),s=!1;if("bitStringContents"in e&&(s=!0,e.original&&(s=i.equals(e,e.original))),s)a.putBytes(e.bitStringContents);else if(e.composed){e.constructed?r|=32:a.putByte(0);for(var o=0;o<e.value.length;++o)void 0!==e.value[o]&&a.putBuffer(i.toDer(e.value[o]))}else if(e.type===i.Type.BMPSTRING)for(o=0;o<e.value.length;++o)a.putInt16(e.value.charCodeAt(o));else e.type===i.Type.INTEGER&&e.value.length>1&&(0===e.value.charCodeAt(0)&&0==(128&e.value.charCodeAt(1))||255===e.value.charCodeAt(0)&&128==(128&e.value.charCodeAt(1)))?a.putBytes(e.value.substr(1)):a.putBytes(e.value);if(t.putByte(r),a.length()<=127)t.putByte(127&a.length());else{var u=a.length(),c="";do{c+=String.fromCharCode(255&u),u>>>=8}while(u>0);t.putByte(128|c.length);for(o=c.length-1;o>=0;--o)t.putByte(c.charCodeAt(o))}return t.putBuffer(a),t},i.oidToDer=function(e){var t,r,i,a,s=e.split("."),o=n.util.createBuffer();o.putByte(40*parseInt(s[0],10)+parseInt(s[1],10));for(var u=2;u<s.length;++u){t=!0,r=[],i=parseInt(s[u],10);do{a=127&i,i>>>=7,t||(a|=128),r.push(a),t=!1}while(i>0);for(var c=r.length-1;c>=0;--c)o.putByte(r[c])}return o},i.derToOid=function(e){var t;"string"==typeof e&&(e=n.util.createBuffer(e));var r=e.getByte();t=Math.floor(r/40)+"."+r%40;for(var i=0;e.length()>0;)i<<=7,128&(r=e.getByte())?i+=127&r:(t+="."+(i+r),i=0);return t},i.utcTimeToDate=function(e){var t=new Date,r=parseInt(e.substr(0,2),10);r=r>=50?1900+r:2e3+r;var n=parseInt(e.substr(2,2),10)-1,i=parseInt(e.substr(4,2),10),a=parseInt(e.substr(6,2),10),s=parseInt(e.substr(8,2),10),o=0;if(e.length>11){var u=e.charAt(10),c=10;"+"!==u&&"-"!==u&&(o=parseInt(e.substr(10,2),10),c+=2)}if(t.setUTCFullYear(r,n,i),t.setUTCHours(a,s,o,0),c&&("+"===(u=e.charAt(c))||"-"===u)){var l=60*parseInt(e.substr(c+1,2),10)+parseInt(e.substr(c+4,2),10);l*=6e4,"+"===u?t.setTime(+t-l):t.setTime(+t+l)}return t},i.generalizedTimeToDate=function(e){var t=new Date,r=parseInt(e.substr(0,4),10),n=parseInt(e.substr(4,2),10)-1,i=parseInt(e.substr(6,2),10),a=parseInt(e.substr(8,2),10),s=parseInt(e.substr(10,2),10),o=parseInt(e.substr(12,2),10),u=0,c=0,l=!1;"Z"===e.charAt(e.length-1)&&(l=!0);var f=e.length-5,p=e.charAt(f);"+"!==p&&"-"!==p||(c=60*parseInt(e.substr(f+1,2),10)+parseInt(e.substr(f+4,2),10),c*=6e4,"+"===p&&(c*=-1),l=!0);return"."===e.charAt(14)&&(u=1e3*parseFloat(e.substr(14),10)),l?(t.setUTCFullYear(r,n,i),t.setUTCHours(a,s,o,u),t.setTime(+t+c)):(t.setFullYear(r,n,i),t.setHours(a,s,o,u)),t},i.dateToUtcTime=function(e){if("string"==typeof e)return e;var t="",r=[];r.push((""+e.getUTCFullYear()).substr(2)),r.push(""+(e.getUTCMonth()+1)),r.push(""+e.getUTCDate()),r.push(""+e.getUTCHours()),r.push(""+e.getUTCMinutes()),r.push(""+e.getUTCSeconds());for(var n=0;n<r.length;++n)r[n].length<2&&(t+="0"),t+=r[n];return t+="Z"},i.dateToGeneralizedTime=function(e){if("string"==typeof e)return e;var t="",r=[];r.push(""+e.getUTCFullYear()),r.push(""+(e.getUTCMonth()+1)),r.push(""+e.getUTCDate()),r.push(""+e.getUTCHours()),r.push(""+e.getUTCMinutes()),r.push(""+e.getUTCSeconds());for(var n=0;n<r.length;++n)r[n].length<2&&(t+="0"),t+=r[n];return t+="Z"},i.integerToDer=function(e){var t=n.util.createBuffer();if(e>=-128&&e<128)return t.putSignedInt(e,8);if(e>=-32768&&e<32768)return t.putSignedInt(e,16);if(e>=-8388608&&e<8388608)return t.putSignedInt(e,24);if(e>=-2147483648&&e<2147483648)return t.putSignedInt(e,32);var r=new Error("Integer too large; max is 32-bits.");throw r.integer=e,r},i.derToInteger=function(e){"string"==typeof e&&(e=n.util.createBuffer(e));var t=8*e.length();if(t>32)throw new Error("Integer too large; max is 32-bits.");return e.getSignedInt(t)},i.validate=function(e,t,r,a){var s=!1;if(e.tagClass!==t.tagClass&&void 0!==t.tagClass||e.type!==t.type&&void 0!==t.type)a&&(e.tagClass!==t.tagClass&&a.push("["+t.name+'] Expected tag class "'+t.tagClass+'", got "'+e.tagClass+'"'),e.type!==t.type&&a.push("["+t.name+'] Expected type "'+t.type+'", got "'+e.type+'"'));else if(e.constructed===t.constructed||void 0===t.constructed){if(s=!0,t.value&&n.util.isArray(t.value))for(var o=0,u=0;s&&u<t.value.length;++u)s=t.value[u].optional||!1,e.value[o]&&((s=i.validate(e.value[o],t.value[u],r,a))?++o:t.value[u].optional&&(s=!0)),!s&&a&&a.push("["+t.name+'] Tag class "'+t.tagClass+'", type "'+t.type+'" expected value length "'+t.value.length+'", got "'+e.value.length+'"');if(s&&r)if(t.capture&&(r[t.capture]=e.value),t.captureAsn1&&(r[t.captureAsn1]=e),t.captureBitStringContents&&"bitStringContents"in e&&(r[t.captureBitStringContents]=e.bitStringContents),t.captureBitStringValue&&"bitStringContents"in e)if(e.bitStringContents.length<2)r[t.captureBitStringValue]="";else{if(0!==e.bitStringContents.charCodeAt(0))throw new Error("captureBitStringValue only supported for zero unused bits");r[t.captureBitStringValue]=e.bitStringContents.slice(1)}}else a&&a.push("["+t.name+'] Expected constructed "'+t.constructed+'", got "'+e.constructed+'"');return s};var s=/[^\\u0000-\\u00ff]/;i.prettyPrint=function(e,t,r){var a="";r=r||2,(t=t||0)>0&&(a+="\n");for(var o="",u=0;u<t*r;++u)o+=" ";switch(a+=o+"Tag: ",e.tagClass){case i.Class.UNIVERSAL:a+="Universal:";break;case i.Class.APPLICATION:a+="Application:";break;case i.Class.CONTEXT_SPECIFIC:a+="Context-Specific:";break;case i.Class.PRIVATE:a+="Private:"}if(e.tagClass===i.Class.UNIVERSAL)switch(a+=e.type,e.type){case i.Type.NONE:a+=" (None)";break;case i.Type.BOOLEAN:a+=" (Boolean)";break;case i.Type.INTEGER:a+=" (Integer)";break;case i.Type.BITSTRING:a+=" (Bit string)";break;case i.Type.OCTETSTRING:a+=" (Octet string)";break;case i.Type.NULL:a+=" (Null)";break;case i.Type.OID:a+=" (Object Identifier)";break;case i.Type.ODESC:a+=" (Object Descriptor)";break;case i.Type.EXTERNAL:a+=" (External or Instance of)";break;case i.Type.REAL:a+=" (Real)";break;case i.Type.ENUMERATED:a+=" (Enumerated)";break;case i.Type.EMBEDDED:a+=" (Embedded PDV)";break;case i.Type.UTF8:a+=" (UTF8)";break;case i.Type.ROID:a+=" (Relative Object Identifier)";break;case i.Type.SEQUENCE:a+=" (Sequence)";break;case i.Type.SET:a+=" (Set)";break;case i.Type.PRINTABLESTRING:a+=" (Printable String)";break;case i.Type.IA5String:a+=" (IA5String (ASCII))";break;case i.Type.UTCTIME:a+=" (UTC time)";break;case i.Type.GENERALIZEDTIME:a+=" (Generalized time)";break;case i.Type.BMPSTRING:a+=" (BMP String)"}else a+=e.type;if(a+="\n",a+=o+"Constructed: "+e.constructed+"\n",e.composed){var c=0,l="";for(u=0;u<e.value.length;++u)void 0!==e.value[u]&&(c+=1,l+=i.prettyPrint(e.value[u],t+1,r),u+1<e.value.length&&(l+=","));a+=o+"Sub values: "+c+l}else{if(a+=o+"Value: ",e.type===i.Type.OID){var f=i.derToOid(e.value);a+=f,n.pki&&n.pki.oids&&f in n.pki.oids&&(a+=" ("+n.pki.oids[f]+") ")}if(e.type===i.Type.INTEGER)try{a+=i.derToInteger(e.value)}catch(t){a+="0x"+n.util.bytesToHex(e.value)}else if(e.type===i.Type.BITSTRING){if(e.value.length>1?a+="0x"+n.util.bytesToHex(e.value.slice(1)):a+="(none)",e.value.length>0){var p=e.value.charCodeAt(0);1==p?a+=" (1 unused bit shown)":p>1&&(a+=" ("+p+" unused bits shown)")}}else e.type===i.Type.OCTETSTRING?(s.test(e.value)||(a+="("+e.value+") "),a+="0x"+n.util.bytesToHex(e.value)):e.type===i.Type.UTF8?a+=n.util.decodeUtf8(e.value):e.type===i.Type.PRINTABLESTRING||e.type===i.Type.IA5String?a+=e.value:s.test(e.value)?a+="0x"+n.util.bytesToHex(e.value):0===e.value.length?a+="[null]":a+=e.value}return a}},function(e,t,r){var n=r(1);n.pki=n.pki||{};var i=e.exports=n.pki.oids=n.oids=n.oids||{};function a(e,t){i[e]=t,i[t]=e}function s(e,t){i[e]=t}a("1.2.840.113549.1.1.1","rsaEncryption"),a("1.2.840.113549.1.1.4","md5WithRSAEncryption"),a("1.2.840.113549.1.1.5","sha1WithRSAEncryption"),a("1.2.840.113549.1.1.7","RSAES-OAEP"),a("1.2.840.113549.1.1.8","mgf1"),a("1.2.840.113549.1.1.9","pSpecified"),a("1.2.840.113549.1.1.10","RSASSA-PSS"),a("1.2.840.113549.1.1.11","sha256WithRSAEncryption"),a("1.2.840.113549.1.1.12","sha384WithRSAEncryption"),a("1.2.840.113549.1.1.13","sha512WithRSAEncryption"),a("1.2.840.10040.4.3","dsa-with-sha1"),a("1.3.14.3.2.7","desCBC"),a("1.3.14.3.2.26","sha1"),a("2.16.840.1.101.3.4.2.1","sha256"),a("2.16.840.1.101.3.4.2.2","sha384"),a("2.16.840.1.101.3.4.2.3","sha512"),a("1.2.840.113549.2.5","md5"),a("1.2.840.113549.1.7.1","data"),a("1.2.840.113549.1.7.2","signedData"),a("1.2.840.113549.1.7.3","envelopedData"),a("1.2.840.113549.1.7.4","signedAndEnvelopedData"),a("1.2.840.113549.1.7.5","digestedData"),a("1.2.840.113549.1.7.6","encryptedData"),a("1.2.840.113549.1.9.1","emailAddress"),a("1.2.840.113549.1.9.2","unstructuredName"),a("1.2.840.113549.1.9.3","contentType"),a("1.2.840.113549.1.9.4","messageDigest"),a("1.2.840.113549.1.9.5","signingTime"),a("1.2.840.113549.1.9.6","counterSignature"),a("1.2.840.113549.1.9.7","challengePassword"),a("1.2.840.113549.1.9.8","unstructuredAddress"),a("1.2.840.113549.1.9.14","extensionRequest"),a("1.2.840.113549.1.9.20","friendlyName"),a("1.2.840.113549.1.9.21","localKeyId"),a("1.2.840.113549.1.9.22.1","x509Certificate"),a("1.2.840.113549.1.12.10.1.1","keyBag"),a("1.2.840.113549.1.12.10.1.2","pkcs8ShroudedKeyBag"),a("1.2.840.113549.1.12.10.1.3","certBag"),a("1.2.840.113549.1.12.10.1.4","crlBag"),a("1.2.840.113549.1.12.10.1.5","secretBag"),a("1.2.840.113549.1.12.10.1.6","safeContentsBag"),a("1.2.840.113549.1.5.13","pkcs5PBES2"),a("1.2.840.113549.1.5.12","pkcs5PBKDF2"),a("1.2.840.113549.1.12.1.1","pbeWithSHAAnd128BitRC4"),a("1.2.840.113549.1.12.1.2","pbeWithSHAAnd40BitRC4"),a("1.2.840.113549.1.12.1.3","pbeWithSHAAnd3-KeyTripleDES-CBC"),a("1.2.840.113549.1.12.1.4","pbeWithSHAAnd2-KeyTripleDES-CBC"),a("1.2.840.113549.1.12.1.5","pbeWithSHAAnd128BitRC2-CBC"),a("1.2.840.113549.1.12.1.6","pbewithSHAAnd40BitRC2-CBC"),a("1.2.840.113549.2.7","hmacWithSHA1"),a("1.2.840.113549.2.8","hmacWithSHA224"),a("1.2.840.113549.2.9","hmacWithSHA256"),a("1.2.840.113549.2.10","hmacWithSHA384"),a("1.2.840.113549.2.11","hmacWithSHA512"),a("1.2.840.113549.3.7","des-EDE3-CBC"),a("2.16.840.1.101.3.4.1.2","aes128-CBC"),a("2.16.840.1.101.3.4.1.22","aes192-CBC"),a("2.16.840.1.101.3.4.1.42","aes256-CBC"),a("2.5.4.3","commonName"),a("2.5.4.5","serialName"),a("2.5.4.6","countryName"),a("2.5.4.7","localityName"),a("2.5.4.8","stateOrProvinceName"),a("2.5.4.10","organizationName"),a("2.5.4.11","organizationalUnitName"),a("2.5.4.13","description"),a("2.16.840.1.113730.1.1","nsCertType"),a("2.16.840.1.113730.1.13","nsComment"),s("2.5.29.1","authorityKeyIdentifier"),s("2.5.29.2","keyAttributes"),s("2.5.29.3","certificatePolicies"),s("2.5.29.4","keyUsageRestriction"),s("2.5.29.5","policyMapping"),s("2.5.29.6","subtreesConstraint"),s("2.5.29.7","subjectAltName"),s("2.5.29.8","issuerAltName"),s("2.5.29.9","subjectDirectoryAttributes"),s("2.5.29.10","basicConstraints"),s("2.5.29.11","nameConstraints"),s("2.5.29.12","policyConstraints"),s("2.5.29.13","basicConstraints"),a("2.5.29.14","subjectKeyIdentifier"),a("2.5.29.15","keyUsage"),s("2.5.29.16","privateKeyUsagePeriod"),a("2.5.29.17","subjectAltName"),a("2.5.29.18","issuerAltName"),a("2.5.29.19","basicConstraints"),s("2.5.29.20","cRLNumber"),s("2.5.29.21","cRLReason"),s("2.5.29.22","expirationDate"),s("2.5.29.23","instructionCode"),s("2.5.29.24","invalidityDate"),s("2.5.29.25","cRLDistributionPoints"),s("2.5.29.26","issuingDistributionPoint"),s("2.5.29.27","deltaCRLIndicator"),s("2.5.29.28","issuingDistributionPoint"),s("2.5.29.29","certificateIssuer"),s("2.5.29.30","nameConstraints"),a("2.5.29.31","cRLDistributionPoints"),a("2.5.29.32","certificatePolicies"),s("2.5.29.33","policyMappings"),s("2.5.29.34","policyConstraints"),a("2.5.29.35","authorityKeyIdentifier"),s("2.5.29.36","policyConstraints"),a("2.5.29.37","extKeyUsage"),s("2.5.29.46","freshestCRL"),s("2.5.29.54","inhibitAnyPolicy"),a("1.3.6.1.4.1.11129.2.4.2","timestampList"),a("1.3.6.1.5.5.7.1.1","authorityInfoAccess"),a("1.3.6.1.5.5.7.3.1","serverAuth"),a("1.3.6.1.5.5.7.3.2","clientAuth"),a("1.3.6.1.5.5.7.3.3","codeSigning"),a("1.3.6.1.5.5.7.3.4","emailProtection"),a("1.3.6.1.5.5.7.3.8","timeStamping")},function(e,t,r){"use strict";var n=this&&this.__read||function(e,t){var r="function"==typeof Symbol&&e[Symbol.iterator];if(!r)return e;var n,i,a=r.call(e),s=[];try{for(;(void 0===t||t-- >0)&&!(n=a.next()).done;)s.push(n.value)}catch(e){i={error:e}}finally{try{n&&!n.done&&(r=a.return)&&r.call(a)}finally{if(i)throw i.error}}return s},i=this&&this.__spread||function(){for(var e=[],t=0;t<arguments.length;t++)e=e.concat(n(arguments[t]));return e};Object.defineProperty(t,"__esModule",{value:!0});var a=r(12);t.concat=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];return e.reduce((function(e,t){return Uint8Array.from(i(e,a._fromIn(t)))}),new Uint8Array(0))},t.split=function(e){for(var t=[],r=1;r<arguments.length;r++)t[r-1]=arguments[r];var n=t.reduce((function(e,t){return{arr:e.arr.slice(t),r:i(e.r,[e.arr.slice(0,t)])}}),{arr:a._fromIn(e),r:[]}),s=n.r,o=n.arr;return i(s,[o])}},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.PUBLIC_KEY_LENGTH=32,t.PRIVATE_KEY_LENGTH=32,t.SIGNATURE_LENGTH=64,t.ADDRESS_LENGTH=26,t.MAIN_NET_CHAIN_ID=87,t.TEST_NET_CHAIN_ID=84},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(29),i=r(41),a=r(116),s=r(74);var o;!function(e){e[e.GENESIS=1]="GENESIS",e[e.PAYMENT=2]="PAYMENT",e[e.ISSUE=3]="ISSUE",e[e.TRANSFER=4]="TRANSFER",e[e.REISSUE=5]="REISSUE",e[e.BURN=6]="BURN",e[e.EXCHANGE=7]="EXCHANGE",e[e.LEASE=8]="LEASE",e[e.CANCEL_LEASE=9]="CANCEL_LEASE",e[e.ALIAS=10]="ALIAS",e[e.MASS_TRANSFER=11]="MASS_TRANSFER",e[e.DATA=12]="DATA",e[e.SET_SCRIPT=13]="SET_SCRIPT",e[e.SPONSORSHIP=14]="SPONSORSHIP",e[e.SET_ASSET_SCRIPT=15]="SET_ASSET_SCRIPT",e[e.INVOKE_SCRIPT=16]="INVOKE_SCRIPT"}(o=t.TRANSACTION_TYPE||(t.TRANSACTION_TYPE={}));const u={toBytes:n.SHORT,fromBytes:i.P_SHORT},c={toBytes:n.INT,fromBytes:i.P_INT};var l;!function(e){e.longField=e=>[e,{toBytes:n.LONG,fromBytes:i.P_LONG}],e.byteField=e=>[e,{toBytes:n.BYTE,fromBytes:i.P_BYTE}],e.booleanField=e=>[e,{toBytes:n.BOOL,fromBytes:i.P_BOOLEAN}],e.stringField=e=>[e,{toBytes:n.LEN(n.SHORT)(n.STRING),fromBytes:i.P_STRING_VAR(i.P_SHORT)}],e.base58field32=e=>[e,{toBytes:n.BASE58_STRING,fromBytes:i.P_BASE58_FIXED(32)}],e.base58Option32=e=>[e,{toBytes:e=>"WAVES"===e?n.OPTION(n.BASE58_STRING)(null):n.OPTION(n.BASE58_STRING)(e),fromBytes:i.P_OPTION(i.P_BASE58_FIXED(32))}],e.base64field=e=>[e,{toBytes:n.LEN(n.SHORT)(n.BASE64_STRING),fromBytes:i.P_BASE64(i.P_SHORT)}],e.byteConstant=e=>["noname",{toBytes:()=>Uint8Array.from([e]),fromBytes:()=>({value:void 0,shift:1})}],e.alias=["alias",{toBytes:n.LEN(n.SHORT)(n.STRING),fromBytes:i.byteNewAliasToString}],e.amount=e.longField("amount"),e.assetDescription=e.stringField("description"),e.assetId=e.base58field32("assetId"),e.assetName=e.stringField("name"),e.attachment=["attachment",{toBytes:n.LEN(n.SHORT)(n.BASE58_STRING),fromBytes:i.P_BASE58_VAR(i.P_SHORT)}],e.chainId=e.byteField("chainId"),e.decimals=e.byteField("decimals"),e.fee=e.longField("fee"),e.leaseAssetId=e.base58Option32("leaseAssetId"),e.leaseId=e.base58field32("leaseId"),e.optionalAssetId=e.base58Option32("assetId"),e.quantity=e.longField("quantity"),e.reissuable=e.booleanField("reissuable"),e.recipient=["recipient",{toBytes:n.ADDRESS_OR_ALIAS,fromBytes:i.byteToAddressOrAlias}],e.script=["script",{toBytes:n.SCRIPT,fromBytes:i.byteToScript}],e.senderPublicKey=e.base58field32("senderPublicKey"),e.signature=["signature",{toBytes:n.BASE58_STRING,fromBytes:i.P_BASE58_FIXED(64)}],e.timestamp=e.longField("timestamp"),e.type=e.byteField("type"),e.version=e.byteField("version"),e.proofs=["proofs",{type:"array",items:{toBytes:n.LEN(n.SHORT)(n.BASE58_STRING),fromBytes:i.P_BASE58_VAR(i.P_SHORT)}}];const t={type:"object",schema:[e.recipient,e.amount]};e.transfers=["transfers",{type:"array",items:t}];const r={type:"dataTxField",items:new Map([[a.DATA_FIELD_TYPE.INTEGER,{toBytes:n.LONG,fromBytes:i.P_LONG}],[a.DATA_FIELD_TYPE.BOOLEAN,{toBytes:n.BOOL,fromBytes:i.P_BOOLEAN}],[a.DATA_FIELD_TYPE.BINARY,{toBytes:n.LEN(n.SHORT)(n.BASE64_STRING),fromBytes:i.P_BASE64(i.P_SHORT)}],[a.DATA_FIELD_TYPE.STRING,{toBytes:n.LEN(n.SHORT)(n.STRING),fromBytes:i.P_STRING_VAR(i.P_SHORT)}]])};e.data=["data",{type:"array",items:r}];const s=[[0,{toBytes:n.LONG,fromBytes:i.P_LONG},"integer"],[1,{toBytes:n.LEN(n.INT)(n.BASE64_STRING),fromBytes:i.P_BASE64(i.P_INT)},"binary"],[2,{toBytes:n.LEN(n.INT)(n.STRING),fromBytes:i.P_STRING_VAR(i.P_INT)},"string"],[6,{toBytes:()=>Uint8Array.from([]),fromBytes:()=>({value:!0,shift:0})},"boolean"],[7,{toBytes:()=>Uint8Array.from([]),fromBytes:()=>({value:!1,shift:0})},"boolean"]],o=a.anyOf([...s,[11,{type:"array",toBytes:n.INT,fromBytes:i.P_INT,items:a.anyOf(s,{valueField:"value"})},"list"]],{valueField:"value"});e.functionCall=["call",{type:"object",optional:!0,schema:[e.byteConstant(9),e.byteConstant(1),["function",{toBytes:n.LEN(n.INT)(n.STRING),fromBytes:i.P_STRING_VAR(i.P_INT)}],["args",{type:"array",toBytes:n.INT,fromBytes:i.P_INT,items:o}]]}],e.payment={type:"object",withLength:u,schema:[e.amount,e.optionalAssetId]},e.payments=["payment",{type:"array",items:e.payment}]}(l=t.txFields||(t.txFields={})),t.orderSchemaV1={type:"object",schema:[l.senderPublicKey,l.base58field32("matcherPublicKey"),["assetPair",{type:"object",schema:[l.base58Option32("amountAsset"),l.base58Option32("priceAsset")]}],["orderType",{toBytes:e=>n.BYTE("sell"===e?1:0),fromBytes:(e,t=0)=>1===i.P_BYTE(e,t).value?{value:"sell",shift:1}:{value:"buy",shift:1}}],l.longField("price"),l.longField("amount"),l.timestamp,l.longField("expiration"),l.longField("matcherFee")]},t.orderSchemaV2={type:"object",schema:[l.version,...t.orderSchemaV1.schema]},t.orderSchemaV3={type:"object",schema:[...t.orderSchemaV2.schema,["matcherFeeAssetId",l.optionalAssetId[1]]]},t.aliasSchemaV2={type:"object",schema:[l.type,l.version,l.senderPublicKey,[["alias","chainId"],{type:"object",withLength:u,schema:[l.byteConstant(2),l.chainId,l.alias]}],l.fee,l.timestamp]},t.burnSchemaV2={type:"object",schema:[l.type,l.version,l.chainId,l.senderPublicKey,l.assetId,l.amount,l.fee,l.timestamp]},t.cancelLeaseSchemaV2={type:"object",schema:[l.type,l.version,l.chainId,l.senderPublicKey,l.fee,l.timestamp,l.leaseId]},t.invokeScriptSchemaV1={type:"object",schema:[l.type,l.version,l.chainId,l.senderPublicKey,["dApp",l.recipient[1]],l.functionCall,l.payments,l.fee,["feeAssetId",l.optionalAssetId[1]],l.timestamp]},t.dataSchemaV1={type:"object",schema:[l.type,l.version,l.senderPublicKey,l.data,l.timestamp,l.fee]},t.proofsSchemaV0={type:"object",schema:[["signature",{toBytes:n.BASE58_STRING,fromBytes:i.P_BASE58_FIXED(64)}]]},t.proofsSchemaV1={type:"object",schema:[l.byteConstant(1),l.proofs]};const f={type:"object",schema:[...t.orderSchemaV1.schema,l.signature]};t.exchangeSchemaV1={type:"object",schema:[l.type,["order1",{fromBytes:()=>({value:void 0,shift:4}),toBytes:e=>n.INT(s.serializerFromSchema(f)(e).length)}],["order2",{fromBytes:()=>({value:void 0,shift:4}),toBytes:e=>n.INT(s.serializerFromSchema(f)(e).length)}],["order1",f],["order2",f],l.longField("price"),l.longField("amount"),l.longField("buyMatcherFee"),l.longField("sellMatcherFee"),l.longField("fee"),l.longField("timestamp")]};const p=a.anyOf([[1,{type:"object",withLength:{toBytes:e=>n.INT(e-1),fromBytes:e=>{const{value:t,shift:r}=i.P_INT(e);return{value:t+1,shift:r}}},schema:[l.byteConstant(1),...t.orderSchemaV1.schema,...t.proofsSchemaV0.schema]}],[2,{type:"object",withLength:c,schema:[...t.orderSchemaV2.schema,...t.proofsSchemaV1.schema]}]],{discriminatorField:"version",discriminatorBytePos:4});t.exchangeSchemaV2={type:"object",schema:[l.byteConstant(0),l.type,l.version,["order1",p],["order2",p],l.longField("price"),l.longField("amount"),l.longField("buyMatcherFee"),l.longField("sellMatcherFee"),l.longField("fee"),l.longField("timestamp")]},t.issueSchemaV2={type:"object",schema:[l.type,l.version,l.chainId,l.senderPublicKey,l.assetName,l.assetDescription,l.quantity,l.decimals,l.reissuable,l.fee,l.timestamp,l.script]},t.leaseSchemaV2={type:"object",schema:[l.type,l.version,l.leaseAssetId,l.senderPublicKey,l.recipient,l.amount,l.fee,l.timestamp]},t.massTransferSchemaV1={type:"object",schema:[l.type,l.version,l.senderPublicKey,l.optionalAssetId,l.transfers,l.timestamp,l.fee,l.attachment]},t.reissueSchemaV2={type:"object",schema:[l.type,l.version,l.chainId,l.senderPublicKey,l.assetId,l.quantity,l.reissuable,l.fee,l.timestamp]},t.setAssetScriptSchemaV1={type:"object",schema:[l.type,l.version,l.chainId,l.senderPublicKey,l.assetId,l.fee,l.timestamp,l.script]},t.setScriptSchemaV1={type:"object",schema:[l.type,l.version,l.chainId,l.senderPublicKey,l.script,l.fee,l.timestamp]},t.sponsorshipSchemaV1={type:"object",schema:[l.type,l.version,l.senderPublicKey,l.assetId,l.longField("minSponsoredAssetFee"),l.fee,l.timestamp]},t.transferSchemaV2={type:"object",schema:[l.type,l.version,l.senderPublicKey,l.optionalAssetId,["feeAssetId",l.optionalAssetId[1]],l.timestamp,l.amount,l.fee,l.recipient,l.attachment]},t.schemasByTypeMap={[o.GENESIS]:{},[o.PAYMENT]:{},[o.ISSUE]:{2:t.issueSchemaV2},[o.TRANSFER]:{2:t.transferSchemaV2},[o.REISSUE]:{2:t.reissueSchemaV2},[o.BURN]:{2:t.burnSchemaV2},[o.EXCHANGE]:{1:t.exchangeSchemaV1,2:t.exchangeSchemaV2},[o.LEASE]:{2:t.leaseSchemaV2},[o.CANCEL_LEASE]:{2:t.cancelLeaseSchemaV2},[o.ALIAS]:{2:t.aliasSchemaV2},[o.MASS_TRANSFER]:{1:t.massTransferSchemaV1},[o.DATA]:{1:t.dataSchemaV1},[o.SET_SCRIPT]:{1:t.setScriptSchemaV1},[o.SPONSORSHIP]:{1:t.sponsorshipSchemaV1},[o.SET_ASSET_SCRIPT]:{1:t.setAssetScriptSchemaV1},[o.INVOKE_SCRIPT]:{1:t.invokeScriptSchemaV1}},t.orderVersionMap={1:t.orderSchemaV1,2:t.orderSchemaV2,3:t.orderSchemaV3},t.getTransactionSchema=function(e,r){const n=t.schemasByTypeMap[e];if("object"!=typeof n)throw new Error("Incorrect tx type: "+e);const i=n[r||1];if("object"!=typeof i)throw new Error("Incorrect tx version: "+r);return i}},function(e,t,r){"use strict";(function(e){var n=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});var i=n(r(13)),a=r(61),s=r(11),o=function(e){return s.stringToBytes(i.default.getBytesSync(e),"raw")};t.random=function(r,n){switch(n){case"Array8":return Array.from(o(r));case"Array16":return Array.from(t.random(r,"Uint16Array"));case"Array32":return Array.from(t.random(r,"Uint32Array"));case"Buffer":return function(){try{new e(1)}catch(e){throw new Error("Buffer not supported in this environment. Use Node.js or Browserify for browser support.")}}(),e.from(o(r));case"Uint8Array":return o(r);case"Uint16Array":return new Uint16Array(r).map((function(e){return o(2).reduce((function(e,t,r){return e|t<<8*(1-r)}),0)}));case"Uint32Array":return new Uint32Array(r).map((function(e){return o(4).reduce((function(e,t,r){return e|t<<8*(1-r)}),0)}));default:throw new Error(n+" is unsupported.")}},t.randomBytes=function(e){return t.random(e,"Uint8Array")},t.randomSeed=function(e){return void 0===e&&(e=15),t.random(e,"Array32").map((function(e){return a.seedWordsList[e%a.seedWordsList.length]})).join(" ")}}).call(this,r(16).Buffer)},function(e,t){var r,n,i=e.exports={};function a(){throw new Error("setTimeout has not been defined")}function s(){throw new Error("clearTimeout has not been defined")}function o(e){if(r===setTimeout)return setTimeout(e,0);if((r===a||!r)&&setTimeout)return r=setTimeout,setTimeout(e,0);try{return r(e,0)}catch(t){try{return r.call(null,e,0)}catch(t){return r.call(this,e,0)}}}!function(){try{r="function"==typeof setTimeout?setTimeout:a}catch(e){r=a}try{n="function"==typeof clearTimeout?clearTimeout:s}catch(e){n=s}}();var u,c=[],l=!1,f=-1;function p(){l&&u&&(l=!1,u.length?c=u.concat(c):f=-1,c.length&&d())}function d(){if(!l){var e=o(p);l=!0;for(var t=c.length;t;){for(u=c,c=[];++f<t;)u&&u[f].run();f=-1,t=c.length}u=null,l=!1,function(e){if(n===clearTimeout)return clearTimeout(e);if((n===s||!n)&&clearTimeout)return n=clearTimeout,clearTimeout(e);try{n(e)}catch(t){try{return n.call(null,e)}catch(t){return n.call(this,e)}}}(e)}}function h(e,t){this.fun=e,this.array=t}function y(){}i.nextTick=function(e){var t=new Array(arguments.length-1);if(arguments.length>1)for(var r=1;r<arguments.length;r++)t[r-1]=arguments[r];c.push(new h(e,t)),1!==c.length||l||o(d)},h.prototype.run=function(){this.fun.apply(null,this.array)},i.title="browser",i.browser=!0,i.env={},i.argv=[],i.version="",i.versions={},i.on=y,i.addListener=y,i.once=y,i.off=y,i.removeListener=y,i.removeAllListeners=y,i.emit=y,i.prependListener=y,i.prependOnceListener=y,i.listeners=function(e){return[]},i.binding=function(e){throw new Error("process.binding is not supported")},i.cwd=function(){return"/"},i.chdir=function(e){throw new Error("process.chdir is not supported")},i.umask=function(){return 0}},function(e,t,r){"use strict";var n=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});var i=r(3),a=n(r(96)),s=r(12),o=r(11);t.base64Decode=function(e){return o.stringToBytes(i.decode64(e),"raw")},t.base64Encode=function(e){return i.encode64(o.bytesToString(s._fromIn(e),"raw"))},t.base58Decode=function(e){return a.default.decode(e)},t.base58Encode=function(e){return a.default.encode(s._fromIn(e))},t.base16Decode=function(e){return o.stringToBytes(i.hexToBytes(e),"raw")},t.base16Encode=function(e){return i.bytesToHex(o.bytesToString(s._fromIn(e),"raw"))}},function(e,t,r){"use strict";t.__esModule=!0;var n=Object.create(null),i=function(e){var t,r=new Float64Array(16);if(e)for(t=0;t<e.length;t++)r[t]=e[t];return r},a=(new Uint8Array(16),new Uint8Array(32));a[0]=9;var s=i(),o=i([1]),u=i([56129,1]),c=i([30883,4953,19914,30187,55467,16705,2637,112,59544,30585,16505,36039,65139,11119,27886,20995]),l=i([61785,9906,39828,60374,45398,33411,5274,224,53552,61171,33010,6542,64743,22239,55772,9222]),f=i([54554,36645,11616,51542,42930,38181,51040,26924,56412,64982,57905,49316,21502,52590,14035,8553]),p=i([26200,26214,26214,26214,26214,26214,26214,26214,26214,26214,26214,26214,26214,26214,26214,26214]),d=i([41136,18958,6951,50414,58488,44335,6150,12099,55207,15867,153,11085,57099,20417,9344,11139]);function h(e,t,r,n){e[t]=r>>24&255,e[t+1]=r>>16&255,e[t+2]=r>>8&255,e[t+3]=255&r,e[t+4]=n>>24&255,e[t+5]=n>>16&255,e[t+6]=n>>8&255,e[t+7]=255&n}function y(e,t,r,n){return function(e,t,r,n,i){var a,s=0;for(a=0;a<i;a++)s|=e[t+a]^r[n+a];return(1&s-1>>>8)-1}(e,t,r,n,32)}function g(e,t){for(var r=0;r<16;r++)e[r]=0|t[r]}function v(e){var t,r,n=1;for(t=0;t<16;t++)r=e[t]+n+65535,n=Math.floor(r/65536),e[t]=r-65536*n;e[0]+=n-1+37*(n-1)}function m(e,t,r){for(var n,i=~(r-1),a=0;a<16;a++)n=i&(e[a]^t[a]),e[a]^=n,t[a]^=n}function b(e,t){var r,n,a,s=i(),o=i();for(r=0;r<16;r++)o[r]=t[r];for(v(o),v(o),v(o),n=0;n<2;n++){for(s[0]=o[0]-65517,r=1;r<15;r++)s[r]=o[r]-65535-(s[r-1]>>16&1),s[r-1]&=65535;s[15]=o[15]-32767-(s[14]>>16&1),a=s[15]>>16&1,s[14]&=65535,m(o,s,1-a)}for(r=0;r<16;r++)e[2*r]=255&o[r],e[2*r+1]=o[r]>>8}function E(e,t){var r=new Uint8Array(32),n=new Uint8Array(32);return b(r,e),b(n,t),y(r,0,n,0)}function S(e){var t=new Uint8Array(32);return b(t,e),1&t[0]}function T(e,t){for(var r=0;r<16;r++)e[r]=t[2*r]+(t[2*r+1]<<8);e[15]&=32767}function A(e,t,r){for(var n=0;n<16;n++)e[n]=t[n]+r[n]}function w(e,t,r){for(var n=0;n<16;n++)e[n]=t[n]-r[n]}function I(e,t,r){var n,i,a=0,s=0,o=0,u=0,c=0,l=0,f=0,p=0,d=0,h=0,y=0,g=0,v=0,m=0,b=0,E=0,S=0,T=0,A=0,w=0,I=0,C=0,B=0,k=0,P=0,O=0,N=0,_=0,R=0,L=0,U=0,D=r[0],V=r[1],j=r[2],x=r[3],M=r[4],K=r[5],F=r[6],q=r[7],Y=r[8],G=r[9],z=r[10],H=r[11],W=r[12],Q=r[13],X=r[14],J=r[15];a+=(n=t[0])*D,s+=n*V,o+=n*j,u+=n*x,c+=n*M,l+=n*K,f+=n*F,p+=n*q,d+=n*Y,h+=n*G,y+=n*z,g+=n*H,v+=n*W,m+=n*Q,b+=n*X,E+=n*J,s+=(n=t[1])*D,o+=n*V,u+=n*j,c+=n*x,l+=n*M,f+=n*K,p+=n*F,d+=n*q,h+=n*Y,y+=n*G,g+=n*z,v+=n*H,m+=n*W,b+=n*Q,E+=n*X,S+=n*J,o+=(n=t[2])*D,u+=n*V,c+=n*j,l+=n*x,f+=n*M,p+=n*K,d+=n*F,h+=n*q,y+=n*Y,g+=n*G,v+=n*z,m+=n*H,b+=n*W,E+=n*Q,S+=n*X,T+=n*J,u+=(n=t[3])*D,c+=n*V,l+=n*j,f+=n*x,p+=n*M,d+=n*K,h+=n*F,y+=n*q,g+=n*Y,v+=n*G,m+=n*z,b+=n*H,E+=n*W,S+=n*Q,T+=n*X,A+=n*J,c+=(n=t[4])*D,l+=n*V,f+=n*j,p+=n*x,d+=n*M,h+=n*K,y+=n*F,g+=n*q,v+=n*Y,m+=n*G,b+=n*z,E+=n*H,S+=n*W,T+=n*Q,A+=n*X,w+=n*J,l+=(n=t[5])*D,f+=n*V,p+=n*j,d+=n*x,h+=n*M,y+=n*K,g+=n*F,v+=n*q,m+=n*Y,b+=n*G,E+=n*z,S+=n*H,T+=n*W,A+=n*Q,w+=n*X,I+=n*J,f+=(n=t[6])*D,p+=n*V,d+=n*j,h+=n*x,y+=n*M,g+=n*K,v+=n*F,m+=n*q,b+=n*Y,E+=n*G,S+=n*z,T+=n*H,A+=n*W,w+=n*Q,I+=n*X,C+=n*J,p+=(n=t[7])*D,d+=n*V,h+=n*j,y+=n*x,g+=n*M,v+=n*K,m+=n*F,b+=n*q,E+=n*Y,S+=n*G,T+=n*z,A+=n*H,w+=n*W,I+=n*Q,C+=n*X,B+=n*J,d+=(n=t[8])*D,h+=n*V,y+=n*j,g+=n*x,v+=n*M,m+=n*K,b+=n*F,E+=n*q,S+=n*Y,T+=n*G,A+=n*z,w+=n*H,I+=n*W,C+=n*Q,B+=n*X,k+=n*J,h+=(n=t[9])*D,y+=n*V,g+=n*j,v+=n*x,m+=n*M,b+=n*K,E+=n*F,S+=n*q,T+=n*Y,A+=n*G,w+=n*z,I+=n*H,C+=n*W,B+=n*Q,k+=n*X,P+=n*J,y+=(n=t[10])*D,g+=n*V,v+=n*j,m+=n*x,b+=n*M,E+=n*K,S+=n*F,T+=n*q,A+=n*Y,w+=n*G,I+=n*z,C+=n*H,B+=n*W,k+=n*Q,P+=n*X,O+=n*J,g+=(n=t[11])*D,v+=n*V,m+=n*j,b+=n*x,E+=n*M,S+=n*K,T+=n*F,A+=n*q,w+=n*Y,I+=n*G,C+=n*z,B+=n*H,k+=n*W,P+=n*Q,O+=n*X,N+=n*J,v+=(n=t[12])*D,m+=n*V,b+=n*j,E+=n*x,S+=n*M,T+=n*K,A+=n*F,w+=n*q,I+=n*Y,C+=n*G,B+=n*z,k+=n*H,P+=n*W,O+=n*Q,N+=n*X,_+=n*J,m+=(n=t[13])*D,b+=n*V,E+=n*j,S+=n*x,T+=n*M,A+=n*K,w+=n*F,I+=n*q,C+=n*Y,B+=n*G,k+=n*z,P+=n*H,O+=n*W,N+=n*Q,_+=n*X,R+=n*J,b+=(n=t[14])*D,E+=n*V,S+=n*j,T+=n*x,A+=n*M,w+=n*K,I+=n*F,C+=n*q,B+=n*Y,k+=n*G,P+=n*z,O+=n*H,N+=n*W,_+=n*Q,R+=n*X,L+=n*J,E+=(n=t[15])*D,s+=38*(T+=n*j),o+=38*(A+=n*x),u+=38*(w+=n*M),c+=38*(I+=n*K),l+=38*(C+=n*F),f+=38*(B+=n*q),p+=38*(k+=n*Y),d+=38*(P+=n*G),h+=38*(O+=n*z),y+=38*(N+=n*H),g+=38*(_+=n*W),v+=38*(R+=n*Q),m+=38*(L+=n*X),b+=38*(U+=n*J),a=(n=(a+=38*(S+=n*V))+(i=1)+65535)-65536*(i=Math.floor(n/65536)),s=(n=s+i+65535)-65536*(i=Math.floor(n/65536)),o=(n=o+i+65535)-65536*(i=Math.floor(n/65536)),u=(n=u+i+65535)-65536*(i=Math.floor(n/65536)),c=(n=c+i+65535)-65536*(i=Math.floor(n/65536)),l=(n=l+i+65535)-65536*(i=Math.floor(n/65536)),f=(n=f+i+65535)-65536*(i=Math.floor(n/65536)),p=(n=p+i+65535)-65536*(i=Math.floor(n/65536)),d=(n=d+i+65535)-65536*(i=Math.floor(n/65536)),h=(n=h+i+65535)-65536*(i=Math.floor(n/65536)),y=(n=y+i+65535)-65536*(i=Math.floor(n/65536)),g=(n=g+i+65535)-65536*(i=Math.floor(n/65536)),v=(n=v+i+65535)-65536*(i=Math.floor(n/65536)),m=(n=m+i+65535)-65536*(i=Math.floor(n/65536)),b=(n=b+i+65535)-65536*(i=Math.floor(n/65536)),E=(n=E+i+65535)-65536*(i=Math.floor(n/65536)),a=(n=(a+=i-1+37*(i-1))+(i=1)+65535)-65536*(i=Math.floor(n/65536)),s=(n=s+i+65535)-65536*(i=Math.floor(n/65536)),o=(n=o+i+65535)-65536*(i=Math.floor(n/65536)),u=(n=u+i+65535)-65536*(i=Math.floor(n/65536)),c=(n=c+i+65535)-65536*(i=Math.floor(n/65536)),l=(n=l+i+65535)-65536*(i=Math.floor(n/65536)),f=(n=f+i+65535)-65536*(i=Math.floor(n/65536)),p=(n=p+i+65535)-65536*(i=Math.floor(n/65536)),d=(n=d+i+65535)-65536*(i=Math.floor(n/65536)),h=(n=h+i+65535)-65536*(i=Math.floor(n/65536)),y=(n=y+i+65535)-65536*(i=Math.floor(n/65536)),g=(n=g+i+65535)-65536*(i=Math.floor(n/65536)),v=(n=v+i+65535)-65536*(i=Math.floor(n/65536)),m=(n=m+i+65535)-65536*(i=Math.floor(n/65536)),b=(n=b+i+65535)-65536*(i=Math.floor(n/65536)),E=(n=E+i+65535)-65536*(i=Math.floor(n/65536)),a+=i-1+37*(i-1),e[0]=a,e[1]=s,e[2]=o,e[3]=u,e[4]=c,e[5]=l,e[6]=f,e[7]=p,e[8]=d,e[9]=h,e[10]=y,e[11]=g,e[12]=v,e[13]=m,e[14]=b,e[15]=E}function C(e,t){I(e,t,t)}function B(e,t){var r,n=i();for(r=0;r<16;r++)n[r]=t[r];for(r=253;r>=0;r--)C(n,n),2!==r&&4!==r&&I(n,n,t);for(r=0;r<16;r++)e[r]=n[r]}function k(e,t,r){var n,a,s=new Uint8Array(32),o=new Float64Array(80),c=i(),l=i(),f=i(),p=i(),d=i(),h=i();for(a=0;a<31;a++)s[a]=t[a];for(s[31]=127&t[31]|64,s[0]&=248,T(o,r),a=0;a<16;a++)l[a]=o[a],p[a]=c[a]=f[a]=0;for(c[0]=p[0]=1,a=254;a>=0;--a)m(c,l,n=s[a>>>3]>>>(7&a)&1),m(f,p,n),A(d,c,f),w(c,c,f),A(f,l,p),w(l,l,p),C(p,d),C(h,c),I(c,f,c),I(f,l,d),A(d,c,f),w(c,c,f),C(l,c),w(f,p,h),I(c,f,u),A(c,c,p),I(f,f,c),I(c,p,h),I(p,l,o),C(l,d),m(c,l,n),m(f,p,n);for(a=0;a<16;a++)o[a+16]=c[a],o[a+32]=f[a],o[a+48]=l[a],o[a+64]=p[a];var y=o.subarray(32),g=o.subarray(16);return B(y,y),I(g,g,y),b(e,g),0}var P=[1116352408,3609767458,1899447441,602891725,3049323471,3964484399,3921009573,2173295548,961987163,4081628472,1508970993,3053834265,2453635748,2937671579,2870763221,3664609560,3624381080,2734883394,310598401,1164996542,607225278,1323610764,1426881987,3590304994,1925078388,4068182383,2162078206,991336113,2614888103,633803317,3248222580,3479774868,3835390401,2666613458,4022224774,944711139,264347078,2341262773,604807628,2007800933,770255983,1495990901,1249150122,1856431235,1555081692,3175218132,1996064986,2198950837,2554220882,3999719339,2821834349,766784016,2952996808,2566594879,3210313671,3203337956,3336571891,1034457026,3584528711,2466948901,113926993,3758326383,338241895,168717936,666307205,1188179964,773529912,1546045734,1294757372,1522805485,1396182291,2643833823,1695183700,2343527390,1986661051,1014477480,2177026350,1206759142,2456956037,344077627,2730485921,1290863460,2820302411,3158454273,3259730800,3505952657,3345764771,106217008,3516065817,3606008344,3600352804,1432725776,4094571909,1467031594,275423344,851169720,430227734,3100823752,506948616,1363258195,659060556,3750685593,883997877,3785050280,958139571,3318307427,1322822218,3812723403,1537002063,2003034995,1747873779,3602036899,1955562222,1575990012,2024104815,1125592928,2227730452,2716904306,2361852424,442776044,2428436474,593698344,2756734187,3733110249,3204031479,2999351573,3329325298,3815920427,3391569614,3928383900,3515267271,566280711,3940187606,3454069534,4118630271,4000239992,116418474,1914138554,174292421,2731055270,289380356,3203993006,460393269,320620315,685471733,587496836,852142971,1086792851,1017036298,365543100,1126000580,2618297676,1288033470,3409855158,1501505948,4234509866,1607167915,987167468,1816402316,1246189591];function O(e,t,r,n){for(var i,a,s,o,u,c,l,f,p,d,h,y,g,v,m,b,E,S,T,A,w,I,C,B,k,O,N=new Int32Array(16),_=new Int32Array(16),R=e[0],L=e[1],U=e[2],D=e[3],V=e[4],j=e[5],x=e[6],M=e[7],K=t[0],F=t[1],q=t[2],Y=t[3],G=t[4],z=t[5],H=t[6],W=t[7],Q=0;n>=128;){for(T=0;T<16;T++)A=8*T+Q,N[T]=r[A+0]<<24|r[A+1]<<16|r[A+2]<<8|r[A+3],_[T]=r[A+4]<<24|r[A+5]<<16|r[A+6]<<8|r[A+7];for(T=0;T<80;T++)if(i=R,a=L,s=U,o=D,u=V,c=j,l=x,M,p=K,d=F,h=q,y=Y,g=G,v=z,m=H,W,C=65535&(I=W),B=I>>>16,k=65535&(w=M),O=w>>>16,C+=65535&(I=(G>>>14|V<<18)^(G>>>18|V<<14)^(V>>>9|G<<23)),B+=I>>>16,k+=65535&(w=(V>>>14|G<<18)^(V>>>18|G<<14)^(G>>>9|V<<23)),O+=w>>>16,C+=65535&(I=G&z^~G&H),B+=I>>>16,k+=65535&(w=V&j^~V&x),O+=w>>>16,C+=65535&(I=P[2*T+1]),B+=I>>>16,k+=65535&(w=P[2*T]),O+=w>>>16,w=N[T%16],B+=(I=_[T%16])>>>16,k+=65535&w,O+=w>>>16,k+=(B+=(C+=65535&I)>>>16)>>>16,C=65535&(I=S=65535&C|B<<16),B=I>>>16,k=65535&(w=E=65535&k|(O+=k>>>16)<<16),O=w>>>16,C+=65535&(I=(K>>>28|R<<4)^(R>>>2|K<<30)^(R>>>7|K<<25)),B+=I>>>16,k+=65535&(w=(R>>>28|K<<4)^(K>>>2|R<<30)^(K>>>7|R<<25)),O+=w>>>16,B+=(I=K&F^K&q^F&q)>>>16,k+=65535&(w=R&L^R&U^L&U),O+=w>>>16,f=65535&(k+=(B+=(C+=65535&I)>>>16)>>>16)|(O+=k>>>16)<<16,b=65535&C|B<<16,C=65535&(I=y),B=I>>>16,k=65535&(w=o),O=w>>>16,B+=(I=S)>>>16,k+=65535&(w=E),O+=w>>>16,L=i,U=a,D=s,V=o=65535&(k+=(B+=(C+=65535&I)>>>16)>>>16)|(O+=k>>>16)<<16,j=u,x=c,M=l,R=f,F=p,q=d,Y=h,G=y=65535&C|B<<16,z=g,H=v,W=m,K=b,T%16==15)for(A=0;A<16;A++)w=N[A],C=65535&(I=_[A]),B=I>>>16,k=65535&w,O=w>>>16,w=N[(A+9)%16],C+=65535&(I=_[(A+9)%16]),B+=I>>>16,k+=65535&w,O+=w>>>16,E=N[(A+1)%16],C+=65535&(I=((S=_[(A+1)%16])>>>1|E<<31)^(S>>>8|E<<24)^(S>>>7|E<<25)),B+=I>>>16,k+=65535&(w=(E>>>1|S<<31)^(E>>>8|S<<24)^E>>>7),O+=w>>>16,E=N[(A+14)%16],B+=(I=((S=_[(A+14)%16])>>>19|E<<13)^(E>>>29|S<<3)^(S>>>6|E<<26))>>>16,k+=65535&(w=(E>>>19|S<<13)^(S>>>29|E<<3)^E>>>6),O+=w>>>16,O+=(k+=(B+=(C+=65535&I)>>>16)>>>16)>>>16,N[A]=65535&k|O<<16,_[A]=65535&C|B<<16;C=65535&(I=K),B=I>>>16,k=65535&(w=R),O=w>>>16,w=e[0],B+=(I=t[0])>>>16,k+=65535&w,O+=w>>>16,O+=(k+=(B+=(C+=65535&I)>>>16)>>>16)>>>16,e[0]=R=65535&k|O<<16,t[0]=K=65535&C|B<<16,C=65535&(I=F),B=I>>>16,k=65535&(w=L),O=w>>>16,w=e[1],B+=(I=t[1])>>>16,k+=65535&w,O+=w>>>16,O+=(k+=(B+=(C+=65535&I)>>>16)>>>16)>>>16,e[1]=L=65535&k|O<<16,t[1]=F=65535&C|B<<16,C=65535&(I=q),B=I>>>16,k=65535&(w=U),O=w>>>16,w=e[2],B+=(I=t[2])>>>16,k+=65535&w,O+=w>>>16,O+=(k+=(B+=(C+=65535&I)>>>16)>>>16)>>>16,e[2]=U=65535&k|O<<16,t[2]=q=65535&C|B<<16,C=65535&(I=Y),B=I>>>16,k=65535&(w=D),O=w>>>16,w=e[3],B+=(I=t[3])>>>16,k+=65535&w,O+=w>>>16,O+=(k+=(B+=(C+=65535&I)>>>16)>>>16)>>>16,e[3]=D=65535&k|O<<16,t[3]=Y=65535&C|B<<16,C=65535&(I=G),B=I>>>16,k=65535&(w=V),O=w>>>16,w=e[4],B+=(I=t[4])>>>16,k+=65535&w,O+=w>>>16,O+=(k+=(B+=(C+=65535&I)>>>16)>>>16)>>>16,e[4]=V=65535&k|O<<16,t[4]=G=65535&C|B<<16,C=65535&(I=z),B=I>>>16,k=65535&(w=j),O=w>>>16,w=e[5],B+=(I=t[5])>>>16,k+=65535&w,O+=w>>>16,O+=(k+=(B+=(C+=65535&I)>>>16)>>>16)>>>16,e[5]=j=65535&k|O<<16,t[5]=z=65535&C|B<<16,C=65535&(I=H),B=I>>>16,k=65535&(w=x),O=w>>>16,w=e[6],B+=(I=t[6])>>>16,k+=65535&w,O+=w>>>16,O+=(k+=(B+=(C+=65535&I)>>>16)>>>16)>>>16,e[6]=x=65535&k|O<<16,t[6]=H=65535&C|B<<16,C=65535&(I=W),B=I>>>16,k=65535&(w=M),O=w>>>16,w=e[7],B+=(I=t[7])>>>16,k+=65535&w,O+=w>>>16,O+=(k+=(B+=(C+=65535&I)>>>16)>>>16)>>>16,e[7]=M=65535&k|O<<16,t[7]=W=65535&C|B<<16,Q+=128,n-=128}return n}function N(e,t,r){var n,i=new Int32Array(8),a=new Int32Array(8),s=new Uint8Array(256),o=r;for(i[0]=1779033703,i[1]=3144134277,i[2]=1013904242,i[3]=2773480762,i[4]=1359893119,i[5]=2600822924,i[6]=528734635,i[7]=1541459225,a[0]=4089235720,a[1]=2227873595,a[2]=4271175723,a[3]=1595750129,a[4]=2917565137,a[5]=725511199,a[6]=4215389547,a[7]=327033209,O(i,a,t,r),r%=128,n=0;n<r;n++)s[n]=t[o-r+n];for(s[r]=128,s[(r=256-128*(r<112?1:0))-9]=0,h(s,r-8,o/536870912|0,o<<3),O(i,a,s,r),n=0;n<8;n++)h(e,8*n,i[n],a[n]);return 0}function _(e,t){var r=i(),n=i(),a=i(),s=i(),o=i(),u=i(),c=i(),f=i(),p=i();w(r,e[1],e[0]),w(p,t[1],t[0]),I(r,r,p),A(n,e[0],e[1]),A(p,t[0],t[1]),I(n,n,p),I(a,e[3],t[3]),I(a,a,l),I(s,e[2],t[2]),A(s,s,s),w(o,n,r),w(u,s,a),A(c,s,a),A(f,n,r),I(e[0],o,u),I(e[1],f,c),I(e[2],c,u),I(e[3],o,f)}function R(e,t,r){for(var n=0;n<4;n++)m(e[n],t[n],r)}function L(e,t){var r=i(),n=i(),a=i();B(a,t[2]),I(r,t[0],a),I(n,t[1],a),b(e,n),e[31]^=S(r)<<7}function U(e,t,r){var n,i;for(g(e[0],s),g(e[1],o),g(e[2],o),g(e[3],s),i=255;i>=0;--i)R(e,t,n=r[i/8|0]>>(7&i)&1),_(t,e),_(e,e),R(e,t,n)}function D(e,t){var r=[i(),i(),i(),i()];g(r[0],f),g(r[1],p),g(r[2],o),I(r[3],f,p),U(e,r,t)}var V=new Float64Array([237,211,245,92,26,99,18,88,214,156,247,162,222,249,222,20,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16]);function j(e,t){var r,n,i,a;for(n=63;n>=32;--n){for(r=0,i=n-32,a=n-12;i<a;++i)t[i]+=r-16*t[n]*V[i-(n-32)],r=t[i]+128>>8,t[i]-=256*r;t[i]+=r,t[n]=0}for(r=0,i=0;i<32;i++)t[i]+=r-(t[31]>>4)*V[i],r=t[i]>>8,t[i]&=255;for(i=0;i<32;i++)t[i]-=r*V[i];for(n=0;n<32;n++)t[n+1]+=t[n]>>8,e[n]=255&t[n]}function x(e){var t,r=new Float64Array(64);for(t=0;t<64;t++)r[t]=e[t];for(t=0;t<64;t++)e[t]=0;j(e,r)}function M(e,t,r,n,a){for(var s=new Uint8Array(64),o=[i(),i(),i(),i()],u=0;u<32;u++)s[u]=n[u];s[0]&=248,s[31]&=127,s[31]|=64,D(o,s),L(s.subarray(32),o);var c,l=128&s[63];return c=a?function(e,t,r,n,a){new Uint8Array(64);var s,o,u=new Uint8Array(64),c=new Uint8Array(64),l=new Float64Array(64),f=[i(),i(),i(),i()];for(e[0]=254,s=1;s<32;s++)e[s]=255;for(s=0;s<32;s++)e[32+s]=n[s];for(s=0;s<r;s++)e[64+s]=t[s];for(s=0;s<64;s++)e[r+64+s]=a[s];for(N(c,e,r+128),x(c),D(f,c),L(e,f),s=0;s<32;s++)e[s+32]=n[32+s];for(N(u,e,r+64),x(u),s=0;s<64;s++)e[r+64+s]=0;for(s=0;s<64;s++)l[s]=0;for(s=0;s<32;s++)l[s]=c[s];for(s=0;s<32;s++)for(o=0;o<32;o++)l[s+o]+=u[s]*n[o];return j(e.subarray(32,r+64),l),r+64}(e,t,r,s,a):function(e,t,r,n){new Uint8Array(64);var a,s,o=new Uint8Array(64),u=new Uint8Array(64),c=new Float64Array(64),l=[i(),i(),i(),i()];for(a=0;a<r;a++)e[64+a]=t[a];for(a=0;a<32;a++)e[32+a]=n[a];for(N(u,e.subarray(32),r+32),x(u),D(l,u),L(e,l),a=0;a<32;a++)e[a+32]=n[32+a];for(N(o,e,r+64),x(o),a=0;a<64;a++)c[a]=0;for(a=0;a<32;a++)c[a]=u[a];for(a=0;a<32;a++)for(s=0;s<32;s++)c[a+s]+=o[a]*n[s];return j(e.subarray(32),c),r+64}(e,t,r,s),e[63]|=l,c}function K(e,t){var r=i(),n=i(),a=i(),u=i(),l=i(),f=i(),p=i();return g(e[2],o),T(e[1],t),C(a,e[1]),I(u,a,c),w(a,a,e[2]),A(u,e[2],u),C(l,u),C(f,l),I(p,f,l),I(r,p,a),I(r,r,u),function(e,t){var r,n=i();for(r=0;r<16;r++)n[r]=t[r];for(r=250;r>=0;r--)C(n,n),1!==r&&I(n,n,t);for(r=0;r<16;r++)e[r]=n[r]}(r,r),I(r,r,a),I(r,r,u),I(r,r,u),I(e[0],r,u),C(n,e[0]),I(n,n,u),E(n,a)&&I(e[0],e[0],d),C(n,e[0]),I(n,n,u),E(n,a)?-1:(S(e[0])===t[31]>>7&&w(e[0],s,e[0]),I(e[3],e[0],e[1]),0)}function F(e,t,r,n){var a=function(e){var t=new Uint8Array(32),r=i(),n=i(),a=i();return T(r,e),A(n,r,o),w(a,r,o),B(n,n),I(n,n,a),b(t,n),t}(n);return a[31]|=128&t[63],t[63]&=127,function(e,t,r,n){var a,s=new Uint8Array(32),o=new Uint8Array(64),u=[i(),i(),i(),i()],c=[i(),i(),i(),i()];if(-1,r<64)return-1;if(K(c,n))return-1;for(a=0;a<r;a++)e[a]=t[a];for(a=0;a<32;a++)e[a+32]=n[a];if(N(o,e,r),x(o),U(u,c,o),D(c,t.subarray(32)),_(u,c),L(s,u),r-=64,y(t,0,s,0)){for(a=0;a<r;a++)e[a]=0;return-1}for(a=0;a<r;a++)e[a]=t[a+64];return r}(e,t,r,a)}function q(){for(var e,t,r=[],n=0;n<arguments.length;n++)r[n]=arguments[n];for(t=0;t<arguments.length;t++)if("[object Uint8Array]"!==(e=Object.prototype.toString.call(arguments[t])))throw new TypeError("unexpected type "+e+", use Uint8Array")}n.sharedKey=function(e,t){if(q(t,e),32!==t.length)throw new Error("wrong public key length");if(32!==e.length)throw new Error("wrong secret key length");var r=new Uint8Array(32);return k(r,e,t),r},n.signMessage=function(e,t,r){if(q(t,e),32!==e.length)throw new Error("wrong secret key length");if(r){if(q(r),64!==r.length)throw new Error("wrong random data length");var n=new Uint8Array(128+t.length);return M(n,t,t.length,e,r),new Uint8Array(n.subarray(0,64+t.length))}var i=new Uint8Array(64+t.length);return M(i,t,t.length,e),i},n.openMessage=function(e,t){if(q(t,e),32!==e.length)throw new Error("wrong public key length");var r=new Uint8Array(t.length),n=F(r,t,t.length,e);if(n<0)return null;for(var i=new Uint8Array(n),a=0;a<i.length;a++)i[a]=r[a];return i},n.sign=function(e,t,r){if(q(e,t),32!==e.length)throw new Error("wrong secret key length");if(r&&(q(r),64!==r.length))throw new Error("wrong random data length");var n=new Uint8Array((r?128:64)+t.length);M(n,t,t.length,e,r);for(var i=new Uint8Array(64),a=0;a<i.length;a++)i[a]=n[a];return i},n.verify=function(e,t,r){if(q(t,r,e),64!==r.length)throw new Error("wrong signature length");if(32!==e.length)throw new Error("wrong public key length");var n,i=new Uint8Array(64+t.length),a=new Uint8Array(64+t.length);for(n=0;n<64;n++)i[n]=r[n];for(n=0;n<t.length;n++)i[n+64]=t[n];return F(a,i,i.length,e)>=0},n.generateKeyPair=function(e){if(q(e),32!==e.length)throw new Error("wrong seed length");for(var t=new Uint8Array(32),r=new Uint8Array(32),n=0;n<32;n++)t[n]=e[n];return k(r,t,a),t[0]&=248,t[31]&=127,t[31]|=64,r[31]&=127,{public:r,private:t}},t.default=n},function(e,t,r){var n=r(1);if(r(19),r(68),r(20),r(105),r(106),r(13),r(3),void 0===i)var i=n.jsbn.BigInteger;var a=n.util.isNodejs?r(34):null,s=n.asn1,o=n.util;n.pki=n.pki||{},e.exports=n.pki.rsa=n.rsa=n.rsa||{};var u=n.pki,c=[6,4,2,4,2,4,6,2],l={name:"PrivateKeyInfo",tagClass:s.Class.UNIVERSAL,type:s.Type.SEQUENCE,constructed:!0,value:[{name:"PrivateKeyInfo.version",tagClass:s.Class.UNIVERSAL,type:s.Type.INTEGER,constructed:!1,capture:"privateKeyVersion"},{name:"PrivateKeyInfo.privateKeyAlgorithm",tagClass:s.Class.UNIVERSAL,type:s.Type.SEQUENCE,constructed:!0,value:[{name:"AlgorithmIdentifier.algorithm",tagClass:s.Class.UNIVERSAL,type:s.Type.OID,constructed:!1,capture:"privateKeyOid"}]},{name:"PrivateKeyInfo",tagClass:s.Class.UNIVERSAL,type:s.Type.OCTETSTRING,constructed:!1,capture:"privateKey"}]},f={name:"RSAPrivateKey",tagClass:s.Class.UNIVERSAL,type:s.Type.SEQUENCE,constructed:!0,value:[{name:"RSAPrivateKey.version",tagClass:s.Class.UNIVERSAL,type:s.Type.INTEGER,constructed:!1,capture:"privateKeyVersion"},{name:"RSAPrivateKey.modulus",tagClass:s.Class.UNIVERSAL,type:s.Type.INTEGER,constructed:!1,capture:"privateKeyModulus"},{name:"RSAPrivateKey.publicExponent",tagClass:s.Class.UNIVERSAL,type:s.Type.INTEGER,constructed:!1,capture:"privateKeyPublicExponent"},{name:"RSAPrivateKey.privateExponent",tagClass:s.Class.UNIVERSAL,type:s.Type.INTEGER,constructed:!1,capture:"privateKeyPrivateExponent"},{name:"RSAPrivateKey.prime1",tagClass:s.Class.UNIVERSAL,type:s.Type.INTEGER,constructed:!1,capture:"privateKeyPrime1"},{name:"RSAPrivateKey.prime2",tagClass:s.Class.UNIVERSAL,type:s.Type.INTEGER,constructed:!1,capture:"privateKeyPrime2"},{name:"RSAPrivateKey.exponent1",tagClass:s.Class.UNIVERSAL,type:s.Type.INTEGER,constructed:!1,capture:"privateKeyExponent1"},{name:"RSAPrivateKey.exponent2",tagClass:s.Class.UNIVERSAL,type:s.Type.INTEGER,constructed:!1,capture:"privateKeyExponent2"},{name:"RSAPrivateKey.coefficient",tagClass:s.Class.UNIVERSAL,type:s.Type.INTEGER,constructed:!1,capture:"privateKeyCoefficient"}]},p={name:"RSAPublicKey",tagClass:s.Class.UNIVERSAL,type:s.Type.SEQUENCE,constructed:!0,value:[{name:"RSAPublicKey.modulus",tagClass:s.Class.UNIVERSAL,type:s.Type.INTEGER,constructed:!1,capture:"publicKeyModulus"},{name:"RSAPublicKey.exponent",tagClass:s.Class.UNIVERSAL,type:s.Type.INTEGER,constructed:!1,capture:"publicKeyExponent"}]},d=n.pki.rsa.publicKeyValidator={name:"SubjectPublicKeyInfo",tagClass:s.Class.UNIVERSAL,type:s.Type.SEQUENCE,constructed:!0,captureAsn1:"subjectPublicKeyInfo",value:[{name:"SubjectPublicKeyInfo.AlgorithmIdentifier",tagClass:s.Class.UNIVERSAL,type:s.Type.SEQUENCE,constructed:!0,value:[{name:"AlgorithmIdentifier.algorithm",tagClass:s.Class.UNIVERSAL,type:s.Type.OID,constructed:!1,capture:"publicKeyOid"}]},{name:"SubjectPublicKeyInfo.subjectPublicKey",tagClass:s.Class.UNIVERSAL,type:s.Type.BITSTRING,constructed:!1,value:[{name:"SubjectPublicKeyInfo.subjectPublicKey.RSAPublicKey",tagClass:s.Class.UNIVERSAL,type:s.Type.SEQUENCE,constructed:!0,optional:!0,captureAsn1:"rsaPublicKey"}]}]},h=function(e){var t;if(!(e.algorithm in u.oids)){var r=new Error("Unknown message digest algorithm.");throw r.algorithm=e.algorithm,r}t=u.oids[e.algorithm];var n=s.oidToDer(t).getBytes(),i=s.create(s.Class.UNIVERSAL,s.Type.SEQUENCE,!0,[]),a=s.create(s.Class.UNIVERSAL,s.Type.SEQUENCE,!0,[]);a.value.push(s.create(s.Class.UNIVERSAL,s.Type.OID,!1,n)),a.value.push(s.create(s.Class.UNIVERSAL,s.Type.NULL,!1,""));var o=s.create(s.Class.UNIVERSAL,s.Type.OCTETSTRING,!1,e.digest().getBytes());return i.value.push(a),i.value.push(o),s.toDer(i).getBytes()},y=function(e,t,r){if(r)return e.modPow(t.e,t.n);if(!t.p||!t.q)return e.modPow(t.d,t.n);var a;t.dP||(t.dP=t.d.mod(t.p.subtract(i.ONE))),t.dQ||(t.dQ=t.d.mod(t.q.subtract(i.ONE))),t.qInv||(t.qInv=t.q.modInverse(t.p));do{a=new i(n.util.bytesToHex(n.random.getBytes(t.n.bitLength()/8)),16)}while(a.compareTo(t.n)>=0||!a.gcd(t.n).equals(i.ONE));for(var s=(e=e.multiply(a.modPow(t.e,t.n)).mod(t.n)).mod(t.p).modPow(t.dP,t.p),o=e.mod(t.q).modPow(t.dQ,t.q);s.compareTo(o)<0;)s=s.add(t.p);var u=s.subtract(o).multiply(t.qInv).mod(t.p).multiply(t.q).add(o);return u=u.multiply(a.modInverse(t.n)).mod(t.n)};function g(e,t,r){var i=n.util.createBuffer(),a=Math.ceil(t.n.bitLength()/8);if(e.length>a-11){var s=new Error("Message is too long for PKCS#1 v1.5 padding.");throw s.length=e.length,s.max=a-11,s}i.putByte(0),i.putByte(r);var o,u=a-3-e.length;if(0===r||1===r){o=0===r?0:255;for(var c=0;c<u;++c)i.putByte(o)}else for(;u>0;){var l=0,f=n.random.getBytes(u);for(c=0;c<u;++c)0===(o=f.charCodeAt(c))?++l:i.putByte(o);u=l}return i.putByte(0),i.putBytes(e),i}function v(e,t,r,i){var a=Math.ceil(t.n.bitLength()/8),s=n.util.createBuffer(e),o=s.getByte(),u=s.getByte();if(0!==o||r&&0!==u&&1!==u||!r&&2!=u||r&&0===u&&void 0===i)throw new Error("Encryption block is invalid.");var c=0;if(0===u){c=a-3-i;for(var l=0;l<c;++l)if(0!==s.getByte())throw new Error("Encryption block is invalid.")}else if(1===u)for(c=0;s.length()>1;){if(255!==s.getByte()){--s.read;break}++c}else if(2===u)for(c=0;s.length()>1;){if(0===s.getByte()){--s.read;break}++c}if(0!==s.getByte()||c!==a-3-s.length())throw new Error("Encryption block is invalid.");return s.getBytes()}function m(e,t,r){"function"==typeof t&&(r=t,t={});var a={algorithm:{name:(t=t||{}).algorithm||"PRIMEINC",options:{workers:t.workers||2,workLoad:t.workLoad||100,workerScript:t.workerScript}}};function s(){o(e.pBits,(function(t,n){return t?r(t):(e.p=n,null!==e.q?c(t,e.q):void o(e.qBits,c))}))}function o(e,t){n.prime.generateProbablePrime(e,a,t)}function c(t,n){if(t)return r(t);if(e.q=n,e.p.compareTo(e.q)<0){var a=e.p;e.p=e.q,e.q=a}if(0!==e.p.subtract(i.ONE).gcd(e.e).compareTo(i.ONE))return e.p=null,void s();if(0!==e.q.subtract(i.ONE).gcd(e.e).compareTo(i.ONE))return e.q=null,void o(e.qBits,c);if(e.p1=e.p.subtract(i.ONE),e.q1=e.q.subtract(i.ONE),e.phi=e.p1.multiply(e.q1),0!==e.phi.gcd(e.e).compareTo(i.ONE))return e.p=e.q=null,void s();if(e.n=e.p.multiply(e.q),e.n.bitLength()!==e.bits)return e.q=null,void o(e.qBits,c);var l=e.e.modInverse(e.phi);e.keys={privateKey:u.rsa.setPrivateKey(e.n,e.e,l,e.p,e.q,l.mod(e.p1),l.mod(e.q1),e.q.modInverse(e.p)),publicKey:u.rsa.setPublicKey(e.n,e.e)},r(null,e.keys)}"prng"in t&&(a.prng=t.prng),s()}function b(e){var t=e.toString(16);t[0]>="8"&&(t="00"+t);var r=n.util.hexToBytes(t);return r.length>1&&(0===r.charCodeAt(0)&&0==(128&r.charCodeAt(1))||255===r.charCodeAt(0)&&128==(128&r.charCodeAt(1)))?r.substr(1):r}function E(e){return e<=100?27:e<=150?18:e<=200?15:e<=250?12:e<=300?9:e<=350?8:e<=400?7:e<=500?6:e<=600?5:e<=800?4:e<=1250?3:2}function S(e){return n.util.isNodejs&&"function"==typeof a[e]}function T(e){return void 0!==o.globalScope&&"object"==typeof o.globalScope.crypto&&"object"==typeof o.globalScope.crypto.subtle&&"function"==typeof o.globalScope.crypto.subtle[e]}function A(e){return void 0!==o.globalScope&&"object"==typeof o.globalScope.msCrypto&&"object"==typeof o.globalScope.msCrypto.subtle&&"function"==typeof o.globalScope.msCrypto.subtle[e]}function w(e){for(var t=n.util.hexToBytes(e.toString(16)),r=new Uint8Array(t.length),i=0;i<t.length;++i)r[i]=t.charCodeAt(i);return r}u.rsa.encrypt=function(e,t,r){var a,s=r,o=Math.ceil(t.n.bitLength()/8);!1!==r&&!0!==r?(s=2===r,a=g(e,t,r)):(a=n.util.createBuffer()).putBytes(e);for(var u=new i(a.toHex(),16),c=y(u,t,s).toString(16),l=n.util.createBuffer(),f=o-Math.ceil(c.length/2);f>0;)l.putByte(0),--f;return l.putBytes(n.util.hexToBytes(c)),l.getBytes()},u.rsa.decrypt=function(e,t,r,a){var s=Math.ceil(t.n.bitLength()/8);if(e.length!==s){var o=new Error("Encrypted message length is invalid.");throw o.length=e.length,o.expected=s,o}var u=new i(n.util.createBuffer(e).toHex(),16);if(u.compareTo(t.n)>=0)throw new Error("Encrypted message is invalid.");for(var c=y(u,t,r).toString(16),l=n.util.createBuffer(),f=s-Math.ceil(c.length/2);f>0;)l.putByte(0),--f;return l.putBytes(n.util.hexToBytes(c)),!1!==a?v(l.getBytes(),t,r):l.getBytes()},u.rsa.createKeyPairGenerationState=function(e,t,r){"string"==typeof e&&(e=parseInt(e,10)),e=e||2048;var a,s=(r=r||{}).prng||n.random,o={nextBytes:function(e){for(var t=s.getBytesSync(e.length),r=0;r<e.length;++r)e[r]=t.charCodeAt(r)}},u=r.algorithm||"PRIMEINC";if("PRIMEINC"!==u)throw new Error("Invalid key generation algorithm: "+u);return(a={algorithm:u,state:0,bits:e,rng:o,eInt:t||65537,e:new i(null),p:null,q:null,qBits:e>>1,pBits:e-(e>>1),pqState:0,num:null,keys:null}).e.fromInt(a.eInt),a},u.rsa.stepKeyPairGenerationState=function(e,t){"algorithm"in e||(e.algorithm="PRIMEINC");var r=new i(null);r.fromInt(30);for(var n,a=0,s=function(e,t){return e|t},o=+new Date,l=0;null===e.keys&&(t<=0||l<t);){if(0===e.state){var f=null===e.p?e.pBits:e.qBits,p=f-1;0===e.pqState?(e.num=new i(f,e.rng),e.num.testBit(p)||e.num.bitwiseTo(i.ONE.shiftLeft(p),s,e.num),e.num.dAddOffset(31-e.num.mod(r).byteValue(),0),a=0,++e.pqState):1===e.pqState?e.num.bitLength()>f?e.pqState=0:e.num.isProbablePrime(E(e.num.bitLength()))?++e.pqState:e.num.dAddOffset(c[a++%8],0):2===e.pqState?e.pqState=0===e.num.subtract(i.ONE).gcd(e.e).compareTo(i.ONE)?3:0:3===e.pqState&&(e.pqState=0,null===e.p?e.p=e.num:e.q=e.num,null!==e.p&&null!==e.q&&++e.state,e.num=null)}else if(1===e.state)e.p.compareTo(e.q)<0&&(e.num=e.p,e.p=e.q,e.q=e.num),++e.state;else if(2===e.state)e.p1=e.p.subtract(i.ONE),e.q1=e.q.subtract(i.ONE),e.phi=e.p1.multiply(e.q1),++e.state;else if(3===e.state)0===e.phi.gcd(e.e).compareTo(i.ONE)?++e.state:(e.p=null,e.q=null,e.state=0);else if(4===e.state)e.n=e.p.multiply(e.q),e.n.bitLength()===e.bits?++e.state:(e.q=null,e.state=0);else if(5===e.state){var d=e.e.modInverse(e.phi);e.keys={privateKey:u.rsa.setPrivateKey(e.n,e.e,d,e.p,e.q,d.mod(e.p1),d.mod(e.q1),e.q.modInverse(e.p)),publicKey:u.rsa.setPublicKey(e.n,e.e)}}l+=(n=+new Date)-o,o=n}return null!==e.keys},u.rsa.generateKeyPair=function(e,t,r,i){if(1===arguments.length?"object"==typeof e?(r=e,e=void 0):"function"==typeof e&&(i=e,e=void 0):2===arguments.length?"number"==typeof e?"function"==typeof t?(i=t,t=void 0):"number"!=typeof t&&(r=t,t=void 0):(r=e,i=t,e=void 0,t=void 0):3===arguments.length&&("number"==typeof t?"function"==typeof r&&(i=r,r=void 0):(i=r,r=t,t=void 0)),r=r||{},void 0===e&&(e=r.bits||2048),void 0===t&&(t=r.e||65537),!n.options.usePureJavaScript&&!r.prng&&e>=256&&e<=16384&&(65537===t||3===t))if(i){if(S("generateKeyPair"))return a.generateKeyPair("rsa",{modulusLength:e,publicExponent:t,publicKeyEncoding:{type:"spki",format:"pem"},privateKeyEncoding:{type:"pkcs8",format:"pem"}},(function(e,t,r){if(e)return i(e);i(null,{privateKey:u.privateKeyFromPem(r),publicKey:u.publicKeyFromPem(t)})}));if(T("generateKey")&&T("exportKey"))return o.globalScope.crypto.subtle.generateKey({name:"RSASSA-PKCS1-v1_5",modulusLength:e,publicExponent:w(t),hash:{name:"SHA-256"}},!0,["sign","verify"]).then((function(e){return o.globalScope.crypto.subtle.exportKey("pkcs8",e.privateKey)})).then(void 0,(function(e){i(e)})).then((function(e){if(e){var t=u.privateKeyFromAsn1(s.fromDer(n.util.createBuffer(e)));i(null,{privateKey:t,publicKey:u.setRsaPublicKey(t.n,t.e)})}}));if(A("generateKey")&&A("exportKey")){var c=o.globalScope.msCrypto.subtle.generateKey({name:"RSASSA-PKCS1-v1_5",modulusLength:e,publicExponent:w(t),hash:{name:"SHA-256"}},!0,["sign","verify"]);return c.oncomplete=function(e){var t=e.target.result,r=o.globalScope.msCrypto.subtle.exportKey("pkcs8",t.privateKey);r.oncomplete=function(e){var t=e.target.result,r=u.privateKeyFromAsn1(s.fromDer(n.util.createBuffer(t)));i(null,{privateKey:r,publicKey:u.setRsaPublicKey(r.n,r.e)})},r.onerror=function(e){i(e)}},void(c.onerror=function(e){i(e)})}}else if(S("generateKeyPairSync")){var l=a.generateKeyPairSync("rsa",{modulusLength:e,publicExponent:t,publicKeyEncoding:{type:"spki",format:"pem"},privateKeyEncoding:{type:"pkcs8",format:"pem"}});return{privateKey:u.privateKeyFromPem(l.privateKey),publicKey:u.publicKeyFromPem(l.publicKey)}}var f=u.rsa.createKeyPairGenerationState(e,t,r);if(!i)return u.rsa.stepKeyPairGenerationState(f,0),f.keys;m(f,r,i)},u.setRsaPublicKey=u.rsa.setPublicKey=function(e,t){var r={n:e,e:t,encrypt:function(e,t,i){if("string"==typeof t?t=t.toUpperCase():void 0===t&&(t="RSAES-PKCS1-V1_5"),"RSAES-PKCS1-V1_5"===t)t={encode:function(e,t,r){return g(e,t,2).getBytes()}};else if("RSA-OAEP"===t||"RSAES-OAEP"===t)t={encode:function(e,t){return n.pkcs1.encode_rsa_oaep(t,e,i)}};else if(-1!==["RAW","NONE","NULL",null].indexOf(t))t={encode:function(e){return e}};else if("string"==typeof t)throw new Error('Unsupported encryption scheme: "'+t+'".');var a=t.encode(e,r,!0);return u.rsa.encrypt(a,r,!0)},verify:function(e,t,n){"string"==typeof n?n=n.toUpperCase():void 0===n&&(n="RSASSA-PKCS1-V1_5"),"RSASSA-PKCS1-V1_5"===n?n={verify:function(e,t){return t=v(t,r,!0),e===s.fromDer(t).value[1].value}}:"NONE"!==n&&"NULL"!==n&&null!==n||(n={verify:function(e,t){return e===(t=v(t,r,!0))}});var i=u.rsa.decrypt(t,r,!0,!1);return n.verify(e,i,r.n.bitLength())}};return r},u.setRsaPrivateKey=u.rsa.setPrivateKey=function(e,t,r,i,a,s,o,c){var l={n:e,e:t,d:r,p:i,q:a,dP:s,dQ:o,qInv:c,decrypt:function(e,t,r){"string"==typeof t?t=t.toUpperCase():void 0===t&&(t="RSAES-PKCS1-V1_5");var i=u.rsa.decrypt(e,l,!1,!1);if("RSAES-PKCS1-V1_5"===t)t={decode:v};else if("RSA-OAEP"===t||"RSAES-OAEP"===t)t={decode:function(e,t){return n.pkcs1.decode_rsa_oaep(t,e,r)}};else{if(-1===["RAW","NONE","NULL",null].indexOf(t))throw new Error('Unsupported encryption scheme: "'+t+'".');t={decode:function(e){return e}}}return t.decode(i,l,!1)},sign:function(e,t){var r=!1;"string"==typeof t&&(t=t.toUpperCase()),void 0===t||"RSASSA-PKCS1-V1_5"===t?(t={encode:h},r=1):"NONE"!==t&&"NULL"!==t&&null!==t||(t={encode:function(){return e}},r=1);var n=t.encode(e,l.n.bitLength());return u.rsa.encrypt(n,l,r)}};return l},u.wrapRsaPrivateKey=function(e){return s.create(s.Class.UNIVERSAL,s.Type.SEQUENCE,!0,[s.create(s.Class.UNIVERSAL,s.Type.INTEGER,!1,s.integerToDer(0).getBytes()),s.create(s.Class.UNIVERSAL,s.Type.SEQUENCE,!0,[s.create(s.Class.UNIVERSAL,s.Type.OID,!1,s.oidToDer(u.oids.rsaEncryption).getBytes()),s.create(s.Class.UNIVERSAL,s.Type.NULL,!1,"")]),s.create(s.Class.UNIVERSAL,s.Type.OCTETSTRING,!1,s.toDer(e).getBytes())])},u.privateKeyFromAsn1=function(e){var t,r,a,o,c,p,d,h,y={},g=[];if(s.validate(e,l,y,g)&&(e=s.fromDer(n.util.createBuffer(y.privateKey))),y={},g=[],!s.validate(e,f,y,g)){var v=new Error("Cannot read private key. ASN.1 object does not contain an RSAPrivateKey.");throw v.errors=g,v}return t=n.util.createBuffer(y.privateKeyModulus).toHex(),r=n.util.createBuffer(y.privateKeyPublicExponent).toHex(),a=n.util.createBuffer(y.privateKeyPrivateExponent).toHex(),o=n.util.createBuffer(y.privateKeyPrime1).toHex(),c=n.util.createBuffer(y.privateKeyPrime2).toHex(),p=n.util.createBuffer(y.privateKeyExponent1).toHex(),d=n.util.createBuffer(y.privateKeyExponent2).toHex(),h=n.util.createBuffer(y.privateKeyCoefficient).toHex(),u.setRsaPrivateKey(new i(t,16),new i(r,16),new i(a,16),new i(o,16),new i(c,16),new i(p,16),new i(d,16),new i(h,16))},u.privateKeyToAsn1=u.privateKeyToRSAPrivateKey=function(e){return s.create(s.Class.UNIVERSAL,s.Type.SEQUENCE,!0,[s.create(s.Class.UNIVERSAL,s.Type.INTEGER,!1,s.integerToDer(0).getBytes()),s.create(s.Class.UNIVERSAL,s.Type.INTEGER,!1,b(e.n)),s.create(s.Class.UNIVERSAL,s.Type.INTEGER,!1,b(e.e)),s.create(s.Class.UNIVERSAL,s.Type.INTEGER,!1,b(e.d)),s.create(s.Class.UNIVERSAL,s.Type.INTEGER,!1,b(e.p)),s.create(s.Class.UNIVERSAL,s.Type.INTEGER,!1,b(e.q)),s.create(s.Class.UNIVERSAL,s.Type.INTEGER,!1,b(e.dP)),s.create(s.Class.UNIVERSAL,s.Type.INTEGER,!1,b(e.dQ)),s.create(s.Class.UNIVERSAL,s.Type.INTEGER,!1,b(e.qInv))])},u.publicKeyFromAsn1=function(e){var t={},r=[];if(s.validate(e,d,t,r)){var a,o=s.derToOid(t.publicKeyOid);if(o!==u.oids.rsaEncryption)throw(a=new Error("Cannot read public key. Unknown OID.")).oid=o,a;e=t.rsaPublicKey}if(r=[],!s.validate(e,p,t,r))throw(a=new Error("Cannot read public key. ASN.1 object does not contain an RSAPublicKey.")).errors=r,a;var c=n.util.createBuffer(t.publicKeyModulus).toHex(),l=n.util.createBuffer(t.publicKeyExponent).toHex();return u.setRsaPublicKey(new i(c,16),new i(l,16))},u.publicKeyToAsn1=u.publicKeyToSubjectPublicKeyInfo=function(e){return s.create(s.Class.UNIVERSAL,s.Type.SEQUENCE,!0,[s.create(s.Class.UNIVERSAL,s.Type.SEQUENCE,!0,[s.create(s.Class.UNIVERSAL,s.Type.OID,!1,s.oidToDer(u.oids.rsaEncryption).getBytes()),s.create(s.Class.UNIVERSAL,s.Type.NULL,!1,"")]),s.create(s.Class.UNIVERSAL,s.Type.BITSTRING,!1,[u.publicKeyToRSAPublicKey(e)])])},u.publicKeyToRSAPublicKey=function(e){return s.create(s.Class.UNIVERSAL,s.Type.SEQUENCE,!0,[s.create(s.Class.UNIVERSAL,s.Type.INTEGER,!1,b(e.n)),s.create(s.Class.UNIVERSAL,s.Type.INTEGER,!1,b(e.e))])}},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(73),i=r(31),a=r(39),s=r(40);t.empty=Uint8Array.from([]),t.zero=Uint8Array.from([0]),t.one=Uint8Array.from([1]),t.BASE58_STRING=e=>n.default.decode(e),t.BASE64_STRING=e=>i.toByteArray(e.replace("base64:","")),t.STRING=e=>{return e?(r=e,Uint8Array.from([...unescape(encodeURIComponent(r))].map(e=>e.charCodeAt(0)))):t.empty;var r},t.BYTE=e=>Uint8Array.from([e]),t.BOOL=e=>t.BYTE(1==e?1:0),t.BYTES=e=>Uint8Array.from(e),t.SHORT=e=>{const t=s.fromNumber(e,!0);return Uint8Array.from(t.toBytesBE().slice(6))},t.INT=e=>{const t=s.fromNumber(e,!0);return Uint8Array.from(t.toBytesBE().slice(4))},t.OPTION=e=>r=>null==r||"string"==typeof r&&0==r.length?t.zero:a.concat(t.one,e(r)),t.LEN=e=>t=>r=>{const n=t(r),i=e(n.length);return a.concat(i,n)},t.COUNT=e=>t=>r=>{const n=a.concat(...r.map(e=>t(e))),i=e(r.length);return a.concat(i,n)},t.LONG=e=>{let t;if("number"==typeof e){if(e>Math.pow(2,53)-1)throw new Error(e+" is too big to be precisely represented as js number. Use string instead");t=s.fromNumber(e)}else t=s.fromString(e.toString());return Uint8Array.from(t.toBytesBE())},t.SCRIPT=e=>t.OPTION(t.LEN(t.SHORT)(t.BASE64_STRING))(e?e.slice(7):null),t.ALIAS=e=>{const[r,n,i]=e.split(":");if(!n||1!==n.length)throw new Error("Invalid network byte in alias");if(!i||0===i.length)throw new Error("Invalid alias body");return a.concat([2],[n.charCodeAt(0)],t.LEN(t.SHORT)(t.STRING)(i))},t.ADDRESS_OR_ALIAS=e=>e.startsWith("alias")?t.ALIAS(e):t.BASE58_STRING(e)},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.massTransfer=void 0;const n=r(5),i=r(2),a=r(4),s=r(6),o=r(8),u=r(9),c=r(0);t.massTransfer=function(e,t){var r;const l=c.TRANSACTION_TYPE.MASS_TRANSFER,f=e.version||u.DEFAULT_VERSIONS.MASS_TRANSFER,p=n.convertToPairs(t),d=n.getSenderPublicKey(p,e);if(!Array.isArray(e.transfers)||0===e.transfers.length)throw new Error("Should contain at least one transfer");const h={type:l,version:f,senderPublicKey:d,assetId:n.normalizeAssetId(e.assetId),transfers:e.transfers,fee:n.fee(e,1e5+1e5*Math.ceil(.5*e.transfers.length)),feeAssetId:n.normalizeAssetId(e.feeAssetId),timestamp:e.timestamp||Date.now(),attachment:e.attachment||"",proofs:e.proofs||[],chainId:n.networkByte(e.chainId,n.chainIdFromRecipient(null===(r=e.transfers[0])||void 0===r?void 0:r.recipient)),id:""};s.validate.massTransfer(h);const y=f>1?o.txToProtoBytes(h):a.binary.serializeTx(h);return p.forEach(([e,t])=>n.addProof(h,i.signBytes(e,y),t)),h.id=i.base58Encode(i.blake2b(y)),h}},function(e,t,r){"use strict";t.byteLength=function(e){var t=c(e),r=t[0],n=t[1];return 3*(r+n)/4-n},t.toByteArray=function(e){var t,r,n=c(e),s=n[0],o=n[1],u=new a(function(e,t,r){return 3*(t+r)/4-r}(0,s,o)),l=0,f=o>0?s-4:s;for(r=0;r<f;r+=4)t=i[e.charCodeAt(r)]<<18|i[e.charCodeAt(r+1)]<<12|i[e.charCodeAt(r+2)]<<6|i[e.charCodeAt(r+3)],u[l++]=t>>16&255,u[l++]=t>>8&255,u[l++]=255&t;2===o&&(t=i[e.charCodeAt(r)]<<2|i[e.charCodeAt(r+1)]>>4,u[l++]=255&t);1===o&&(t=i[e.charCodeAt(r)]<<10|i[e.charCodeAt(r+1)]<<4|i[e.charCodeAt(r+2)]>>2,u[l++]=t>>8&255,u[l++]=255&t);return u},t.fromByteArray=function(e){for(var t,r=e.length,i=r%3,a=[],s=0,o=r-i;s<o;s+=16383)a.push(l(e,s,s+16383>o?o:s+16383));1===i?(t=e[r-1],a.push(n[t>>2]+n[t<<4&63]+"==")):2===i&&(t=(e[r-2]<<8)+e[r-1],a.push(n[t>>10]+n[t>>4&63]+n[t<<2&63]+"="));return a.join("")};for(var n=[],i=[],a="undefined"!=typeof Uint8Array?Uint8Array:Array,s="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",o=0,u=s.length;o<u;++o)n[o]=s[o],i[s.charCodeAt(o)]=o;function c(e){var t=e.length;if(t%4>0)throw new Error("Invalid string. Length must be a multiple of 4");var r=e.indexOf("=");return-1===r&&(r=t),[r,r===t?0:4-r%4]}function l(e,t,r){for(var i,a,s=[],o=t;o<r;o+=3)i=(e[o]<<16&16711680)+(e[o+1]<<8&65280)+(255&e[o+2]),s.push(n[(a=i)>>18&63]+n[a>>12&63]+n[a>>6&63]+n[63&a]);return s.join("")}i["-".charCodeAt(0)]=62,i["_".charCodeAt(0)]=63},function(e,t,r){var n=r(1);function i(e,t){n.cipher.registerAlgorithm(e,(function(){return new n.aes.Algorithm(e,t)}))}r(33),r(59),r(3),e.exports=n.aes=n.aes||{},n.aes.startEncrypting=function(e,t,r,n){var i=h({key:e,output:r,decrypt:!1,mode:n});return i.start(t),i},n.aes.createEncryptionCipher=function(e,t){return h({key:e,output:null,decrypt:!1,mode:t})},n.aes.startDecrypting=function(e,t,r,n){var i=h({key:e,output:r,decrypt:!0,mode:n});return i.start(t),i},n.aes.createDecryptionCipher=function(e,t){return h({key:e,output:null,decrypt:!0,mode:t})},n.aes.Algorithm=function(e,t){l||f();var r=this;r.name=e,r.mode=new t({blockSize:16,cipher:{encrypt:function(e,t){return d(r._w,e,t,!1)},decrypt:function(e,t){return d(r._w,e,t,!0)}}}),r._init=!1},n.aes.Algorithm.prototype.initialize=function(e){if(!this._init){var t,r=e.key;if("string"!=typeof r||16!==r.length&&24!==r.length&&32!==r.length){if(n.util.isArray(r)&&(16===r.length||24===r.length||32===r.length)){t=r,r=n.util.createBuffer();for(var i=0;i<t.length;++i)r.putByte(t[i])}}else r=n.util.createBuffer(r);if(!n.util.isArray(r)){t=r,r=[];var a=t.length();if(16===a||24===a||32===a){a>>>=2;for(i=0;i<a;++i)r.push(t.getInt32())}}if(!n.util.isArray(r)||4!==r.length&&6!==r.length&&8!==r.length)throw new Error("Invalid key parameter.");var s=this.mode.name,o=-1!==["CFB","OFB","CTR","GCM"].indexOf(s);this._w=p(r,e.decrypt&&!o),this._init=!0}},n.aes._expandKey=function(e,t){return l||f(),p(e,t)},n.aes._updateBlock=d,i("AES-ECB",n.cipher.modes.ecb),i("AES-CBC",n.cipher.modes.cbc),i("AES-CFB",n.cipher.modes.cfb),i("AES-OFB",n.cipher.modes.ofb),i("AES-CTR",n.cipher.modes.ctr),i("AES-GCM",n.cipher.modes.gcm);var a,s,o,u,c,l=!1;function f(){l=!0,o=[0,1,2,4,8,16,32,64,128,27,54];for(var e=new Array(256),t=0;t<128;++t)e[t]=t<<1,e[t+128]=t+128<<1^283;a=new Array(256),s=new Array(256),u=new Array(4),c=new Array(4);for(t=0;t<4;++t)u[t]=new Array(256),c[t]=new Array(256);var r,n,i,f,p,d,h,y=0,g=0;for(t=0;t<256;++t){f=(f=g^g<<1^g<<2^g<<3^g<<4)>>8^255&f^99,a[y]=f,s[f]=y,d=(p=e[f])<<24^f<<16^f<<8^f^p,h=((r=e[y])^(n=e[r])^(i=e[n]))<<24^(y^i)<<16^(y^n^i)<<8^y^r^i;for(var v=0;v<4;++v)u[v][y]=d,c[v][f]=h,d=d<<24|d>>>8,h=h<<24|h>>>8;0===y?y=g=1:(y=r^e[e[e[r^i]]],g^=e[e[g]])}}function p(e,t){for(var r,n=e.slice(0),i=1,s=n.length,u=4*(s+6+1),l=s;l<u;++l)r=n[l-1],l%s==0?(r=a[r>>>16&255]<<24^a[r>>>8&255]<<16^a[255&r]<<8^a[r>>>24]^o[i]<<24,i++):s>6&&l%s==4&&(r=a[r>>>24]<<24^a[r>>>16&255]<<16^a[r>>>8&255]<<8^a[255&r]),n[l]=n[l-s]^r;if(t){for(var f,p=c[0],d=c[1],h=c[2],y=c[3],g=n.slice(0),v=(l=0,(u=n.length)-4);l<u;l+=4,v-=4)if(0===l||l===u-4)g[l]=n[v],g[l+1]=n[v+3],g[l+2]=n[v+2],g[l+3]=n[v+1];else for(var m=0;m<4;++m)f=n[v+m],g[l+(3&-m)]=p[a[f>>>24]]^d[a[f>>>16&255]]^h[a[f>>>8&255]]^y[a[255&f]];n=g}return n}function d(e,t,r,n){var i,o,l,f,p,d,h,y,g,v,m,b,E=e.length/4-1;n?(i=c[0],o=c[1],l=c[2],f=c[3],p=s):(i=u[0],o=u[1],l=u[2],f=u[3],p=a),d=t[0]^e[0],h=t[n?3:1]^e[1],y=t[2]^e[2],g=t[n?1:3]^e[3];for(var S=3,T=1;T<E;++T)v=i[d>>>24]^o[h>>>16&255]^l[y>>>8&255]^f[255&g]^e[++S],m=i[h>>>24]^o[y>>>16&255]^l[g>>>8&255]^f[255&d]^e[++S],b=i[y>>>24]^o[g>>>16&255]^l[d>>>8&255]^f[255&h]^e[++S],g=i[g>>>24]^o[d>>>16&255]^l[h>>>8&255]^f[255&y]^e[++S],d=v,h=m,y=b;r[0]=p[d>>>24]<<24^p[h>>>16&255]<<16^p[y>>>8&255]<<8^p[255&g]^e[++S],r[n?3:1]=p[h>>>24]<<24^p[y>>>16&255]<<16^p[g>>>8&255]<<8^p[255&d]^e[++S],r[2]=p[y>>>24]<<24^p[g>>>16&255]<<16^p[d>>>8&255]<<8^p[255&h]^e[++S],r[n?1:3]=p[g>>>24]<<24^p[d>>>16&255]<<16^p[h>>>8&255]<<8^p[255&y]^e[++S]}function h(e){var t,r="AES-"+((e=e||{}).mode||"CBC").toUpperCase(),i=(t=e.decrypt?n.cipher.createDecipher(r,e.key):n.cipher.createCipher(r,e.key)).start;return t.start=function(e,r){var a=null;r instanceof n.util.ByteBuffer&&(a=r,r={}),(r=r||{}).output=a,r.iv=e,i.call(t,r)},t}},function(e,t,r){var n=r(1);r(3),e.exports=n.cipher=n.cipher||{},n.cipher.algorithms=n.cipher.algorithms||{},n.cipher.createCipher=function(e,t){var r=e;if("string"==typeof r&&(r=n.cipher.getAlgorithm(r))&&(r=r()),!r)throw new Error("Unsupported algorithm: "+e);return new n.cipher.BlockCipher({algorithm:r,key:t,decrypt:!1})},n.cipher.createDecipher=function(e,t){var r=e;if("string"==typeof r&&(r=n.cipher.getAlgorithm(r))&&(r=r()),!r)throw new Error("Unsupported algorithm: "+e);return new n.cipher.BlockCipher({algorithm:r,key:t,decrypt:!0})},n.cipher.registerAlgorithm=function(e,t){e=e.toUpperCase(),n.cipher.algorithms[e]=t},n.cipher.getAlgorithm=function(e){return(e=e.toUpperCase())in n.cipher.algorithms?n.cipher.algorithms[e]:null};var i=n.cipher.BlockCipher=function(e){this.algorithm=e.algorithm,this.mode=this.algorithm.mode,this.blockSize=this.mode.blockSize,this._finish=!1,this._input=null,this.output=null,this._op=e.decrypt?this.mode.decrypt:this.mode.encrypt,this._decrypt=e.decrypt,this.algorithm.initialize(e)};i.prototype.start=function(e){e=e||{};var t={};for(var r in e)t[r]=e[r];t.decrypt=this._decrypt,this._finish=!1,this._input=n.util.createBuffer(),this.output=e.output||n.util.createBuffer(),this.mode.start(t)},i.prototype.update=function(e){for(e&&this._input.putBuffer(e);!this._op.call(this.mode,this._input,this.output,this._finish)&&!this._finish;);this._input.compact()},i.prototype.finish=function(e){!e||"ECB"!==this.mode.name&&"CBC"!==this.mode.name||(this.mode.pad=function(t){return e(this.blockSize,t,!1)},this.mode.unpad=function(t){return e(this.blockSize,t,!0)});var t={};return t.decrypt=this._decrypt,t.overflow=this._input.length()%this.blockSize,!(!this._decrypt&&this.mode.pad&&!this.mode.pad(this._input,t))&&(this._finish=!0,this.update(),!(this._decrypt&&this.mode.unpad&&!this.mode.unpad(this.output,t))&&!(this.mode.afterFinish&&!this.mode.afterFinish(this.output,t)))}},function(e,t){},function(e,t,r){var n=r(1);r(10),r(3),(e.exports=n.hmac=n.hmac||{}).create=function(){var e=null,t=null,r=null,i=null,a={start:function(a,s){if(null!==a)if("string"==typeof a){if(!((a=a.toLowerCase())in n.md.algorithms))throw new Error('Unknown hash algorithm "'+a+'"');t=n.md.algorithms[a].create()}else t=a;if(null===s)s=e;else{if("string"==typeof s)s=n.util.createBuffer(s);else if(n.util.isArray(s)){var o=s;s=n.util.createBuffer();for(var u=0;u<o.length;++u)s.putByte(o[u])}var c=s.length();c>t.blockLength&&(t.start(),t.update(s.bytes()),s=t.digest()),r=n.util.createBuffer(),i=n.util.createBuffer(),c=s.length();for(u=0;u<c;++u){o=s.at(u);r.putByte(54^o),i.putByte(92^o)}if(c<t.blockLength)for(o=t.blockLength-c,u=0;u<o;++u)r.putByte(54),i.putByte(92);e=s,r=r.bytes(),i=i.bytes()}t.start(),t.update(r)},update:function(e){t.update(e)},getMac:function(){var e=t.digest().bytes();return t.start(),t.update(i),t.update(e),t.digest()}};return a.digest=a.getMac,a}},function(e,t,r){"use strict";var n=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});var i=r(22),a=r(63),s=r(18),o=r(12),u=r(21),c=r(37),l=n(r(27));t.seedWithNonce=function(e,t){return{seed:a.Seed.toBinary(e).seed,nonce:t}},t.buildAddress=function(e,t){void 0===t&&(t=i.MAIN_NET_CHAIN_ID);var r=[1,"string"==typeof t?t.charCodeAt(0):t],n=s._hashChain(e).slice(0,20),a=u.concat(r,n),o=s._hashChain(a).slice(0,4);return u.concat(a,o)};t.keyPair=function(e){var t=a.Seed.toBinary(e),r=function(e,t){var r=[0,0,0,0];if(t&&t>0)for(var n=t,i=3;i>=0;i--)r[3-i]=Math.floor(n/Math.pow(2,8*i)),n%=Math.pow(2,8*i);var a=u.concat(r,e),o=s._hashChain(a);return s.sha256(o)}(t.seed,t.nonce),n=l.default.generateKeyPair(r);return{privateKey:n.private,publicKey:n.public}},t.address=function(e,r){return void 0===r&&(r=i.MAIN_NET_CHAIN_ID),c.isPublicKey(e)?t.buildAddress(o._fromIn(e.publicKey),r):t.address(t.keyPair(e),r)},t.publicKey=function(e){return c.isPrivateKey(e)?l.default.generateKeyPair(o._fromIn(e.privateKey)).public:t.keyPair(e).publicKey},t.privateKey=function(e){return t.keyPair(e).privateKey}},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.isPublicKey=function(e){return void 0!==e.publicKey},t.isPrivateKey=function(e){return void 0!==e.privateKey}},function(e,t,r){var n=r(1);r(3);var i=e.exports=n.pem=n.pem||{};function a(e){for(var t=e.name+": ",r=[],n=function(e,t){return" "+t},i=0;i<e.values.length;++i)r.push(e.values[i].replace(/^(\S+\r\n)/,n));t+=r.join(",")+"\r\n";var a=0,s=-1;for(i=0;i<t.length;++i,++a)if(a>65&&-1!==s){var o=t[s];","===o?(++s,t=t.substr(0,s)+"\r\n "+t.substr(s)):t=t.substr(0,s)+"\r\n"+o+t.substr(s+1),a=i-s-1,s=-1,++i}else" "!==t[i]&&"\t"!==t[i]&&","!==t[i]||(s=i);return t}function s(e){return e.replace(/^\s+/,"")}i.encode=function(e,t){t=t||{};var r,i="-----BEGIN "+e.type+"-----\r\n";if(e.procType&&(i+=a(r={name:"Proc-Type",values:[String(e.procType.version),e.procType.type]})),e.contentDomain&&(i+=a(r={name:"Content-Domain",values:[e.contentDomain]})),e.dekInfo&&(r={name:"DEK-Info",values:[e.dekInfo.algorithm]},e.dekInfo.parameters&&r.values.push(e.dekInfo.parameters),i+=a(r)),e.headers)for(var s=0;s<e.headers.length;++s)i+=a(e.headers[s]);return e.procType&&(i+="\r\n"),i+=n.util.encode64(e.body,t.maxline||64)+"\r\n",i+="-----END "+e.type+"-----\r\n"},i.decode=function(e){for(var t,r=[],i=/\s*-----BEGIN ([A-Z0-9- ]+)-----\r?\n?([\x21-\x7e\s]+?(?:\r?\n\r?\n))?([:A-Za-z0-9+\/=\s]+?)-----END \1-----/g,a=/([\x21-\x7e]+):\s*([\x21-\x7e\s^:]+)/,o=/\r?\n/;t=i.exec(e);){var u={type:t[1],procType:null,contentDomain:null,dekInfo:null,headers:[],body:n.util.decode64(t[3])};if(r.push(u),t[2]){for(var c=t[2].split(o),l=0;t&&l<c.length;){for(var f=c[l].replace(/\s+$/,""),p=l+1;p<c.length;++p){var d=c[p];if(!/\s/.test(d[0]))break;f+=d,l=p}if(t=f.match(a)){for(var h={name:t[1],values:[]},y=t[2].split(","),g=0;g<y.length;++g)h.values.push(s(y[g]));if(u.procType)if(u.contentDomain||"Content-Domain"!==h.name)if(u.dekInfo||"DEK-Info"!==h.name)u.headers.push(h);else{if(0===h.values.length)throw new Error('Invalid PEM formatted message. The "DEK-Info" header must have at least one subfield.');u.dekInfo={algorithm:y[0],parameters:y[1]||null}}else u.contentDomain=y[0]||"";else{if("Proc-Type"!==h.name)throw new Error('Invalid PEM formatted message. The first encapsulated header must be "Proc-Type".');if(2!==h.values.length)throw new Error('Invalid PEM formatted message. The "Proc-Type" header must have two subfields.');u.procType={version:y[0],type:y[1]}}}++l}if("ENCRYPTED"===u.procType&&!u.dekInfo)throw new Error('Invalid PEM formatted message. The "DEK-Info" header must be present if "Proc-Type" is "ENCRYPTED".')}}if(0===r.length)throw new Error("Invalid PEM formatted message.");return r}},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.concat=(...e)=>e.reduce((e,t)=>Uint8Array.from([...e,...t]),new Uint8Array(0)),t.range=(e,t,r=1)=>Array.from({length:t-e}).map((t,n)=>n*r+e)},function(e,t){e.exports=n;var r=null;try{r=new WebAssembly.Instance(new WebAssembly.Module(new Uint8Array([0,97,115,109,1,0,0,0,1,13,2,96,0,1,127,96,4,127,127,127,127,1,127,3,7,6,0,1,1,1,1,1,6,6,1,127,1,65,0,11,7,50,6,3,109,117,108,0,1,5,100,105,118,95,115,0,2,5,100,105,118,95,117,0,3,5,114,101,109,95,115,0,4,5,114,101,109,95,117,0,5,8,103,101,116,95,104,105,103,104,0,0,10,191,1,6,4,0,35,0,11,36,1,1,126,32,0,173,32,1,173,66,32,134,132,32,2,173,32,3,173,66,32,134,132,126,34,4,66,32,135,167,36,0,32,4,167,11,36,1,1,126,32,0,173,32,1,173,66,32,134,132,32,2,173,32,3,173,66,32,134,132,127,34,4,66,32,135,167,36,0,32,4,167,11,36,1,1,126,32,0,173,32,1,173,66,32,134,132,32,2,173,32,3,173,66,32,134,132,128,34,4,66,32,135,167,36,0,32,4,167,11,36,1,1,126,32,0,173,32,1,173,66,32,134,132,32,2,173,32,3,173,66,32,134,132,129,34,4,66,32,135,167,36,0,32,4,167,11,36,1,1,126,32,0,173,32,1,173,66,32,134,132,32,2,173,32,3,173,66,32,134,132,130,34,4,66,32,135,167,36,0,32,4,167,11])),{}).exports}catch(e){}function n(e,t,r){this.low=0|e,this.high=0|t,this.unsigned=!!r}function i(e){return!0===(e&&e.__isLong__)}n.prototype.__isLong__,Object.defineProperty(n.prototype,"__isLong__",{value:!0}),n.isLong=i;var a={},s={};function o(e,t){var r,n,i;return t?(i=0<=(e>>>=0)&&e<256)&&(n=s[e])?n:(r=c(e,(0|e)<0?-1:0,!0),i&&(s[e]=r),r):(i=-128<=(e|=0)&&e<128)&&(n=a[e])?n:(r=c(e,e<0?-1:0,!1),i&&(a[e]=r),r)}function u(e,t){if(isNaN(e))return t?m:v;if(t){if(e<0)return m;if(e>=h)return A}else{if(e<=-y)return w;if(e+1>=y)return T}return e<0?u(-e,t).neg():c(e%d|0,e/d|0,t)}function c(e,t,r){return new n(e,t,r)}n.fromInt=o,n.fromNumber=u,n.fromBits=c;var l=Math.pow;function f(e,t,r){if(0===e.length)throw Error("empty string");if("NaN"===e||"Infinity"===e||"+Infinity"===e||"-Infinity"===e)return v;if("number"==typeof t?(r=t,t=!1):t=!!t,(r=r||10)<2||36<r)throw RangeError("radix");var n;if((n=e.indexOf("-"))>0)throw Error("interior hyphen");if(0===n)return f(e.substring(1),t,r).neg();for(var i=u(l(r,8)),a=v,s=0;s<e.length;s+=8){var o=Math.min(8,e.length-s),c=parseInt(e.substring(s,s+o),r);if(o<8){var p=u(l(r,o));a=a.mul(p).add(u(c))}else a=(a=a.mul(i)).add(u(c))}return a.unsigned=t,a}function p(e,t){return"number"==typeof e?u(e,t):"string"==typeof e?f(e,t):c(e.low,e.high,"boolean"==typeof t?t:e.unsigned)}n.fromString=f,n.fromValue=p;var d=4294967296,h=d*d,y=h/2,g=o(1<<24),v=o(0);n.ZERO=v;var m=o(0,!0);n.UZERO=m;var b=o(1);n.ONE=b;var E=o(1,!0);n.UONE=E;var S=o(-1);n.NEG_ONE=S;var T=c(-1,2147483647,!1);n.MAX_VALUE=T;var A=c(-1,-1,!0);n.MAX_UNSIGNED_VALUE=A;var w=c(0,-2147483648,!1);n.MIN_VALUE=w;var I=n.prototype;I.toInt=function(){return this.unsigned?this.low>>>0:this.low},I.toNumber=function(){return this.unsigned?(this.high>>>0)*d+(this.low>>>0):this.high*d+(this.low>>>0)},I.toString=function(e){if((e=e||10)<2||36<e)throw RangeError("radix");if(this.isZero())return"0";if(this.isNegative()){if(this.eq(w)){var t=u(e),r=this.div(t),n=r.mul(t).sub(this);return r.toString(e)+n.toInt().toString(e)}return"-"+this.neg().toString(e)}for(var i=u(l(e,6),this.unsigned),a=this,s="";;){var o=a.div(i),c=(a.sub(o.mul(i)).toInt()>>>0).toString(e);if((a=o).isZero())return c+s;for(;c.length<6;)c="0"+c;s=""+c+s}},I.getHighBits=function(){return this.high},I.getHighBitsUnsigned=function(){return this.high>>>0},I.getLowBits=function(){return this.low},I.getLowBitsUnsigned=function(){return this.low>>>0},I.getNumBitsAbs=function(){if(this.isNegative())return this.eq(w)?64:this.neg().getNumBitsAbs();for(var e=0!=this.high?this.high:this.low,t=31;t>0&&0==(e&1<<t);t--);return 0!=this.high?t+33:t+1},I.isZero=function(){return 0===this.high&&0===this.low},I.eqz=I.isZero,I.isNegative=function(){return!this.unsigned&&this.high<0},I.isPositive=function(){return this.unsigned||this.high>=0},I.isOdd=function(){return 1==(1&this.low)},I.isEven=function(){return 0==(1&this.low)},I.equals=function(e){return i(e)||(e=p(e)),(this.unsigned===e.unsigned||this.high>>>31!=1||e.high>>>31!=1)&&(this.high===e.high&&this.low===e.low)},I.eq=I.equals,I.notEquals=function(e){return!this.eq(e)},I.neq=I.notEquals,I.ne=I.notEquals,I.lessThan=function(e){return this.comp(e)<0},I.lt=I.lessThan,I.lessThanOrEqual=function(e){return this.comp(e)<=0},I.lte=I.lessThanOrEqual,I.le=I.lessThanOrEqual,I.greaterThan=function(e){return this.comp(e)>0},I.gt=I.greaterThan,I.greaterThanOrEqual=function(e){return this.comp(e)>=0},I.gte=I.greaterThanOrEqual,I.ge=I.greaterThanOrEqual,I.compare=function(e){if(i(e)||(e=p(e)),this.eq(e))return 0;var t=this.isNegative(),r=e.isNegative();return t&&!r?-1:!t&&r?1:this.unsigned?e.high>>>0>this.high>>>0||e.high===this.high&&e.low>>>0>this.low>>>0?-1:1:this.sub(e).isNegative()?-1:1},I.comp=I.compare,I.negate=function(){return!this.unsigned&&this.eq(w)?w:this.not().add(b)},I.neg=I.negate,I.add=function(e){i(e)||(e=p(e));var t=this.high>>>16,r=65535&this.high,n=this.low>>>16,a=65535&this.low,s=e.high>>>16,o=65535&e.high,u=e.low>>>16,l=0,f=0,d=0,h=0;return d+=(h+=a+(65535&e.low))>>>16,f+=(d+=n+u)>>>16,l+=(f+=r+o)>>>16,l+=t+s,c((d&=65535)<<16|(h&=65535),(l&=65535)<<16|(f&=65535),this.unsigned)},I.subtract=function(e){return i(e)||(e=p(e)),this.add(e.neg())},I.sub=I.subtract,I.multiply=function(e){if(this.isZero())return v;if(i(e)||(e=p(e)),r)return c(r.mul(this.low,this.high,e.low,e.high),r.get_high(),this.unsigned);if(e.isZero())return v;if(this.eq(w))return e.isOdd()?w:v;if(e.eq(w))return this.isOdd()?w:v;if(this.isNegative())return e.isNegative()?this.neg().mul(e.neg()):this.neg().mul(e).neg();if(e.isNegative())return this.mul(e.neg()).neg();if(this.lt(g)&&e.lt(g))return u(this.toNumber()*e.toNumber(),this.unsigned);var t=this.high>>>16,n=65535&this.high,a=this.low>>>16,s=65535&this.low,o=e.high>>>16,l=65535&e.high,f=e.low>>>16,d=65535&e.low,h=0,y=0,m=0,b=0;return m+=(b+=s*d)>>>16,y+=(m+=a*d)>>>16,m&=65535,y+=(m+=s*f)>>>16,h+=(y+=n*d)>>>16,y&=65535,h+=(y+=a*f)>>>16,y&=65535,h+=(y+=s*l)>>>16,h+=t*d+n*f+a*l+s*o,c((m&=65535)<<16|(b&=65535),(h&=65535)<<16|(y&=65535),this.unsigned)},I.mul=I.multiply,I.divide=function(e){if(i(e)||(e=p(e)),e.isZero())throw Error("division by zero");var t,n,a;if(r)return this.unsigned||-2147483648!==this.high||-1!==e.low||-1!==e.high?c((this.unsigned?r.div_u:r.div_s)(this.low,this.high,e.low,e.high),r.get_high(),this.unsigned):this;if(this.isZero())return this.unsigned?m:v;if(this.unsigned){if(e.unsigned||(e=e.toUnsigned()),e.gt(this))return m;if(e.gt(this.shru(1)))return E;a=m}else{if(this.eq(w))return e.eq(b)||e.eq(S)?w:e.eq(w)?b:(t=this.shr(1).div(e).shl(1)).eq(v)?e.isNegative()?b:S:(n=this.sub(e.mul(t)),a=t.add(n.div(e)));if(e.eq(w))return this.unsigned?m:v;if(this.isNegative())return e.isNegative()?this.neg().div(e.neg()):this.neg().div(e).neg();if(e.isNegative())return this.div(e.neg()).neg();a=v}for(n=this;n.gte(e);){t=Math.max(1,Math.floor(n.toNumber()/e.toNumber()));for(var s=Math.ceil(Math.log(t)/Math.LN2),o=s<=48?1:l(2,s-48),f=u(t),d=f.mul(e);d.isNegative()||d.gt(n);)d=(f=u(t-=o,this.unsigned)).mul(e);f.isZero()&&(f=b),a=a.add(f),n=n.sub(d)}return a},I.div=I.divide,I.modulo=function(e){return i(e)||(e=p(e)),r?c((this.unsigned?r.rem_u:r.rem_s)(this.low,this.high,e.low,e.high),r.get_high(),this.unsigned):this.sub(this.div(e).mul(e))},I.mod=I.modulo,I.rem=I.modulo,I.not=function(){return c(~this.low,~this.high,this.unsigned)},I.and=function(e){return i(e)||(e=p(e)),c(this.low&e.low,this.high&e.high,this.unsigned)},I.or=function(e){return i(e)||(e=p(e)),c(this.low|e.low,this.high|e.high,this.unsigned)},I.xor=function(e){return i(e)||(e=p(e)),c(this.low^e.low,this.high^e.high,this.unsigned)},I.shiftLeft=function(e){return i(e)&&(e=e.toInt()),0==(e&=63)?this:e<32?c(this.low<<e,this.high<<e|this.low>>>32-e,this.unsigned):c(0,this.low<<e-32,this.unsigned)},I.shl=I.shiftLeft,I.shiftRight=function(e){return i(e)&&(e=e.toInt()),0==(e&=63)?this:e<32?c(this.low>>>e|this.high<<32-e,this.high>>e,this.unsigned):c(this.high>>e-32,this.high>=0?0:-1,this.unsigned)},I.shr=I.shiftRight,I.shiftRightUnsigned=function(e){if(i(e)&&(e=e.toInt()),0===(e&=63))return this;var t=this.high;return e<32?c(this.low>>>e|t<<32-e,t>>>e,this.unsigned):c(32===e?t:t>>>e-32,0,this.unsigned)},I.shru=I.shiftRightUnsigned,I.shr_u=I.shiftRightUnsigned,I.toSigned=function(){return this.unsigned?c(this.low,this.high,!1):this},I.toUnsigned=function(){return this.unsigned?this:c(this.low,this.high,!0)},I.toBytes=function(e){return e?this.toBytesLE():this.toBytesBE()},I.toBytesLE=function(){var e=this.high,t=this.low;return[255&t,t>>>8&255,t>>>16&255,t>>>24,255&e,e>>>8&255,e>>>16&255,e>>>24]},I.toBytesBE=function(){var e=this.high,t=this.low;return[e>>>24,e>>>16&255,e>>>8&255,255&e,t>>>24,t>>>16&255,t>>>8&255,255&t]},n.fromBytes=function(e,t,r){return r?n.fromBytesLE(e,t):n.fromBytesBE(e,t)},n.fromBytesLE=function(e,t){return new n(e[0]|e[1]<<8|e[2]<<16|e[3]<<24,e[4]|e[5]<<8|e[6]<<16|e[7]<<24,t)},n.fromBytesBE=function(e,t){return new n(e[4]<<24|e[5]<<16|e[6]<<8|e[7],e[0]<<24|e[1]<<16|e[2]<<8|e[3],t)}},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(40),i=r(115),a=r(73),s=r(31);t.ALIAS_VERSION=2;t.P_OPTION=e=>(t,r=0)=>{if(0===t[r])return{value:null,shift:1};const n=e(t,r+1);return{value:n.value,shift:n.shift+1}},t.P_BYTE=(e,t=0)=>({value:e[t],shift:1}),t.P_SHORT=(e,t=0)=>({value:256*e[t]+e[t+1],shift:2}),t.P_INT=(e,t=0)=>({value:Math.pow(2,24)*e[t]+Math.pow(2,16)*e[t+1]+Math.pow(2,8)*e[t+2]+e[t+3],shift:4}),t.P_LONG=(e,t=0)=>({value:n.fromBytesBE(Array.from(e.slice(t,t+8))).toString(),shift:8}),t.P_BOOLEAN=(e,t=0)=>({value:!!e[t],shift:1}),t.P_STRING_FIXED=e=>(t,r=0)=>{const n=i.Utf8ArrayToStr(t.slice(r,r+e));return{shift:e,value:n}},t.P_STRING_VAR=e=>(r,n=0)=>{const i=e(r,n),{value:a}=t.P_STRING_FIXED(i.value)(r,n+i.shift);return{shift:i.value+i.shift,value:a}},t.P_BASE58_FIXED=e=>(t,r=0)=>({value:a.default.encode(t.slice(r,r+e)),shift:e}),t.P_BASE58_VAR=e=>(r,n=0)=>{const i=e(r,n),{value:a}=t.P_BASE58_FIXED(i.value)(r,n+2);return{shift:i.value+2,value:a}},t.P_BASE64=e=>(t,r=0)=>{const n=e(t,r),i="base64:"+s.fromByteArray(t.slice(r+n.shift,r+n.shift+n.value));return{shift:n.value+n.shift,value:i}};t.byteToStringWithLength=(e,r=0)=>{const n=t.P_SHORT(e,r),{value:a}=(s=n.value,(e,t)=>{const r=i.Utf8ArrayToStr(e.slice(t,t+s));return{shift:s,value:r}})(e,r+2);var s;return{shift:n.value+2,value:a}},t.byteToBase58=(e,t=0,r)=>{const n=r||32;return{value:a.default.encode(e.slice(t,t+n)),shift:n}},t.byteToBase58WithLength=(e,r=0)=>{const n=t.P_SHORT(e,r);return{value:a.default.encode(e.slice(r+n.shift,r+n.shift+n.value)),shift:n.shift+n.value}},t.byteToAddressOrAlias=(e,r=0)=>{if(e[r]===t.ALIAS_VERSION){const n=t.byteToStringWithLength(e,r+2);return{shift:n.shift+2,value:`alias:${String.fromCharCode(e[r+1])}:${n.value}`}}return t.byteToBase58(e,r,26)},t.byteNewAliasToString=(e,r=0)=>{const n=t.P_SHORT(e,r).value+2,{value:i}=t.byteToStringWithLength(e,r);return{shift:n,value:i}},t.byteToScript=(e,r=0)=>{if(0===e[r])return{shift:1,value:null};const n=t.P_SHORT(e,r+1),i=r+1+n.shift,a=r+1+n.shift+n.value;return{value:"base64:"+s.fromByteArray(e.slice(i,a)),shift:a-r}}},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.reissue=void 0;const n=r(2),i=r(5),a=r(4),s=r(6),o=r(8),u=r(9),c=r(0);t.reissue=function(e,t){const r=c.TRANSACTION_TYPE.REISSUE,l=e.version||u.DEFAULT_VERSIONS.REISSUE,f=i.convertToPairs(t),p={type:r,version:l,senderPublicKey:i.getSenderPublicKey(f,e),assetId:e.assetId,quantity:e.quantity,reissuable:e.reissuable,chainId:i.networkByte(e.chainId,87),fee:i.fee(e,1e8),feeAssetId:i.normalizeAssetId(e.feeAssetId),timestamp:e.timestamp||Date.now(),proofs:e.proofs||[],id:""};s.validate.reissue(p);const d=l>2?o.txToProtoBytes(p):a.binary.serializeTx(p);return f.forEach(([e,t])=>i.addProof(p,n.signBytes(e,d),t)),p.id=n.base58Encode(n.blake2b(d)),p}},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.burn=void 0;const n=r(4),i=r(2),a=r(5),s=r(6),o=r(8),u=r(9),c=r(0);t.burn=function(e,t){const r=c.TRANSACTION_TYPE.BURN,l=e.version||u.DEFAULT_VERSIONS.BURN,f=a.convertToPairs(t),p={type:r,version:l,senderPublicKey:a.getSenderPublicKey(f,e),assetId:e.assetId,amount:e.amount,chainId:a.networkByte(e.chainId,87),fee:a.fee(e,1e5),feeAssetId:a.normalizeAssetId(e.feeAssetId),timestamp:e.timestamp||Date.now(),proofs:e.proofs||[],id:""};s.validate.burn(p);const d=l>2?o.txToProtoBytes(p):n.binary.serializeTx(p);return f.forEach(([e,t])=>a.addProof(p,i.signBytes(e,d),t)),p.id=i.base58Encode(i.blake2b(d)),p}},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.exchange=void 0;const n=r(4),i=r(2),a=r(5),s=r(6),o=r(8),u=r(9),c=r(0);t.exchange=function(e,t){const r=c.TRANSACTION_TYPE.EXCHANGE,l=e.version||u.DEFAULT_VERSIONS.EXCHANGE,f=a.convertToPairs(t),p={type:r,version:l,senderPublicKey:a.getSenderPublicKey(f,e),order1:e.order1,order2:e.order2,price:e.price,amount:e.amount,buyMatcherFee:e.buyMatcherFee,sellMatcherFee:e.sellMatcherFee,fee:a.fee(e,1e5),timestamp:e.timestamp||Date.now(),proofs:e.proofs||[],chainId:a.networkByte(e.chainId,87),id:""};s.validate.exchange(p);const d=l>2?o.txToProtoBytes(p):n.binary.serializeTx(p);return f.forEach(([e,t])=>a.addProof(p,i.signBytes(e,d),t)),Object.assign(Object.assign({},p),{id:i.base58Encode(i.blake2b(d))})}},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.lease=void 0;const n=r(2),i=r(5),a=r(4),s=r(6),o=r(8),u=r(9),c=r(0);t.lease=function(e,t){const r=c.TRANSACTION_TYPE.LEASE,l=e.version||u.DEFAULT_VERSIONS.LEASE,f=i.convertToPairs(t),p={type:r,version:l,senderPublicKey:i.getSenderPublicKey(f,e),amount:e.amount,recipient:e.recipient,fee:i.fee(e,1e5),feeAssetId:i.normalizeAssetId(e.feeAssetId),timestamp:e.timestamp||Date.now(),proofs:e.proofs||[],chainId:i.networkByte(e.chainId,87),id:""};s.validate.lease(p);const d=l>2?o.txToProtoBytes(p):a.binary.serializeTx(p);return f.forEach(([e,t])=>i.addProof(p,n.signBytes(e,d),t)),p.id=n.base58Encode(n.blake2b(d)),p}},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.cancelLease=void 0;const n=r(4),i=r(2),a=r(5),s=r(6),o=r(8),u=r(9),c=r(0);t.cancelLease=function(e,t){const r=c.TRANSACTION_TYPE.CANCEL_LEASE,l=e.version||u.DEFAULT_VERSIONS.CANCEL_LEASE,f=a.convertToPairs(t),p={type:r,version:l,senderPublicKey:a.getSenderPublicKey(f,e),leaseId:e.leaseId,fee:a.fee(e,1e5),feeAssetId:a.normalizeAssetId(e.feeAssetId),timestamp:e.timestamp||Date.now(),chainId:a.networkByte(e.chainId,87),proofs:e.proofs||[],id:""};s.validate.cancelLease(p);const d=l>2?o.txToProtoBytes(p):n.binary.serializeTx(p);return f.forEach(([e,t])=>a.addProof(p,i.signBytes(e,d),t)),p.id=i.base58Encode(i.blake2b(d)),p}},function(e,t,r){"use strict";(function(e){var n=this&&this.__createBinding||(Object.create?function(e,t,r,n){void 0===n&&(n=r),Object.defineProperty(e,n,{enumerable:!0,get:function(){return t[r]}})}:function(e,t,r,n){void 0===n&&(n=r),e[n]=t[r]}),i=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),a=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var r in e)"default"!==r&&Object.hasOwnProperty.call(e,r)&&n(t,e,r);return i(t,e),t};Object.defineProperty(t,"__esModule",{value:!0}),t.data=void 0;const s=a(r(76)),o=r(4),u=r(2),c=r(5),l=r(6),f=r(8),p=r(9),d=r(0),{BASE58_STRING:h,BASE64_STRING:y,BYTE:g,BYTES:v,COUNT:m,LEN:b,LONG:E,SHORT:S,STRING:T}=o.serializePrimitives,A={integer:["integer",0,E],number:["integer",0,E],boolean:["boolean",1,g],string:["string",3,b(S)(T)],binary:["binary",2,e=>b(S)(y)(e)],_:["binary",2,b(S)(v)]},w=(e,t)=>t?A[t]:A[typeof e]||A._,I=(t,r,n)=>"binary"===t&&(Uint8Array.prototype.isPrototypeOf(r)||Array.isArray(r))?"base64:"+e.from(r).toString("base64"):r;t.data=function(e,t){var r;const n=d.TRANSACTION_TYPE.DATA,i=e.version||p.DEFAULT_VERSIONS.DATA,a=c.convertToPairs(t),y=c.getSenderPublicKey(a,e);if(!Array.isArray(e.data))throw new Error('["data should be array"]');const v=e.timestamp||Date.now(),A=(null!==(r=e.data)&&void 0!==r?r:[]).map(e=>{if(null==e.value)return e;if(e.type)return Object.assign(Object.assign({},e),{value:I(e.type,e.value)});{const t=w(e.value,e.type)[0];return{type:t,key:e.key,value:I(t,e.value)}}}),C=e=>u.concat(b(S)(T)(e.key),[w(e.value,e.type)[1]],w(e.value,e.type)[2](e.value));let B;if(i<2){let e=u.concat(g(d.TRANSACTION_TYPE.DATA),g(1),h(y),m(S)(C)(A),E(v));B=1e5*Math.floor(1+(e.length-1)/1024)}else{let e=A.map(f.dataEntryToProto),t=s.waves.DataTransactionData.encode({data:e}).finish();B=1e5*Math.ceil(t.length/1024)}const k={type:n,version:i,senderPublicKey:y,fee:c.fee(e,B),feeAssetId:c.normalizeAssetId(e.feeAssetId),timestamp:v,proofs:e.proofs||[],chainId:c.networkByte(e.chainId,87),id:"",data:A};l.validate.data(k);const P=i>1?f.txToProtoBytes(k):o.binary.serializeTx(k);return a.forEach(([e,t])=>c.addProof(k,u.signBytes(e,P),t)),k.id=u.base58Encode(u.blake2b(P)),k}}).call(this,r(16).Buffer)},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.issue=void 0;const n=r(2),i=r(5),a=r(4),s=r(6),o=r(8),u=r(9),c=r(0);t.issue=function(e,t){const r=c.TRANSACTION_TYPE.ISSUE,l=e.version||u.DEFAULT_VERSIONS.ISSUE,f=i.convertToPairs(t),p={type:r,version:l,senderPublicKey:i.getSenderPublicKey(f,e),name:e.name,description:e.description,quantity:e.quantity,script:null==e.script?null:i.base64Prefix(e.script),decimals:null==e.decimals?8:e.decimals,reissuable:e.reissuable||!1,fee:1===e.quantity?i.fee(e,1e6):i.fee(e,1e8),timestamp:e.timestamp||Date.now(),chainId:i.networkByte(e.chainId,87),proofs:e.proofs||[],id:""};s.validate.issue(p);const d=l>2?o.txToProtoBytes(p):a.binary.serializeTx(p);return f.forEach(([e,t])=>i.addProof(p,n.signBytes(e,d),t)),p.id=n.base58Encode(n.blake2b(d)),p}},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.transfer=void 0;const n=r(2),i=r(5),a=r(6),s=r(4),o=r(8),u=r(9),c=r(0);t.transfer=function(e,t){const r=c.TRANSACTION_TYPE.TRANSFER,l=e.version||u.DEFAULT_VERSIONS.TRANSFER,f=i.convertToPairs(t),p={type:r,version:l,senderPublicKey:i.getSenderPublicKey(f,e),assetId:i.normalizeAssetId(e.assetId),recipient:e.recipient,amount:e.amount,attachment:e.attachment||"",fee:i.fee(e,1e5),feeAssetId:i.normalizeAssetId(e.feeAssetId),timestamp:e.timestamp||Date.now(),proofs:e.proofs||[],chainId:i.networkByte(e.chainId,i.chainIdFromRecipient(e.recipient)),id:""};a.validate.transfer(p);const d=l>2?o.txToProtoBytes(p):s.binary.serializeTx(p);return f.forEach(([e,t])=>i.addProof(p,n.signBytes(e,d),t)),p.id=n.base58Encode(n.blake2b(d)),p}},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.alias=void 0;const n=r(4),i=r(2),a=r(8),s=r(5),o=r(6),u=r(9),c=r(0);t.alias=function(e,t){const r=c.TRANSACTION_TYPE.ALIAS,l=e.version||u.DEFAULT_VERSIONS.ALIAS,f=s.convertToPairs(t),p={type:r,version:l,senderPublicKey:s.getSenderPublicKey(f,e),alias:e.alias,fee:s.fee(e,1e5),feeAssetId:s.normalizeAssetId(e.feeAssetId),timestamp:e.timestamp||Date.now(),chainId:s.networkByte(e.chainId,87),proofs:e.proofs||[],id:""};o.validate.alias(p);const d=l>2?a.txToProtoBytes(p):n.binary.serializeTx(p),h=l>2?d:[d[0],...d.slice(36,-16)];return f.forEach(([e,t])=>s.addProof(p,i.signBytes(e,d),t)),p.id=i.base58Encode(i.blake2b(Uint8Array.from(h))),p}},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.setScript=void 0;const n=r(2),i=r(5),a=r(4),s=r(6),o=r(8),u=r(9),c=r(0);t.setScript=function(e,t){const r=c.TRANSACTION_TYPE.SET_SCRIPT,l=e.version||u.DEFAULT_VERSIONS.SET_SCRIPT,f=i.convertToPairs(t),p=i.getSenderPublicKey(f,e);if(void 0===e.script)throw new Error("Script field cannot be undefined. Use null explicitly to remove script");const d={type:r,version:l,senderPublicKey:p,chainId:i.networkByte(e.chainId,87),fee:i.fee(e,1e6),feeAssetId:i.normalizeAssetId(e.feeAssetId),timestamp:e.timestamp||Date.now(),proofs:e.proofs||[],id:"",script:i.base64Prefix(e.script)};s.validate.setScript(d);const h=l>1?o.txToProtoBytes(d):a.binary.serializeTx(d);return f.forEach(([e,t])=>i.addProof(d,n.signBytes(e,h),t)),d.id=n.base58Encode(n.blake2b(h)),d}},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.setAssetScript=void 0;const n=r(2),i=r(5),a=r(4),s=r(6),o=r(8),u=r(9),c=r(0);t.setAssetScript=function(e,t){const r=c.TRANSACTION_TYPE.SET_ASSET_SCRIPT,l=e.version||u.DEFAULT_VERSIONS.SET_ASSET_SCRIPT,f=i.convertToPairs(t),p=i.getSenderPublicKey(f,e);if(null==e.script)throw new Error("Asset script cannot be empty");const d={type:r,version:l,senderPublicKey:p,assetId:e.assetId,chainId:i.networkByte(e.chainId,87),fee:i.fee(e,1e8),feeAssetId:i.normalizeAssetId(e.feeAssetId),timestamp:e.timestamp||Date.now(),proofs:e.proofs||[],id:"",script:i.base64Prefix(e.script)||""};s.validate.setAssetScript(d);const h=l>1?o.txToProtoBytes(d):a.binary.serializeTx(d);return f.forEach(([e,t])=>i.addProof(d,n.signBytes(e,h),t)),d.id=n.base58Encode(n.blake2b(h)),d}},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.sponsorship=void 0;const n=r(2),i=r(5),a=r(4),s=r(6),o=r(8),u=r(9),c=r(0);t.sponsorship=function(e,t){const r=c.TRANSACTION_TYPE.SPONSORSHIP,l=e.version||u.DEFAULT_VERSIONS.SPONSORSHIP,f=i.convertToPairs(t),p={type:r,version:l,senderPublicKey:i.getSenderPublicKey(f,e),minSponsoredAssetFee:e.minSponsoredAssetFee,assetId:e.assetId,fee:i.fee(e,1e5),feeAssetId:i.normalizeAssetId(e.feeAssetId),timestamp:e.timestamp||Date.now(),chainId:i.networkByte(e.chainId,87),proofs:e.proofs||[],id:""};s.validate.sponsorship(p);const d=l>1?o.txToProtoBytes(p):a.binary.serializeTx(p);return f.forEach(([e,t])=>i.addProof(p,n.signBytes(e,d),t)),p.id=n.base58Encode(n.blake2b(d)),p}},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.invokeScript=void 0;const n=r(2),i=r(5),a=r(4),s=r(6),o=r(8),u=r(9),c=r(0);t.invokeScript=function(e,t){const r=c.TRANSACTION_TYPE.INVOKE_SCRIPT,f=e.version||u.DEFAULT_VERSIONS.INVOKE_SCRIPT,p=i.convertToPairs(t),d={type:r,version:f,senderPublicKey:i.getSenderPublicKey(p,e),dApp:e.dApp,call:e.call&&Object.assign({args:[]},e.call),payment:l(e.payment),fee:i.fee(e,5e5),feeAssetId:i.normalizeAssetId(e.feeAssetId),timestamp:e.timestamp||Date.now(),chainId:i.networkByte(e.chainId,87),proofs:e.proofs||[],id:""};s.validate.invokeScript(d);const h=f>1?o.txToProtoBytes(d):a.binary.serializeTx(d);return p.forEach(([e,t])=>i.addProof(d,n.signBytes(e,h),t)),d.id=n.base58Encode(n.base58Encode(n.blake2b(h))),d};const l=e=>null==e?[]:e.map(e=>Object.assign(Object.assign({},e),{assetId:"WAVES"===e.assetId?null:e.assetId}))},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.updateAssetInfo=void 0;const n=r(2),i=r(5),a=r(6),s=r(8),o=r(9),u=r(0);t.updateAssetInfo=function(e,t){const r=u.TRANSACTION_TYPE.UPDATE_ASSET_INFO,c=e.version||o.DEFAULT_VERSIONS.UPDATE_ASSET_INFO,l=i.convertToPairs(t),f={type:r,version:c,senderPublicKey:i.getSenderPublicKey(l,e),name:e.name,description:e.description,assetId:e.assetId,fee:i.fee(e,1e5),feeAssetId:i.normalizeAssetId(e.feeAssetId),timestamp:e.timestamp||Date.now(),proofs:e.proofs||[],chainId:i.networkByte(e.chainId,87),id:""};a.validate.updateAssetInfo(f);const p=s.txToProtoBytes(f);return l.forEach(([e,t])=>i.addProof(f,n.signBytes(e,p),t)),f.id=n.base58Encode(n.blake2b(p)),f}},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t){void 0===t&&(t=Object.create(null));var r=Object.keys(e).map((function(t){return[t,e[t]]})).map((function(e){var r=e[0],n=e[1];return[r,Object.prototype.hasOwnProperty.call(t,r)?t[r](n):n]})).filter((function(e){e[0];return null!=e[1]})).map((function(e){return e[0]+"="+e[1]})).join("&");return r.length?"?"+r:""}},function(e,t,r){"use strict";var n=this&&this.__createBinding||(Object.create?function(e,t,r,n){void 0===n&&(n=r),Object.defineProperty(e,n,{enumerable:!0,get:function(){return t[r]}})}:function(e,t,r,n){void 0===n&&(n=r),e[n]=t[r]}),i=this&&this.__exportStar||function(e,t){for(var r in e)"default"===r||Object.prototype.hasOwnProperty.call(t,r)||n(t,e,r)};Object.defineProperty(t,"__esModule",{value:!0}),t.DATA_FIELD_TYPE=t.TRANSACTION_TYPE=t.BINARY_DATA_TYPE=t.STRING_DATA_TYPE=t.BOOLEAN_DATA_TYPE=t.INTEGER_DATA_TYPE=t.ETHEREUM=t.INVOKE_EXPRESSION_TYPE=t.UPDATE_ASSET_INFO_TYPE=t.INVOKE_SCRIPT_TYPE=t.SET_ASSET_SCRIPT_TYPE=t.SPONSORSHIP_TYPE=t.SET_SCRIPT_TYPE=t.DATA_TYPE=t.MASS_TRANSFER_TYPE=t.ALIAS_TYPE=t.CANCEL_LEASE_TYPE=t.LEASE_TYPE=t.EXCHANGE_TYPE=t.BURN_TYPE=t.REISSUE_TYPE=t.TRANSFER_TYPE=t.ISSUE_TYPE=t.PAYMENT_TYPE=t.GENESIS_TYPE=void 0,i(r(165),t),i(r(166),t),t.GENESIS_TYPE=1,t.PAYMENT_TYPE=2,t.ISSUE_TYPE=3,t.TRANSFER_TYPE=4,t.REISSUE_TYPE=5,t.BURN_TYPE=6,t.EXCHANGE_TYPE=7,t.LEASE_TYPE=8,t.CANCEL_LEASE_TYPE=9,t.ALIAS_TYPE=10,t.MASS_TRANSFER_TYPE=11,t.DATA_TYPE=12,t.SET_SCRIPT_TYPE=13,t.SPONSORSHIP_TYPE=14,t.SET_ASSET_SCRIPT_TYPE=15,t.INVOKE_SCRIPT_TYPE=16,t.UPDATE_ASSET_INFO_TYPE=17,t.INVOKE_EXPRESSION_TYPE=18,t.ETHEREUM=19,t.INTEGER_DATA_TYPE="integer",t.BOOLEAN_DATA_TYPE="boolean",t.STRING_DATA_TYPE="string",t.BINARY_DATA_TYPE="binary",t.TRANSACTION_TYPE={GENESIS:t.GENESIS_TYPE,PAYMENT:t.PAYMENT_TYPE,ISSUE:t.ISSUE_TYPE,TRANSFER:t.TRANSFER_TYPE,REISSUE:t.REISSUE_TYPE,BURN:t.BURN_TYPE,EXCHANGE:t.EXCHANGE_TYPE,LEASE:t.LEASE_TYPE,CANCEL_LEASE:t.CANCEL_LEASE_TYPE,ALIAS:t.ALIAS_TYPE,MASS_TRANSFER:t.MASS_TRANSFER_TYPE,DATA:t.DATA_TYPE,SET_SCRIPT:t.SET_SCRIPT_TYPE,SPONSORSHIP:t.SPONSORSHIP_TYPE,SET_ASSET_SCRIPT:t.SET_ASSET_SCRIPT_TYPE,INVOKE_SCRIPT:t.INVOKE_SCRIPT_TYPE,UPDATE_ASSET_INFO:t.UPDATE_ASSET_INFO_TYPE,INVOKE_EXPRESSION:t.INVOKE_EXPRESSION_TYPE,ETHEREUM:t.ETHEREUM},t.DATA_FIELD_TYPE={INTEGER:t.INTEGER_DATA_TYPE,BOOLEAN:t.BOOLEAN_DATA_TYPE,STRING:t.STRING_DATA_TYPE,BINARY:t.BINARY_DATA_TYPE}},function(e,t,r){"use strict";var n=this&&this.__assign||function(){return(n=Object.assign||function(e){for(var t,r=1,n=arguments.length;r<n;r++)for(var i in t=arguments[r])Object.prototype.hasOwnProperty.call(t,i)&&(e[i]=t[i]);return e}).apply(this,arguments)},i=this&&this.__read||function(e,t){var r="function"==typeof Symbol&&e[Symbol.iterator];if(!r)return e;var n,i,a=r.call(e),s=[];try{for(;(void 0===t||t-- >0)&&!(n=a.next()).done;)s.push(n.value)}catch(e){i={error:e}}finally{try{n&&!n.done&&(r=a.return)&&r.call(a)}finally{if(i)throw i.error}}return s},a=this&&this.__spread||function(){for(var e=[],t=0;t<arguments.length;t++)e=e.concat(i(arguments[t]));return e};Object.defineProperty(t,"__esModule",{value:!0});var s=r(24),o=r(62),u=r(26),c=r(11),l=r(21),f=r(18),p=r(36),d=r(100),h=r(101),y=r(102),g=r(113),v=r(114);t.crypto=function(e){if(e&&""==e.seed)throw new Error("Empty seed is not allowed.");var t,r=function(e,t){return function(){for(var r=[],n=0;n<arguments.length;n++)r[n]=arguments[n];return e.apply(void 0,a([t],r))}},i=function(t){return function(){for(var r=[],n=0;n<arguments.length;n++)r[n]=arguments[n];var i=t.apply(void 0,a(r));return!e||e&&"Base58"===e.output?u.base58Encode(i):i}},m=e&&e.seed?e.seed:void 0,b={seedWithNonce:m?r(p.seedWithNonce,m):p.seedWithNonce,signBytes:i(m?r(d.signBytes,m):d.signBytes),keyPair:(t=m?r(p.keyPair,m):p.keyPair,function(){for(var r=[],n=0;n<arguments.length;n++)r[n]=arguments[n];var i=t.apply(void 0,a(r));return!e||e&&"Base58"===e.output?{privateKey:u.base58Encode(i.privateKey),publicKey:u.base58Encode(i.publicKey)}:i}),publicKey:i(m?r(p.publicKey,m):p.publicKey),privateKey:i(m?r(p.privateKey,m):p.privateKey),address:i(m?r(p.address,m):p.address)};return n({},b,{sharedKey:i(o.sharedKey),buildAddress:p.buildAddress,blake2b:f.blake2b,keccak:f.keccak,sha256:f.sha256,base64Encode:u.base64Encode,base64Decode:u.base64Decode,base58Encode:u.base58Encode,base58Decode:u.base58Decode,base16Encode:u.base16Encode,base16Decode:u.base16Decode,stringToBytes:c.stringToBytes,bytesToString:c.bytesToString,random:s.random,randomSeed:s.randomSeed,randomBytes:s.randomBytes,verifySignature:h.verifySignature,verifyPublicKey:h.verifyPublicKey,verifyAddress:h.verifyAddress,messageDecrypt:o.messageDecrypt,messageEncrypt:o.messageEncrypt,aesDecrypt:o.aesDecrypt,aesEncrypt:o.aesEncrypt,encryptSeed:g.encryptSeed,decryptSeed:g.decryptSeed,rsaKeyPair:y.rsaKeyPair,rsaKeyPairSync:y.rsaKeyPairSync,rsaSign:y.rsaSign,rsaVerify:y.rsaVerify,merkleVerify:v.merkleVerify,split:l.split,concat:l.concat})}},function(e,t,r){var n=r(1);r(3),n.cipher=n.cipher||{};var i=e.exports=n.cipher.modes=n.cipher.modes||{};function a(e){if("string"==typeof e&&(e=n.util.createBuffer(e)),n.util.isArray(e)&&e.length>4){var t=e;e=n.util.createBuffer();for(var r=0;r<t.length;++r)e.putByte(t[r])}return n.util.isArray(e)||(e=[e.getInt32(),e.getInt32(),e.getInt32(),e.getInt32()]),e}function s(e){e[e.length-1]=e[e.length-1]+1&4294967295}function o(e){return[e/4294967296|0,4294967295&e]}i.ecb=function(e){e=e||{},this.name="ECB",this.cipher=e.cipher,this.blockSize=e.blockSize||16,this._ints=this.blockSize/4,this._inBlock=new Array(this._ints),this._outBlock=new Array(this._ints)},i.ecb.prototype.start=function(e){},i.ecb.prototype.encrypt=function(e,t,r){if(e.length()<this.blockSize&&!(r&&e.length()>0))return!0;for(var n=0;n<this._ints;++n)this._inBlock[n]=e.getInt32();this.cipher.encrypt(this._inBlock,this._outBlock);for(n=0;n<this._ints;++n)t.putInt32(this._outBlock[n])},i.ecb.prototype.decrypt=function(e,t,r){if(e.length()<this.blockSize&&!(r&&e.length()>0))return!0;for(var n=0;n<this._ints;++n)this._inBlock[n]=e.getInt32();this.cipher.decrypt(this._inBlock,this._outBlock);for(n=0;n<this._ints;++n)t.putInt32(this._outBlock[n])},i.ecb.prototype.pad=function(e,t){var r=e.length()===this.blockSize?this.blockSize:this.blockSize-e.length();return e.fillWithByte(r,r),!0},i.ecb.prototype.unpad=function(e,t){if(t.overflow>0)return!1;var r=e.length(),n=e.at(r-1);return!(n>this.blockSize<<2)&&(e.truncate(n),!0)},i.cbc=function(e){e=e||{},this.name="CBC",this.cipher=e.cipher,this.blockSize=e.blockSize||16,this._ints=this.blockSize/4,this._inBlock=new Array(this._ints),this._outBlock=new Array(this._ints)},i.cbc.prototype.start=function(e){if(null===e.iv){if(!this._prev)throw new Error("Invalid IV parameter.");this._iv=this._prev.slice(0)}else{if(!("iv"in e))throw new Error("Invalid IV parameter.");this._iv=a(e.iv),this._prev=this._iv.slice(0)}},i.cbc.prototype.encrypt=function(e,t,r){if(e.length()<this.blockSize&&!(r&&e.length()>0))return!0;for(var n=0;n<this._ints;++n)this._inBlock[n]=this._prev[n]^e.getInt32();this.cipher.encrypt(this._inBlock,this._outBlock);for(n=0;n<this._ints;++n)t.putInt32(this._outBlock[n]);this._prev=this._outBlock},i.cbc.prototype.decrypt=function(e,t,r){if(e.length()<this.blockSize&&!(r&&e.length()>0))return!0;for(var n=0;n<this._ints;++n)this._inBlock[n]=e.getInt32();this.cipher.decrypt(this._inBlock,this._outBlock);for(n=0;n<this._ints;++n)t.putInt32(this._prev[n]^this._outBlock[n]);this._prev=this._inBlock.slice(0)},i.cbc.prototype.pad=function(e,t){var r=e.length()===this.blockSize?this.blockSize:this.blockSize-e.length();return e.fillWithByte(r,r),!0},i.cbc.prototype.unpad=function(e,t){if(t.overflow>0)return!1;var r=e.length(),n=e.at(r-1);return!(n>this.blockSize<<2)&&(e.truncate(n),!0)},i.cfb=function(e){e=e||{},this.name="CFB",this.cipher=e.cipher,this.blockSize=e.blockSize||16,this._ints=this.blockSize/4,this._inBlock=null,this._outBlock=new Array(this._ints),this._partialBlock=new Array(this._ints),this._partialOutput=n.util.createBuffer(),this._partialBytes=0},i.cfb.prototype.start=function(e){if(!("iv"in e))throw new Error("Invalid IV parameter.");this._iv=a(e.iv),this._inBlock=this._iv.slice(0),this._partialBytes=0},i.cfb.prototype.encrypt=function(e,t,r){var n=e.length();if(0===n)return!0;if(this.cipher.encrypt(this._inBlock,this._outBlock),0===this._partialBytes&&n>=this.blockSize)for(var i=0;i<this._ints;++i)this._inBlock[i]=e.getInt32()^this._outBlock[i],t.putInt32(this._inBlock[i]);else{var a=(this.blockSize-n)%this.blockSize;a>0&&(a=this.blockSize-a),this._partialOutput.clear();for(i=0;i<this._ints;++i)this._partialBlock[i]=e.getInt32()^this._outBlock[i],this._partialOutput.putInt32(this._partialBlock[i]);if(a>0)e.read-=this.blockSize;else for(i=0;i<this._ints;++i)this._inBlock[i]=this._partialBlock[i];if(this._partialBytes>0&&this._partialOutput.getBytes(this._partialBytes),a>0&&!r)return t.putBytes(this._partialOutput.getBytes(a-this._partialBytes)),this._partialBytes=a,!0;t.putBytes(this._partialOutput.getBytes(n-this._partialBytes)),this._partialBytes=0}},i.cfb.prototype.decrypt=function(e,t,r){var n=e.length();if(0===n)return!0;if(this.cipher.encrypt(this._inBlock,this._outBlock),0===this._partialBytes&&n>=this.blockSize)for(var i=0;i<this._ints;++i)this._inBlock[i]=e.getInt32(),t.putInt32(this._inBlock[i]^this._outBlock[i]);else{var a=(this.blockSize-n)%this.blockSize;a>0&&(a=this.blockSize-a),this._partialOutput.clear();for(i=0;i<this._ints;++i)this._partialBlock[i]=e.getInt32(),this._partialOutput.putInt32(this._partialBlock[i]^this._outBlock[i]);if(a>0)e.read-=this.blockSize;else for(i=0;i<this._ints;++i)this._inBlock[i]=this._partialBlock[i];if(this._partialBytes>0&&this._partialOutput.getBytes(this._partialBytes),a>0&&!r)return t.putBytes(this._partialOutput.getBytes(a-this._partialBytes)),this._partialBytes=a,!0;t.putBytes(this._partialOutput.getBytes(n-this._partialBytes)),this._partialBytes=0}},i.ofb=function(e){e=e||{},this.name="OFB",this.cipher=e.cipher,this.blockSize=e.blockSize||16,this._ints=this.blockSize/4,this._inBlock=null,this._outBlock=new Array(this._ints),this._partialOutput=n.util.createBuffer(),this._partialBytes=0},i.ofb.prototype.start=function(e){if(!("iv"in e))throw new Error("Invalid IV parameter.");this._iv=a(e.iv),this._inBlock=this._iv.slice(0),this._partialBytes=0},i.ofb.prototype.encrypt=function(e,t,r){var n=e.length();if(0===e.length())return!0;if(this.cipher.encrypt(this._inBlock,this._outBlock),0===this._partialBytes&&n>=this.blockSize)for(var i=0;i<this._ints;++i)t.putInt32(e.getInt32()^this._outBlock[i]),this._inBlock[i]=this._outBlock[i];else{var a=(this.blockSize-n)%this.blockSize;a>0&&(a=this.blockSize-a),this._partialOutput.clear();for(i=0;i<this._ints;++i)this._partialOutput.putInt32(e.getInt32()^this._outBlock[i]);if(a>0)e.read-=this.blockSize;else for(i=0;i<this._ints;++i)this._inBlock[i]=this._outBlock[i];if(this._partialBytes>0&&this._partialOutput.getBytes(this._partialBytes),a>0&&!r)return t.putBytes(this._partialOutput.getBytes(a-this._partialBytes)),this._partialBytes=a,!0;t.putBytes(this._partialOutput.getBytes(n-this._partialBytes)),this._partialBytes=0}},i.ofb.prototype.decrypt=i.ofb.prototype.encrypt,i.ctr=function(e){e=e||{},this.name="CTR",this.cipher=e.cipher,this.blockSize=e.blockSize||16,this._ints=this.blockSize/4,this._inBlock=null,this._outBlock=new Array(this._ints),this._partialOutput=n.util.createBuffer(),this._partialBytes=0},i.ctr.prototype.start=function(e){if(!("iv"in e))throw new Error("Invalid IV parameter.");this._iv=a(e.iv),this._inBlock=this._iv.slice(0),this._partialBytes=0},i.ctr.prototype.encrypt=function(e,t,r){var n=e.length();if(0===n)return!0;if(this.cipher.encrypt(this._inBlock,this._outBlock),0===this._partialBytes&&n>=this.blockSize)for(var i=0;i<this._ints;++i)t.putInt32(e.getInt32()^this._outBlock[i]);else{var a=(this.blockSize-n)%this.blockSize;a>0&&(a=this.blockSize-a),this._partialOutput.clear();for(i=0;i<this._ints;++i)this._partialOutput.putInt32(e.getInt32()^this._outBlock[i]);if(a>0&&(e.read-=this.blockSize),this._partialBytes>0&&this._partialOutput.getBytes(this._partialBytes),a>0&&!r)return t.putBytes(this._partialOutput.getBytes(a-this._partialBytes)),this._partialBytes=a,!0;t.putBytes(this._partialOutput.getBytes(n-this._partialBytes)),this._partialBytes=0}s(this._inBlock)},i.ctr.prototype.decrypt=i.ctr.prototype.encrypt,i.gcm=function(e){e=e||{},this.name="GCM",this.cipher=e.cipher,this.blockSize=e.blockSize||16,this._ints=this.blockSize/4,this._inBlock=new Array(this._ints),this._outBlock=new Array(this._ints),this._partialOutput=n.util.createBuffer(),this._partialBytes=0,this._R=3774873600},i.gcm.prototype.start=function(e){if(!("iv"in e))throw new Error("Invalid IV parameter.");var t,r=n.util.createBuffer(e.iv);if(this._cipherLength=0,t="additionalData"in e?n.util.createBuffer(e.additionalData):n.util.createBuffer(),this._tagLength="tagLength"in e?e.tagLength:128,this._tag=null,e.decrypt&&(this._tag=n.util.createBuffer(e.tag).getBytes(),this._tag.length!==this._tagLength/8))throw new Error("Authentication tag does not match tag length.");this._hashBlock=new Array(this._ints),this.tag=null,this._hashSubkey=new Array(this._ints),this.cipher.encrypt([0,0,0,0],this._hashSubkey),this.componentBits=4,this._m=this.generateHashTable(this._hashSubkey,this.componentBits);var i=r.length();if(12===i)this._j0=[r.getInt32(),r.getInt32(),r.getInt32(),1];else{for(this._j0=[0,0,0,0];r.length()>0;)this._j0=this.ghash(this._hashSubkey,this._j0,[r.getInt32(),r.getInt32(),r.getInt32(),r.getInt32()]);this._j0=this.ghash(this._hashSubkey,this._j0,[0,0].concat(o(8*i)))}this._inBlock=this._j0.slice(0),s(this._inBlock),this._partialBytes=0,t=n.util.createBuffer(t),this._aDataLength=o(8*t.length());var a=t.length()%this.blockSize;for(a&&t.fillWithByte(0,this.blockSize-a),this._s=[0,0,0,0];t.length()>0;)this._s=this.ghash(this._hashSubkey,this._s,[t.getInt32(),t.getInt32(),t.getInt32(),t.getInt32()])},i.gcm.prototype.encrypt=function(e,t,r){var n=e.length();if(0===n)return!0;if(this.cipher.encrypt(this._inBlock,this._outBlock),0===this._partialBytes&&n>=this.blockSize){for(var i=0;i<this._ints;++i)t.putInt32(this._outBlock[i]^=e.getInt32());this._cipherLength+=this.blockSize}else{var a=(this.blockSize-n)%this.blockSize;a>0&&(a=this.blockSize-a),this._partialOutput.clear();for(i=0;i<this._ints;++i)this._partialOutput.putInt32(e.getInt32()^this._outBlock[i]);if(a<=0||r){if(r){var o=n%this.blockSize;this._cipherLength+=o,this._partialOutput.truncate(this.blockSize-o)}else this._cipherLength+=this.blockSize;for(i=0;i<this._ints;++i)this._outBlock[i]=this._partialOutput.getInt32();this._partialOutput.read-=this.blockSize}if(this._partialBytes>0&&this._partialOutput.getBytes(this._partialBytes),a>0&&!r)return e.read-=this.blockSize,t.putBytes(this._partialOutput.getBytes(a-this._partialBytes)),this._partialBytes=a,!0;t.putBytes(this._partialOutput.getBytes(n-this._partialBytes)),this._partialBytes=0}this._s=this.ghash(this._hashSubkey,this._s,this._outBlock),s(this._inBlock)},i.gcm.prototype.decrypt=function(e,t,r){var n=e.length();if(n<this.blockSize&&!(r&&n>0))return!0;this.cipher.encrypt(this._inBlock,this._outBlock),s(this._inBlock),this._hashBlock[0]=e.getInt32(),this._hashBlock[1]=e.getInt32(),this._hashBlock[2]=e.getInt32(),this._hashBlock[3]=e.getInt32(),this._s=this.ghash(this._hashSubkey,this._s,this._hashBlock);for(var i=0;i<this._ints;++i)t.putInt32(this._outBlock[i]^this._hashBlock[i]);n<this.blockSize?this._cipherLength+=n%this.blockSize:this._cipherLength+=this.blockSize},i.gcm.prototype.afterFinish=function(e,t){var r=!0;t.decrypt&&t.overflow&&e.truncate(this.blockSize-t.overflow),this.tag=n.util.createBuffer();var i=this._aDataLength.concat(o(8*this._cipherLength));this._s=this.ghash(this._hashSubkey,this._s,i);var a=[];this.cipher.encrypt(this._j0,a);for(var s=0;s<this._ints;++s)this.tag.putInt32(this._s[s]^a[s]);return this.tag.truncate(this.tag.length()%(this._tagLength/8)),t.decrypt&&this.tag.bytes()!==this._tag&&(r=!1),r},i.gcm.prototype.multiply=function(e,t){for(var r=[0,0,0,0],n=t.slice(0),i=0;i<128;++i){e[i/32|0]&1<<31-i%32&&(r[0]^=n[0],r[1]^=n[1],r[2]^=n[2],r[3]^=n[3]),this.pow(n,n)}return r},i.gcm.prototype.pow=function(e,t){for(var r=1&e[3],n=3;n>0;--n)t[n]=e[n]>>>1|(1&e[n-1])<<31;t[0]=e[0]>>>1,r&&(t[0]^=this._R)},i.gcm.prototype.tableMultiply=function(e){for(var t=[0,0,0,0],r=0;r<32;++r){var n=e[r/8|0]>>>4*(7-r%8)&15,i=this._m[r][n];t[0]^=i[0],t[1]^=i[1],t[2]^=i[2],t[3]^=i[3]}return t},i.gcm.prototype.ghash=function(e,t,r){return t[0]^=r[0],t[1]^=r[1],t[2]^=r[2],t[3]^=r[3],this.tableMultiply(t)},i.gcm.prototype.generateHashTable=function(e,t){for(var r=8/t,n=4*r,i=16*r,a=new Array(i),s=0;s<i;++s){var o=[0,0,0,0],u=(n-1-s%n)*t;o[s/n|0]=1<<t-1<<u,a[s]=this.generateSubHashTable(this.multiply(o,e),t)}return a},i.gcm.prototype.generateSubHashTable=function(e,t){var r=1<<t,n=r>>>1,i=new Array(r);i[n]=e.slice(0);for(var a=n>>>1;a>0;)this.pow(i[2*a],i[a]=[]),a>>=1;for(a=2;a<n;){for(var s=1;s<a;++s){var o=i[a],u=i[s];i[a+s]=[o[0]^u[0],o[1]^u[1],o[2]^u[2],o[3]^u[3]]}a*=2}for(i[0]=[0,0,0,0],a=n+1;a<r;++a){var c=i[a^n];i[a]=[e[0]^c[0],e[1]^c[1],e[2]^c[2],e[3]^c[3]]}return i}},function(e,t,r){var n=r(1);r(10),r(3);var i=e.exports=n.sha256=n.sha256||{};n.md.sha256=n.md.algorithms.sha256=i,i.create=function(){s||(a=String.fromCharCode(128),a+=n.util.fillString(String.fromCharCode(0),64),o=[1116352408,1899447441,3049323471,3921009573,961987163,1508970993,2453635748,2870763221,3624381080,310598401,607225278,1426881987,1925078388,2162078206,2614888103,3248222580,3835390401,4022224774,264347078,604807628,770255983,1249150122,1555081692,1996064986,2554220882,2821834349,2952996808,3210313671,3336571891,3584528711,113926993,338241895,666307205,773529912,1294757372,1396182291,1695183700,1986661051,2177026350,2456956037,2730485921,2820302411,3259730800,3345764771,3516065817,3600352804,4094571909,275423344,430227734,506948616,659060556,883997877,958139571,1322822218,1537002063,1747873779,1955562222,2024104815,2227730452,2361852424,2428436474,2756734187,3204031479,3329325298],s=!0);var e=null,t=n.util.createBuffer(),r=new Array(64),i={algorithm:"sha256",blockLength:64,digestLength:32,messageLength:0,fullMessageLength:null,messageLengthSize:8,start:function(){i.messageLength=0,i.fullMessageLength=i.messageLength64=[];for(var r=i.messageLengthSize/4,a=0;a<r;++a)i.fullMessageLength.push(0);return t=n.util.createBuffer(),e={h0:1779033703,h1:3144134277,h2:1013904242,h3:2773480762,h4:1359893119,h5:2600822924,h6:528734635,h7:1541459225},i}};return i.start(),i.update=function(a,s){"utf8"===s&&(a=n.util.encodeUtf8(a));var o=a.length;i.messageLength+=o,o=[o/4294967296>>>0,o>>>0];for(var c=i.fullMessageLength.length-1;c>=0;--c)i.fullMessageLength[c]+=o[1],o[1]=o[0]+(i.fullMessageLength[c]/4294967296>>>0),i.fullMessageLength[c]=i.fullMessageLength[c]>>>0,o[0]=o[1]/4294967296>>>0;return t.putBytes(a),u(e,r,t),(t.read>2048||0===t.length())&&t.compact(),i},i.digest=function(){var s=n.util.createBuffer();s.putBytes(t.bytes());var o,c=i.fullMessageLength[i.fullMessageLength.length-1]+i.messageLengthSize&i.blockLength-1;s.putBytes(a.substr(0,i.blockLength-c));for(var l=8*i.fullMessageLength[0],f=0;f<i.fullMessageLength.length-1;++f)l+=(o=8*i.fullMessageLength[f+1])/4294967296>>>0,s.putInt32(l>>>0),l=o>>>0;s.putInt32(l);var p={h0:e.h0,h1:e.h1,h2:e.h2,h3:e.h3,h4:e.h4,h5:e.h5,h6:e.h6,h7:e.h7};u(p,r,s);var d=n.util.createBuffer();return d.putInt32(p.h0),d.putInt32(p.h1),d.putInt32(p.h2),d.putInt32(p.h3),d.putInt32(p.h4),d.putInt32(p.h5),d.putInt32(p.h6),d.putInt32(p.h7),d},i};var a=null,s=!1,o=null;function u(e,t,r){for(var n,i,a,s,u,c,l,f,p,d,h,y,g,v=r.length();v>=64;){for(u=0;u<16;++u)t[u]=r.getInt32();for(;u<64;++u)n=((n=t[u-2])>>>17|n<<15)^(n>>>19|n<<13)^n>>>10,i=((i=t[u-15])>>>7|i<<25)^(i>>>18|i<<14)^i>>>3,t[u]=n+t[u-7]+i+t[u-16]|0;for(c=e.h0,l=e.h1,f=e.h2,p=e.h3,d=e.h4,h=e.h5,y=e.h6,g=e.h7,u=0;u<64;++u)a=(c>>>2|c<<30)^(c>>>13|c<<19)^(c>>>22|c<<10),s=c&l|f&(c^l),n=g+((d>>>6|d<<26)^(d>>>11|d<<21)^(d>>>25|d<<7))+(y^d&(h^y))+o[u]+t[u],g=y,y=h,h=d,d=p+n>>>0,p=f,f=l,l=c,c=n+(i=a+s)>>>0;e.h0=e.h0+c|0,e.h1=e.h1+l|0,e.h2=e.h2+f|0,e.h3=e.h3+p|0,e.h4=e.h4+d|0,e.h5=e.h5+h|0,e.h6=e.h6+y|0,e.h7=e.h7+g|0,v-=64}}},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.seedWordsList=["abandon","ability","able","about","above","absent","absorb","abstract","absurd","abuse","access","accident","account","accuse","achieve","acid","acoustic","acquire","across","act","action","actor","actress","actual","adapt","add","addict","address","adjust","admit","adult","advance","advice","aerobic","affair","afford","afraid","again","age","agent","agree","ahead","aim","air","airport","aisle","alarm","album","alcohol","alert","alien","all","alley","allow","almost","alone","alpha","already","also","alter","always","amateur","amazing","among","amount","amused","analyst","anchor","ancient","anger","angle","angry","animal","ankle","announce","annual","another","answer","antenna","antique","anxiety","any","apart","apology","appear","apple","approve","april","arch","arctic","area","arena","argue","arm","armed","armor","army","around","arrange","arrest","arrive","arrow","art","artefact","artist","artwork","ask","aspect","assault","asset","assist","assume","asthma","athlete","atom","attack","attend","attitude","attract","auction","audit","august","aunt","author","auto","autumn","average","avocado","avoid","awake","aware","away","awesome","awful","awkward","axis","baby","bachelor","bacon","badge","bag","balance","balcony","ball","bamboo","banana","banner","bar","barely","bargain","barrel","base","basic","basket","battle","beach","bean","beauty","because","become","beef","before","begin","behave","behind","believe","below","belt","bench","benefit","best","betray","better","between","beyond","bicycle","bid","bike","bind","biology","bird","birth","bitter","black","blade","blame","blanket","blast","bleak","bless","blind","blood","blossom","blouse","blue","blur","blush","board","boat","body","boil","bomb","bone","bonus","book","boost","border","boring","borrow","boss","bottom","bounce","box","boy","bracket","brain","brand","brass","brave","bread","breeze","brick","bridge","brief","bright","bring","brisk","broccoli","broken","bronze","broom","brother","brown","brush","bubble","buddy","budget","buffalo","build","bulb","bulk","bullet","bundle","bunker","burden","burger","burst","bus","business","busy","butter","buyer","buzz","cabbage","cabin","cable","cactus","cage","cake","call","calm","camera","camp","can","canal","cancel","candy","cannon","canoe","canvas","canyon","capable","capital","captain","car","carbon","card","cargo","carpet","carry","cart","case","cash","casino","castle","casual","cat","catalog","catch","category","cattle","caught","cause","caution","cave","ceiling","celery","cement","census","century","cereal","certain","chair","chalk","champion","change","chaos","chapter","charge","chase","chat","cheap","check","cheese","chef","cherry","chest","chicken","chief","child","chimney","choice","choose","chronic","chuckle","chunk","churn","cigar","cinnamon","circle","citizen","city","civil","claim","clap","clarify","claw","clay","clean","clerk","clever","click","client","cliff","climb","clinic","clip","clock","clog","close","cloth","cloud","clown","club","clump","cluster","clutch","coach","coast","coconut","code","coffee","coil","coin","collect","color","column","combine","come","comfort","comic","common","company","concert","conduct","confirm","congress","connect","consider","control","convince","cook","cool","copper","copy","coral","core","corn","correct","cost","cotton","couch","country","couple","course","cousin","cover","coyote","crack","cradle","craft","cram","crane","crash","crater","crawl","crazy","cream","credit","creek","crew","cricket","crime","crisp","critic","crop","cross","crouch","crowd","crucial","cruel","cruise","crumble","crunch","crush","cry","crystal","cube","culture","cup","cupboard","curious","current","curtain","curve","cushion","custom","cute","cycle","dad","damage","damp","dance","danger","daring","dash","daughter","dawn","day","deal","debate","debris","decade","december","decide","decline","decorate","decrease","deer","defense","define","defy","degree","delay","deliver","demand","demise","denial","dentist","deny","depart","depend","deposit","depth","deputy","derive","describe","desert","design","desk","despair","destroy","detail","detect","develop","device","devote","diagram","dial","diamond","diary","dice","diesel","diet","differ","digital","dignity","dilemma","dinner","dinosaur","direct","dirt","disagree","discover","disease","dish","dismiss","disorder","display","distance","divert","divide","divorce","dizzy","doctor","document","dog","doll","dolphin","domain","donate","donkey","donor","door","dose","double","dove","draft","dragon","drama","drastic","draw","dream","dress","drift","drill","drink","drip","drive","drop","drum","dry","duck","dumb","dune","during","dust","dutch","duty","dwarf","dynamic","eager","eagle","early","earn","earth","easily","east","easy","echo","ecology","economy","edge","edit","educate","effort","egg","eight","either","elbow","elder","electric","elegant","element","elephant","elevator","elite","else","embark","embody","embrace","emerge","emotion","employ","empower","empty","enable","enact","end","endless","endorse","enemy","energy","enforce","engage","engine","enhance","enjoy","enlist","enough","enrich","enroll","ensure","enter","entire","entry","envelope","episode","equal","equip","era","erase","erode","erosion","error","erupt","escape","essay","essence","estate","eternal","ethics","evidence","evil","evoke","evolve","exact","example","excess","exchange","excite","exclude","excuse","execute","exercise","exhaust","exhibit","exile","exist","exit","exotic","expand","expect","expire","explain","expose","express","extend","extra","eye","eyebrow","fabric","face","faculty","fade","faint","faith","fall","false","fame","family","famous","fan","fancy","fantasy","farm","fashion","fat","fatal","father","fatigue","fault","favorite","feature","february","federal","fee","feed","feel","female","fence","festival","fetch","fever","few","fiber","fiction","field","figure","file","film","filter","final","find","fine","finger","finish","fire","firm","first","fiscal","fish","fit","fitness","fix","flag","flame","flash","flat","flavor","flee","flight","flip","float","flock","floor","flower","fluid","flush","fly","foam","focus","fog","foil","fold","follow","food","foot","force","forest","forget","fork","fortune","forum","forward","fossil","foster","found","fox","fragile","frame","frequent","fresh","friend","fringe","frog","front","frost","frown","frozen","fruit","fuel","fun","funny","furnace","fury","future","gadget","gain","galaxy","gallery","game","gap","garage","garbage","garden","garlic","garment","gas","gasp","gate","gather","gauge","gaze","general","genius","genre","gentle","genuine","gesture","ghost","giant","gift","giggle","ginger","giraffe","girl","give","glad","glance","glare","glass","glide","glimpse","globe","gloom","glory","glove","glow","glue","goat","goddess","gold","good","goose","gorilla","gospel","gossip","govern","gown","grab","grace","grain","grant","grape","grass","gravity","great","green","grid","grief","grit","grocery","group","grow","grunt","guard","guess","guide","guilt","guitar","gun","gym","habit","hair","half","hammer","hamster","hand","happy","harbor","hard","harsh","harvest","hat","have","hawk","hazard","head","health","heart","heavy","hedgehog","height","hello","helmet","help","hen","hero","hidden","high","hill","hint","hip","hire","history","hobby","hockey","hold","hole","holiday","hollow","home","honey","hood","hope","horn","horror","horse","hospital","host","hotel","hour","hover","hub","huge","human","humble","humor","hundred","hungry","hunt","hurdle","hurry","hurt","husband","hybrid","ice","icon","idea","identify","idle","ignore","ill","illegal","illness","image","imitate","immense","immune","impact","impose","improve","impulse","inch","include","income","increase","index","indicate","indoor","industry","infant","inflict","inform","inhale","inherit","initial","inject","injury","inmate","inner","innocent","input","inquiry","insane","insect","inside","inspire","install","intact","interest","into","invest","invite","involve","iron","island","isolate","issue","item","ivory","jacket","jaguar","jar","jazz","jealous","jeans","jelly","jewel","job","join","joke","journey","joy","judge","juice","jump","jungle","junior","junk","just","kangaroo","keen","keep","ketchup","key","kick","kid","kidney","kind","kingdom","kiss","kit","kitchen","kite","kitten","kiwi","knee","knife","knock","know","lab","label","labor","ladder","lady","lake","lamp","language","laptop","large","later","latin","laugh","laundry","lava","law","lawn","lawsuit","layer","lazy","leader","leaf","learn","leave","lecture","left","leg","legal","legend","leisure","lemon","lend","length","lens","leopard","lesson","letter","level","liar","liberty","library","license","life","lift","light","like","limb","limit","link","lion","liquid","list","little","live","lizard","load","loan","lobster","local","lock","logic","lonely","long","loop","lottery","loud","lounge","love","loyal","lucky","luggage","lumber","lunar","lunch","luxury","lyrics","machine","mad","magic","magnet","maid","mail","main","major","make","mammal","man","manage","mandate","mango","mansion","manual","maple","marble","march","margin","marine","market","marriage","mask","mass","master","match","material","math","matrix","matter","maximum","maze","meadow","mean","measure","meat","mechanic","medal","media","melody","melt","member","memory","mention","menu","mercy","merge","merit","merry","mesh","message","metal","method","middle","midnight","milk","million","mimic","mind","minimum","minor","minute","miracle","mirror","misery","miss","mistake","mix","mixed","mixture","mobile","model","modify","mom","moment","monitor","monkey","monster","month","moon","moral","more","morning","mosquito","mother","motion","motor","mountain","mouse","move","movie","much","muffin","mule","multiply","muscle","museum","mushroom","music","must","mutual","myself","mystery","myth","naive","name","napkin","narrow","nasty","nation","nature","near","neck","need","negative","neglect","neither","nephew","nerve","nest","net","network","neutral","never","news","next","nice","night","noble","noise","nominee","noodle","normal","north","nose","notable","note","nothing","notice","novel","now","nuclear","number","nurse","nut","oak","obey","object","oblige","obscure","observe","obtain","obvious","occur","ocean","october","odor","off","offer","office","often","oil","okay","old","olive","olympic","omit","once","one","onion","online","only","open","opera","opinion","oppose","option","orange","orbit","orchard","order","ordinary","organ","orient","original","orphan","ostrich","other","outdoor","outer","output","outside","oval","oven","over","own","owner","oxygen","oyster","ozone","pact","paddle","page","pair","palace","palm","panda","panel","panic","panther","paper","parade","parent","park","parrot","party","pass","patch","path","patient","patrol","pattern","pause","pave","payment","peace","peanut","pear","peasant","pelican","pen","penalty","pencil","people","pepper","perfect","permit","person","pet","phone","photo","phrase","physical","piano","picnic","picture","piece","pig","pigeon","pill","pilot","pink","pioneer","pipe","pistol","pitch","pizza","place","planet","plastic","plate","play","please","pledge","pluck","plug","plunge","poem","poet","point","polar","pole","police","pond","pony","pool","popular","portion","position","possible","post","potato","pottery","poverty","powder","power","practice","praise","predict","prefer","prepare","present","pretty","prevent","price","pride","primary","print","priority","prison","private","prize","problem","process","produce","profit","program","project","promote","proof","property","prosper","protect","proud","provide","public","pudding","pull","pulp","pulse","pumpkin","punch","pupil","puppy","purchase","purity","purpose","purse","push","put","puzzle","pyramid","quality","quantum","quarter","question","quick","quit","quiz","quote","rabbit","raccoon","race","rack","radar","radio","rail","rain","raise","rally","ramp","ranch","random","range","rapid","rare","rate","rather","raven","raw","razor","ready","real","reason","rebel","rebuild","recall","receive","recipe","record","recycle","reduce","reflect","reform","refuse","region","regret","regular","reject","relax","release","relief","rely","remain","remember","remind","remove","render","renew","rent","reopen","repair","repeat","replace","report","require","rescue","resemble","resist","resource","response","result","retire","retreat","return","reunion","reveal","review","reward","rhythm","rib","ribbon","rice","rich","ride","ridge","rifle","right","rigid","ring","riot","ripple","risk","ritual","rival","river","road","roast","robot","robust","rocket","romance","roof","rookie","room","rose","rotate","rough","round","route","royal","rubber","rude","rug","rule","run","runway","rural","sad","saddle","sadness","safe","sail","salad","salmon","salon","salt","salute","same","sample","sand","satisfy","satoshi","sauce","sausage","save","say","scale","scan","scare","scatter","scene","scheme","school","science","scissors","scorpion","scout","scrap","screen","script","scrub","sea","search","season","seat","second","secret","section","security","seed","seek","segment","select","sell","seminar","senior","sense","sentence","series","service","session","settle","setup","seven","shadow","shaft","shallow","share","shed","shell","sheriff","shield","shift","shine","ship","shiver","shock","shoe","shoot","shop","short","shoulder","shove","shrimp","shrug","shuffle","shy","sibling","sick","side","siege","sight","sign","silent","silk","silly","silver","similar","simple","since","sing","siren","sister","situate","six","size","skate","sketch","ski","skill","skin","skirt","skull","slab","slam","sleep","slender","slice","slide","slight","slim","slogan","slot","slow","slush","small","smart","smile","smoke","smooth","snack","snake","snap","sniff","snow","soap","soccer","social","sock","soda","soft","solar","soldier","solid","solution","solve","someone","song","soon","sorry","sort","soul","sound","soup","source","south","space","spare","spatial","spawn","speak","special","speed","spell","spend","sphere","spice","spider","spike","spin","spirit","split","spoil","sponsor","spoon","sport","spot","spray","spread","spring","spy","square","squeeze","squirrel","stable","stadium","staff","stage","stairs","stamp","stand","start","state","stay","steak","steel","stem","step","stereo","stick","still","sting","stock","stomach","stone","stool","story","stove","strategy","street","strike","strong","struggle","student","stuff","stumble","style","subject","submit","subway","success","such","sudden","suffer","sugar","suggest","suit","summer","sun","sunny","sunset","super","supply","supreme","sure","surface","surge","surprise","surround","survey","suspect","sustain","swallow","swamp","swap","swarm","swear","sweet","swift","swim","swing","switch","sword","symbol","symptom","syrup","system","table","tackle","tag","tail","talent","talk","tank","tape","target","task","taste","tattoo","taxi","teach","team","tell","ten","tenant","tennis","tent","term","test","text","thank","that","theme","then","theory","there","they","thing","this","thought","three","thrive","throw","thumb","thunder","ticket","tide","tiger","tilt","timber","time","tiny","tip","tired","tissue","title","toast","tobacco","today","toddler","toe","together","toilet","token","tomato","tomorrow","tone","tongue","tonight","tool","tooth","top","topic","topple","torch","tornado","tortoise","toss","total","tourist","toward","tower","town","toy","track","trade","traffic","tragic","train","transfer","trap","trash","travel","tray","treat","tree","trend","trial","tribe","trick","trigger","trim","trip","trophy","trouble","truck","true","truly","trumpet","trust","truth","try","tube","tuition","tumble","tuna","tunnel","turkey","turn","turtle","twelve","twenty","twice","twin","twist","two","type","typical","ugly","umbrella","unable","unaware","uncle","uncover","under","undo","unfair","unfold","unhappy","uniform","unique","unit","universe","unknown","unlock","until","unusual","unveil","update","upgrade","uphold","upon","upper","upset","urban","urge","usage","use","used","useful","useless","usual","utility","vacant","vacuum","vague","valid","valley","valve","van","vanish","vapor","various","vast","vault","vehicle","velvet","vendor","venture","venue","verb","verify","version","very","vessel","veteran","viable","vibrant","vicious","victory","video","view","village","vintage","violin","virtual","virus","visa","visit","visual","vital","vivid","vocal","voice","void","volcano","volume","vote","voyage","wage","wagon","wait","walk","wall","walnut","want","warfare","warm","warrior","wash","wasp","waste","water","wave","way","wealth","weapon","wear","weasel","weather","web","wedding","weekend","weird","welcome","west","wet","whale","what","wheat","wheel","when","where","whip","whisper","wide","width","wife","wild","will","win","window","wine","wing","wink","winner","winter","wire","wisdom","wise","wish","witness","wolf","woman","wonder","wood","wool","word","work","world","worry","worth","wrap","wreck","wrestle","wrist","write","wrong","yard","year","yellow","you","young","youth","zebra","zero","zone","zoo"]},function(e,t,r){"use strict";var n=this&&this.__read||function(e,t){var r="function"==typeof Symbol&&e[Symbol.iterator];if(!r)return e;var n,i,a=r.call(e),s=[];try{for(;(void 0===t||t-- >0)&&!(n=a.next()).done;)s.push(n.value)}catch(e){i={error:e}}finally{try{n&&!n.done&&(r=a.return)&&r.call(a)}finally{if(i)throw i.error}}return s},i=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var r in e)Object.hasOwnProperty.call(e,r)&&(t[r]=e[r]);return t.default=e,t},a=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});var s=i(r(33)),o=i(r(3)),u=r(24),c=r(12),l=r(18),f=r(21),p=a(r(27)),d=r(11);t.aesEncrypt=function(e,t,r,n){void 0===r&&(r="CBC");var i=s.createCipher("AES-"+r,d.bytesToString(c._fromIn(t),"raw"));return i.start({iv:n&&o.createBuffer(d.bytesToString(c._fromIn(n),"raw"))}),i.update(o.createBuffer(d.bytesToString(e,"raw"))),i.finish(),d.stringToBytes(i.output.getBytes(),"raw")},t.aesDecrypt=function(e,t,r,n){void 0===r&&(r="CBC");var i=s.createDecipher("AES-"+r,d.bytesToString(c._fromIn(t),"raw"));i.start({iv:n&&o.createBuffer(d.bytesToString(c._fromIn(n),"raw"))});var a=o.createBuffer(d.bytesToString(c._fromIn(e),"raw"));if(i.update(a),!i.finish())throw new Error("Failed to decrypt data with provided key");return d.stringToBytes(i.output.getBytes(),"raw")},t.messageEncrypt=function(e,r){var n=Uint8Array.from([1]),i=u.randomBytes(32),a=u.randomBytes(16),s=d.stringToBytes(r),o=t.aesEncrypt(s,i,"CTR",a),c=t.aesEncrypt(i,e,"ECB"),p=l.hmacSHA256(s,i),h=l.hmacSHA256(f.concat(i,a),e);return f.concat(n,c,h,p,a,o)},t.messageDecrypt=function(e,r){var i=n(f.split(r,1,48,32,32,16),6),a=(i[0],i[1]),s=i[2],o=i[3],u=i[4],p=i[5],h=t.aesDecrypt(a,e,"ECB");if(!c._fromIn(l.hmacSHA256(f.concat(h,u),c._fromIn(e))).every((function(e,t){return e===s[t]})))throw new Error("Invalid key");var y=t.aesDecrypt(p,h,"CTR",u);if(!c._fromIn(l.hmacSHA256(y,h)).every((function(e,t){return e===o[t]})))throw new Error("Invalid message");return d.bytesToString(y)},t.sharedKey=function(e,t,r){var n=p.default.sharedKey(c._fromIn(e),c._fromIn(t)),i=l.sha256(c._fromRawIn(r));return l.hmacSHA256(n,i)}},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=r(12),i=r(11);t.Seed={isSeedWithNonce:function(e){return void 0!==e.nonce},toBinary:function(e){return t.Seed.isSeedWithNonce(e)?{seed:t.Seed.toBinary(e.seed).seed,nonce:e.nonce}:{seed:n._fromRawIn(e),nonce:void 0}},toString:function(e){return i.bytesToString(t.Seed.toBinary(e).seed)}}},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=r(22),i=r(22);t.ChaidId={toNumber:function(e){return"string"==typeof e?e.charCodeAt(0):e},isMainnet:function(e){return t.ChaidId.toNumber(e)===n.MAIN_NET_CHAIN_ID},isTestnet:function(e){return t.ChaidId.toNumber(e)===i.TEST_NET_CHAIN_ID}}},function(e,t,r){var n=r(1);if(r(32),r(19),r(66),r(10),r(20),r(67),r(38),r(13),r(104),r(28),r(3),void 0===i)var i=n.jsbn.BigInteger;var a=n.asn1,s=n.pki=n.pki||{};e.exports=s.pbe=n.pbe=n.pbe||{};var o=s.oids,u={name:"EncryptedPrivateKeyInfo",tagClass:a.Class.UNIVERSAL,type:a.Type.SEQUENCE,constructed:!0,value:[{name:"EncryptedPrivateKeyInfo.encryptionAlgorithm",tagClass:a.Class.UNIVERSAL,type:a.Type.SEQUENCE,constructed:!0,value:[{name:"AlgorithmIdentifier.algorithm",tagClass:a.Class.UNIVERSAL,type:a.Type.OID,constructed:!1,capture:"encryptionOid"},{name:"AlgorithmIdentifier.parameters",tagClass:a.Class.UNIVERSAL,type:a.Type.SEQUENCE,constructed:!0,captureAsn1:"encryptionParams"}]},{name:"EncryptedPrivateKeyInfo.encryptedData",tagClass:a.Class.UNIVERSAL,type:a.Type.OCTETSTRING,constructed:!1,capture:"encryptedData"}]},c={name:"PBES2Algorithms",tagClass:a.Class.UNIVERSAL,type:a.Type.SEQUENCE,constructed:!0,value:[{name:"PBES2Algorithms.keyDerivationFunc",tagClass:a.Class.UNIVERSAL,type:a.Type.SEQUENCE,constructed:!0,value:[{name:"PBES2Algorithms.keyDerivationFunc.oid",tagClass:a.Class.UNIVERSAL,type:a.Type.OID,constructed:!1,capture:"kdfOid"},{name:"PBES2Algorithms.params",tagClass:a.Class.UNIVERSAL,type:a.Type.SEQUENCE,constructed:!0,value:[{name:"PBES2Algorithms.params.salt",tagClass:a.Class.UNIVERSAL,type:a.Type.OCTETSTRING,constructed:!1,capture:"kdfSalt"},{name:"PBES2Algorithms.params.iterationCount",tagClass:a.Class.UNIVERSAL,type:a.Type.INTEGER,constructed:!1,capture:"kdfIterationCount"},{name:"PBES2Algorithms.params.keyLength",tagClass:a.Class.UNIVERSAL,type:a.Type.INTEGER,constructed:!1,optional:!0,capture:"keyLength"},{name:"PBES2Algorithms.params.prf",tagClass:a.Class.UNIVERSAL,type:a.Type.SEQUENCE,constructed:!0,optional:!0,value:[{name:"PBES2Algorithms.params.prf.algorithm",tagClass:a.Class.UNIVERSAL,type:a.Type.OID,constructed:!1,capture:"prfOid"}]}]}]},{name:"PBES2Algorithms.encryptionScheme",tagClass:a.Class.UNIVERSAL,type:a.Type.SEQUENCE,constructed:!0,value:[{name:"PBES2Algorithms.encryptionScheme.oid",tagClass:a.Class.UNIVERSAL,type:a.Type.OID,constructed:!1,capture:"encOid"},{name:"PBES2Algorithms.encryptionScheme.iv",tagClass:a.Class.UNIVERSAL,type:a.Type.OCTETSTRING,constructed:!1,capture:"encIv"}]}]},l={name:"pkcs-12PbeParams",tagClass:a.Class.UNIVERSAL,type:a.Type.SEQUENCE,constructed:!0,value:[{name:"pkcs-12PbeParams.salt",tagClass:a.Class.UNIVERSAL,type:a.Type.OCTETSTRING,constructed:!1,capture:"salt"},{name:"pkcs-12PbeParams.iterations",tagClass:a.Class.UNIVERSAL,type:a.Type.INTEGER,constructed:!1,capture:"iterations"}]};function f(e,t){return e.start().update(t).digest().getBytes()}function p(e){var t;if(e){if(!(t=s.oids[a.derToOid(e)])){var r=new Error("Unsupported PRF OID.");throw r.oid=e,r.supported=["hmacWithSHA1","hmacWithSHA224","hmacWithSHA256","hmacWithSHA384","hmacWithSHA512"],r}}else t="hmacWithSHA1";return d(t)}function d(e){var t=n.md;switch(e){case"hmacWithSHA224":t=n.md.sha512;case"hmacWithSHA1":case"hmacWithSHA256":case"hmacWithSHA384":case"hmacWithSHA512":e=e.substr(8).toLowerCase();break;default:var r=new Error("Unsupported PRF algorithm.");throw r.algorithm=e,r.supported=["hmacWithSHA1","hmacWithSHA224","hmacWithSHA256","hmacWithSHA384","hmacWithSHA512"],r}if(!t||!(e in t))throw new Error("Unknown hash algorithm: "+e);return t[e].create()}s.encryptPrivateKeyInfo=function(e,t,r){(r=r||{}).saltSize=r.saltSize||8,r.count=r.count||2048,r.algorithm=r.algorithm||"aes128",r.prfAlgorithm=r.prfAlgorithm||"sha1";var i,u,c,l=n.random.getBytesSync(r.saltSize),f=r.count,p=a.integerToDer(f);if(0===r.algorithm.indexOf("aes")||"des"===r.algorithm){var h,y,g;switch(r.algorithm){case"aes128":i=16,h=16,y=o["aes128-CBC"],g=n.aes.createEncryptionCipher;break;case"aes192":i=24,h=16,y=o["aes192-CBC"],g=n.aes.createEncryptionCipher;break;case"aes256":i=32,h=16,y=o["aes256-CBC"],g=n.aes.createEncryptionCipher;break;case"des":i=8,h=8,y=o.desCBC,g=n.des.createEncryptionCipher;break;default:throw(T=new Error("Cannot encrypt private key. Unknown encryption algorithm.")).algorithm=r.algorithm,T}var v="hmacWith"+r.prfAlgorithm.toUpperCase(),m=d(v),b=n.pkcs5.pbkdf2(t,l,f,i,m),E=n.random.getBytesSync(h);(A=g(b)).start(E),A.update(a.toDer(e)),A.finish(),c=A.output.getBytes();var S=function(e,t,r,i){var o=a.create(a.Class.UNIVERSAL,a.Type.SEQUENCE,!0,[a.create(a.Class.UNIVERSAL,a.Type.OCTETSTRING,!1,e),a.create(a.Class.UNIVERSAL,a.Type.INTEGER,!1,t.getBytes())]);"hmacWithSHA1"!==i&&o.value.push(a.create(a.Class.UNIVERSAL,a.Type.INTEGER,!1,n.util.hexToBytes(r.toString(16))),a.create(a.Class.UNIVERSAL,a.Type.SEQUENCE,!0,[a.create(a.Class.UNIVERSAL,a.Type.OID,!1,a.oidToDer(s.oids[i]).getBytes()),a.create(a.Class.UNIVERSAL,a.Type.NULL,!1,"")]));return o}(l,p,i,v);u=a.create(a.Class.UNIVERSAL,a.Type.SEQUENCE,!0,[a.create(a.Class.UNIVERSAL,a.Type.OID,!1,a.oidToDer(o.pkcs5PBES2).getBytes()),a.create(a.Class.UNIVERSAL,a.Type.SEQUENCE,!0,[a.create(a.Class.UNIVERSAL,a.Type.SEQUENCE,!0,[a.create(a.Class.UNIVERSAL,a.Type.OID,!1,a.oidToDer(o.pkcs5PBKDF2).getBytes()),S]),a.create(a.Class.UNIVERSAL,a.Type.SEQUENCE,!0,[a.create(a.Class.UNIVERSAL,a.Type.OID,!1,a.oidToDer(y).getBytes()),a.create(a.Class.UNIVERSAL,a.Type.OCTETSTRING,!1,E)])])])}else{var T;if("3des"!==r.algorithm)throw(T=new Error("Cannot encrypt private key. Unknown encryption algorithm.")).algorithm=r.algorithm,T;i=24;var A,w=new n.util.ByteBuffer(l);b=s.pbe.generatePkcs12Key(t,w,1,f,i),E=s.pbe.generatePkcs12Key(t,w,2,f,i);(A=n.des.createEncryptionCipher(b)).start(E),A.update(a.toDer(e)),A.finish(),c=A.output.getBytes(),u=a.create(a.Class.UNIVERSAL,a.Type.SEQUENCE,!0,[a.create(a.Class.UNIVERSAL,a.Type.OID,!1,a.oidToDer(o["pbeWithSHAAnd3-KeyTripleDES-CBC"]).getBytes()),a.create(a.Class.UNIVERSAL,a.Type.SEQUENCE,!0,[a.create(a.Class.UNIVERSAL,a.Type.OCTETSTRING,!1,l),a.create(a.Class.UNIVERSAL,a.Type.INTEGER,!1,p.getBytes())])])}return a.create(a.Class.UNIVERSAL,a.Type.SEQUENCE,!0,[u,a.create(a.Class.UNIVERSAL,a.Type.OCTETSTRING,!1,c)])},s.decryptPrivateKeyInfo=function(e,t){var r=null,i={},o=[];if(!a.validate(e,u,i,o)){var c=new Error("Cannot read encrypted private key. ASN.1 object is not a supported EncryptedPrivateKeyInfo.");throw c.errors=o,c}var l=a.derToOid(i.encryptionOid),f=s.pbe.getCipher(l,i.encryptionParams,t),p=n.util.createBuffer(i.encryptedData);return f.update(p),f.finish()&&(r=a.fromDer(f.output)),r},s.encryptedPrivateKeyToPem=function(e,t){var r={type:"ENCRYPTED PRIVATE KEY",body:a.toDer(e).getBytes()};return n.pem.encode(r,{maxline:t})},s.encryptedPrivateKeyFromPem=function(e){var t=n.pem.decode(e)[0];if("ENCRYPTED PRIVATE KEY"!==t.type){var r=new Error('Could not convert encrypted private key from PEM; PEM header type is "ENCRYPTED PRIVATE KEY".');throw r.headerType=t.type,r}if(t.procType&&"ENCRYPTED"===t.procType.type)throw new Error("Could not convert encrypted private key from PEM; PEM is encrypted.");return a.fromDer(t.body)},s.encryptRsaPrivateKey=function(e,t,r){if(!(r=r||{}).legacy){var i=s.wrapRsaPrivateKey(s.privateKeyToAsn1(e));return i=s.encryptPrivateKeyInfo(i,t,r),s.encryptedPrivateKeyToPem(i)}var o,u,c,l;switch(r.algorithm){case"aes128":o="AES-128-CBC",c=16,u=n.random.getBytesSync(16),l=n.aes.createEncryptionCipher;break;case"aes192":o="AES-192-CBC",c=24,u=n.random.getBytesSync(16),l=n.aes.createEncryptionCipher;break;case"aes256":o="AES-256-CBC",c=32,u=n.random.getBytesSync(16),l=n.aes.createEncryptionCipher;break;case"3des":o="DES-EDE3-CBC",c=24,u=n.random.getBytesSync(8),l=n.des.createEncryptionCipher;break;case"des":o="DES-CBC",c=8,u=n.random.getBytesSync(8),l=n.des.createEncryptionCipher;break;default:var f=new Error('Could not encrypt RSA private key; unsupported encryption algorithm "'+r.algorithm+'".');throw f.algorithm=r.algorithm,f}var p=l(n.pbe.opensslDeriveBytes(t,u.substr(0,8),c));p.start(u),p.update(a.toDer(s.privateKeyToAsn1(e))),p.finish();var d={type:"RSA PRIVATE KEY",procType:{version:"4",type:"ENCRYPTED"},dekInfo:{algorithm:o,parameters:n.util.bytesToHex(u).toUpperCase()},body:p.output.getBytes()};return n.pem.encode(d)},s.decryptRsaPrivateKey=function(e,t){var r=null,i=n.pem.decode(e)[0];if("ENCRYPTED PRIVATE KEY"!==i.type&&"PRIVATE KEY"!==i.type&&"RSA PRIVATE KEY"!==i.type)throw(c=new Error('Could not convert private key from PEM; PEM header type is not "ENCRYPTED PRIVATE KEY", "PRIVATE KEY", or "RSA PRIVATE KEY".')).headerType=c,c;if(i.procType&&"ENCRYPTED"===i.procType.type){var o,u;switch(i.dekInfo.algorithm){case"DES-CBC":o=8,u=n.des.createDecryptionCipher;break;case"DES-EDE3-CBC":o=24,u=n.des.createDecryptionCipher;break;case"AES-128-CBC":o=16,u=n.aes.createDecryptionCipher;break;case"AES-192-CBC":o=24,u=n.aes.createDecryptionCipher;break;case"AES-256-CBC":o=32,u=n.aes.createDecryptionCipher;break;case"RC2-40-CBC":o=5,u=function(e){return n.rc2.createDecryptionCipher(e,40)};break;case"RC2-64-CBC":o=8,u=function(e){return n.rc2.createDecryptionCipher(e,64)};break;case"RC2-128-CBC":o=16,u=function(e){return n.rc2.createDecryptionCipher(e,128)};break;default:var c;throw(c=new Error('Could not decrypt private key; unsupported encryption algorithm "'+i.dekInfo.algorithm+'".')).algorithm=i.dekInfo.algorithm,c}var l=n.util.hexToBytes(i.dekInfo.parameters),f=u(n.pbe.opensslDeriveBytes(t,l.substr(0,8),o));if(f.start(l),f.update(n.util.createBuffer(i.body)),!f.finish())return r;r=f.output.getBytes()}else r=i.body;return null!==(r="ENCRYPTED PRIVATE KEY"===i.type?s.decryptPrivateKeyInfo(a.fromDer(r),t):a.fromDer(r))&&(r=s.privateKeyFromAsn1(r)),r},s.pbe.generatePkcs12Key=function(e,t,r,i,a,s){var o,u;if(null==s){if(!("sha1"in n.md))throw new Error('"sha1" hash algorithm unavailable.');s=n.md.sha1.create()}var c=s.digestLength,l=s.blockLength,f=new n.util.ByteBuffer,p=new n.util.ByteBuffer;if(null!=e){for(u=0;u<e.length;u++)p.putInt16(e.charCodeAt(u));p.putInt16(0)}var d=p.length(),h=t.length(),y=new n.util.ByteBuffer;y.fillWithByte(r,l);var g=l*Math.ceil(h/l),v=new n.util.ByteBuffer;for(u=0;u<g;u++)v.putByte(t.at(u%h));var m=l*Math.ceil(d/l),b=new n.util.ByteBuffer;for(u=0;u<m;u++)b.putByte(p.at(u%d));var E=v;E.putBuffer(b);for(var S=Math.ceil(a/c),T=1;T<=S;T++){var A=new n.util.ByteBuffer;A.putBytes(y.bytes()),A.putBytes(E.bytes());for(var w=0;w<i;w++)s.start(),s.update(A.getBytes()),A=s.digest();var I=new n.util.ByteBuffer;for(u=0;u<l;u++)I.putByte(A.at(u%c));var C=Math.ceil(h/l)+Math.ceil(d/l),B=new n.util.ByteBuffer;for(o=0;o<C;o++){var k=new n.util.ByteBuffer(E.getBytes(l)),P=511;for(u=I.length()-1;u>=0;u--)P>>=8,P+=I.at(u)+k.at(u),k.setAt(u,255&P);B.putBuffer(k)}E=B,f.putBuffer(A)}return f.truncate(f.length()-a),f},s.pbe.getCipher=function(e,t,r){switch(e){case s.oids.pkcs5PBES2:return s.pbe.getCipherForPBES2(e,t,r);case s.oids["pbeWithSHAAnd3-KeyTripleDES-CBC"]:case s.oids["pbewithSHAAnd40BitRC2-CBC"]:return s.pbe.getCipherForPKCS12PBE(e,t,r);default:var n=new Error("Cannot read encrypted PBE data block. Unsupported OID.");throw n.oid=e,n.supportedOids=["pkcs5PBES2","pbeWithSHAAnd3-KeyTripleDES-CBC","pbewithSHAAnd40BitRC2-CBC"],n}},s.pbe.getCipherForPBES2=function(e,t,r){var i,o={},u=[];if(!a.validate(t,c,o,u))throw(i=new Error("Cannot read password-based-encryption algorithm parameters. ASN.1 object is not a supported EncryptedPrivateKeyInfo.")).errors=u,i;if((e=a.derToOid(o.kdfOid))!==s.oids.pkcs5PBKDF2)throw(i=new Error("Cannot read encrypted private key. Unsupported key derivation function OID.")).oid=e,i.supportedOids=["pkcs5PBKDF2"],i;if((e=a.derToOid(o.encOid))!==s.oids["aes128-CBC"]&&e!==s.oids["aes192-CBC"]&&e!==s.oids["aes256-CBC"]&&e!==s.oids["des-EDE3-CBC"]&&e!==s.oids.desCBC)throw(i=new Error("Cannot read encrypted private key. Unsupported encryption scheme OID.")).oid=e,i.supportedOids=["aes128-CBC","aes192-CBC","aes256-CBC","des-EDE3-CBC","desCBC"],i;var l,f,d=o.kdfSalt,h=n.util.createBuffer(o.kdfIterationCount);switch(h=h.getInt(h.length()<<3),s.oids[e]){case"aes128-CBC":l=16,f=n.aes.createDecryptionCipher;break;case"aes192-CBC":l=24,f=n.aes.createDecryptionCipher;break;case"aes256-CBC":l=32,f=n.aes.createDecryptionCipher;break;case"des-EDE3-CBC":l=24,f=n.des.createDecryptionCipher;break;case"desCBC":l=8,f=n.des.createDecryptionCipher}var y=p(o.prfOid),g=n.pkcs5.pbkdf2(r,d,h,l,y),v=o.encIv,m=f(g);return m.start(v),m},s.pbe.getCipherForPKCS12PBE=function(e,t,r){var i={},o=[];if(!a.validate(t,l,i,o))throw(y=new Error("Cannot read password-based-encryption algorithm parameters. ASN.1 object is not a supported EncryptedPrivateKeyInfo.")).errors=o,y;var u,c,f,d=n.util.createBuffer(i.salt),h=n.util.createBuffer(i.iterations);switch(h=h.getInt(h.length()<<3),e){case s.oids["pbeWithSHAAnd3-KeyTripleDES-CBC"]:u=24,c=8,f=n.des.startDecrypting;break;case s.oids["pbewithSHAAnd40BitRC2-CBC"]:u=5,c=8,f=function(e,t){var r=n.rc2.createDecryptionCipher(e,40);return r.start(t,null),r};break;default:var y;throw(y=new Error("Cannot read PKCS #12 PBE data block. Unsupported OID.")).oid=e,y}var g=p(i.prfOid),v=s.pbe.generatePkcs12Key(r,d,1,h,u,g);return g.start(),f(v,s.pbe.generatePkcs12Key(r,d,2,h,c,g))},s.pbe.opensslDeriveBytes=function(e,t,r,i){if(null==i){if(!("md5"in n.md))throw new Error('"md5" hash algorithm unavailable.');i=n.md.md5.create()}null===t&&(t="");for(var a=[f(i,e+t)],s=16,o=1;s<r;++o,s+=16)a.push(f(i,a[o-1]+e+t));return a.join("").substr(0,r)}},function(e,t,r){var n=r(1);function i(e,t){n.cipher.registerAlgorithm(e,(function(){return new n.des.Algorithm(e,t)}))}r(33),r(59),r(3),e.exports=n.des=n.des||{},n.des.startEncrypting=function(e,t,r,n){var i=h({key:e,output:r,decrypt:!1,mode:n||(null===t?"ECB":"CBC")});return i.start(t),i},n.des.createEncryptionCipher=function(e,t){return h({key:e,output:null,decrypt:!1,mode:t})},n.des.startDecrypting=function(e,t,r,n){var i=h({key:e,output:r,decrypt:!0,mode:n||(null===t?"ECB":"CBC")});return i.start(t),i},n.des.createDecryptionCipher=function(e,t){return h({key:e,output:null,decrypt:!0,mode:t})},n.des.Algorithm=function(e,t){var r=this;r.name=e,r.mode=new t({blockSize:8,cipher:{encrypt:function(e,t){return d(r._keys,e,t,!1)},decrypt:function(e,t){return d(r._keys,e,t,!0)}}}),r._init=!1},n.des.Algorithm.prototype.initialize=function(e){if(!this._init){var t=n.util.createBuffer(e.key);if(0===this.name.indexOf("3DES")&&24!==t.length())throw new Error("Invalid Triple-DES key size: "+8*t.length());this._keys=function(e){for(var t,r=[0,4,536870912,536870916,65536,65540,536936448,536936452,512,516,536871424,536871428,66048,66052,536936960,536936964],n=[0,1,1048576,1048577,67108864,67108865,68157440,68157441,256,257,1048832,1048833,67109120,67109121,68157696,68157697],i=[0,8,2048,2056,16777216,16777224,16779264,16779272,0,8,2048,2056,16777216,16777224,16779264,16779272],a=[0,2097152,134217728,136314880,8192,2105344,134225920,136323072,131072,2228224,134348800,136445952,139264,2236416,134356992,136454144],s=[0,262144,16,262160,0,262144,16,262160,4096,266240,4112,266256,4096,266240,4112,266256],o=[0,1024,32,1056,0,1024,32,1056,33554432,33555456,33554464,33555488,33554432,33555456,33554464,33555488],u=[0,268435456,524288,268959744,2,268435458,524290,268959746,0,268435456,524288,268959744,2,268435458,524290,268959746],c=[0,65536,2048,67584,536870912,536936448,536872960,536938496,131072,196608,133120,198656,537001984,537067520,537004032,537069568],l=[0,262144,0,262144,2,262146,2,262146,33554432,33816576,33554432,33816576,33554434,33816578,33554434,33816578],f=[0,268435456,8,268435464,0,268435456,8,268435464,1024,268436480,1032,268436488,1024,268436480,1032,268436488],p=[0,32,0,32,1048576,1048608,1048576,1048608,8192,8224,8192,8224,1056768,1056800,1056768,1056800],d=[0,16777216,512,16777728,2097152,18874368,2097664,18874880,67108864,83886080,67109376,83886592,69206016,85983232,69206528,85983744],h=[0,4096,134217728,134221824,524288,528384,134742016,134746112,16,4112,134217744,134221840,524304,528400,134742032,134746128],y=[0,4,256,260,0,4,256,260,1,5,257,261,1,5,257,261],g=e.length()>8?3:1,v=[],m=[0,0,1,1,1,1,1,1,0,1,1,1,1,1,1,0],b=0,E=0;E<g;E++){var S=e.getInt32(),T=e.getInt32();S^=(t=252645135&(S>>>4^T))<<4,S^=t=65535&((T^=t)>>>-16^S),S^=(t=858993459&(S>>>2^(T^=t<<-16)))<<2,S^=t=65535&((T^=t)>>>-16^S),S^=(t=1431655765&(S>>>1^(T^=t<<-16)))<<1,S^=t=16711935&((T^=t)>>>8^S),t=(S^=(t=1431655765&(S>>>1^(T^=t<<8)))<<1)<<8|(T^=t)>>>20&240,S=T<<24|T<<8&16711680|T>>>8&65280|T>>>24&240,T=t;for(var A=0;A<m.length;++A){m[A]?(S=S<<2|S>>>26,T=T<<2|T>>>26):(S=S<<1|S>>>27,T=T<<1|T>>>27);var w=r[(S&=-15)>>>28]|n[S>>>24&15]|i[S>>>20&15]|a[S>>>16&15]|s[S>>>12&15]|o[S>>>8&15]|u[S>>>4&15],I=c[(T&=-15)>>>28]|l[T>>>24&15]|f[T>>>20&15]|p[T>>>16&15]|d[T>>>12&15]|h[T>>>8&15]|y[T>>>4&15];t=65535&(I>>>16^w),v[b++]=w^t,v[b++]=I^t<<16}}return v}(t),this._init=!0}},i("DES-ECB",n.cipher.modes.ecb),i("DES-CBC",n.cipher.modes.cbc),i("DES-CFB",n.cipher.modes.cfb),i("DES-OFB",n.cipher.modes.ofb),i("DES-CTR",n.cipher.modes.ctr),i("3DES-ECB",n.cipher.modes.ecb),i("3DES-CBC",n.cipher.modes.cbc),i("3DES-CFB",n.cipher.modes.cfb),i("3DES-OFB",n.cipher.modes.ofb),i("3DES-CTR",n.cipher.modes.ctr);var a=[16843776,0,65536,16843780,16842756,66564,4,65536,1024,16843776,16843780,1024,16778244,16842756,16777216,4,1028,16778240,16778240,66560,66560,16842752,16842752,16778244,65540,16777220,16777220,65540,0,1028,66564,16777216,65536,16843780,4,16842752,16843776,16777216,16777216,1024,16842756,65536,66560,16777220,1024,4,16778244,66564,16843780,65540,16842752,16778244,16777220,1028,66564,16843776,1028,16778240,16778240,0,65540,66560,0,16842756],s=[-2146402272,-2147450880,32768,1081376,1048576,32,-2146435040,-2147450848,-2147483616,-2146402272,-2146402304,-2147483648,-2147450880,1048576,32,-2146435040,1081344,1048608,-2147450848,0,-2147483648,32768,1081376,-2146435072,1048608,-2147483616,0,1081344,32800,-2146402304,-2146435072,32800,0,1081376,-2146435040,1048576,-2147450848,-2146435072,-2146402304,32768,-2146435072,-2147450880,32,-2146402272,1081376,32,32768,-2147483648,32800,-2146402304,1048576,-2147483616,1048608,-2147450848,-2147483616,1048608,1081344,0,-2147450880,32800,-2147483648,-2146435040,-2146402272,1081344],o=[520,134349312,0,134348808,134218240,0,131592,134218240,131080,134217736,134217736,131072,134349320,131080,134348800,520,134217728,8,134349312,512,131584,134348800,134348808,131592,134218248,131584,131072,134218248,8,134349320,512,134217728,134349312,134217728,131080,520,131072,134349312,134218240,0,512,131080,134349320,134218240,134217736,512,0,134348808,134218248,131072,134217728,134349320,8,131592,131584,134217736,134348800,134218248,520,134348800,131592,8,134348808,131584],u=[8396801,8321,8321,128,8396928,8388737,8388609,8193,0,8396800,8396800,8396929,129,0,8388736,8388609,1,8192,8388608,8396801,128,8388608,8193,8320,8388737,1,8320,8388736,8192,8396928,8396929,129,8388736,8388609,8396800,8396929,129,0,0,8396800,8320,8388736,8388737,1,8396801,8321,8321,128,8396929,129,1,8192,8388609,8193,8396928,8388737,8193,8320,8388608,8396801,128,8388608,8192,8396928],c=[256,34078976,34078720,1107296512,524288,256,1073741824,34078720,1074266368,524288,33554688,1074266368,1107296512,1107820544,524544,1073741824,33554432,1074266112,1074266112,0,1073742080,1107820800,1107820800,33554688,1107820544,1073742080,0,1107296256,34078976,33554432,1107296256,524544,524288,1107296512,256,33554432,1073741824,34078720,1107296512,1074266368,33554688,1073741824,1107820544,34078976,1074266368,256,33554432,1107820544,1107820800,524544,1107296256,1107820800,34078720,0,1074266112,1107296256,524544,33554688,1073742080,524288,0,1074266112,34078976,1073742080],l=[536870928,541065216,16384,541081616,541065216,16,541081616,4194304,536887296,4210704,4194304,536870928,4194320,536887296,536870912,16400,0,4194320,536887312,16384,4210688,536887312,16,541065232,541065232,0,4210704,541081600,16400,4210688,541081600,536870912,536887296,16,541065232,4210688,541081616,4194304,16400,536870928,4194304,536887296,536870912,16400,536870928,541081616,4210688,541065216,4210704,541081600,0,541065232,16,16384,541065216,4210704,16384,4194320,536887312,0,541081600,536870912,4194320,536887312],f=[2097152,69206018,67110914,0,2048,67110914,2099202,69208064,69208066,2097152,0,67108866,2,67108864,69206018,2050,67110912,2099202,2097154,67110912,67108866,69206016,69208064,2097154,69206016,2048,2050,69208066,2099200,2,67108864,2099200,67108864,2099200,2097152,67110914,67110914,69206018,69206018,2,2097154,67108864,67110912,2097152,69208064,2050,2099202,69208064,2050,67108866,69208066,69206016,2099200,0,2,69208066,0,2099202,69206016,2048,67108866,67110912,2048,2097154],p=[268439616,4096,262144,268701760,268435456,268439616,64,268435456,262208,268697600,268701760,266240,268701696,266304,4096,64,268697600,268435520,268439552,4160,266240,262208,268697664,268701696,4160,0,0,268697664,268435520,268439552,266304,262144,266304,262144,268701696,4096,64,268697664,4096,266304,268439552,64,268435520,268697600,268697664,268435456,262144,268439616,0,268701760,262208,268435520,268697600,268439552,268439616,0,268701760,266240,266240,4160,4160,262208,268435456,268701696];function d(e,t,r,n){var i,d,h=32===e.length?3:9;i=3===h?n?[30,-2,-2]:[0,32,2]:n?[94,62,-2,32,64,2,30,-2,-2]:[0,32,2,62,30,-2,64,96,2];var y=t[0],g=t[1];y^=(d=252645135&(y>>>4^g))<<4,y^=(d=65535&(y>>>16^(g^=d)))<<16,y^=d=858993459&((g^=d)>>>2^y),y^=d=16711935&((g^=d<<2)>>>8^y),y=(y^=(d=1431655765&(y>>>1^(g^=d<<8)))<<1)<<1|y>>>31,g=(g^=d)<<1|g>>>31;for(var v=0;v<h;v+=3){for(var m=i[v+1],b=i[v+2],E=i[v];E!=m;E+=b){var S=g^e[E],T=(g>>>4|g<<28)^e[E+1];d=y,y=g,g=d^(s[S>>>24&63]|u[S>>>16&63]|l[S>>>8&63]|p[63&S]|a[T>>>24&63]|o[T>>>16&63]|c[T>>>8&63]|f[63&T])}d=y,y=g,g=d}g=g>>>1|g<<31,g^=d=1431655765&((y=y>>>1|y<<31)>>>1^g),g^=(d=16711935&(g>>>8^(y^=d<<1)))<<8,g^=(d=858993459&(g>>>2^(y^=d)))<<2,g^=d=65535&((y^=d)>>>16^g),g^=d=252645135&((y^=d<<16)>>>4^g),y^=d<<4,r[0]=y,r[1]=g}function h(e){var t,r="DES-"+((e=e||{}).mode||"CBC").toUpperCase(),i=(t=e.decrypt?n.cipher.createDecipher(r,e.key):n.cipher.createCipher(r,e.key)).start;return t.start=function(e,r){var a=null;r instanceof n.util.ByteBuffer&&(a=r,r={}),(r=r||{}).output=a,r.iv=e,i.call(t,r)},t}},function(e,t,r){(function(t){var n=r(1);r(35),r(10),r(3);var i,a=n.pkcs5=n.pkcs5||{};n.util.isNodejs&&!n.options.usePureJavaScript&&(i=r(34)),e.exports=n.pbkdf2=a.pbkdf2=function(e,r,a,s,o,u){if("function"==typeof o&&(u=o,o=null),n.util.isNodejs&&!n.options.usePureJavaScript&&i.pbkdf2&&(null===o||"object"!=typeof o)&&(i.pbkdf2Sync.length>4||!o||"sha1"===o))return"string"!=typeof o&&(o="sha1"),e=t.from(e,"binary"),r=t.from(r,"binary"),u?4===i.pbkdf2Sync.length?i.pbkdf2(e,r,a,s,(function(e,t){if(e)return u(e);u(null,t.toString("binary"))})):i.pbkdf2(e,r,a,s,o,(function(e,t){if(e)return u(e);u(null,t.toString("binary"))})):4===i.pbkdf2Sync.length?i.pbkdf2Sync(e,r,a,s).toString("binary"):i.pbkdf2Sync(e,r,a,s,o).toString("binary");if(null==o&&(o="sha1"),"string"==typeof o){if(!(o in n.md.algorithms))throw new Error("Unknown hash algorithm: "+o);o=n.md[o].create()}var c=o.digestLength;if(s>4294967295*c){var l=new Error("Derived key is too long.");if(u)return u(l);throw l}var f=Math.ceil(s/c),p=s-(f-1)*c,d=n.hmac.create();d.start(o,e);var h,y,g,v="";if(!u){for(var m=1;m<=f;++m){d.start(null,null),d.update(r),d.update(n.util.int32ToBytes(m)),h=g=d.digest().getBytes();for(var b=2;b<=a;++b)d.start(null,null),d.update(g),y=d.digest().getBytes(),h=n.util.xorBytes(h,y,c),g=y;v+=m<f?h:h.substr(0,p)}return v}m=1;function E(){if(m>f)return u(null,v);d.start(null,null),d.update(r),d.update(n.util.int32ToBytes(m)),h=g=d.digest().getBytes(),b=2,S()}function S(){if(b<=a)return d.start(null,null),d.update(g),y=d.digest().getBytes(),h=n.util.xorBytes(h,y,c),g=y,++b,n.util.setImmediate(S);v+=m<f?h:h.substr(0,p),++m,E()}E()}}).call(this,r(16).Buffer)},function(e,t,r){var n,i=r(1);e.exports=i.jsbn=i.jsbn||{};function a(e,t,r){this.data=[],null!=e&&("number"==typeof e?this.fromNumber(e,t,r):null==t&&"string"!=typeof e?this.fromString(e,256):this.fromString(e,t))}function s(){return new a(null)}function o(e,t,r,n,i,a){for(var s=16383&t,o=t>>14;--a>=0;){var u=16383&this.data[e],c=this.data[e++]>>14,l=o*u+c*s;i=((u=s*u+((16383&l)<<14)+r.data[n]+i)>>28)+(l>>14)+o*c,r.data[n++]=268435455&u}return i}i.jsbn.BigInteger=a,"undefined"==typeof navigator?(a.prototype.am=o,n=28):"Microsoft Internet Explorer"==navigator.appName?(a.prototype.am=function(e,t,r,n,i,a){for(var s=32767&t,o=t>>15;--a>=0;){var u=32767&this.data[e],c=this.data[e++]>>15,l=o*u+c*s;i=((u=s*u+((32767&l)<<15)+r.data[n]+(1073741823&i))>>>30)+(l>>>15)+o*c+(i>>>30),r.data[n++]=1073741823&u}return i},n=30):"Netscape"!=navigator.appName?(a.prototype.am=function(e,t,r,n,i,a){for(;--a>=0;){var s=t*this.data[e++]+r.data[n]+i;i=Math.floor(s/67108864),r.data[n++]=67108863&s}return i},n=26):(a.prototype.am=o,n=28),a.prototype.DB=n,a.prototype.DM=(1<<n)-1,a.prototype.DV=1<<n;a.prototype.FV=Math.pow(2,52),a.prototype.F1=52-n,a.prototype.F2=2*n-52;var u,c,l=new Array;for(u="0".charCodeAt(0),c=0;c<=9;++c)l[u++]=c;for(u="a".charCodeAt(0),c=10;c<36;++c)l[u++]=c;for(u="A".charCodeAt(0),c=10;c<36;++c)l[u++]=c;function f(e){return"0123456789abcdefghijklmnopqrstuvwxyz".charAt(e)}function p(e,t){var r=l[e.charCodeAt(t)];return null==r?-1:r}function d(e){var t=s();return t.fromInt(e),t}function h(e){var t,r=1;return 0!=(t=e>>>16)&&(e=t,r+=16),0!=(t=e>>8)&&(e=t,r+=8),0!=(t=e>>4)&&(e=t,r+=4),0!=(t=e>>2)&&(e=t,r+=2),0!=(t=e>>1)&&(e=t,r+=1),r}function y(e){this.m=e}function g(e){this.m=e,this.mp=e.invDigit(),this.mpl=32767&this.mp,this.mph=this.mp>>15,this.um=(1<<e.DB-15)-1,this.mt2=2*e.t}function v(e,t){return e&t}function m(e,t){return e|t}function b(e,t){return e^t}function E(e,t){return e&~t}function S(e){if(0==e)return-1;var t=0;return 0==(65535&e)&&(e>>=16,t+=16),0==(255&e)&&(e>>=8,t+=8),0==(15&e)&&(e>>=4,t+=4),0==(3&e)&&(e>>=2,t+=2),0==(1&e)&&++t,t}function T(e){for(var t=0;0!=e;)e&=e-1,++t;return t}function A(){}function w(e){return e}function I(e){this.r2=s(),this.q3=s(),a.ONE.dlShiftTo(2*e.t,this.r2),this.mu=this.r2.divide(e),this.m=e}y.prototype.convert=function(e){return e.s<0||e.compareTo(this.m)>=0?e.mod(this.m):e},y.prototype.revert=function(e){return e},y.prototype.reduce=function(e){e.divRemTo(this.m,null,e)},y.prototype.mulTo=function(e,t,r){e.multiplyTo(t,r),this.reduce(r)},y.prototype.sqrTo=function(e,t){e.squareTo(t),this.reduce(t)},g.prototype.convert=function(e){var t=s();return e.abs().dlShiftTo(this.m.t,t),t.divRemTo(this.m,null,t),e.s<0&&t.compareTo(a.ZERO)>0&&this.m.subTo(t,t),t},g.prototype.revert=function(e){var t=s();return e.copyTo(t),this.reduce(t),t},g.prototype.reduce=function(e){for(;e.t<=this.mt2;)e.data[e.t++]=0;for(var t=0;t<this.m.t;++t){var r=32767&e.data[t],n=r*this.mpl+((r*this.mph+(e.data[t]>>15)*this.mpl&this.um)<<15)&e.DM;for(r=t+this.m.t,e.data[r]+=this.m.am(0,n,e,t,0,this.m.t);e.data[r]>=e.DV;)e.data[r]-=e.DV,e.data[++r]++}e.clamp(),e.drShiftTo(this.m.t,e),e.compareTo(this.m)>=0&&e.subTo(this.m,e)},g.prototype.mulTo=function(e,t,r){e.multiplyTo(t,r),this.reduce(r)},g.prototype.sqrTo=function(e,t){e.squareTo(t),this.reduce(t)},a.prototype.copyTo=function(e){for(var t=this.t-1;t>=0;--t)e.data[t]=this.data[t];e.t=this.t,e.s=this.s},a.prototype.fromInt=function(e){this.t=1,this.s=e<0?-1:0,e>0?this.data[0]=e:e<-1?this.data[0]=e+this.DV:this.t=0},a.prototype.fromString=function(e,t){var r;if(16==t)r=4;else if(8==t)r=3;else if(256==t)r=8;else if(2==t)r=1;else if(32==t)r=5;else{if(4!=t)return void this.fromRadix(e,t);r=2}this.t=0,this.s=0;for(var n=e.length,i=!1,s=0;--n>=0;){var o=8==r?255&e[n]:p(e,n);o<0?"-"==e.charAt(n)&&(i=!0):(i=!1,0==s?this.data[this.t++]=o:s+r>this.DB?(this.data[this.t-1]|=(o&(1<<this.DB-s)-1)<<s,this.data[this.t++]=o>>this.DB-s):this.data[this.t-1]|=o<<s,(s+=r)>=this.DB&&(s-=this.DB))}8==r&&0!=(128&e[0])&&(this.s=-1,s>0&&(this.data[this.t-1]|=(1<<this.DB-s)-1<<s)),this.clamp(),i&&a.ZERO.subTo(this,this)},a.prototype.clamp=function(){for(var e=this.s&this.DM;this.t>0&&this.data[this.t-1]==e;)--this.t},a.prototype.dlShiftTo=function(e,t){var r;for(r=this.t-1;r>=0;--r)t.data[r+e]=this.data[r];for(r=e-1;r>=0;--r)t.data[r]=0;t.t=this.t+e,t.s=this.s},a.prototype.drShiftTo=function(e,t){for(var r=e;r<this.t;++r)t.data[r-e]=this.data[r];t.t=Math.max(this.t-e,0),t.s=this.s},a.prototype.lShiftTo=function(e,t){var r,n=e%this.DB,i=this.DB-n,a=(1<<i)-1,s=Math.floor(e/this.DB),o=this.s<<n&this.DM;for(r=this.t-1;r>=0;--r)t.data[r+s+1]=this.data[r]>>i|o,o=(this.data[r]&a)<<n;for(r=s-1;r>=0;--r)t.data[r]=0;t.data[s]=o,t.t=this.t+s+1,t.s=this.s,t.clamp()},a.prototype.rShiftTo=function(e,t){t.s=this.s;var r=Math.floor(e/this.DB);if(r>=this.t)t.t=0;else{var n=e%this.DB,i=this.DB-n,a=(1<<n)-1;t.data[0]=this.data[r]>>n;for(var s=r+1;s<this.t;++s)t.data[s-r-1]|=(this.data[s]&a)<<i,t.data[s-r]=this.data[s]>>n;n>0&&(t.data[this.t-r-1]|=(this.s&a)<<i),t.t=this.t-r,t.clamp()}},a.prototype.subTo=function(e,t){for(var r=0,n=0,i=Math.min(e.t,this.t);r<i;)n+=this.data[r]-e.data[r],t.data[r++]=n&this.DM,n>>=this.DB;if(e.t<this.t){for(n-=e.s;r<this.t;)n+=this.data[r],t.data[r++]=n&this.DM,n>>=this.DB;n+=this.s}else{for(n+=this.s;r<e.t;)n-=e.data[r],t.data[r++]=n&this.DM,n>>=this.DB;n-=e.s}t.s=n<0?-1:0,n<-1?t.data[r++]=this.DV+n:n>0&&(t.data[r++]=n),t.t=r,t.clamp()},a.prototype.multiplyTo=function(e,t){var r=this.abs(),n=e.abs(),i=r.t;for(t.t=i+n.t;--i>=0;)t.data[i]=0;for(i=0;i<n.t;++i)t.data[i+r.t]=r.am(0,n.data[i],t,i,0,r.t);t.s=0,t.clamp(),this.s!=e.s&&a.ZERO.subTo(t,t)},a.prototype.squareTo=function(e){for(var t=this.abs(),r=e.t=2*t.t;--r>=0;)e.data[r]=0;for(r=0;r<t.t-1;++r){var n=t.am(r,t.data[r],e,2*r,0,1);(e.data[r+t.t]+=t.am(r+1,2*t.data[r],e,2*r+1,n,t.t-r-1))>=t.DV&&(e.data[r+t.t]-=t.DV,e.data[r+t.t+1]=1)}e.t>0&&(e.data[e.t-1]+=t.am(r,t.data[r],e,2*r,0,1)),e.s=0,e.clamp()},a.prototype.divRemTo=function(e,t,r){var n=e.abs();if(!(n.t<=0)){var i=this.abs();if(i.t<n.t)return null!=t&&t.fromInt(0),void(null!=r&&this.copyTo(r));null==r&&(r=s());var o=s(),u=this.s,c=e.s,l=this.DB-h(n.data[n.t-1]);l>0?(n.lShiftTo(l,o),i.lShiftTo(l,r)):(n.copyTo(o),i.copyTo(r));var f=o.t,p=o.data[f-1];if(0!=p){var d=p*(1<<this.F1)+(f>1?o.data[f-2]>>this.F2:0),y=this.FV/d,g=(1<<this.F1)/d,v=1<<this.F2,m=r.t,b=m-f,E=null==t?s():t;for(o.dlShiftTo(b,E),r.compareTo(E)>=0&&(r.data[r.t++]=1,r.subTo(E,r)),a.ONE.dlShiftTo(f,E),E.subTo(o,o);o.t<f;)o.data[o.t++]=0;for(;--b>=0;){var S=r.data[--m]==p?this.DM:Math.floor(r.data[m]*y+(r.data[m-1]+v)*g);if((r.data[m]+=o.am(0,S,r,b,0,f))<S)for(o.dlShiftTo(b,E),r.subTo(E,r);r.data[m]<--S;)r.subTo(E,r)}null!=t&&(r.drShiftTo(f,t),u!=c&&a.ZERO.subTo(t,t)),r.t=f,r.clamp(),l>0&&r.rShiftTo(l,r),u<0&&a.ZERO.subTo(r,r)}}},a.prototype.invDigit=function(){if(this.t<1)return 0;var e=this.data[0];if(0==(1&e))return 0;var t=3&e;return(t=(t=(t=(t=t*(2-(15&e)*t)&15)*(2-(255&e)*t)&255)*(2-((65535&e)*t&65535))&65535)*(2-e*t%this.DV)%this.DV)>0?this.DV-t:-t},a.prototype.isEven=function(){return 0==(this.t>0?1&this.data[0]:this.s)},a.prototype.exp=function(e,t){if(e>4294967295||e<1)return a.ONE;var r=s(),n=s(),i=t.convert(this),o=h(e)-1;for(i.copyTo(r);--o>=0;)if(t.sqrTo(r,n),(e&1<<o)>0)t.mulTo(n,i,r);else{var u=r;r=n,n=u}return t.revert(r)},a.prototype.toString=function(e){if(this.s<0)return"-"+this.negate().toString(e);var t;if(16==e)t=4;else if(8==e)t=3;else if(2==e)t=1;else if(32==e)t=5;else{if(4!=e)return this.toRadix(e);t=2}var r,n=(1<<t)-1,i=!1,a="",s=this.t,o=this.DB-s*this.DB%t;if(s-- >0)for(o<this.DB&&(r=this.data[s]>>o)>0&&(i=!0,a=f(r));s>=0;)o<t?(r=(this.data[s]&(1<<o)-1)<<t-o,r|=this.data[--s]>>(o+=this.DB-t)):(r=this.data[s]>>(o-=t)&n,o<=0&&(o+=this.DB,--s)),r>0&&(i=!0),i&&(a+=f(r));return i?a:"0"},a.prototype.negate=function(){var e=s();return a.ZERO.subTo(this,e),e},a.prototype.abs=function(){return this.s<0?this.negate():this},a.prototype.compareTo=function(e){var t=this.s-e.s;if(0!=t)return t;var r=this.t;if(0!=(t=r-e.t))return this.s<0?-t:t;for(;--r>=0;)if(0!=(t=this.data[r]-e.data[r]))return t;return 0},a.prototype.bitLength=function(){return this.t<=0?0:this.DB*(this.t-1)+h(this.data[this.t-1]^this.s&this.DM)},a.prototype.mod=function(e){var t=s();return this.abs().divRemTo(e,null,t),this.s<0&&t.compareTo(a.ZERO)>0&&e.subTo(t,t),t},a.prototype.modPowInt=function(e,t){var r;return r=e<256||t.isEven()?new y(t):new g(t),this.exp(e,r)},a.ZERO=d(0),a.ONE=d(1),A.prototype.convert=w,A.prototype.revert=w,A.prototype.mulTo=function(e,t,r){e.multiplyTo(t,r)},A.prototype.sqrTo=function(e,t){e.squareTo(t)},I.prototype.convert=function(e){if(e.s<0||e.t>2*this.m.t)return e.mod(this.m);if(e.compareTo(this.m)<0)return e;var t=s();return e.copyTo(t),this.reduce(t),t},I.prototype.revert=function(e){return e},I.prototype.reduce=function(e){for(e.drShiftTo(this.m.t-1,this.r2),e.t>this.m.t+1&&(e.t=this.m.t+1,e.clamp()),this.mu.multiplyUpperTo(this.r2,this.m.t+1,this.q3),this.m.multiplyLowerTo(this.q3,this.m.t+1,this.r2);e.compareTo(this.r2)<0;)e.dAddOffset(1,this.m.t+1);for(e.subTo(this.r2,e);e.compareTo(this.m)>=0;)e.subTo(this.m,e)},I.prototype.mulTo=function(e,t,r){e.multiplyTo(t,r),this.reduce(r)},I.prototype.sqrTo=function(e,t){e.squareTo(t),this.reduce(t)};var C=[2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97,101,103,107,109,113,127,131,137,139,149,151,157,163,167,173,179,181,191,193,197,199,211,223,227,229,233,239,241,251,257,263,269,271,277,281,283,293,307,311,313,317,331,337,347,349,353,359,367,373,379,383,389,397,401,409,419,421,431,433,439,443,449,457,461,463,467,479,487,491,499,503,509],B=(1<<26)/C[C.length-1];a.prototype.chunkSize=function(e){return Math.floor(Math.LN2*this.DB/Math.log(e))},a.prototype.toRadix=function(e){if(null==e&&(e=10),0==this.signum()||e<2||e>36)return"0";var t=this.chunkSize(e),r=Math.pow(e,t),n=d(r),i=s(),a=s(),o="";for(this.divRemTo(n,i,a);i.signum()>0;)o=(r+a.intValue()).toString(e).substr(1)+o,i.divRemTo(n,i,a);return a.intValue().toString(e)+o},a.prototype.fromRadix=function(e,t){this.fromInt(0),null==t&&(t=10);for(var r=this.chunkSize(t),n=Math.pow(t,r),i=!1,s=0,o=0,u=0;u<e.length;++u){var c=p(e,u);c<0?"-"==e.charAt(u)&&0==this.signum()&&(i=!0):(o=t*o+c,++s>=r&&(this.dMultiply(n),this.dAddOffset(o,0),s=0,o=0))}s>0&&(this.dMultiply(Math.pow(t,s)),this.dAddOffset(o,0)),i&&a.ZERO.subTo(this,this)},a.prototype.fromNumber=function(e,t,r){if("number"==typeof t)if(e<2)this.fromInt(1);else for(this.fromNumber(e,r),this.testBit(e-1)||this.bitwiseTo(a.ONE.shiftLeft(e-1),m,this),this.isEven()&&this.dAddOffset(1,0);!this.isProbablePrime(t);)this.dAddOffset(2,0),this.bitLength()>e&&this.subTo(a.ONE.shiftLeft(e-1),this);else{var n=new Array,i=7&e;n.length=1+(e>>3),t.nextBytes(n),i>0?n[0]&=(1<<i)-1:n[0]=0,this.fromString(n,256)}},a.prototype.bitwiseTo=function(e,t,r){var n,i,a=Math.min(e.t,this.t);for(n=0;n<a;++n)r.data[n]=t(this.data[n],e.data[n]);if(e.t<this.t){for(i=e.s&this.DM,n=a;n<this.t;++n)r.data[n]=t(this.data[n],i);r.t=this.t}else{for(i=this.s&this.DM,n=a;n<e.t;++n)r.data[n]=t(i,e.data[n]);r.t=e.t}r.s=t(this.s,e.s),r.clamp()},a.prototype.changeBit=function(e,t){var r=a.ONE.shiftLeft(e);return this.bitwiseTo(r,t,r),r},a.prototype.addTo=function(e,t){for(var r=0,n=0,i=Math.min(e.t,this.t);r<i;)n+=this.data[r]+e.data[r],t.data[r++]=n&this.DM,n>>=this.DB;if(e.t<this.t){for(n+=e.s;r<this.t;)n+=this.data[r],t.data[r++]=n&this.DM,n>>=this.DB;n+=this.s}else{for(n+=this.s;r<e.t;)n+=e.data[r],t.data[r++]=n&this.DM,n>>=this.DB;n+=e.s}t.s=n<0?-1:0,n>0?t.data[r++]=n:n<-1&&(t.data[r++]=this.DV+n),t.t=r,t.clamp()},a.prototype.dMultiply=function(e){this.data[this.t]=this.am(0,e-1,this,0,0,this.t),++this.t,this.clamp()},a.prototype.dAddOffset=function(e,t){if(0!=e){for(;this.t<=t;)this.data[this.t++]=0;for(this.data[t]+=e;this.data[t]>=this.DV;)this.data[t]-=this.DV,++t>=this.t&&(this.data[this.t++]=0),++this.data[t]}},a.prototype.multiplyLowerTo=function(e,t,r){var n,i=Math.min(this.t+e.t,t);for(r.s=0,r.t=i;i>0;)r.data[--i]=0;for(n=r.t-this.t;i<n;++i)r.data[i+this.t]=this.am(0,e.data[i],r,i,0,this.t);for(n=Math.min(e.t,t);i<n;++i)this.am(0,e.data[i],r,i,0,t-i);r.clamp()},a.prototype.multiplyUpperTo=function(e,t,r){--t;var n=r.t=this.t+e.t-t;for(r.s=0;--n>=0;)r.data[n]=0;for(n=Math.max(t-this.t,0);n<e.t;++n)r.data[this.t+n-t]=this.am(t-n,e.data[n],r,0,0,this.t+n-t);r.clamp(),r.drShiftTo(1,r)},a.prototype.modInt=function(e){if(e<=0)return 0;var t=this.DV%e,r=this.s<0?e-1:0;if(this.t>0)if(0==t)r=this.data[0]%e;else for(var n=this.t-1;n>=0;--n)r=(t*r+this.data[n])%e;return r},a.prototype.millerRabin=function(e){var t=this.subtract(a.ONE),r=t.getLowestSetBit();if(r<=0)return!1;for(var n,i=t.shiftRight(r),s={nextBytes:function(e){for(var t=0;t<e.length;++t)e[t]=Math.floor(256*Math.random())}},o=0;o<e;++o){do{n=new a(this.bitLength(),s)}while(n.compareTo(a.ONE)<=0||n.compareTo(t)>=0);var u=n.modPow(i,this);if(0!=u.compareTo(a.ONE)&&0!=u.compareTo(t)){for(var c=1;c++<r&&0!=u.compareTo(t);)if(0==(u=u.modPowInt(2,this)).compareTo(a.ONE))return!1;if(0!=u.compareTo(t))return!1}}return!0},a.prototype.clone=function(){var e=s();return this.copyTo(e),e},a.prototype.intValue=function(){if(this.s<0){if(1==this.t)return this.data[0]-this.DV;if(0==this.t)return-1}else{if(1==this.t)return this.data[0];if(0==this.t)return 0}return(this.data[1]&(1<<32-this.DB)-1)<<this.DB|this.data[0]},a.prototype.byteValue=function(){return 0==this.t?this.s:this.data[0]<<24>>24},a.prototype.shortValue=function(){return 0==this.t?this.s:this.data[0]<<16>>16},a.prototype.signum=function(){return this.s<0?-1:this.t<=0||1==this.t&&this.data[0]<=0?0:1},a.prototype.toByteArray=function(){var e=this.t,t=new Array;t[0]=this.s;var r,n=this.DB-e*this.DB%8,i=0;if(e-- >0)for(n<this.DB&&(r=this.data[e]>>n)!=(this.s&this.DM)>>n&&(t[i++]=r|this.s<<this.DB-n);e>=0;)n<8?(r=(this.data[e]&(1<<n)-1)<<8-n,r|=this.data[--e]>>(n+=this.DB-8)):(r=this.data[e]>>(n-=8)&255,n<=0&&(n+=this.DB,--e)),0!=(128&r)&&(r|=-256),0==i&&(128&this.s)!=(128&r)&&++i,(i>0||r!=this.s)&&(t[i++]=r);return t},a.prototype.equals=function(e){return 0==this.compareTo(e)},a.prototype.min=function(e){return this.compareTo(e)<0?this:e},a.prototype.max=function(e){return this.compareTo(e)>0?this:e},a.prototype.and=function(e){var t=s();return this.bitwiseTo(e,v,t),t},a.prototype.or=function(e){var t=s();return this.bitwiseTo(e,m,t),t},a.prototype.xor=function(e){var t=s();return this.bitwiseTo(e,b,t),t},a.prototype.andNot=function(e){var t=s();return this.bitwiseTo(e,E,t),t},a.prototype.not=function(){for(var e=s(),t=0;t<this.t;++t)e.data[t]=this.DM&~this.data[t];return e.t=this.t,e.s=~this.s,e},a.prototype.shiftLeft=function(e){var t=s();return e<0?this.rShiftTo(-e,t):this.lShiftTo(e,t),t},a.prototype.shiftRight=function(e){var t=s();return e<0?this.lShiftTo(-e,t):this.rShiftTo(e,t),t},a.prototype.getLowestSetBit=function(){for(var e=0;e<this.t;++e)if(0!=this.data[e])return e*this.DB+S(this.data[e]);return this.s<0?this.t*this.DB:-1},a.prototype.bitCount=function(){for(var e=0,t=this.s&this.DM,r=0;r<this.t;++r)e+=T(this.data[r]^t);return e},a.prototype.testBit=function(e){var t=Math.floor(e/this.DB);return t>=this.t?0!=this.s:0!=(this.data[t]&1<<e%this.DB)},a.prototype.setBit=function(e){return this.changeBit(e,m)},a.prototype.clearBit=function(e){return this.changeBit(e,E)},a.prototype.flipBit=function(e){return this.changeBit(e,b)},a.prototype.add=function(e){var t=s();return this.addTo(e,t),t},a.prototype.subtract=function(e){var t=s();return this.subTo(e,t),t},a.prototype.multiply=function(e){var t=s();return this.multiplyTo(e,t),t},a.prototype.divide=function(e){var t=s();return this.divRemTo(e,t,null),t},a.prototype.remainder=function(e){var t=s();return this.divRemTo(e,null,t),t},a.prototype.divideAndRemainder=function(e){var t=s(),r=s();return this.divRemTo(e,t,r),new Array(t,r)},a.prototype.modPow=function(e,t){var r,n,i=e.bitLength(),a=d(1);if(i<=0)return a;r=i<18?1:i<48?3:i<144?4:i<768?5:6,n=i<8?new y(t):t.isEven()?new I(t):new g(t);var o=new Array,u=3,c=r-1,l=(1<<r)-1;if(o[1]=n.convert(this),r>1){var f=s();for(n.sqrTo(o[1],f);u<=l;)o[u]=s(),n.mulTo(f,o[u-2],o[u]),u+=2}var p,v,m=e.t-1,b=!0,E=s();for(i=h(e.data[m])-1;m>=0;){for(i>=c?p=e.data[m]>>i-c&l:(p=(e.data[m]&(1<<i+1)-1)<<c-i,m>0&&(p|=e.data[m-1]>>this.DB+i-c)),u=r;0==(1&p);)p>>=1,--u;if((i-=u)<0&&(i+=this.DB,--m),b)o[p].copyTo(a),b=!1;else{for(;u>1;)n.sqrTo(a,E),n.sqrTo(E,a),u-=2;u>0?n.sqrTo(a,E):(v=a,a=E,E=v),n.mulTo(E,o[p],a)}for(;m>=0&&0==(e.data[m]&1<<i);)n.sqrTo(a,E),v=a,a=E,E=v,--i<0&&(i=this.DB-1,--m)}return n.revert(a)},a.prototype.modInverse=function(e){var t=e.isEven();if(this.isEven()&&t||0==e.signum())return a.ZERO;for(var r=e.clone(),n=this.clone(),i=d(1),s=d(0),o=d(0),u=d(1);0!=r.signum();){for(;r.isEven();)r.rShiftTo(1,r),t?(i.isEven()&&s.isEven()||(i.addTo(this,i),s.subTo(e,s)),i.rShiftTo(1,i)):s.isEven()||s.subTo(e,s),s.rShiftTo(1,s);for(;n.isEven();)n.rShiftTo(1,n),t?(o.isEven()&&u.isEven()||(o.addTo(this,o),u.subTo(e,u)),o.rShiftTo(1,o)):u.isEven()||u.subTo(e,u),u.rShiftTo(1,u);r.compareTo(n)>=0?(r.subTo(n,r),t&&i.subTo(o,i),s.subTo(u,s)):(n.subTo(r,n),t&&o.subTo(i,o),u.subTo(s,u))}return 0!=n.compareTo(a.ONE)?a.ZERO:u.compareTo(e)>=0?u.subtract(e):u.signum()<0?(u.addTo(e,u),u.signum()<0?u.add(e):u):u},a.prototype.pow=function(e){return this.exp(e,new A)},a.prototype.gcd=function(e){var t=this.s<0?this.negate():this.clone(),r=e.s<0?e.negate():e.clone();if(t.compareTo(r)<0){var n=t;t=r,r=n}var i=t.getLowestSetBit(),a=r.getLowestSetBit();if(a<0)return t;for(i<a&&(a=i),a>0&&(t.rShiftTo(a,t),r.rShiftTo(a,r));t.signum()>0;)(i=t.getLowestSetBit())>0&&t.rShiftTo(i,t),(i=r.getLowestSetBit())>0&&r.rShiftTo(i,r),t.compareTo(r)>=0?(t.subTo(r,t),t.rShiftTo(1,t)):(r.subTo(t,r),r.rShiftTo(1,r));return a>0&&r.lShiftTo(a,r),r},a.prototype.isProbablePrime=function(e){var t,r=this.abs();if(1==r.t&&r.data[0]<=C[C.length-1]){for(t=0;t<C.length;++t)if(r.data[0]==C[t])return!0;return!1}if(r.isEven())return!1;for(t=1;t<C.length;){for(var n=C[t],i=t+1;i<C.length&&n<B;)n*=C[i++];for(n=r.modInt(n);t<i;)if(n%C[t++]==0)return!1}return r.millerRabin(e)}},function(e,t,r){var n=r(1);r(10),r(3);var i=e.exports=n.sha1=n.sha1||{};n.md.sha1=n.md.algorithms.sha1=i,i.create=function(){s||(a=String.fromCharCode(128),a+=n.util.fillString(String.fromCharCode(0),64),s=!0);var e=null,t=n.util.createBuffer(),r=new Array(80),i={algorithm:"sha1",blockLength:64,digestLength:20,messageLength:0,fullMessageLength:null,messageLengthSize:8,start:function(){i.messageLength=0,i.fullMessageLength=i.messageLength64=[];for(var r=i.messageLengthSize/4,a=0;a<r;++a)i.fullMessageLength.push(0);return t=n.util.createBuffer(),e={h0:1732584193,h1:4023233417,h2:2562383102,h3:271733878,h4:3285377520},i}};return i.start(),i.update=function(a,s){"utf8"===s&&(a=n.util.encodeUtf8(a));var u=a.length;i.messageLength+=u,u=[u/4294967296>>>0,u>>>0];for(var c=i.fullMessageLength.length-1;c>=0;--c)i.fullMessageLength[c]+=u[1],u[1]=u[0]+(i.fullMessageLength[c]/4294967296>>>0),i.fullMessageLength[c]=i.fullMessageLength[c]>>>0,u[0]=u[1]/4294967296>>>0;return t.putBytes(a),o(e,r,t),(t.read>2048||0===t.length())&&t.compact(),i},i.digest=function(){var s=n.util.createBuffer();s.putBytes(t.bytes());var u,c=i.fullMessageLength[i.fullMessageLength.length-1]+i.messageLengthSize&i.blockLength-1;s.putBytes(a.substr(0,i.blockLength-c));for(var l=8*i.fullMessageLength[0],f=0;f<i.fullMessageLength.length-1;++f)l+=(u=8*i.fullMessageLength[f+1])/4294967296>>>0,s.putInt32(l>>>0),l=u>>>0;s.putInt32(l);var p={h0:e.h0,h1:e.h1,h2:e.h2,h3:e.h3,h4:e.h4};o(p,r,s);var d=n.util.createBuffer();return d.putInt32(p.h0),d.putInt32(p.h1),d.putInt32(p.h2),d.putInt32(p.h3),d.putInt32(p.h4),d},i};var a=null,s=!1;function o(e,t,r){for(var n,i,a,s,o,u,c,l=r.length();l>=64;){for(i=e.h0,a=e.h1,s=e.h2,o=e.h3,u=e.h4,c=0;c<16;++c)n=r.getInt32(),t[c]=n,n=(i<<5|i>>>27)+(o^a&(s^o))+u+1518500249+n,u=o,o=s,s=(a<<30|a>>>2)>>>0,a=i,i=n;for(;c<20;++c)n=(n=t[c-3]^t[c-8]^t[c-14]^t[c-16])<<1|n>>>31,t[c]=n,n=(i<<5|i>>>27)+(o^a&(s^o))+u+1518500249+n,u=o,o=s,s=(a<<30|a>>>2)>>>0,a=i,i=n;for(;c<32;++c)n=(n=t[c-3]^t[c-8]^t[c-14]^t[c-16])<<1|n>>>31,t[c]=n,n=(i<<5|i>>>27)+(a^s^o)+u+1859775393+n,u=o,o=s,s=(a<<30|a>>>2)>>>0,a=i,i=n;for(;c<40;++c)n=(n=t[c-6]^t[c-16]^t[c-28]^t[c-32])<<2|n>>>30,t[c]=n,n=(i<<5|i>>>27)+(a^s^o)+u+1859775393+n,u=o,o=s,s=(a<<30|a>>>2)>>>0,a=i,i=n;for(;c<60;++c)n=(n=t[c-6]^t[c-16]^t[c-28]^t[c-32])<<2|n>>>30,t[c]=n,n=(i<<5|i>>>27)+(a&s|o&(a^s))+u+2400959708+n,u=o,o=s,s=(a<<30|a>>>2)>>>0,a=i,i=n;for(;c<80;++c)n=(n=t[c-6]^t[c-16]^t[c-28]^t[c-32])<<2|n>>>30,t[c]=n,n=(i<<5|i>>>27)+(a^s^o)+u+3395469782+n,u=o,o=s,s=(a<<30|a>>>2)>>>0,a=i,i=n;e.h0=e.h0+i|0,e.h1=e.h1+a|0,e.h2=e.h2+s|0,e.h3=e.h3+o|0,e.h4=e.h4+u|0,l-=64}}},function(e,t,r){var n=r(1);r(32),r(19),r(66),r(10),r(109),r(20),r(38),r(71),r(28),r(3);var i=n.asn1,a=e.exports=n.pki=n.pki||{},s=a.oids,o={};o.CN=s.commonName,o.commonName="CN",o.C=s.countryName,o.countryName="C",o.L=s.localityName,o.localityName="L",o.ST=s.stateOrProvinceName,o.stateOrProvinceName="ST",o.O=s.organizationName,o.organizationName="O",o.OU=s.organizationalUnitName,o.organizationalUnitName="OU",o.E=s.emailAddress,o.emailAddress="E";var u=n.pki.rsa.publicKeyValidator,c={name:"Certificate",tagClass:i.Class.UNIVERSAL,type:i.Type.SEQUENCE,constructed:!0,value:[{name:"Certificate.TBSCertificate",tagClass:i.Class.UNIVERSAL,type:i.Type.SEQUENCE,constructed:!0,captureAsn1:"tbsCertificate",value:[{name:"Certificate.TBSCertificate.version",tagClass:i.Class.CONTEXT_SPECIFIC,type:0,constructed:!0,optional:!0,value:[{name:"Certificate.TBSCertificate.version.integer",tagClass:i.Class.UNIVERSAL,type:i.Type.INTEGER,constructed:!1,capture:"certVersion"}]},{name:"Certificate.TBSCertificate.serialNumber",tagClass:i.Class.UNIVERSAL,type:i.Type.INTEGER,constructed:!1,capture:"certSerialNumber"},{name:"Certificate.TBSCertificate.signature",tagClass:i.Class.UNIVERSAL,type:i.Type.SEQUENCE,constructed:!0,value:[{name:"Certificate.TBSCertificate.signature.algorithm",tagClass:i.Class.UNIVERSAL,type:i.Type.OID,constructed:!1,capture:"certinfoSignatureOid"},{name:"Certificate.TBSCertificate.signature.parameters",tagClass:i.Class.UNIVERSAL,optional:!0,captureAsn1:"certinfoSignatureParams"}]},{name:"Certificate.TBSCertificate.issuer",tagClass:i.Class.UNIVERSAL,type:i.Type.SEQUENCE,constructed:!0,captureAsn1:"certIssuer"},{name:"Certificate.TBSCertificate.validity",tagClass:i.Class.UNIVERSAL,type:i.Type.SEQUENCE,constructed:!0,value:[{name:"Certificate.TBSCertificate.validity.notBefore (utc)",tagClass:i.Class.UNIVERSAL,type:i.Type.UTCTIME,constructed:!1,optional:!0,capture:"certValidity1UTCTime"},{name:"Certificate.TBSCertificate.validity.notBefore (generalized)",tagClass:i.Class.UNIVERSAL,type:i.Type.GENERALIZEDTIME,constructed:!1,optional:!0,capture:"certValidity2GeneralizedTime"},{name:"Certificate.TBSCertificate.validity.notAfter (utc)",tagClass:i.Class.UNIVERSAL,type:i.Type.UTCTIME,constructed:!1,optional:!0,capture:"certValidity3UTCTime"},{name:"Certificate.TBSCertificate.validity.notAfter (generalized)",tagClass:i.Class.UNIVERSAL,type:i.Type.GENERALIZEDTIME,constructed:!1,optional:!0,capture:"certValidity4GeneralizedTime"}]},{name:"Certificate.TBSCertificate.subject",tagClass:i.Class.UNIVERSAL,type:i.Type.SEQUENCE,constructed:!0,captureAsn1:"certSubject"},u,{name:"Certificate.TBSCertificate.issuerUniqueID",tagClass:i.Class.CONTEXT_SPECIFIC,type:1,constructed:!0,optional:!0,value:[{name:"Certificate.TBSCertificate.issuerUniqueID.id",tagClass:i.Class.UNIVERSAL,type:i.Type.BITSTRING,constructed:!1,captureBitStringValue:"certIssuerUniqueId"}]},{name:"Certificate.TBSCertificate.subjectUniqueID",tagClass:i.Class.CONTEXT_SPECIFIC,type:2,constructed:!0,optional:!0,value:[{name:"Certificate.TBSCertificate.subjectUniqueID.id",tagClass:i.Class.UNIVERSAL,type:i.Type.BITSTRING,constructed:!1,captureBitStringValue:"certSubjectUniqueId"}]},{name:"Certificate.TBSCertificate.extensions",tagClass:i.Class.CONTEXT_SPECIFIC,type:3,constructed:!0,captureAsn1:"certExtensions",optional:!0}]},{name:"Certificate.signatureAlgorithm",tagClass:i.Class.UNIVERSAL,type:i.Type.SEQUENCE,constructed:!0,value:[{name:"Certificate.signatureAlgorithm.algorithm",tagClass:i.Class.UNIVERSAL,type:i.Type.OID,constructed:!1,capture:"certSignatureOid"},{name:"Certificate.TBSCertificate.signature.parameters",tagClass:i.Class.UNIVERSAL,optional:!0,captureAsn1:"certSignatureParams"}]},{name:"Certificate.signatureValue",tagClass:i.Class.UNIVERSAL,type:i.Type.BITSTRING,constructed:!1,captureBitStringValue:"certSignature"}]},l={name:"rsapss",tagClass:i.Class.UNIVERSAL,type:i.Type.SEQUENCE,constructed:!0,value:[{name:"rsapss.hashAlgorithm",tagClass:i.Class.CONTEXT_SPECIFIC,type:0,constructed:!0,value:[{name:"rsapss.hashAlgorithm.AlgorithmIdentifier",tagClass:i.Class.UNIVERSAL,type:i.Class.SEQUENCE,constructed:!0,optional:!0,value:[{name:"rsapss.hashAlgorithm.AlgorithmIdentifier.algorithm",tagClass:i.Class.UNIVERSAL,type:i.Type.OID,constructed:!1,capture:"hashOid"}]}]},{name:"rsapss.maskGenAlgorithm",tagClass:i.Class.CONTEXT_SPECIFIC,type:1,constructed:!0,value:[{name:"rsapss.maskGenAlgorithm.AlgorithmIdentifier",tagClass:i.Class.UNIVERSAL,type:i.Class.SEQUENCE,constructed:!0,optional:!0,value:[{name:"rsapss.maskGenAlgorithm.AlgorithmIdentifier.algorithm",tagClass:i.Class.UNIVERSAL,type:i.Type.OID,constructed:!1,capture:"maskGenOid"},{name:"rsapss.maskGenAlgorithm.AlgorithmIdentifier.params",tagClass:i.Class.UNIVERSAL,type:i.Type.SEQUENCE,constructed:!0,value:[{name:"rsapss.maskGenAlgorithm.AlgorithmIdentifier.params.algorithm",tagClass:i.Class.UNIVERSAL,type:i.Type.OID,constructed:!1,capture:"maskGenHashOid"}]}]}]},{name:"rsapss.saltLength",tagClass:i.Class.CONTEXT_SPECIFIC,type:2,optional:!0,value:[{name:"rsapss.saltLength.saltLength",tagClass:i.Class.UNIVERSAL,type:i.Class.INTEGER,constructed:!1,capture:"saltLength"}]},{name:"rsapss.trailerField",tagClass:i.Class.CONTEXT_SPECIFIC,type:3,optional:!0,value:[{name:"rsapss.trailer.trailer",tagClass:i.Class.UNIVERSAL,type:i.Class.INTEGER,constructed:!1,capture:"trailer"}]}]},f={name:"CertificationRequestInfo",tagClass:i.Class.UNIVERSAL,type:i.Type.SEQUENCE,constructed:!0,captureAsn1:"certificationRequestInfo",value:[{name:"CertificationRequestInfo.integer",tagClass:i.Class.UNIVERSAL,type:i.Type.INTEGER,constructed:!1,capture:"certificationRequestInfoVersion"},{name:"CertificationRequestInfo.subject",tagClass:i.Class.UNIVERSAL,type:i.Type.SEQUENCE,constructed:!0,captureAsn1:"certificationRequestInfoSubject"},u,{name:"CertificationRequestInfo.attributes",tagClass:i.Class.CONTEXT_SPECIFIC,type:0,constructed:!0,optional:!0,capture:"certificationRequestInfoAttributes",value:[{name:"CertificationRequestInfo.attributes",tagClass:i.Class.UNIVERSAL,type:i.Type.SEQUENCE,constructed:!0,value:[{name:"CertificationRequestInfo.attributes.type",tagClass:i.Class.UNIVERSAL,type:i.Type.OID,constructed:!1},{name:"CertificationRequestInfo.attributes.value",tagClass:i.Class.UNIVERSAL,type:i.Type.SET,constructed:!0}]}]}]},p={name:"CertificationRequest",tagClass:i.Class.UNIVERSAL,type:i.Type.SEQUENCE,constructed:!0,captureAsn1:"csr",value:[f,{name:"CertificationRequest.signatureAlgorithm",tagClass:i.Class.UNIVERSAL,type:i.Type.SEQUENCE,constructed:!0,value:[{name:"CertificationRequest.signatureAlgorithm.algorithm",tagClass:i.Class.UNIVERSAL,type:i.Type.OID,constructed:!1,capture:"csrSignatureOid"},{name:"CertificationRequest.signatureAlgorithm.parameters",tagClass:i.Class.UNIVERSAL,optional:!0,captureAsn1:"csrSignatureParams"}]},{name:"CertificationRequest.signature",tagClass:i.Class.UNIVERSAL,type:i.Type.BITSTRING,constructed:!1,captureBitStringValue:"csrSignature"}]};function d(e,t){"string"==typeof t&&(t={shortName:t});for(var r,n=null,i=0;null===n&&i<e.attributes.length;++i)r=e.attributes[i],(t.type&&t.type===r.type||t.name&&t.name===r.name||t.shortName&&t.shortName===r.shortName)&&(n=r);return n}a.RDNAttributesAsArray=function(e,t){for(var r,n,a,u=[],c=0;c<e.value.length;++c){r=e.value[c];for(var l=0;l<r.value.length;++l)a={},n=r.value[l],a.type=i.derToOid(n.value[0].value),a.value=n.value[1].value,a.valueTagClass=n.value[1].type,a.type in s&&(a.name=s[a.type],a.name in o&&(a.shortName=o[a.name])),t&&(t.update(a.type),t.update(a.value)),u.push(a)}return u},a.CRIAttributesAsArray=function(e){for(var t=[],r=0;r<e.length;++r)for(var n=e[r],u=i.derToOid(n.value[0].value),c=n.value[1].value,l=0;l<c.length;++l){var f={};if(f.type=u,f.value=c[l].value,f.valueTagClass=c[l].type,f.type in s&&(f.name=s[f.type],f.name in o&&(f.shortName=o[f.name])),f.type===s.extensionRequest){f.extensions=[];for(var p=0;p<f.value.length;++p)f.extensions.push(a.certificateExtensionFromAsn1(f.value[p]))}t.push(f)}return t};var h=function(e,t,r){var n={};if(e!==s["RSASSA-PSS"])return n;r&&(n={hash:{algorithmOid:s.sha1},mgf:{algorithmOid:s.mgf1,hash:{algorithmOid:s.sha1}},saltLength:20});var a={},o=[];if(!i.validate(t,l,a,o)){var u=new Error("Cannot read RSASSA-PSS parameter block.");throw u.errors=o,u}return void 0!==a.hashOid&&(n.hash=n.hash||{},n.hash.algorithmOid=i.derToOid(a.hashOid)),void 0!==a.maskGenOid&&(n.mgf=n.mgf||{},n.mgf.algorithmOid=i.derToOid(a.maskGenOid),n.mgf.hash=n.mgf.hash||{},n.mgf.hash.algorithmOid=i.derToOid(a.maskGenHashOid)),void 0!==a.saltLength&&(n.saltLength=a.saltLength.charCodeAt(0)),n};function y(e){for(var t,r,a=i.create(i.Class.UNIVERSAL,i.Type.SEQUENCE,!0,[]),s=e.attributes,o=0;o<s.length;++o){var u=(t=s[o]).value,c=i.Type.PRINTABLESTRING;"valueTagClass"in t&&(c=t.valueTagClass)===i.Type.UTF8&&(u=n.util.encodeUtf8(u)),r=i.create(i.Class.UNIVERSAL,i.Type.SET,!0,[i.create(i.Class.UNIVERSAL,i.Type.SEQUENCE,!0,[i.create(i.Class.UNIVERSAL,i.Type.OID,!1,i.oidToDer(t.type).getBytes()),i.create(i.Class.UNIVERSAL,c,!1,u)])]),a.value.push(r)}return a}function g(e){for(var t,r=0;r<e.length;++r){if(void 0===(t=e[r]).name&&(t.type&&t.type in a.oids?t.name=a.oids[t.type]:t.shortName&&t.shortName in o&&(t.name=a.oids[o[t.shortName]])),void 0===t.type){if(!t.name||!(t.name in a.oids))throw(u=new Error("Attribute type not specified.")).attribute=t,u;t.type=a.oids[t.name]}if(void 0===t.shortName&&t.name&&t.name in o&&(t.shortName=o[t.name]),t.type===s.extensionRequest&&(t.valueConstructed=!0,t.valueTagClass=i.Type.SEQUENCE,!t.value&&t.extensions)){t.value=[];for(var n=0;n<t.extensions.length;++n)t.value.push(a.certificateExtensionToAsn1(v(t.extensions[n])))}var u;if(void 0===t.value)throw(u=new Error("Attribute value not specified.")).attribute=t,u}}function v(e,t){if(t=t||{},void 0===e.name&&e.id&&e.id in a.oids&&(e.name=a.oids[e.id]),void 0===e.id){if(!e.name||!(e.name in a.oids))throw(S=new Error("Extension ID not specified.")).extension=e,S;e.id=a.oids[e.name]}if(void 0!==e.value)return e;if("keyUsage"===e.name){var r=0,o=0,u=0;e.digitalSignature&&(o|=128,r=7),e.nonRepudiation&&(o|=64,r=6),e.keyEncipherment&&(o|=32,r=5),e.dataEncipherment&&(o|=16,r=4),e.keyAgreement&&(o|=8,r=3),e.keyCertSign&&(o|=4,r=2),e.cRLSign&&(o|=2,r=1),e.encipherOnly&&(o|=1,r=0),e.decipherOnly&&(u|=128,r=7);var c=String.fromCharCode(r);0!==u?c+=String.fromCharCode(o)+String.fromCharCode(u):0!==o&&(c+=String.fromCharCode(o)),e.value=i.create(i.Class.UNIVERSAL,i.Type.BITSTRING,!1,c)}else if("basicConstraints"===e.name)e.value=i.create(i.Class.UNIVERSAL,i.Type.SEQUENCE,!0,[]),e.cA&&e.value.value.push(i.create(i.Class.UNIVERSAL,i.Type.BOOLEAN,!1,String.fromCharCode(255))),"pathLenConstraint"in e&&e.value.value.push(i.create(i.Class.UNIVERSAL,i.Type.INTEGER,!1,i.integerToDer(e.pathLenConstraint).getBytes()));else if("extKeyUsage"===e.name){e.value=i.create(i.Class.UNIVERSAL,i.Type.SEQUENCE,!0,[]);var l=e.value.value;for(var f in e)!0===e[f]&&(f in s?l.push(i.create(i.Class.UNIVERSAL,i.Type.OID,!1,i.oidToDer(s[f]).getBytes())):-1!==f.indexOf(".")&&l.push(i.create(i.Class.UNIVERSAL,i.Type.OID,!1,i.oidToDer(f).getBytes())))}else if("nsCertType"===e.name){r=0,o=0;e.client&&(o|=128,r=7),e.server&&(o|=64,r=6),e.email&&(o|=32,r=5),e.objsign&&(o|=16,r=4),e.reserved&&(o|=8,r=3),e.sslCA&&(o|=4,r=2),e.emailCA&&(o|=2,r=1),e.objCA&&(o|=1,r=0);c=String.fromCharCode(r);0!==o&&(c+=String.fromCharCode(o)),e.value=i.create(i.Class.UNIVERSAL,i.Type.BITSTRING,!1,c)}else if("subjectAltName"===e.name||"issuerAltName"===e.name){e.value=i.create(i.Class.UNIVERSAL,i.Type.SEQUENCE,!0,[]);for(var p=0;p<e.altNames.length;++p){c=(m=e.altNames[p]).value;if(7===m.type&&m.ip){if(null===(c=n.util.bytesFromIP(m.ip)))throw(S=new Error('Extension "ip" value is not a valid IPv4 or IPv6 address.')).extension=e,S}else 8===m.type&&(c=m.oid?i.oidToDer(i.oidToDer(m.oid)):i.oidToDer(c));e.value.value.push(i.create(i.Class.CONTEXT_SPECIFIC,m.type,!1,c))}}else if("nsComment"===e.name&&t.cert){if(!/^[\x00-\x7F]*$/.test(e.comment)||e.comment.length<1||e.comment.length>128)throw new Error('Invalid "nsComment" content.');e.value=i.create(i.Class.UNIVERSAL,i.Type.IA5STRING,!1,e.comment)}else if("subjectKeyIdentifier"===e.name&&t.cert){var d=t.cert.generateSubjectKeyIdentifier();e.subjectKeyIdentifier=d.toHex(),e.value=i.create(i.Class.UNIVERSAL,i.Type.OCTETSTRING,!1,d.getBytes())}else if("authorityKeyIdentifier"===e.name&&t.cert){e.value=i.create(i.Class.UNIVERSAL,i.Type.SEQUENCE,!0,[]);l=e.value.value;if(e.keyIdentifier){var h=!0===e.keyIdentifier?t.cert.generateSubjectKeyIdentifier().getBytes():e.keyIdentifier;l.push(i.create(i.Class.CONTEXT_SPECIFIC,0,!1,h))}if(e.authorityCertIssuer){var g=[i.create(i.Class.CONTEXT_SPECIFIC,4,!0,[y(!0===e.authorityCertIssuer?t.cert.issuer:e.authorityCertIssuer)])];l.push(i.create(i.Class.CONTEXT_SPECIFIC,1,!0,g))}if(e.serialNumber){var v=n.util.hexToBytes(!0===e.serialNumber?t.cert.serialNumber:e.serialNumber);l.push(i.create(i.Class.CONTEXT_SPECIFIC,2,!1,v))}}else if("cRLDistributionPoints"===e.name){e.value=i.create(i.Class.UNIVERSAL,i.Type.SEQUENCE,!0,[]);l=e.value.value;var m,b=i.create(i.Class.UNIVERSAL,i.Type.SEQUENCE,!0,[]),E=i.create(i.Class.CONTEXT_SPECIFIC,0,!0,[]);for(p=0;p<e.altNames.length;++p){c=(m=e.altNames[p]).value;if(7===m.type&&m.ip){if(null===(c=n.util.bytesFromIP(m.ip)))throw(S=new Error('Extension "ip" value is not a valid IPv4 or IPv6 address.')).extension=e,S}else 8===m.type&&(c=m.oid?i.oidToDer(i.oidToDer(m.oid)):i.oidToDer(c));E.value.push(i.create(i.Class.CONTEXT_SPECIFIC,m.type,!1,c))}b.value.push(i.create(i.Class.CONTEXT_SPECIFIC,0,!0,[E])),l.push(b)}var S;if(void 0===e.value)throw(S=new Error("Extension value not specified.")).extension=e,S;return e}function m(e,t){switch(e){case s["RSASSA-PSS"]:var r=[];return void 0!==t.hash.algorithmOid&&r.push(i.create(i.Class.CONTEXT_SPECIFIC,0,!0,[i.create(i.Class.UNIVERSAL,i.Type.SEQUENCE,!0,[i.create(i.Class.UNIVERSAL,i.Type.OID,!1,i.oidToDer(t.hash.algorithmOid).getBytes()),i.create(i.Class.UNIVERSAL,i.Type.NULL,!1,"")])])),void 0!==t.mgf.algorithmOid&&r.push(i.create(i.Class.CONTEXT_SPECIFIC,1,!0,[i.create(i.Class.UNIVERSAL,i.Type.SEQUENCE,!0,[i.create(i.Class.UNIVERSAL,i.Type.OID,!1,i.oidToDer(t.mgf.algorithmOid).getBytes()),i.create(i.Class.UNIVERSAL,i.Type.SEQUENCE,!0,[i.create(i.Class.UNIVERSAL,i.Type.OID,!1,i.oidToDer(t.mgf.hash.algorithmOid).getBytes()),i.create(i.Class.UNIVERSAL,i.Type.NULL,!1,"")])])])),void 0!==t.saltLength&&r.push(i.create(i.Class.CONTEXT_SPECIFIC,2,!0,[i.create(i.Class.UNIVERSAL,i.Type.INTEGER,!1,i.integerToDer(t.saltLength).getBytes())])),i.create(i.Class.UNIVERSAL,i.Type.SEQUENCE,!0,r);default:return i.create(i.Class.UNIVERSAL,i.Type.NULL,!1,"")}}function b(e){var t=i.create(i.Class.CONTEXT_SPECIFIC,0,!0,[]);if(0===e.attributes.length)return t;for(var r=e.attributes,a=0;a<r.length;++a){var s=r[a],o=s.value,u=i.Type.UTF8;"valueTagClass"in s&&(u=s.valueTagClass),u===i.Type.UTF8&&(o=n.util.encodeUtf8(o));var c=!1;"valueConstructed"in s&&(c=s.valueConstructed);var l=i.create(i.Class.UNIVERSAL,i.Type.SEQUENCE,!0,[i.create(i.Class.UNIVERSAL,i.Type.OID,!1,i.oidToDer(s.type).getBytes()),i.create(i.Class.UNIVERSAL,i.Type.SET,!0,[i.create(i.Class.UNIVERSAL,u,c,o)])]);t.value.push(l)}return t}a.certificateFromPem=function(e,t,r){var s=n.pem.decode(e)[0];if("CERTIFICATE"!==s.type&&"X509 CERTIFICATE"!==s.type&&"TRUSTED CERTIFICATE"!==s.type){var o=new Error('Could not convert certificate from PEM; PEM header type is not "CERTIFICATE", "X509 CERTIFICATE", or "TRUSTED CERTIFICATE".');throw o.headerType=s.type,o}if(s.procType&&"ENCRYPTED"===s.procType.type)throw new Error("Could not convert certificate from PEM; PEM is encrypted.");var u=i.fromDer(s.body,r);return a.certificateFromAsn1(u,t)},a.certificateToPem=function(e,t){var r={type:"CERTIFICATE",body:i.toDer(a.certificateToAsn1(e)).getBytes()};return n.pem.encode(r,{maxline:t})},a.publicKeyFromPem=function(e){var t=n.pem.decode(e)[0];if("PUBLIC KEY"!==t.type&&"RSA PUBLIC KEY"!==t.type){var r=new Error('Could not convert public key from PEM; PEM header type is not "PUBLIC KEY" or "RSA PUBLIC KEY".');throw r.headerType=t.type,r}if(t.procType&&"ENCRYPTED"===t.procType.type)throw new Error("Could not convert public key from PEM; PEM is encrypted.");var s=i.fromDer(t.body);return a.publicKeyFromAsn1(s)},a.publicKeyToPem=function(e,t){var r={type:"PUBLIC KEY",body:i.toDer(a.publicKeyToAsn1(e)).getBytes()};return n.pem.encode(r,{maxline:t})},a.publicKeyToRSAPublicKeyPem=function(e,t){var r={type:"RSA PUBLIC KEY",body:i.toDer(a.publicKeyToRSAPublicKey(e)).getBytes()};return n.pem.encode(r,{maxline:t})},a.getPublicKeyFingerprint=function(e,t){var r,s=(t=t||{}).md||n.md.sha1.create();switch(t.type||"RSAPublicKey"){case"RSAPublicKey":r=i.toDer(a.publicKeyToRSAPublicKey(e)).getBytes();break;case"SubjectPublicKeyInfo":r=i.toDer(a.publicKeyToAsn1(e)).getBytes();break;default:throw new Error('Unknown fingerprint type "'+t.type+'".')}s.start(),s.update(r);var o=s.digest();if("hex"===t.encoding){var u=o.toHex();return t.delimiter?u.match(/.{2}/g).join(t.delimiter):u}if("binary"===t.encoding)return o.getBytes();if(t.encoding)throw new Error('Unknown encoding "'+t.encoding+'".');return o},a.certificationRequestFromPem=function(e,t,r){var s=n.pem.decode(e)[0];if("CERTIFICATE REQUEST"!==s.type){var o=new Error('Could not convert certification request from PEM; PEM header type is not "CERTIFICATE REQUEST".');throw o.headerType=s.type,o}if(s.procType&&"ENCRYPTED"===s.procType.type)throw new Error("Could not convert certification request from PEM; PEM is encrypted.");var u=i.fromDer(s.body,r);return a.certificationRequestFromAsn1(u,t)},a.certificationRequestToPem=function(e,t){var r={type:"CERTIFICATE REQUEST",body:i.toDer(a.certificationRequestToAsn1(e)).getBytes()};return n.pem.encode(r,{maxline:t})},a.createCertificate=function(){var e={version:2,serialNumber:"00",signatureOid:null,signature:null,siginfo:{}};return e.siginfo.algorithmOid=null,e.validity={},e.validity.notBefore=new Date,e.validity.notAfter=new Date,e.issuer={},e.issuer.getField=function(t){return d(e.issuer,t)},e.issuer.addField=function(t){g([t]),e.issuer.attributes.push(t)},e.issuer.attributes=[],e.issuer.hash=null,e.subject={},e.subject.getField=function(t){return d(e.subject,t)},e.subject.addField=function(t){g([t]),e.subject.attributes.push(t)},e.subject.attributes=[],e.subject.hash=null,e.extensions=[],e.publicKey=null,e.md=null,e.setSubject=function(t,r){g(t),e.subject.attributes=t,delete e.subject.uniqueId,r&&(e.subject.uniqueId=r),e.subject.hash=null},e.setIssuer=function(t,r){g(t),e.issuer.attributes=t,delete e.issuer.uniqueId,r&&(e.issuer.uniqueId=r),e.issuer.hash=null},e.setExtensions=function(t){for(var r=0;r<t.length;++r)v(t[r],{cert:e});e.extensions=t},e.getExtension=function(t){"string"==typeof t&&(t={name:t});for(var r,n=null,i=0;null===n&&i<e.extensions.length;++i)r=e.extensions[i],(t.id&&r.id===t.id||t.name&&r.name===t.name)&&(n=r);return n},e.sign=function(t,r){e.md=r||n.md.sha1.create();var o=s[e.md.algorithm+"WithRSAEncryption"];if(!o){var u=new Error("Could not compute certificate digest. Unknown message digest algorithm OID.");throw u.algorithm=e.md.algorithm,u}e.signatureOid=e.siginfo.algorithmOid=o,e.tbsCertificate=a.getTBSCertificate(e);var c=i.toDer(e.tbsCertificate);e.md.update(c.getBytes()),e.signature=t.sign(e.md)},e.verify=function(t){var r=!1;if(!e.issued(t)){var o=t.issuer,u=e.subject;throw(y=new Error("The parent certificate did not issue the given child certificate; the child certificate's issuer does not match the parent's subject.")).expectedIssuer=o.attributes,y.actualIssuer=u.attributes,y}var c=t.md;if(null===c){if(t.signatureOid in s)switch(s[t.signatureOid]){case"sha1WithRSAEncryption":c=n.md.sha1.create();break;case"md5WithRSAEncryption":c=n.md.md5.create();break;case"sha256WithRSAEncryption":c=n.md.sha256.create();break;case"sha384WithRSAEncryption":c=n.md.sha384.create();break;case"sha512WithRSAEncryption":c=n.md.sha512.create();break;case"RSASSA-PSS":c=n.md.sha256.create()}if(null===c)throw(y=new Error("Could not compute certificate digest. Unknown signature OID.")).signatureOid=t.signatureOid,y;var l=t.tbsCertificate||a.getTBSCertificate(t),f=i.toDer(l);c.update(f.getBytes())}if(null!==c){var p;switch(t.signatureOid){case s.sha1WithRSAEncryption:p=void 0;break;case s["RSASSA-PSS"]:var d,h,y;if(void 0===(d=s[t.signatureParameters.mgf.hash.algorithmOid])||void 0===n.md[d])throw(y=new Error("Unsupported MGF hash function.")).oid=t.signatureParameters.mgf.hash.algorithmOid,y.name=d,y;if(void 0===(h=s[t.signatureParameters.mgf.algorithmOid])||void 0===n.mgf[h])throw(y=new Error("Unsupported MGF function.")).oid=t.signatureParameters.mgf.algorithmOid,y.name=h,y;if(h=n.mgf[h].create(n.md[d].create()),void 0===(d=s[t.signatureParameters.hash.algorithmOid])||void 0===n.md[d])throw{message:"Unsupported RSASSA-PSS hash function.",oid:t.signatureParameters.hash.algorithmOid,name:d};p=n.pss.create(n.md[d].create(),h,t.signatureParameters.saltLength)}r=e.publicKey.verify(c.digest().getBytes(),t.signature,p)}return r},e.isIssuer=function(t){var r=!1,n=e.issuer,i=t.subject;if(n.hash&&i.hash)r=n.hash===i.hash;else if(n.attributes.length===i.attributes.length){var a,s;r=!0;for(var o=0;r&&o<n.attributes.length;++o)a=n.attributes[o],s=i.attributes[o],a.type===s.type&&a.value===s.value||(r=!1)}return r},e.issued=function(t){return t.isIssuer(e)},e.generateSubjectKeyIdentifier=function(){return a.getPublicKeyFingerprint(e.publicKey,{type:"RSAPublicKey"})},e.verifySubjectKeyIdentifier=function(){for(var t=s.subjectKeyIdentifier,r=0;r<e.extensions.length;++r){var i=e.extensions[r];if(i.id===t){var a=e.generateSubjectKeyIdentifier().getBytes();return n.util.hexToBytes(i.subjectKeyIdentifier)===a}}return!1},e},a.certificateFromAsn1=function(e,t){var r={},o=[];if(!i.validate(e,c,r,o))throw(p=new Error("Cannot read X.509 certificate. ASN.1 object is not an X509v3 Certificate.")).errors=o,p;if(i.derToOid(r.publicKeyOid)!==a.oids.rsaEncryption)throw new Error("Cannot read public key. OID is not RSA.");var u=a.createCertificate();u.version=r.certVersion?r.certVersion.charCodeAt(0):0;var l=n.util.createBuffer(r.certSerialNumber);u.serialNumber=l.toHex(),u.signatureOid=n.asn1.derToOid(r.certSignatureOid),u.signatureParameters=h(u.signatureOid,r.certSignatureParams,!0),u.siginfo.algorithmOid=n.asn1.derToOid(r.certinfoSignatureOid),u.siginfo.parameters=h(u.siginfo.algorithmOid,r.certinfoSignatureParams,!1),u.signature=r.certSignature;var f=[];if(void 0!==r.certValidity1UTCTime&&f.push(i.utcTimeToDate(r.certValidity1UTCTime)),void 0!==r.certValidity2GeneralizedTime&&f.push(i.generalizedTimeToDate(r.certValidity2GeneralizedTime)),void 0!==r.certValidity3UTCTime&&f.push(i.utcTimeToDate(r.certValidity3UTCTime)),void 0!==r.certValidity4GeneralizedTime&&f.push(i.generalizedTimeToDate(r.certValidity4GeneralizedTime)),f.length>2)throw new Error("Cannot read notBefore/notAfter validity times; more than two times were provided in the certificate.");if(f.length<2)throw new Error("Cannot read notBefore/notAfter validity times; they were not provided as either UTCTime or GeneralizedTime.");if(u.validity.notBefore=f[0],u.validity.notAfter=f[1],u.tbsCertificate=r.tbsCertificate,t){var p;if(u.md=null,u.signatureOid in s)switch(s[u.signatureOid]){case"sha1WithRSAEncryption":u.md=n.md.sha1.create();break;case"md5WithRSAEncryption":u.md=n.md.md5.create();break;case"sha256WithRSAEncryption":u.md=n.md.sha256.create();break;case"sha384WithRSAEncryption":u.md=n.md.sha384.create();break;case"sha512WithRSAEncryption":u.md=n.md.sha512.create();break;case"RSASSA-PSS":u.md=n.md.sha256.create()}if(null===u.md)throw(p=new Error("Could not compute certificate digest. Unknown signature OID.")).signatureOid=u.signatureOid,p;var y=i.toDer(u.tbsCertificate);u.md.update(y.getBytes())}var v=n.md.sha1.create();u.issuer.getField=function(e){return d(u.issuer,e)},u.issuer.addField=function(e){g([e]),u.issuer.attributes.push(e)},u.issuer.attributes=a.RDNAttributesAsArray(r.certIssuer,v),r.certIssuerUniqueId&&(u.issuer.uniqueId=r.certIssuerUniqueId),u.issuer.hash=v.digest().toHex();var m=n.md.sha1.create();return u.subject.getField=function(e){return d(u.subject,e)},u.subject.addField=function(e){g([e]),u.subject.attributes.push(e)},u.subject.attributes=a.RDNAttributesAsArray(r.certSubject,m),r.certSubjectUniqueId&&(u.subject.uniqueId=r.certSubjectUniqueId),u.subject.hash=m.digest().toHex(),r.certExtensions?u.extensions=a.certificateExtensionsFromAsn1(r.certExtensions):u.extensions=[],u.publicKey=a.publicKeyFromAsn1(r.subjectPublicKeyInfo),u},a.certificateExtensionsFromAsn1=function(e){for(var t=[],r=0;r<e.value.length;++r)for(var n=e.value[r],i=0;i<n.value.length;++i)t.push(a.certificateExtensionFromAsn1(n.value[i]));return t},a.certificateExtensionFromAsn1=function(e){var t={};if(t.id=i.derToOid(e.value[0].value),t.critical=!1,e.value[1].type===i.Type.BOOLEAN?(t.critical=0!==e.value[1].value.charCodeAt(0),t.value=e.value[2].value):t.value=e.value[1].value,t.id in s)if(t.name=s[t.id],"keyUsage"===t.name){var r=0,a=0;(u=i.fromDer(t.value)).value.length>1&&(r=u.value.charCodeAt(1),a=u.value.length>2?u.value.charCodeAt(2):0),t.digitalSignature=128==(128&r),t.nonRepudiation=64==(64&r),t.keyEncipherment=32==(32&r),t.dataEncipherment=16==(16&r),t.keyAgreement=8==(8&r),t.keyCertSign=4==(4&r),t.cRLSign=2==(2&r),t.encipherOnly=1==(1&r),t.decipherOnly=128==(128&a)}else if("basicConstraints"===t.name){(u=i.fromDer(t.value)).value.length>0&&u.value[0].type===i.Type.BOOLEAN?t.cA=0!==u.value[0].value.charCodeAt(0):t.cA=!1;var o=null;u.value.length>0&&u.value[0].type===i.Type.INTEGER?o=u.value[0].value:u.value.length>1&&(o=u.value[1].value),null!==o&&(t.pathLenConstraint=i.derToInteger(o))}else if("extKeyUsage"===t.name)for(var u=i.fromDer(t.value),c=0;c<u.value.length;++c){var l=i.derToOid(u.value[c].value);l in s?t[s[l]]=!0:t[l]=!0}else if("nsCertType"===t.name){r=0;(u=i.fromDer(t.value)).value.length>1&&(r=u.value.charCodeAt(1)),t.client=128==(128&r),t.server=64==(64&r),t.email=32==(32&r),t.objsign=16==(16&r),t.reserved=8==(8&r),t.sslCA=4==(4&r),t.emailCA=2==(2&r),t.objCA=1==(1&r)}else if("subjectAltName"===t.name||"issuerAltName"===t.name){var f;t.altNames=[];u=i.fromDer(t.value);for(var p=0;p<u.value.length;++p){var d={type:(f=u.value[p]).type,value:f.value};switch(t.altNames.push(d),f.type){case 1:case 2:case 6:break;case 7:d.ip=n.util.bytesToIP(f.value);break;case 8:d.oid=i.derToOid(f.value)}}}else if("subjectKeyIdentifier"===t.name){u=i.fromDer(t.value);t.subjectKeyIdentifier=n.util.bytesToHex(u.value)}return t},a.certificationRequestFromAsn1=function(e,t){var r={},o=[];if(!i.validate(e,p,r,o))throw(c=new Error("Cannot read PKCS#10 certificate request. ASN.1 object is not a PKCS#10 CertificationRequest.")).errors=o,c;if(i.derToOid(r.publicKeyOid)!==a.oids.rsaEncryption)throw new Error("Cannot read public key. OID is not RSA.");var u=a.createCertificationRequest();if(u.version=r.csrVersion?r.csrVersion.charCodeAt(0):0,u.signatureOid=n.asn1.derToOid(r.csrSignatureOid),u.signatureParameters=h(u.signatureOid,r.csrSignatureParams,!0),u.siginfo.algorithmOid=n.asn1.derToOid(r.csrSignatureOid),u.siginfo.parameters=h(u.siginfo.algorithmOid,r.csrSignatureParams,!1),u.signature=r.csrSignature,u.certificationRequestInfo=r.certificationRequestInfo,t){var c;if(u.md=null,u.signatureOid in s)switch(s[u.signatureOid]){case"sha1WithRSAEncryption":u.md=n.md.sha1.create();break;case"md5WithRSAEncryption":u.md=n.md.md5.create();break;case"sha256WithRSAEncryption":u.md=n.md.sha256.create();break;case"sha384WithRSAEncryption":u.md=n.md.sha384.create();break;case"sha512WithRSAEncryption":u.md=n.md.sha512.create();break;case"RSASSA-PSS":u.md=n.md.sha256.create()}if(null===u.md)throw(c=new Error("Could not compute certification request digest. Unknown signature OID.")).signatureOid=u.signatureOid,c;var l=i.toDer(u.certificationRequestInfo);u.md.update(l.getBytes())}var f=n.md.sha1.create();return u.subject.getField=function(e){return d(u.subject,e)},u.subject.addField=function(e){g([e]),u.subject.attributes.push(e)},u.subject.attributes=a.RDNAttributesAsArray(r.certificationRequestInfoSubject,f),u.subject.hash=f.digest().toHex(),u.publicKey=a.publicKeyFromAsn1(r.subjectPublicKeyInfo),u.getAttribute=function(e){return d(u,e)},u.addAttribute=function(e){g([e]),u.attributes.push(e)},u.attributes=a.CRIAttributesAsArray(r.certificationRequestInfoAttributes||[]),u},a.createCertificationRequest=function(){var e={version:0,signatureOid:null,signature:null,siginfo:{}};return e.siginfo.algorithmOid=null,e.subject={},e.subject.getField=function(t){return d(e.subject,t)},e.subject.addField=function(t){g([t]),e.subject.attributes.push(t)},e.subject.attributes=[],e.subject.hash=null,e.publicKey=null,e.attributes=[],e.getAttribute=function(t){return d(e,t)},e.addAttribute=function(t){g([t]),e.attributes.push(t)},e.md=null,e.setSubject=function(t){g(t),e.subject.attributes=t,e.subject.hash=null},e.setAttributes=function(t){g(t),e.attributes=t},e.sign=function(t,r){e.md=r||n.md.sha1.create();var o=s[e.md.algorithm+"WithRSAEncryption"];if(!o){var u=new Error("Could not compute certification request digest. Unknown message digest algorithm OID.");throw u.algorithm=e.md.algorithm,u}e.signatureOid=e.siginfo.algorithmOid=o,e.certificationRequestInfo=a.getCertificationRequestInfo(e);var c=i.toDer(e.certificationRequestInfo);e.md.update(c.getBytes()),e.signature=t.sign(e.md)},e.verify=function(){var t=!1,r=e.md;if(null===r){if(e.signatureOid in s)switch(s[e.signatureOid]){case"sha1WithRSAEncryption":r=n.md.sha1.create();break;case"md5WithRSAEncryption":r=n.md.md5.create();break;case"sha256WithRSAEncryption":r=n.md.sha256.create();break;case"sha384WithRSAEncryption":r=n.md.sha384.create();break;case"sha512WithRSAEncryption":r=n.md.sha512.create();break;case"RSASSA-PSS":r=n.md.sha256.create()}if(null===r)throw(p=new Error("Could not compute certification request digest. Unknown signature OID.")).signatureOid=e.signatureOid,p;var o=e.certificationRequestInfo||a.getCertificationRequestInfo(e),u=i.toDer(o);r.update(u.getBytes())}if(null!==r){var c;switch(e.signatureOid){case s.sha1WithRSAEncryption:break;case s["RSASSA-PSS"]:var l,f,p;if(void 0===(l=s[e.signatureParameters.mgf.hash.algorithmOid])||void 0===n.md[l])throw(p=new Error("Unsupported MGF hash function.")).oid=e.signatureParameters.mgf.hash.algorithmOid,p.name=l,p;if(void 0===(f=s[e.signatureParameters.mgf.algorithmOid])||void 0===n.mgf[f])throw(p=new Error("Unsupported MGF function.")).oid=e.signatureParameters.mgf.algorithmOid,p.name=f,p;if(f=n.mgf[f].create(n.md[l].create()),void 0===(l=s[e.signatureParameters.hash.algorithmOid])||void 0===n.md[l])throw(p=new Error("Unsupported RSASSA-PSS hash function.")).oid=e.signatureParameters.hash.algorithmOid,p.name=l,p;c=n.pss.create(n.md[l].create(),f,e.signatureParameters.saltLength)}t=e.publicKey.verify(r.digest().getBytes(),e.signature,c)}return t},e};var E=new Date("1950-01-01T00:00:00Z"),S=new Date("2050-01-01T00:00:00Z");function T(e){return e>=E&&e<S?i.create(i.Class.UNIVERSAL,i.Type.UTCTIME,!1,i.dateToUtcTime(e)):i.create(i.Class.UNIVERSAL,i.Type.GENERALIZEDTIME,!1,i.dateToGeneralizedTime(e))}a.getTBSCertificate=function(e){var t=T(e.validity.notBefore),r=T(e.validity.notAfter),s=i.create(i.Class.UNIVERSAL,i.Type.SEQUENCE,!0,[i.create(i.Class.CONTEXT_SPECIFIC,0,!0,[i.create(i.Class.UNIVERSAL,i.Type.INTEGER,!1,i.integerToDer(e.version).getBytes())]),i.create(i.Class.UNIVERSAL,i.Type.INTEGER,!1,n.util.hexToBytes(e.serialNumber)),i.create(i.Class.UNIVERSAL,i.Type.SEQUENCE,!0,[i.create(i.Class.UNIVERSAL,i.Type.OID,!1,i.oidToDer(e.siginfo.algorithmOid).getBytes()),m(e.siginfo.algorithmOid,e.siginfo.parameters)]),y(e.issuer),i.create(i.Class.UNIVERSAL,i.Type.SEQUENCE,!0,[t,r]),y(e.subject),a.publicKeyToAsn1(e.publicKey)]);return e.issuer.uniqueId&&s.value.push(i.create(i.Class.CONTEXT_SPECIFIC,1,!0,[i.create(i.Class.UNIVERSAL,i.Type.BITSTRING,!1,String.fromCharCode(0)+e.issuer.uniqueId)])),e.subject.uniqueId&&s.value.push(i.create(i.Class.CONTEXT_SPECIFIC,2,!0,[i.create(i.Class.UNIVERSAL,i.Type.BITSTRING,!1,String.fromCharCode(0)+e.subject.uniqueId)])),e.extensions.length>0&&s.value.push(a.certificateExtensionsToAsn1(e.extensions)),s},a.getCertificationRequestInfo=function(e){return i.create(i.Class.UNIVERSAL,i.Type.SEQUENCE,!0,[i.create(i.Class.UNIVERSAL,i.Type.INTEGER,!1,i.integerToDer(e.version).getBytes()),y(e.subject),a.publicKeyToAsn1(e.publicKey),b(e)])},a.distinguishedNameToAsn1=function(e){return y(e)},a.certificateToAsn1=function(e){var t=e.tbsCertificate||a.getTBSCertificate(e);return i.create(i.Class.UNIVERSAL,i.Type.SEQUENCE,!0,[t,i.create(i.Class.UNIVERSAL,i.Type.SEQUENCE,!0,[i.create(i.Class.UNIVERSAL,i.Type.OID,!1,i.oidToDer(e.signatureOid).getBytes()),m(e.signatureOid,e.signatureParameters)]),i.create(i.Class.UNIVERSAL,i.Type.BITSTRING,!1,String.fromCharCode(0)+e.signature)])},a.certificateExtensionsToAsn1=function(e){var t=i.create(i.Class.CONTEXT_SPECIFIC,3,!0,[]),r=i.create(i.Class.UNIVERSAL,i.Type.SEQUENCE,!0,[]);t.value.push(r);for(var n=0;n<e.length;++n)r.value.push(a.certificateExtensionToAsn1(e[n]));return t},a.certificateExtensionToAsn1=function(e){var t=i.create(i.Class.UNIVERSAL,i.Type.SEQUENCE,!0,[]);t.value.push(i.create(i.Class.UNIVERSAL,i.Type.OID,!1,i.oidToDer(e.id).getBytes())),e.critical&&t.value.push(i.create(i.Class.UNIVERSAL,i.Type.BOOLEAN,!1,String.fromCharCode(255)));var r=e.value;return"string"!=typeof e.value&&(r=i.toDer(r).getBytes()),t.value.push(i.create(i.Class.UNIVERSAL,i.Type.OCTETSTRING,!1,r)),t},a.certificationRequestToAsn1=function(e){var t=e.certificationRequestInfo||a.getCertificationRequestInfo(e);return i.create(i.Class.UNIVERSAL,i.Type.SEQUENCE,!0,[t,i.create(i.Class.UNIVERSAL,i.Type.SEQUENCE,!0,[i.create(i.Class.UNIVERSAL,i.Type.OID,!1,i.oidToDer(e.signatureOid).getBytes()),m(e.signatureOid,e.signatureParameters)]),i.create(i.Class.UNIVERSAL,i.Type.BITSTRING,!1,String.fromCharCode(0)+e.signature)])},a.createCaStore=function(e){var t={certs:{}};function r(e){return s(e),t.certs[e.hash]||null}function s(e){if(!e.hash){var t=n.md.sha1.create();e.attributes=a.RDNAttributesAsArray(y(e),t),e.hash=t.digest().toHex()}}if(t.getIssuer=function(e){return r(e.issuer)},t.addCertificate=function(e){if("string"==typeof e&&(e=n.pki.certificateFromPem(e)),s(e.subject),!t.hasCertificate(e))if(e.subject.hash in t.certs){var r=t.certs[e.subject.hash];n.util.isArray(r)||(r=[r]),r.push(e),t.certs[e.subject.hash]=r}else t.certs[e.subject.hash]=e},t.hasCertificate=function(e){"string"==typeof e&&(e=n.pki.certificateFromPem(e));var t=r(e.subject);if(!t)return!1;n.util.isArray(t)||(t=[t]);for(var s=i.toDer(a.certificateToAsn1(e)).getBytes(),o=0;o<t.length;++o){if(s===i.toDer(a.certificateToAsn1(t[o])).getBytes())return!0}return!1},t.listAllCertificates=function(){var e=[];for(var r in t.certs)if(t.certs.hasOwnProperty(r)){var i=t.certs[r];if(n.util.isArray(i))for(var a=0;a<i.length;++a)e.push(i[a]);else e.push(i)}return e},t.removeCertificate=function(e){var o;if("string"==typeof e&&(e=n.pki.certificateFromPem(e)),s(e.subject),!t.hasCertificate(e))return null;var u=r(e.subject);if(!n.util.isArray(u))return o=t.certs[e.subject.hash],delete t.certs[e.subject.hash],o;for(var c=i.toDer(a.certificateToAsn1(e)).getBytes(),l=0;l<u.length;++l){c===i.toDer(a.certificateToAsn1(u[l])).getBytes()&&(o=u[l],u.splice(l,1))}return 0===u.length&&delete t.certs[e.subject.hash],o},e)for(var o=0;o<e.length;++o){var u=e[o];t.addCertificate(u)}return t},a.certificateError={bad_certificate:"forge.pki.BadCertificate",unsupported_certificate:"forge.pki.UnsupportedCertificate",certificate_revoked:"forge.pki.CertificateRevoked",certificate_expired:"forge.pki.CertificateExpired",certificate_unknown:"forge.pki.CertificateUnknown",unknown_ca:"forge.pki.UnknownCertificateAuthority"},a.verifyCertificateChain=function(e,t,r){"function"==typeof r&&(r={verify:r}),r=r||{};var i=(t=t.slice(0)).slice(0),s=r.validityCheckDate;void 0===s&&(s=new Date);var o=!0,u=null,c=0;do{var l=t.shift(),f=null,p=!1;if(s&&(s<l.validity.notBefore||s>l.validity.notAfter)&&(u={message:"Certificate is not valid yet or has expired.",error:a.certificateError.certificate_expired,notBefore:l.validity.notBefore,notAfter:l.validity.notAfter,now:s}),null===u){if(null===(f=t[0]||e.getIssuer(l))&&l.isIssuer(l)&&(p=!0,f=l),f){var d=f;n.util.isArray(d)||(d=[d]);for(var h=!1;!h&&d.length>0;){f=d.shift();try{h=f.verify(l)}catch(e){}}h||(u={message:"Certificate signature is invalid.",error:a.certificateError.bad_certificate})}null!==u||f&&!p||e.hasCertificate(l)||(u={message:"Certificate is not trusted.",error:a.certificateError.unknown_ca})}if(null===u&&f&&!l.isIssuer(f)&&(u={message:"Certificate issuer is invalid.",error:a.certificateError.bad_certificate}),null===u)for(var y={keyUsage:!0,basicConstraints:!0},g=0;null===u&&g<l.extensions.length;++g){var v=l.extensions[g];v.critical&&!(v.name in y)&&(u={message:"Certificate has an unsupported critical extension.",error:a.certificateError.unsupported_certificate})}if(null===u&&(!o||0===t.length&&(!f||p))){var m=l.getExtension("basicConstraints"),b=l.getExtension("keyUsage");if(null!==b&&(b.keyCertSign&&null!==m||(u={message:"Certificate keyUsage or basicConstraints conflict or indicate that the certificate is not a CA. If the certificate is the only one in the chain or isn't the first then the certificate must be a valid CA.",error:a.certificateError.bad_certificate})),null!==u||null===m||m.cA||(u={message:"Certificate basicConstraints indicates the certificate is not a CA.",error:a.certificateError.bad_certificate}),null===u&&null!==b&&"pathLenConstraint"in m)c-1>m.pathLenConstraint&&(u={message:"Certificate basicConstraints pathLenConstraint violated.",error:a.certificateError.bad_certificate})}var E=null===u||u.error,S=r.verify?r.verify(E,c,i):E;if(!0!==S)throw!0===E&&(u={message:"The application rejected the certificate.",error:a.certificateError.bad_certificate}),(S||0===S)&&("object"!=typeof S||n.util.isArray(S)?"string"==typeof S&&(u.error=S):(S.message&&(u.message=S.message),S.error&&(u.error=S.error))),u;u=null,o=!1,++c}while(t.length>0);return!0}},function(e,t,r){var n=r(1);r(13),r(3),(e.exports=n.pss=n.pss||{}).create=function(e){3===arguments.length&&(e={md:arguments[0],mgf:arguments[1],saltLength:arguments[2]});var t,r=e.md,i=e.mgf,a=r.digestLength,s=e.salt||null;if("string"==typeof s&&(s=n.util.createBuffer(s)),"saltLength"in e)t=e.saltLength;else{if(null===s)throw new Error("Salt length not specified or specific salt not given.");t=s.length()}if(null!==s&&s.length()!==t)throw new Error("Given salt length does not match length of given salt.");var o=e.prng||n.random,u={encode:function(e,u){var c,l,f=u-1,p=Math.ceil(f/8),d=e.digest().getBytes();if(p<a+t+2)throw new Error("Message is too long to encrypt.");l=null===s?o.getBytesSync(t):s.bytes();var h=new n.util.ByteBuffer;h.fillWithByte(0,8),h.putBytes(d),h.putBytes(l),r.start(),r.update(h.getBytes());var y=r.digest().getBytes(),g=new n.util.ByteBuffer;g.fillWithByte(0,p-t-a-2),g.putByte(1),g.putBytes(l);var v=g.getBytes(),m=p-a-1,b=i.generate(y,m),E="";for(c=0;c<m;c++)E+=String.fromCharCode(v.charCodeAt(c)^b.charCodeAt(c));var S=65280>>8*p-f&255;return(E=String.fromCharCode(E.charCodeAt(0)&~S)+E.substr(1))+y+String.fromCharCode(188)},verify:function(e,s,o){var u,c=o-1,l=Math.ceil(c/8);if(s=s.substr(-l),l<a+t+2)throw new Error("Inconsistent parameters to PSS signature verification.");if(188!==s.charCodeAt(l-1))throw new Error("Encoded message does not end in 0xBC.");var f=l-a-1,p=s.substr(0,f),d=s.substr(f,a),h=65280>>8*l-c&255;if(0!=(p.charCodeAt(0)&h))throw new Error("Bits beyond keysize not zero as expected.");var y=i.generate(d,f),g="";for(u=0;u<f;u++)g+=String.fromCharCode(p.charCodeAt(u)^y.charCodeAt(u));g=String.fromCharCode(g.charCodeAt(0)&~h)+g.substr(1);var v=l-a-t-2;for(u=0;u<v;u++)if(0!==g.charCodeAt(u))throw new Error("Leftmost octets not zero as expected");if(1!==g.charCodeAt(v))throw new Error("Inconsistent PSS signature, 0x01 marker not found");var m=g.substr(-t),b=new n.util.ByteBuffer;return b.fillWithByte(0,8),b.putBytes(e),b.putBytes(m),r.start(),r.update(b.getBytes()),d===r.digest().getBytes()}};return u}},function(e,t,r){var n=r(1);r(10),r(3);var i=e.exports=n.md5=n.md5||{};n.md.md5=n.md.algorithms.md5=i,i.create=function(){c||function(){a=String.fromCharCode(128),a+=n.util.fillString(String.fromCharCode(0),64),s=[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,1,6,11,0,5,10,15,4,9,14,3,8,13,2,7,12,5,8,11,14,1,4,7,10,13,0,3,6,9,12,15,2,0,7,14,5,12,3,10,1,8,15,6,13,4,11,2,9],o=[7,12,17,22,7,12,17,22,7,12,17,22,7,12,17,22,5,9,14,20,5,9,14,20,5,9,14,20,5,9,14,20,4,11,16,23,4,11,16,23,4,11,16,23,4,11,16,23,6,10,15,21,6,10,15,21,6,10,15,21,6,10,15,21],u=new Array(64);for(var e=0;e<64;++e)u[e]=Math.floor(4294967296*Math.abs(Math.sin(e+1)));c=!0}();var e=null,t=n.util.createBuffer(),r=new Array(16),i={algorithm:"md5",blockLength:64,digestLength:16,messageLength:0,fullMessageLength:null,messageLengthSize:8,start:function(){i.messageLength=0,i.fullMessageLength=i.messageLength64=[];for(var r=i.messageLengthSize/4,a=0;a<r;++a)i.fullMessageLength.push(0);return t=n.util.createBuffer(),e={h0:1732584193,h1:4023233417,h2:2562383102,h3:271733878},i}};return i.start(),i.update=function(a,s){"utf8"===s&&(a=n.util.encodeUtf8(a));var o=a.length;i.messageLength+=o,o=[o/4294967296>>>0,o>>>0];for(var u=i.fullMessageLength.length-1;u>=0;--u)i.fullMessageLength[u]+=o[1],o[1]=o[0]+(i.fullMessageLength[u]/4294967296>>>0),i.fullMessageLength[u]=i.fullMessageLength[u]>>>0,o[0]=o[1]/4294967296>>>0;return t.putBytes(a),l(e,r,t),(t.read>2048||0===t.length())&&t.compact(),i},i.digest=function(){var s=n.util.createBuffer();s.putBytes(t.bytes());var o=i.fullMessageLength[i.fullMessageLength.length-1]+i.messageLengthSize&i.blockLength-1;s.putBytes(a.substr(0,i.blockLength-o));for(var u,c=0,f=i.fullMessageLength.length-1;f>=0;--f)c=(u=8*i.fullMessageLength[f]+c)/4294967296>>>0,s.putInt32Le(u>>>0);var p={h0:e.h0,h1:e.h1,h2:e.h2,h3:e.h3};l(p,r,s);var d=n.util.createBuffer();return d.putInt32Le(p.h0),d.putInt32Le(p.h1),d.putInt32Le(p.h2),d.putInt32Le(p.h3),d},i};var a=null,s=null,o=null,u=null,c=!1;function l(e,t,r){for(var n,i,a,c,l,f,p,d=r.length();d>=64;){for(i=e.h0,a=e.h1,c=e.h2,l=e.h3,p=0;p<16;++p)t[p]=r.getInt32Le(),n=i+(l^a&(c^l))+u[p]+t[p],i=l,l=c,c=a,a+=n<<(f=o[p])|n>>>32-f;for(;p<32;++p)n=i+(c^l&(a^c))+u[p]+t[s[p]],i=l,l=c,c=a,a+=n<<(f=o[p])|n>>>32-f;for(;p<48;++p)n=i+(a^c^l)+u[p]+t[s[p]],i=l,l=c,c=a,a+=n<<(f=o[p])|n>>>32-f;for(;p<64;++p)n=i+(c^(a|~l))+u[p]+t[s[p]],i=l,l=c,c=a,a+=n<<(f=o[p])|n>>>32-f;e.h0=e.h0+i|0,e.h1=e.h1+a|0,e.h2=e.h2+c|0,e.h3=e.h3+l|0,d-=64}}},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n="123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz",i=n.split("").reduce((e,t,r)=>(e[t]=r,e),{});t.default={encode(e){if(!e.length)return"";const t=[0];for(let r=0;r<e.length;r++){for(let e=0;e<t.length;e++)t[e]<<=8;t[0]+=e[r];let n=0;for(let e=0;e<t.length;e++)t[e]+=n,n=t[e]/58|0,t[e]%=58;for(;n;)t.push(n%58),n=n/58|0}for(let r=0;0===e[r]&&r<e.length-1;r++)t.push(0);return t.reverse().map((function(e){return n[e]})).join("")},decode(e){if(!e.length)return new Uint8Array(0);const t=[0];for(let r=0;r<e.length;r++){const n=e[r];if(!(n in i))throw new Error(`There is no character "${n}" in the Base58 sequence!`);for(let e=0;e<t.length;e++)t[e]*=58;t[0]+=i[n];let a=0;for(let e=0;e<t.length;e++)t[e]+=a,a=t[e]>>8,t[e]&=255;for(;a;)t.push(255&a),a>>=8}for(let r=0;"1"===e[r]&&r<e.length-1;r++)t.push(0);return new Uint8Array(t.reverse())}}},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(29),i=r(39),a=r(23);t.serializerFromSchema=(e,r)=>a=>{let s,o;if("array"===e.type)return s=t.serializerFromSchema(e.items,r),o=i.concat(...a.map(e=>s(e))),i.concat((e.toBytes||n.SHORT)(a.length),o);if("object"===e.type){let n=Uint8Array.from([]);if(e.optional&&null==a)return Uint8Array.from([0]);if(e.schema.forEach(e=>{const[u,c]=e;let l;l=Array.isArray(u)?u.reduce((e,t)=>Object.assign({},e,{[t]:a[t]}),{}):a[u],s=t.serializerFromSchema(c,r),o=s(l),n=i.concat(n,o)}),e.withLength){const t=e.withLength.toBytes(n.length);n=i.concat(t,n)}return e.optional&&(n=i.concat([1],n)),n}if("anyOf"===e.type){const u=a[e.discriminatorField],c=e.itemByKey(u);if(null==c)throw new Error("Serializer Error: Unknown anyOf type: "+u);return"boolean"===c.strKey&&6===c.key&&!1===a.value&&(c.key=7),s=t.serializerFromSchema(c.schema,r),null==e.valueField?s(a):(o=s(a[e.valueField]),i.concat((e.toBytes||n.BYTE)(c.key),o))}if("primitive"===e.type||void 0===e.type)return e.toBytes(a);if("dataTxField"===e.type){const u=n.LEN(n.SHORT)(n.STRING)(a.key),c=a.type,l=e.items.get(c);if(null==l)throw new Error("Serializer Error: Unknown dataTxField type: "+c);const f=[...e.items.values()].findIndex(e=>e===l);return s=t.serializerFromSchema(l,r),o=s(a.value),i.concat(u,n.BYTE(f),o)}throw new Error("Serializer Error: Unknown schema type: "+e.type)},t.serializeTx=function(e,r){const{type:n,version:i}=e,s=a.getTransactionSchema(n,i);return t.serializerFromSchema(s,r)(e)},t.serializeOrder=function(e,r){const n=e.version||1,i=a.orderVersionMap[n];if(null==i)throw new Error("Unknown order version: "+n);return t.serializerFromSchema(i,r)(e)}},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.orderValidator=void 0;const n=r(7),i={orderType:n.orEq(["sell","buy"]),senderPublicKey:n.isPublicKey,matcherPublicKey:n.isPublicKey,version:n.orEq([void 0,0,1,2,3]),assetPair:n.validatePipe(n.isRequired(!0),n.pipe(n.prop("amountAsset"),n.isAssetId),n.pipe(n.prop("priceAsset"),n.isAssetId)),price:n.isNumberLike,amount:n.isNumberLike,matcherFee:n.isNumberLike,expiration:n.isNumberLike,timestamp:n.isNumber,proofs:n.ifElse(n.isArray,n.defaultValue(!0),n.orEq([void 0]))},a={matcherFeeAssetId:n.orEq([void 0,null,"WAVES"])},s={matcherFeeAssetId:n.isAssetId},o=n.validateByShema(i,n.getError),u=n.validateByShema(a,n.getError),c=n.validateByShema(s,n.getError);t.orderValidator=n.validatePipe(o,n.ifElse(n.pipe(n.prop("version"),n.isEq(3)),c,u))},function(e,t,r){"use strict";var n,i,a,s,o,u,c=r(140),l=c.Reader,f=c.Writer,p=c.util,d=c.roots.default||(c.roots.default={});d.waves=((s={}).Amount=function(){function e(e){if(e)for(var t=Object.keys(e),r=0;r<t.length;++r)null!=e[t[r]]&&(this[t[r]]=e[t[r]])}return e.prototype.assetId=p.newBuffer([]),e.prototype.amount=p.Long?p.Long.fromBits(0,0,!1):0,e.encode=function(e,t){return t||(t=f.create()),null!=e.assetId&&e.hasOwnProperty("assetId")&&t.uint32(10).bytes(e.assetId),null!=e.amount&&e.hasOwnProperty("amount")&&t.uint32(16).int64(e.amount),t},e.decode=function(e,t){e instanceof l||(e=l.create(e));for(var r=void 0===t?e.len:e.pos+t,n=new d.waves.Amount;e.pos<r;){var i=e.uint32();switch(i>>>3){case 1:n.assetId=e.bytes();break;case 2:n.amount=e.int64();break;default:e.skipType(7&i)}}return n},e}(),s.Block=function(){function e(e){if(this.transactions=[],e)for(var t=Object.keys(e),r=0;r<t.length;++r)null!=e[t[r]]&&(this[t[r]]=e[t[r]])}return e.prototype.header=null,e.prototype.signature=p.newBuffer([]),e.prototype.transactions=p.emptyArray,e.encode=function(e,t){if(t||(t=f.create()),null!=e.header&&e.hasOwnProperty("header")&&d.waves.Block.Header.encode(e.header,t.uint32(10).fork()).ldelim(),null!=e.signature&&e.hasOwnProperty("signature")&&t.uint32(18).bytes(e.signature),null!=e.transactions&&e.transactions.length)for(var r=0;r<e.transactions.length;++r)d.waves.SignedTransaction.encode(e.transactions[r],t.uint32(26).fork()).ldelim();return t},e.decode=function(e,t){e instanceof l||(e=l.create(e));for(var r=void 0===t?e.len:e.pos+t,n=new d.waves.Block;e.pos<r;){var i=e.uint32();switch(i>>>3){case 1:n.header=d.waves.Block.Header.decode(e,e.uint32());break;case 2:n.signature=e.bytes();break;case 3:n.transactions&&n.transactions.length||(n.transactions=[]),n.transactions.push(d.waves.SignedTransaction.decode(e,e.uint32()));break;default:e.skipType(7&i)}}return n},e.Header=function(){function e(e){if(this.featureVotes=[],e)for(var t=Object.keys(e),r=0;r<t.length;++r)null!=e[t[r]]&&(this[t[r]]=e[t[r]])}return e.prototype.chainId=0,e.prototype.reference=p.newBuffer([]),e.prototype.baseTarget=p.Long?p.Long.fromBits(0,0,!1):0,e.prototype.generationSignature=p.newBuffer([]),e.prototype.featureVotes=p.emptyArray,e.prototype.timestamp=p.Long?p.Long.fromBits(0,0,!1):0,e.prototype.version=0,e.prototype.generator=p.newBuffer([]),e.prototype.rewardVote=p.Long?p.Long.fromBits(0,0,!1):0,e.prototype.transactionsRoot=p.newBuffer([]),e.encode=function(e,t){if(t||(t=f.create()),null!=e.chainId&&e.hasOwnProperty("chainId")&&t.uint32(8).int32(e.chainId),null!=e.reference&&e.hasOwnProperty("reference")&&t.uint32(18).bytes(e.reference),null!=e.baseTarget&&e.hasOwnProperty("baseTarget")&&t.uint32(24).int64(e.baseTarget),null!=e.generationSignature&&e.hasOwnProperty("generationSignature")&&t.uint32(34).bytes(e.generationSignature),null!=e.featureVotes&&e.featureVotes.length){t.uint32(42).fork();for(var r=0;r<e.featureVotes.length;++r)t.uint32(e.featureVotes[r]);t.ldelim()}return null!=e.timestamp&&e.hasOwnProperty("timestamp")&&t.uint32(48).int64(e.timestamp),null!=e.version&&e.hasOwnProperty("version")&&t.uint32(56).int32(e.version),null!=e.generator&&e.hasOwnProperty("generator")&&t.uint32(66).bytes(e.generator),null!=e.rewardVote&&e.hasOwnProperty("rewardVote")&&t.uint32(72).int64(e.rewardVote),null!=e.transactionsRoot&&e.hasOwnProperty("transactionsRoot")&&t.uint32(82).bytes(e.transactionsRoot),t},e.decode=function(e,t){e instanceof l||(e=l.create(e));for(var r=void 0===t?e.len:e.pos+t,n=new d.waves.Block.Header;e.pos<r;){var i=e.uint32();switch(i>>>3){case 1:n.chainId=e.int32();break;case 2:n.reference=e.bytes();break;case 3:n.baseTarget=e.int64();break;case 4:n.generationSignature=e.bytes();break;case 5:if(n.featureVotes&&n.featureVotes.length||(n.featureVotes=[]),2==(7&i))for(var a=e.uint32()+e.pos;e.pos<a;)n.featureVotes.push(e.uint32());else n.featureVotes.push(e.uint32());break;case 6:n.timestamp=e.int64();break;case 7:n.version=e.int32();break;case 8:n.generator=e.bytes();break;case 9:n.rewardVote=e.int64();break;case 10:n.transactionsRoot=e.bytes();break;default:e.skipType(7&i)}}return n},e}(),e}(),s.MicroBlock=function(){function e(e){if(this.transactions=[],e)for(var t=Object.keys(e),r=0;r<t.length;++r)null!=e[t[r]]&&(this[t[r]]=e[t[r]])}return e.prototype.version=0,e.prototype.reference=p.newBuffer([]),e.prototype.updatedBlockSignature=p.newBuffer([]),e.prototype.senderPublicKey=p.newBuffer([]),e.prototype.transactions=p.emptyArray,e.encode=function(e,t){if(t||(t=f.create()),null!=e.version&&e.hasOwnProperty("version")&&t.uint32(8).int32(e.version),null!=e.reference&&e.hasOwnProperty("reference")&&t.uint32(18).bytes(e.reference),null!=e.updatedBlockSignature&&e.hasOwnProperty("updatedBlockSignature")&&t.uint32(26).bytes(e.updatedBlockSignature),null!=e.senderPublicKey&&e.hasOwnProperty("senderPublicKey")&&t.uint32(34).bytes(e.senderPublicKey),null!=e.transactions&&e.transactions.length)for(var r=0;r<e.transactions.length;++r)d.waves.SignedTransaction.encode(e.transactions[r],t.uint32(42).fork()).ldelim();return t},e.decode=function(e,t){e instanceof l||(e=l.create(e));for(var r=void 0===t?e.len:e.pos+t,n=new d.waves.MicroBlock;e.pos<r;){var i=e.uint32();switch(i>>>3){case 1:n.version=e.int32();break;case 2:n.reference=e.bytes();break;case 3:n.updatedBlockSignature=e.bytes();break;case 4:n.senderPublicKey=e.bytes();break;case 5:n.transactions&&n.transactions.length||(n.transactions=[]),n.transactions.push(d.waves.SignedTransaction.decode(e,e.uint32()));break;default:e.skipType(7&i)}}return n},e}(),s.SignedMicroBlock=function(){function e(e){if(e)for(var t=Object.keys(e),r=0;r<t.length;++r)null!=e[t[r]]&&(this[t[r]]=e[t[r]])}return e.prototype.microBlock=null,e.prototype.signature=p.newBuffer([]),e.prototype.totalBlockId=p.newBuffer([]),e.encode=function(e,t){return t||(t=f.create()),null!=e.microBlock&&e.hasOwnProperty("microBlock")&&d.waves.MicroBlock.encode(e.microBlock,t.uint32(10).fork()).ldelim(),null!=e.signature&&e.hasOwnProperty("signature")&&t.uint32(18).bytes(e.signature),null!=e.totalBlockId&&e.hasOwnProperty("totalBlockId")&&t.uint32(26).bytes(e.totalBlockId),t},e.decode=function(e,t){e instanceof l||(e=l.create(e));for(var r=void 0===t?e.len:e.pos+t,n=new d.waves.SignedMicroBlock;e.pos<r;){var i=e.uint32();switch(i>>>3){case 1:n.microBlock=d.waves.MicroBlock.decode(e,e.uint32());break;case 2:n.signature=e.bytes();break;case 3:n.totalBlockId=e.bytes();break;default:e.skipType(7&i)}}return n},e}(),s.events=((i={}).BlockchainUpdated=function(){function e(e){if(this.referencedAssets=[],e)for(var t=Object.keys(e),r=0;r<t.length;++r)null!=e[t[r]]&&(this[t[r]]=e[t[r]])}var t;return e.prototype.id=p.newBuffer([]),e.prototype.height=0,e.prototype.append=null,e.prototype.rollback=null,e.prototype.referencedAssets=p.emptyArray,Object.defineProperty(e.prototype,"update",{get:p.oneOfGetter(t=["append","rollback"]),set:p.oneOfSetter(t)}),e.encode=function(e,t){if(t||(t=f.create()),null!=e.id&&e.hasOwnProperty("id")&&t.uint32(10).bytes(e.id),null!=e.height&&e.hasOwnProperty("height")&&t.uint32(16).int32(e.height),null!=e.append&&e.hasOwnProperty("append")&&d.waves.events.BlockchainUpdated.Append.encode(e.append,t.uint32(90).fork()).ldelim(),null!=e.rollback&&e.hasOwnProperty("rollback")&&d.waves.events.BlockchainUpdated.Rollback.encode(e.rollback,t.uint32(98).fork()).ldelim(),null!=e.referencedAssets&&e.referencedAssets.length)for(var r=0;r<e.referencedAssets.length;++r)d.waves.events.StateUpdate.AssetInfo.encode(e.referencedAssets[r],t.uint32(170).fork()).ldelim();return t},e.decode=function(e,t){e instanceof l||(e=l.create(e));for(var r=void 0===t?e.len:e.pos+t,n=new d.waves.events.BlockchainUpdated;e.pos<r;){var i=e.uint32();switch(i>>>3){case 1:n.id=e.bytes();break;case 2:n.height=e.int32();break;case 11:n.append=d.waves.events.BlockchainUpdated.Append.decode(e,e.uint32());break;case 12:n.rollback=d.waves.events.BlockchainUpdated.Rollback.decode(e,e.uint32());break;case 21:n.referencedAssets&&n.referencedAssets.length||(n.referencedAssets=[]),n.referencedAssets.push(d.waves.events.StateUpdate.AssetInfo.decode(e,e.uint32()));break;default:e.skipType(7&i)}}return n},e.Append=function(){function e(e){if(this.transactionIds=[],this.transactionsMetadata=[],this.transactionStateUpdates=[],e)for(var t=Object.keys(e),r=0;r<t.length;++r)null!=e[t[r]]&&(this[t[r]]=e[t[r]])}var t;return e.prototype.block=null,e.prototype.microBlock=null,e.prototype.transactionIds=p.emptyArray,e.prototype.transactionsMetadata=p.emptyArray,e.prototype.stateUpdate=null,e.prototype.transactionStateUpdates=p.emptyArray,Object.defineProperty(e.prototype,"body",{get:p.oneOfGetter(t=["block","microBlock"]),set:p.oneOfSetter(t)}),e.encode=function(e,t){if(t||(t=f.create()),null!=e.block&&e.hasOwnProperty("block")&&d.waves.events.BlockchainUpdated.Append.BlockAppend.encode(e.block,t.uint32(10).fork()).ldelim(),null!=e.microBlock&&e.hasOwnProperty("microBlock")&&d.waves.events.BlockchainUpdated.Append.MicroBlockAppend.encode(e.microBlock,t.uint32(18).fork()).ldelim(),null!=e.transactionIds&&e.transactionIds.length)for(var r=0;r<e.transactionIds.length;++r)t.uint32(26).bytes(e.transactionIds[r]);if(null!=e.transactionsMetadata&&e.transactionsMetadata.length)for(r=0;r<e.transactionsMetadata.length;++r)d.waves.events.TransactionMetadata.encode(e.transactionsMetadata[r],t.uint32(34).fork()).ldelim();if(null!=e.stateUpdate&&e.hasOwnProperty("stateUpdate")&&d.waves.events.StateUpdate.encode(e.stateUpdate,t.uint32(90).fork()).ldelim(),null!=e.transactionStateUpdates&&e.transactionStateUpdates.length)for(r=0;r<e.transactionStateUpdates.length;++r)d.waves.events.StateUpdate.encode(e.transactionStateUpdates[r],t.uint32(98).fork()).ldelim();return t},e.decode=function(e,t){e instanceof l||(e=l.create(e));for(var r=void 0===t?e.len:e.pos+t,n=new d.waves.events.BlockchainUpdated.Append;e.pos<r;){var i=e.uint32();switch(i>>>3){case 1:n.block=d.waves.events.BlockchainUpdated.Append.BlockAppend.decode(e,e.uint32());break;case 2:n.microBlock=d.waves.events.BlockchainUpdated.Append.MicroBlockAppend.decode(e,e.uint32());break;case 3:n.transactionIds&&n.transactionIds.length||(n.transactionIds=[]),n.transactionIds.push(e.bytes());break;case 4:n.transactionsMetadata&&n.transactionsMetadata.length||(n.transactionsMetadata=[]),n.transactionsMetadata.push(d.waves.events.TransactionMetadata.decode(e,e.uint32()));break;case 11:n.stateUpdate=d.waves.events.StateUpdate.decode(e,e.uint32());break;case 12:n.transactionStateUpdates&&n.transactionStateUpdates.length||(n.transactionStateUpdates=[]),n.transactionStateUpdates.push(d.waves.events.StateUpdate.decode(e,e.uint32()));break;default:e.skipType(7&i)}}return n},e.BlockAppend=function(){function e(e){if(e)for(var t=Object.keys(e),r=0;r<t.length;++r)null!=e[t[r]]&&(this[t[r]]=e[t[r]])}return e.prototype.block=null,e.prototype.updatedWavesAmount=p.Long?p.Long.fromBits(0,0,!1):0,e.encode=function(e,t){return t||(t=f.create()),null!=e.block&&e.hasOwnProperty("block")&&d.waves.Block.encode(e.block,t.uint32(10).fork()).ldelim(),null!=e.updatedWavesAmount&&e.hasOwnProperty("updatedWavesAmount")&&t.uint32(16).int64(e.updatedWavesAmount),t},e.decode=function(e,t){e instanceof l||(e=l.create(e));for(var r=void 0===t?e.len:e.pos+t,n=new d.waves.events.BlockchainUpdated.Append.BlockAppend;e.pos<r;){var i=e.uint32();switch(i>>>3){case 1:n.block=d.waves.Block.decode(e,e.uint32());break;case 2:n.updatedWavesAmount=e.int64();break;default:e.skipType(7&i)}}return n},e}(),e.MicroBlockAppend=function(){function e(e){if(e)for(var t=Object.keys(e),r=0;r<t.length;++r)null!=e[t[r]]&&(this[t[r]]=e[t[r]])}return e.prototype.microBlock=null,e.prototype.updatedTransactionsRoot=p.newBuffer([]),e.encode=function(e,t){return t||(t=f.create()),null!=e.microBlock&&e.hasOwnProperty("microBlock")&&d.waves.SignedMicroBlock.encode(e.microBlock,t.uint32(10).fork()).ldelim(),null!=e.updatedTransactionsRoot&&e.hasOwnProperty("updatedTransactionsRoot")&&t.uint32(18).bytes(e.updatedTransactionsRoot),t},e.decode=function(e,t){e instanceof l||(e=l.create(e));for(var r=void 0===t?e.len:e.pos+t,n=new d.waves.events.BlockchainUpdated.Append.MicroBlockAppend;e.pos<r;){var i=e.uint32();switch(i>>>3){case 1:n.microBlock=d.waves.SignedMicroBlock.decode(e,e.uint32());break;case 2:n.updatedTransactionsRoot=e.bytes();break;default:e.skipType(7&i)}}return n},e}(),e}(),e.Rollback=function(){function e(e){if(this.removedTransactionIds=[],this.removedBlocks=[],e)for(var t=Object.keys(e),r=0;r<t.length;++r)null!=e[t[r]]&&(this[t[r]]=e[t[r]])}var t,r;return e.prototype.type=0,e.prototype.removedTransactionIds=p.emptyArray,e.prototype.removedBlocks=p.emptyArray,e.prototype.rollbackStateUpdate=null,e.encode=function(e,t){if(t||(t=f.create()),null!=e.type&&e.hasOwnProperty("type")&&t.uint32(8).int32(e.type),null!=e.removedTransactionIds&&e.removedTransactionIds.length)for(var r=0;r<e.removedTransactionIds.length;++r)t.uint32(18).bytes(e.removedTransactionIds[r]);if(null!=e.removedBlocks&&e.removedBlocks.length)for(r=0;r<e.removedBlocks.length;++r)d.waves.Block.encode(e.removedBlocks[r],t.uint32(26).fork()).ldelim();return null!=e.rollbackStateUpdate&&e.hasOwnProperty("rollbackStateUpdate")&&d.waves.events.StateUpdate.encode(e.rollbackStateUpdate,t.uint32(34).fork()).ldelim(),t},e.decode=function(e,t){e instanceof l||(e=l.create(e));for(var r=void 0===t?e.len:e.pos+t,n=new d.waves.events.BlockchainUpdated.Rollback;e.pos<r;){var i=e.uint32();switch(i>>>3){case 1:n.type=e.int32();break;case 2:n.removedTransactionIds&&n.removedTransactionIds.length||(n.removedTransactionIds=[]),n.removedTransactionIds.push(e.bytes());break;case 3:n.removedBlocks&&n.removedBlocks.length||(n.removedBlocks=[]),n.removedBlocks.push(d.waves.Block.decode(e,e.uint32()));break;case 4:n.rollbackStateUpdate=d.waves.events.StateUpdate.decode(e,e.uint32());break;default:e.skipType(7&i)}}return n},e.RollbackType=(t={},(r=Object.create(t))[t[0]="BLOCK"]=0,r[t[1]="MICROBLOCK"]=1,r),e}(),e}(),i.StateUpdate=function(){function e(e){if(this.balances=[],this.leasingForAddress=[],this.dataEntries=[],this.assets=[],this.individualLeases=[],e)for(var t=Object.keys(e),r=0;r<t.length;++r)null!=e[t[r]]&&(this[t[r]]=e[t[r]])}return e.prototype.balances=p.emptyArray,e.prototype.leasingForAddress=p.emptyArray,e.prototype.dataEntries=p.emptyArray,e.prototype.assets=p.emptyArray,e.prototype.individualLeases=p.emptyArray,e.encode=function(e,t){if(t||(t=f.create()),null!=e.balances&&e.balances.length)for(var r=0;r<e.balances.length;++r)d.waves.events.StateUpdate.BalanceUpdate.encode(e.balances[r],t.uint32(10).fork()).ldelim();if(null!=e.leasingForAddress&&e.leasingForAddress.length)for(r=0;r<e.leasingForAddress.length;++r)d.waves.events.StateUpdate.LeasingUpdate.encode(e.leasingForAddress[r],t.uint32(18).fork()).ldelim();if(null!=e.dataEntries&&e.dataEntries.length)for(r=0;r<e.dataEntries.length;++r)d.waves.events.StateUpdate.DataEntryUpdate.encode(e.dataEntries[r],t.uint32(26).fork()).ldelim();if(null!=e.assets&&e.assets.length)for(r=0;r<e.assets.length;++r)d.waves.events.StateUpdate.AssetStateUpdate.encode(e.assets[r],t.uint32(34).fork()).ldelim();if(null!=e.individualLeases&&e.individualLeases.length)for(r=0;r<e.individualLeases.length;++r)d.waves.events.StateUpdate.LeaseUpdate.encode(e.individualLeases[r],t.uint32(42).fork()).ldelim();return t},e.decode=function(e,t){e instanceof l||(e=l.create(e));for(var r=void 0===t?e.len:e.pos+t,n=new d.waves.events.StateUpdate;e.pos<r;){var i=e.uint32();switch(i>>>3){case 1:n.balances&&n.balances.length||(n.balances=[]),n.balances.push(d.waves.events.StateUpdate.BalanceUpdate.decode(e,e.uint32()));break;case 2:n.leasingForAddress&&n.leasingForAddress.length||(n.leasingForAddress=[]),n.leasingForAddress.push(d.waves.events.StateUpdate.LeasingUpdate.decode(e,e.uint32()));break;case 3:n.dataEntries&&n.dataEntries.length||(n.dataEntries=[]),n.dataEntries.push(d.waves.events.StateUpdate.DataEntryUpdate.decode(e,e.uint32()));break;case 4:n.assets&&n.assets.length||(n.assets=[]),n.assets.push(d.waves.events.StateUpdate.AssetStateUpdate.decode(e,e.uint32()));break;case 5:n.individualLeases&&n.individualLeases.length||(n.individualLeases=[]),n.individualLeases.push(d.waves.events.StateUpdate.LeaseUpdate.decode(e,e.uint32()));break;default:e.skipType(7&i)}}return n},e.BalanceUpdate=function(){function e(e){if(e)for(var t=Object.keys(e),r=0;r<t.length;++r)null!=e[t[r]]&&(this[t[r]]=e[t[r]])}return e.prototype.address=p.newBuffer([]),e.prototype.amountAfter=null,e.prototype.amountBefore=p.Long?p.Long.fromBits(0,0,!1):0,e.encode=function(e,t){return t||(t=f.create()),null!=e.address&&e.hasOwnProperty("address")&&t.uint32(10).bytes(e.address),null!=e.amountAfter&&e.hasOwnProperty("amountAfter")&&d.waves.Amount.encode(e.amountAfter,t.uint32(18).fork()).ldelim(),null!=e.amountBefore&&e.hasOwnProperty("amountBefore")&&t.uint32(24).int64(e.amountBefore),t},e.decode=function(e,t){e instanceof l||(e=l.create(e));for(var r=void 0===t?e.len:e.pos+t,n=new d.waves.events.StateUpdate.BalanceUpdate;e.pos<r;){var i=e.uint32();switch(i>>>3){case 1:n.address=e.bytes();break;case 2:n.amountAfter=d.waves.Amount.decode(e,e.uint32());break;case 3:n.amountBefore=e.int64();break;default:e.skipType(7&i)}}return n},e}(),e.LeasingUpdate=function(){function e(e){if(e)for(var t=Object.keys(e),r=0;r<t.length;++r)null!=e[t[r]]&&(this[t[r]]=e[t[r]])}return e.prototype.address=p.newBuffer([]),e.prototype.inAfter=p.Long?p.Long.fromBits(0,0,!1):0,e.prototype.outAfter=p.Long?p.Long.fromBits(0,0,!1):0,e.prototype.inBefore=p.Long?p.Long.fromBits(0,0,!1):0,e.prototype.outBefore=p.Long?p.Long.fromBits(0,0,!1):0,e.encode=function(e,t){return t||(t=f.create()),null!=e.address&&e.hasOwnProperty("address")&&t.uint32(10).bytes(e.address),null!=e.inAfter&&e.hasOwnProperty("inAfter")&&t.uint32(16).int64(e.inAfter),null!=e.outAfter&&e.hasOwnProperty("outAfter")&&t.uint32(24).int64(e.outAfter),null!=e.inBefore&&e.hasOwnProperty("inBefore")&&t.uint32(32).int64(e.inBefore),null!=e.outBefore&&e.hasOwnProperty("outBefore")&&t.uint32(40).int64(e.outBefore),t},e.decode=function(e,t){e instanceof l||(e=l.create(e));for(var r=void 0===t?e.len:e.pos+t,n=new d.waves.events.StateUpdate.LeasingUpdate;e.pos<r;){var i=e.uint32();switch(i>>>3){case 1:n.address=e.bytes();break;case 2:n.inAfter=e.int64();break;case 3:n.outAfter=e.int64();break;case 4:n.inBefore=e.int64();break;case 5:n.outBefore=e.int64();break;default:e.skipType(7&i)}}return n},e}(),e.LeaseUpdate=function(){function e(e){if(e)for(var t=Object.keys(e),r=0;r<t.length;++r)null!=e[t[r]]&&(this[t[r]]=e[t[r]])}var t,r;return e.prototype.leaseId=p.newBuffer([]),e.prototype.statusAfter=0,e.prototype.amount=p.Long?p.Long.fromBits(0,0,!1):0,e.prototype.sender=p.newBuffer([]),e.prototype.recipient=p.newBuffer([]),e.prototype.originTransactionId=p.newBuffer([]),e.encode=function(e,t){return t||(t=f.create()),null!=e.leaseId&&e.hasOwnProperty("leaseId")&&t.uint32(10).bytes(e.leaseId),null!=e.statusAfter&&e.hasOwnProperty("statusAfter")&&t.uint32(16).int32(e.statusAfter),null!=e.amount&&e.hasOwnProperty("amount")&&t.uint32(80).int64(e.amount),null!=e.sender&&e.hasOwnProperty("sender")&&t.uint32(90).bytes(e.sender),null!=e.recipient&&e.hasOwnProperty("recipient")&&t.uint32(98).bytes(e.recipient),null!=e.originTransactionId&&e.hasOwnProperty("originTransactionId")&&t.uint32(106).bytes(e.originTransactionId),t},e.decode=function(e,t){e instanceof l||(e=l.create(e));for(var r=void 0===t?e.len:e.pos+t,n=new d.waves.events.StateUpdate.LeaseUpdate;e.pos<r;){var i=e.uint32();switch(i>>>3){case 1:n.leaseId=e.bytes();break;case 2:n.statusAfter=e.int32();break;case 10:n.amount=e.int64();break;case 11:n.sender=e.bytes();break;case 12:n.recipient=e.bytes();break;case 13:n.originTransactionId=e.bytes();break;default:e.skipType(7&i)}}return n},e.LeaseStatus=(t={},(r=Object.create(t))[t[0]="INACTIVE"]=0,r[t[1]="ACTIVE"]=1,r),e}(),e.DataEntryUpdate=function(){function e(e){if(e)for(var t=Object.keys(e),r=0;r<t.length;++r)null!=e[t[r]]&&(this[t[r]]=e[t[r]])}return e.prototype.address=p.newBuffer([]),e.prototype.dataEntry=null,e.prototype.dataEntryBefore=null,e.encode=function(e,t){return t||(t=f.create()),null!=e.address&&e.hasOwnProperty("address")&&t.uint32(10).bytes(e.address),null!=e.dataEntry&&e.hasOwnProperty("dataEntry")&&d.waves.DataTransactionData.DataEntry.encode(e.dataEntry,t.uint32(18).fork()).ldelim(),null!=e.dataEntryBefore&&e.hasOwnProperty("dataEntryBefore")&&d.waves.DataTransactionData.DataEntry.encode(e.dataEntryBefore,t.uint32(82).fork()).ldelim(),t},e.decode=function(e,t){e instanceof l||(e=l.create(e));for(var r=void 0===t?e.len:e.pos+t,n=new d.waves.events.StateUpdate.DataEntryUpdate;e.pos<r;){var i=e.uint32();switch(i>>>3){case 1:n.address=e.bytes();break;case 2:n.dataEntry=d.waves.DataTransactionData.DataEntry.decode(e,e.uint32());break;case 10:n.dataEntryBefore=d.waves.DataTransactionData.DataEntry.decode(e,e.uint32());break;default:e.skipType(7&i)}}return n},e}(),e.AssetStateUpdate=function(){function e(e){if(e)for(var t=Object.keys(e),r=0;r<t.length;++r)null!=e[t[r]]&&(this[t[r]]=e[t[r]])}return e.prototype.before=null,e.prototype.after=null,e.encode=function(e,t){return t||(t=f.create()),null!=e.before&&e.hasOwnProperty("before")&&d.waves.events.StateUpdate.AssetDetails.encode(e.before,t.uint32(10).fork()).ldelim(),null!=e.after&&e.hasOwnProperty("after")&&d.waves.events.StateUpdate.AssetDetails.encode(e.after,t.uint32(18).fork()).ldelim(),t},e.decode=function(e,t){e instanceof l||(e=l.create(e));for(var r=void 0===t?e.len:e.pos+t,n=new d.waves.events.StateUpdate.AssetStateUpdate;e.pos<r;){var i=e.uint32();switch(i>>>3){case 1:n.before=d.waves.events.StateUpdate.AssetDetails.decode(e,e.uint32());break;case 2:n.after=d.waves.events.StateUpdate.AssetDetails.decode(e,e.uint32());break;default:e.skipType(7&i)}}return n},e}(),e.AssetDetails=function(){function e(e){if(e)for(var t=Object.keys(e),r=0;r<t.length;++r)null!=e[t[r]]&&(this[t[r]]=e[t[r]])}return e.prototype.assetId=p.newBuffer([]),e.prototype.issuer=p.newBuffer([]),e.prototype.decimals=0,e.prototype.name="",e.prototype.description="",e.prototype.reissuable=!1,e.prototype.volume=p.Long?p.Long.fromBits(0,0,!1):0,e.prototype.scriptInfo=null,e.prototype.sponsorship=p.Long?p.Long.fromBits(0,0,!1):0,e.prototype.nft=!1,e.prototype.lastUpdated=0,e.prototype.safeVolume=p.newBuffer([]),e.encode=function(e,t){return t||(t=f.create()),null!=e.assetId&&e.hasOwnProperty("assetId")&&t.uint32(10).bytes(e.assetId),null!=e.issuer&&e.hasOwnProperty("issuer")&&t.uint32(18).bytes(e.issuer),null!=e.decimals&&e.hasOwnProperty("decimals")&&t.uint32(24).int32(e.decimals),null!=e.name&&e.hasOwnProperty("name")&&t.uint32(34).string(e.name),null!=e.description&&e.hasOwnProperty("description")&&t.uint32(42).string(e.description),null!=e.reissuable&&e.hasOwnProperty("reissuable")&&t.uint32(48).bool(e.reissuable),null!=e.volume&&e.hasOwnProperty("volume")&&t.uint32(56).int64(e.volume),null!=e.scriptInfo&&e.hasOwnProperty("scriptInfo")&&d.waves.events.StateUpdate.AssetDetails.AssetScriptInfo.encode(e.scriptInfo,t.uint32(66).fork()).ldelim(),null!=e.sponsorship&&e.hasOwnProperty("sponsorship")&&t.uint32(72).int64(e.sponsorship),null!=e.nft&&e.hasOwnProperty("nft")&&t.uint32(80).bool(e.nft),null!=e.lastUpdated&&e.hasOwnProperty("lastUpdated")&&t.uint32(88).int32(e.lastUpdated),null!=e.safeVolume&&e.hasOwnProperty("safeVolume")&&t.uint32(162).bytes(e.safeVolume),t},e.decode=function(e,t){e instanceof l||(e=l.create(e));for(var r=void 0===t?e.len:e.pos+t,n=new d.waves.events.StateUpdate.AssetDetails;e.pos<r;){var i=e.uint32();switch(i>>>3){case 1:n.assetId=e.bytes();break;case 2:n.issuer=e.bytes();break;case 3:n.decimals=e.int32();break;case 4:n.name=e.string();break;case 5:n.description=e.string();break;case 6:n.reissuable=e.bool();break;case 7:n.volume=e.int64();break;case 8:n.scriptInfo=d.waves.events.StateUpdate.AssetDetails.AssetScriptInfo.decode(e,e.uint32());break;case 9:n.sponsorship=e.int64();break;case 10:n.nft=e.bool();break;case 11:n.lastUpdated=e.int32();break;case 20:n.safeVolume=e.bytes();break;default:e.skipType(7&i)}}return n},e.AssetScriptInfo=function(){function e(e){if(e)for(var t=Object.keys(e),r=0;r<t.length;++r)null!=e[t[r]]&&(this[t[r]]=e[t[r]])}return e.prototype.script=p.newBuffer([]),e.prototype.complexity=p.Long?p.Long.fromBits(0,0,!1):0,e.encode=function(e,t){return t||(t=f.create()),null!=e.script&&e.hasOwnProperty("script")&&t.uint32(10).bytes(e.script),null!=e.complexity&&e.hasOwnProperty("complexity")&&t.uint32(16).int64(e.complexity),t},e.decode=function(e,t){e instanceof l||(e=l.create(e));for(var r=void 0===t?e.len:e.pos+t,n=new d.waves.events.StateUpdate.AssetDetails.AssetScriptInfo;e.pos<r;){var i=e.uint32();switch(i>>>3){case 1:n.script=e.bytes();break;case 2:n.complexity=e.int64();break;default:e.skipType(7&i)}}return n},e}(),e}(),e.AssetInfo=function(){function e(e){if(e)for(var t=Object.keys(e),r=0;r<t.length;++r)null!=e[t[r]]&&(this[t[r]]=e[t[r]])}return e.prototype.id=p.newBuffer([]),e.prototype.decimals=0,e.prototype.name="",e.encode=function(e,t){return t||(t=f.create()),null!=e.id&&e.hasOwnProperty("id")&&t.uint32(10).bytes(e.id),null!=e.decimals&&e.hasOwnProperty("decimals")&&t.uint32(16).int32(e.decimals),null!=e.name&&e.hasOwnProperty("name")&&t.uint32(26).string(e.name),t},e.decode=function(e,t){e instanceof l||(e=l.create(e));for(var r=void 0===t?e.len:e.pos+t,n=new d.waves.events.StateUpdate.AssetInfo;e.pos<r;){var i=e.uint32();switch(i>>>3){case 1:n.id=e.bytes();break;case 2:n.decimals=e.int32();break;case 3:n.name=e.string();break;default:e.skipType(7&i)}}return n},e}(),e}(),i.TransactionMetadata=function(){function e(e){if(e)for(var t=Object.keys(e),r=0;r<t.length;++r)null!=e[t[r]]&&(this[t[r]]=e[t[r]])}var t;return e.prototype.transfer=null,e.prototype.massTransfer=null,e.prototype.invokeScript=null,e.prototype.leaseMeta=null,Object.defineProperty(e.prototype,"metadata",{get:p.oneOfGetter(t=["transfer","massTransfer","invokeScript","leaseMeta"]),set:p.oneOfSetter(t)}),e.encode=function(e,t){return t||(t=f.create()),null!=e.transfer&&e.hasOwnProperty("transfer")&&d.waves.events.TransactionMetadata.TransferMetadata.encode(e.transfer,t.uint32(834).fork()).ldelim(),null!=e.massTransfer&&e.hasOwnProperty("massTransfer")&&d.waves.events.TransactionMetadata.MassTransferMetadata.encode(e.massTransfer,t.uint32(890).fork()).ldelim(),null!=e.invokeScript&&e.hasOwnProperty("invokeScript")&&d.waves.events.TransactionMetadata.InvokeScriptMetadata.encode(e.invokeScript,t.uint32(930).fork()).ldelim(),null!=e.leaseMeta&&e.hasOwnProperty("leaseMeta")&&d.waves.events.TransactionMetadata.LeaseMetadata.encode(e.leaseMeta,t.uint32(938).fork()).ldelim(),t},e.decode=function(e,t){e instanceof l||(e=l.create(e));for(var r=void 0===t?e.len:e.pos+t,n=new d.waves.events.TransactionMetadata;e.pos<r;){var i=e.uint32();switch(i>>>3){case 104:n.transfer=d.waves.events.TransactionMetadata.TransferMetadata.decode(e,e.uint32());break;case 111:n.massTransfer=d.waves.events.TransactionMetadata.MassTransferMetadata.decode(e,e.uint32());break;case 116:n.invokeScript=d.waves.events.TransactionMetadata.InvokeScriptMetadata.decode(e,e.uint32());break;case 117:n.leaseMeta=d.waves.events.TransactionMetadata.LeaseMetadata.decode(e,e.uint32());break;default:e.skipType(7&i)}}return n},e.TransferMetadata=function(){function e(e){if(e)for(var t=Object.keys(e),r=0;r<t.length;++r)null!=e[t[r]]&&(this[t[r]]=e[t[r]])}return e.prototype.recipientAddress=p.newBuffer([]),e.encode=function(e,t){return t||(t=f.create()),null!=e.recipientAddress&&e.hasOwnProperty("recipientAddress")&&t.uint32(10).bytes(e.recipientAddress),t},e.decode=function(e,t){e instanceof l||(e=l.create(e));for(var r=void 0===t?e.len:e.pos+t,n=new d.waves.events.TransactionMetadata.TransferMetadata;e.pos<r;){var i=e.uint32();switch(i>>>3){case 1:n.recipientAddress=e.bytes();break;default:e.skipType(7&i)}}return n},e}(),e.MassTransferMetadata=function(){function e(e){if(this.recipientsAddresses=[],e)for(var t=Object.keys(e),r=0;r<t.length;++r)null!=e[t[r]]&&(this[t[r]]=e[t[r]])}return e.prototype.recipientsAddresses=p.emptyArray,e.encode=function(e,t){if(t||(t=f.create()),null!=e.recipientsAddresses&&e.recipientsAddresses.length)for(var r=0;r<e.recipientsAddresses.length;++r)t.uint32(10).bytes(e.recipientsAddresses[r]);return t},e.decode=function(e,t){e instanceof l||(e=l.create(e));for(var r=void 0===t?e.len:e.pos+t,n=new d.waves.events.TransactionMetadata.MassTransferMetadata;e.pos<r;){var i=e.uint32();switch(i>>>3){case 1:n.recipientsAddresses&&n.recipientsAddresses.length||(n.recipientsAddresses=[]),n.recipientsAddresses.push(e.bytes());break;default:e.skipType(7&i)}}return n},e}(),e.InvokeScriptMetadata=function(){function e(e){if(this.arguments=[],this.payments=[],e)for(var t=Object.keys(e),r=0;r<t.length;++r)null!=e[t[r]]&&(this[t[r]]=e[t[r]])}return e.prototype.dAppAddress=p.newBuffer([]),e.prototype.functionName="",e.prototype.arguments=p.emptyArray,e.prototype.payments=p.emptyArray,e.prototype.result=null,e.encode=function(e,t){if(t||(t=f.create()),null!=e.dAppAddress&&e.hasOwnProperty("dAppAddress")&&t.uint32(10).bytes(e.dAppAddress),null!=e.functionName&&e.hasOwnProperty("functionName")&&t.uint32(18).string(e.functionName),null!=e.arguments&&e.arguments.length)for(var r=0;r<e.arguments.length;++r)d.waves.events.TransactionMetadata.InvokeScriptMetadata.Argument.encode(e.arguments[r],t.uint32(26).fork()).ldelim();if(null!=e.payments&&e.payments.length)for(r=0;r<e.payments.length;++r)d.waves.Amount.encode(e.payments[r],t.uint32(34).fork()).ldelim();return null!=e.result&&e.hasOwnProperty("result")&&d.waves.InvokeScriptResult.encode(e.result,t.uint32(42).fork()).ldelim(),t},e.decode=function(e,t){e instanceof l||(e=l.create(e));for(var r=void 0===t?e.len:e.pos+t,n=new d.waves.events.TransactionMetadata.InvokeScriptMetadata;e.pos<r;){var i=e.uint32();switch(i>>>3){case 1:n.dAppAddress=e.bytes();break;case 2:n.functionName=e.string();break;case 3:n.arguments&&n.arguments.length||(n.arguments=[]),n.arguments.push(d.waves.events.TransactionMetadata.InvokeScriptMetadata.Argument.decode(e,e.uint32()));break;case 4:n.payments&&n.payments.length||(n.payments=[]),n.payments.push(d.waves.Amount.decode(e,e.uint32()));break;case 5:n.result=d.waves.InvokeScriptResult.decode(e,e.uint32());break;default:e.skipType(7&i)}}return n},e.Argument=function(){function e(e){if(e)for(var t=Object.keys(e),r=0;r<t.length;++r)null!=e[t[r]]&&(this[t[r]]=e[t[r]])}var t;return e.prototype.integerValue=p.Long?p.Long.fromBits(0,0,!1):0,e.prototype.binaryValue=p.newBuffer([]),e.prototype.stringValue="",e.prototype.booleanValue=!1,e.prototype.list=null,Object.defineProperty(e.prototype,"value",{get:p.oneOfGetter(t=["integerValue","binaryValue","stringValue","booleanValue","list"]),set:p.oneOfSetter(t)}),e.encode=function(e,t){return t||(t=f.create()),null!=e.integerValue&&e.hasOwnProperty("integerValue")&&t.uint32(8).int64(e.integerValue),null!=e.binaryValue&&e.hasOwnProperty("binaryValue")&&t.uint32(18).bytes(e.binaryValue),null!=e.stringValue&&e.hasOwnProperty("stringValue")&&t.uint32(26).string(e.stringValue),null!=e.booleanValue&&e.hasOwnProperty("booleanValue")&&t.uint32(32).bool(e.booleanValue),null!=e.list&&e.hasOwnProperty("list")&&d.waves.events.TransactionMetadata.InvokeScriptMetadata.Argument.List.encode(e.list,t.uint32(82).fork()).ldelim(),t},e.decode=function(e,t){e instanceof l||(e=l.create(e));for(var r=void 0===t?e.len:e.pos+t,n=new d.waves.events.TransactionMetadata.InvokeScriptMetadata.Argument;e.pos<r;){var i=e.uint32();switch(i>>>3){case 1:n.integerValue=e.int64();break;case 2:n.binaryValue=e.bytes();break;case 3:n.stringValue=e.string();break;case 4:n.booleanValue=e.bool();break;case 10:n.list=d.waves.events.TransactionMetadata.InvokeScriptMetadata.Argument.List.decode(e,e.uint32());break;default:e.skipType(7&i)}}return n},e.List=function(){function e(e){if(this.items=[],e)for(var t=Object.keys(e),r=0;r<t.length;++r)null!=e[t[r]]&&(this[t[r]]=e[t[r]])}return e.prototype.items=p.emptyArray,e.encode=function(e,t){if(t||(t=f.create()),null!=e.items&&e.items.length)for(var r=0;r<e.items.length;++r)d.waves.events.TransactionMetadata.InvokeScriptMetadata.Argument.encode(e.items[r],t.uint32(10).fork()).ldelim();return t},e.decode=function(e,t){e instanceof l||(e=l.create(e));for(var r=void 0===t?e.len:e.pos+t,n=new d.waves.events.TransactionMetadata.InvokeScriptMetadata.Argument.List;e.pos<r;){var i=e.uint32();switch(i>>>3){case 1:n.items&&n.items.length||(n.items=[]),n.items.push(d.waves.events.TransactionMetadata.InvokeScriptMetadata.Argument.decode(e,e.uint32()));break;default:e.skipType(7&i)}}return n},e}(),e}(),e}(),e.LeaseMetadata=function(){function e(e){if(e)for(var t=Object.keys(e),r=0;r<t.length;++r)null!=e[t[r]]&&(this[t[r]]=e[t[r]])}return e.prototype.recipientAddress=p.newBuffer([]),e.encode=function(e,t){return t||(t=f.create()),null!=e.recipientAddress&&e.hasOwnProperty("recipientAddress")&&t.uint32(10).bytes(e.recipientAddress),t},e.decode=function(e,t){e instanceof l||(e=l.create(e));for(var r=void 0===t?e.len:e.pos+t,n=new d.waves.events.TransactionMetadata.LeaseMetadata;e.pos<r;){var i=e.uint32();switch(i>>>3){case 1:n.recipientAddress=e.bytes();break;default:e.skipType(7&i)}}return n},e}(),e}(),i.grpc=((n={}).BlockchainUpdatesApi=function(){function e(e,t,r){c.rpc.Service.call(this,e,t,r)}return(e.prototype=Object.create(c.rpc.Service.prototype)).constructor=e,Object.defineProperty(e.prototype.getBlockUpdate=function e(t,r){return this.rpcCall(e,d.waves.events.grpc.GetBlockUpdateRequest,d.waves.events.grpc.GetBlockUpdateResponse,t,r)},"name",{value:"GetBlockUpdate"}),Object.defineProperty(e.prototype.getBlockUpdatesRange=function e(t,r){return this.rpcCall(e,d.waves.events.grpc.GetBlockUpdatesRangeRequest,d.waves.events.grpc.GetBlockUpdatesRangeResponse,t,r)},"name",{value:"GetBlockUpdatesRange"}),Object.defineProperty(e.prototype.subscribe=function e(t,r){return this.rpcCall(e,d.waves.events.grpc.SubscribeRequest,d.waves.events.grpc.SubscribeEvent,t,r)},"name",{value:"Subscribe"}),e}(),n.GetBlockUpdateRequest=function(){function e(e){if(e)for(var t=Object.keys(e),r=0;r<t.length;++r)null!=e[t[r]]&&(this[t[r]]=e[t[r]])}return e.prototype.height=0,e.encode=function(e,t){return t||(t=f.create()),null!=e.height&&e.hasOwnProperty("height")&&t.uint32(8).int32(e.height),t},e.decode=function(e,t){e instanceof l||(e=l.create(e));for(var r=void 0===t?e.len:e.pos+t,n=new d.waves.events.grpc.GetBlockUpdateRequest;e.pos<r;){var i=e.uint32();switch(i>>>3){case 1:n.height=e.int32();break;default:e.skipType(7&i)}}return n},e}(),n.GetBlockUpdateResponse=function(){function e(e){if(e)for(var t=Object.keys(e),r=0;r<t.length;++r)null!=e[t[r]]&&(this[t[r]]=e[t[r]])}return e.prototype.update=null,e.encode=function(e,t){return t||(t=f.create()),null!=e.update&&e.hasOwnProperty("update")&&d.waves.events.BlockchainUpdated.encode(e.update,t.uint32(10).fork()).ldelim(),t},e.decode=function(e,t){e instanceof l||(e=l.create(e));for(var r=void 0===t?e.len:e.pos+t,n=new d.waves.events.grpc.GetBlockUpdateResponse;e.pos<r;){var i=e.uint32();switch(i>>>3){case 1:n.update=d.waves.events.BlockchainUpdated.decode(e,e.uint32());break;default:e.skipType(7&i)}}return n},e}(),n.GetBlockUpdatesRangeRequest=function(){function e(e){if(e)for(var t=Object.keys(e),r=0;r<t.length;++r)null!=e[t[r]]&&(this[t[r]]=e[t[r]])}return e.prototype.fromHeight=0,e.prototype.toHeight=0,e.encode=function(e,t){return t||(t=f.create()),null!=e.fromHeight&&e.hasOwnProperty("fromHeight")&&t.uint32(8).int32(e.fromHeight),null!=e.toHeight&&e.hasOwnProperty("toHeight")&&t.uint32(16).int32(e.toHeight),t},e.decode=function(e,t){e instanceof l||(e=l.create(e));for(var r=void 0===t?e.len:e.pos+t,n=new d.waves.events.grpc.GetBlockUpdatesRangeRequest;e.pos<r;){var i=e.uint32();switch(i>>>3){case 1:n.fromHeight=e.int32();break;case 2:n.toHeight=e.int32();break;default:e.skipType(7&i)}}return n},e}(),n.GetBlockUpdatesRangeResponse=function(){function e(e){if(this.updates=[],e)for(var t=Object.keys(e),r=0;r<t.length;++r)null!=e[t[r]]&&(this[t[r]]=e[t[r]])}return e.prototype.updates=p.emptyArray,e.encode=function(e,t){if(t||(t=f.create()),null!=e.updates&&e.updates.length)for(var r=0;r<e.updates.length;++r)d.waves.events.BlockchainUpdated.encode(e.updates[r],t.uint32(10).fork()).ldelim();return t},e.decode=function(e,t){e instanceof l||(e=l.create(e));for(var r=void 0===t?e.len:e.pos+t,n=new d.waves.events.grpc.GetBlockUpdatesRangeResponse;e.pos<r;){var i=e.uint32();switch(i>>>3){case 1:n.updates&&n.updates.length||(n.updates=[]),n.updates.push(d.waves.events.BlockchainUpdated.decode(e,e.uint32()));break;default:e.skipType(7&i)}}return n},e}(),n.SubscribeRequest=function(){function e(e){if(e)for(var t=Object.keys(e),r=0;r<t.length;++r)null!=e[t[r]]&&(this[t[r]]=e[t[r]])}return e.prototype.fromHeight=0,e.prototype.toHeight=0,e.encode=function(e,t){return t||(t=f.create()),null!=e.fromHeight&&e.hasOwnProperty("fromHeight")&&t.uint32(8).int32(e.fromHeight),null!=e.toHeight&&e.hasOwnProperty("toHeight")&&t.uint32(16).int32(e.toHeight),t},e.decode=function(e,t){e instanceof l||(e=l.create(e));for(var r=void 0===t?e.len:e.pos+t,n=new d.waves.events.grpc.SubscribeRequest;e.pos<r;){var i=e.uint32();switch(i>>>3){case 1:n.fromHeight=e.int32();break;case 2:n.toHeight=e.int32();break;default:e.skipType(7&i)}}return n},e}(),n.SubscribeEvent=function(){function e(e){if(e)for(var t=Object.keys(e),r=0;r<t.length;++r)null!=e[t[r]]&&(this[t[r]]=e[t[r]])}return e.prototype.update=null,e.encode=function(e,t){return t||(t=f.create()),null!=e.update&&e.hasOwnProperty("update")&&d.waves.events.BlockchainUpdated.encode(e.update,t.uint32(10).fork()).ldelim(),t},e.decode=function(e,t){e instanceof l||(e=l.create(e));for(var r=void 0===t?e.len:e.pos+t,n=new d.waves.events.grpc.SubscribeEvent;e.pos<r;){var i=e.uint32();switch(i>>>3){case 1:n.update=d.waves.events.BlockchainUpdated.decode(e,e.uint32());break;default:e.skipType(7&i)}}return n},e}(),n),i),s.InvokeScriptResult=function(){function e(e){if(this.data=[],this.transfers=[],this.issues=[],this.reissues=[],this.burns=[],this.sponsorFees=[],this.leases=[],this.leaseCancels=[],this.invokes=[],e)for(var t=Object.keys(e),r=0;r<t.length;++r)null!=e[t[r]]&&(this[t[r]]=e[t[r]])}return e.prototype.data=p.emptyArray,e.prototype.transfers=p.emptyArray,e.prototype.issues=p.emptyArray,e.prototype.reissues=p.emptyArray,e.prototype.burns=p.emptyArray,e.prototype.errorMessage=null,e.prototype.sponsorFees=p.emptyArray,e.prototype.leases=p.emptyArray,e.prototype.leaseCancels=p.emptyArray,e.prototype.invokes=p.emptyArray,e.encode=function(e,t){if(t||(t=f.create()),null!=e.data&&e.data.length)for(var r=0;r<e.data.length;++r)d.waves.DataTransactionData.DataEntry.encode(e.data[r],t.uint32(10).fork()).ldelim();if(null!=e.transfers&&e.transfers.length)for(r=0;r<e.transfers.length;++r)d.waves.InvokeScriptResult.Payment.encode(e.transfers[r],t.uint32(18).fork()).ldelim();if(null!=e.issues&&e.issues.length)for(r=0;r<e.issues.length;++r)d.waves.InvokeScriptResult.Issue.encode(e.issues[r],t.uint32(26).fork()).ldelim();if(null!=e.reissues&&e.reissues.length)for(r=0;r<e.reissues.length;++r)d.waves.InvokeScriptResult.Reissue.encode(e.reissues[r],t.uint32(34).fork()).ldelim();if(null!=e.burns&&e.burns.length)for(r=0;r<e.burns.length;++r)d.waves.InvokeScriptResult.Burn.encode(e.burns[r],t.uint32(42).fork()).ldelim();if(null!=e.errorMessage&&e.hasOwnProperty("errorMessage")&&d.waves.InvokeScriptResult.ErrorMessage.encode(e.errorMessage,t.uint32(50).fork()).ldelim(),null!=e.sponsorFees&&e.sponsorFees.length)for(r=0;r<e.sponsorFees.length;++r)d.waves.InvokeScriptResult.SponsorFee.encode(e.sponsorFees[r],t.uint32(58).fork()).ldelim();if(null!=e.leases&&e.leases.length)for(r=0;r<e.leases.length;++r)d.waves.InvokeScriptResult.Lease.encode(e.leases[r],t.uint32(66).fork()).ldelim();if(null!=e.leaseCancels&&e.leaseCancels.length)for(r=0;r<e.leaseCancels.length;++r)d.waves.InvokeScriptResult.LeaseCancel.encode(e.leaseCancels[r],t.uint32(74).fork()).ldelim();if(null!=e.invokes&&e.invokes.length)for(r=0;r<e.invokes.length;++r)d.waves.InvokeScriptResult.Invocation.encode(e.invokes[r],t.uint32(82).fork()).ldelim();return t},e.decode=function(e,t){e instanceof l||(e=l.create(e));for(var r=void 0===t?e.len:e.pos+t,n=new d.waves.InvokeScriptResult;e.pos<r;){var i=e.uint32();switch(i>>>3){case 1:n.data&&n.data.length||(n.data=[]),n.data.push(d.waves.DataTransactionData.DataEntry.decode(e,e.uint32()));break;case 2:n.transfers&&n.transfers.length||(n.transfers=[]),n.transfers.push(d.waves.InvokeScriptResult.Payment.decode(e,e.uint32()));break;case 3:n.issues&&n.issues.length||(n.issues=[]),n.issues.push(d.waves.InvokeScriptResult.Issue.decode(e,e.uint32()));break;case 4:n.reissues&&n.reissues.length||(n.reissues=[]),n.reissues.push(d.waves.InvokeScriptResult.Reissue.decode(e,e.uint32()));break;case 5:n.burns&&n.burns.length||(n.burns=[]),n.burns.push(d.waves.InvokeScriptResult.Burn.decode(e,e.uint32()));break;case 6:n.errorMessage=d.waves.InvokeScriptResult.ErrorMessage.decode(e,e.uint32());break;case 7:n.sponsorFees&&n.sponsorFees.length||(n.sponsorFees=[]),n.sponsorFees.push(d.waves.InvokeScriptResult.SponsorFee.decode(e,e.uint32()));break;case 8:n.leases&&n.leases.length||(n.leases=[]),n.leases.push(d.waves.InvokeScriptResult.Lease.decode(e,e.uint32()));break;case 9:n.leaseCancels&&n.leaseCancels.length||(n.leaseCancels=[]),n.leaseCancels.push(d.waves.InvokeScriptResult.LeaseCancel.decode(e,e.uint32()));break;case 10:n.invokes&&n.invokes.length||(n.invokes=[]),n.invokes.push(d.waves.InvokeScriptResult.Invocation.decode(e,e.uint32()));break;default:e.skipType(7&i)}}return n},e.Payment=function(){function e(e){if(e)for(var t=Object.keys(e),r=0;r<t.length;++r)null!=e[t[r]]&&(this[t[r]]=e[t[r]])}return e.prototype.address=p.newBuffer([]),e.prototype.amount=null,e.encode=function(e,t){return t||(t=f.create()),null!=e.address&&e.hasOwnProperty("address")&&t.uint32(10).bytes(e.address),null!=e.amount&&e.hasOwnProperty("amount")&&d.waves.Amount.encode(e.amount,t.uint32(18).fork()).ldelim(),t},e.decode=function(e,t){e instanceof l||(e=l.create(e));for(var r=void 0===t?e.len:e.pos+t,n=new d.waves.InvokeScriptResult.Payment;e.pos<r;){var i=e.uint32();switch(i>>>3){case 1:n.address=e.bytes();break;case 2:n.amount=d.waves.Amount.decode(e,e.uint32());break;default:e.skipType(7&i)}}return n},e}(),e.Issue=function(){function e(e){if(e)for(var t=Object.keys(e),r=0;r<t.length;++r)null!=e[t[r]]&&(this[t[r]]=e[t[r]])}return e.prototype.assetId=p.newBuffer([]),e.prototype.name="",e.prototype.description="",e.prototype.amount=p.Long?p.Long.fromBits(0,0,!1):0,e.prototype.decimals=0,e.prototype.reissuable=!1,e.prototype.script=p.newBuffer([]),e.prototype.nonce=p.Long?p.Long.fromBits(0,0,!1):0,e.encode=function(e,t){return t||(t=f.create()),null!=e.assetId&&e.hasOwnProperty("assetId")&&t.uint32(10).bytes(e.assetId),null!=e.name&&e.hasOwnProperty("name")&&t.uint32(18).string(e.name),null!=e.description&&e.hasOwnProperty("description")&&t.uint32(26).string(e.description),null!=e.amount&&e.hasOwnProperty("amount")&&t.uint32(32).int64(e.amount),null!=e.decimals&&e.hasOwnProperty("decimals")&&t.uint32(40).int32(e.decimals),null!=e.reissuable&&e.hasOwnProperty("reissuable")&&t.uint32(48).bool(e.reissuable),null!=e.script&&e.hasOwnProperty("script")&&t.uint32(58).bytes(e.script),null!=e.nonce&&e.hasOwnProperty("nonce")&&t.uint32(64).int64(e.nonce),t},e.decode=function(e,t){e instanceof l||(e=l.create(e));for(var r=void 0===t?e.len:e.pos+t,n=new d.waves.InvokeScriptResult.Issue;e.pos<r;){var i=e.uint32();switch(i>>>3){case 1:n.assetId=e.bytes();break;case 2:n.name=e.string();break;case 3:n.description=e.string();break;case 4:n.amount=e.int64();break;case 5:n.decimals=e.int32();break;case 6:n.reissuable=e.bool();break;case 7:n.script=e.bytes();break;case 8:n.nonce=e.int64();break;default:e.skipType(7&i)}}return n},e}(),e.Reissue=function(){function e(e){if(e)for(var t=Object.keys(e),r=0;r<t.length;++r)null!=e[t[r]]&&(this[t[r]]=e[t[r]])}return e.prototype.assetId=p.newBuffer([]),e.prototype.amount=p.Long?p.Long.fromBits(0,0,!1):0,e.prototype.isReissuable=!1,e.encode=function(e,t){return t||(t=f.create()),null!=e.assetId&&e.hasOwnProperty("assetId")&&t.uint32(10).bytes(e.assetId),null!=e.amount&&e.hasOwnProperty("amount")&&t.uint32(16).int64(e.amount),null!=e.isReissuable&&e.hasOwnProperty("isReissuable")&&t.uint32(24).bool(e.isReissuable),t},e.decode=function(e,t){e instanceof l||(e=l.create(e));for(var r=void 0===t?e.len:e.pos+t,n=new d.waves.InvokeScriptResult.Reissue;e.pos<r;){var i=e.uint32();switch(i>>>3){case 1:n.assetId=e.bytes();break;case 2:n.amount=e.int64();break;case 3:n.isReissuable=e.bool();break;default:e.skipType(7&i)}}return n},e}(),e.Burn=function(){function e(e){if(e)for(var t=Object.keys(e),r=0;r<t.length;++r)null!=e[t[r]]&&(this[t[r]]=e[t[r]])}return e.prototype.assetId=p.newBuffer([]),e.prototype.amount=p.Long?p.Long.fromBits(0,0,!1):0,e.encode=function(e,t){return t||(t=f.create()),null!=e.assetId&&e.hasOwnProperty("assetId")&&t.uint32(10).bytes(e.assetId),null!=e.amount&&e.hasOwnProperty("amount")&&t.uint32(16).int64(e.amount),t},e.decode=function(e,t){e instanceof l||(e=l.create(e));for(var r=void 0===t?e.len:e.pos+t,n=new d.waves.InvokeScriptResult.Burn;e.pos<r;){var i=e.uint32();switch(i>>>3){case 1:n.assetId=e.bytes();break;case 2:n.amount=e.int64();break;default:e.skipType(7&i)}}return n},e}(),e.SponsorFee=function(){function e(e){if(e)for(var t=Object.keys(e),r=0;r<t.length;++r)null!=e[t[r]]&&(this[t[r]]=e[t[r]])}return e.prototype.minFee=null,e.encode=function(e,t){return t||(t=f.create()),null!=e.minFee&&e.hasOwnProperty("minFee")&&d.waves.Amount.encode(e.minFee,t.uint32(10).fork()).ldelim(),t},e.decode=function(e,t){e instanceof l||(e=l.create(e));for(var r=void 0===t?e.len:e.pos+t,n=new d.waves.InvokeScriptResult.SponsorFee;e.pos<r;){var i=e.uint32();switch(i>>>3){case 1:n.minFee=d.waves.Amount.decode(e,e.uint32());break;default:e.skipType(7&i)}}return n},e}(),e.Lease=function(){function e(e){if(e)for(var t=Object.keys(e),r=0;r<t.length;++r)null!=e[t[r]]&&(this[t[r]]=e[t[r]])}return e.prototype.recipient=null,e.prototype.amount=p.Long?p.Long.fromBits(0,0,!1):0,e.prototype.nonce=p.Long?p.Long.fromBits(0,0,!1):0,e.prototype.leaseId=p.newBuffer([]),e.encode=function(e,t){return t||(t=f.create()),null!=e.recipient&&e.hasOwnProperty("recipient")&&d.waves.Recipient.encode(e.recipient,t.uint32(10).fork()).ldelim(),null!=e.amount&&e.hasOwnProperty("amount")&&t.uint32(16).int64(e.amount),null!=e.nonce&&e.hasOwnProperty("nonce")&&t.uint32(24).int64(e.nonce),null!=e.leaseId&&e.hasOwnProperty("leaseId")&&t.uint32(34).bytes(e.leaseId),t},e.decode=function(e,t){e instanceof l||(e=l.create(e));for(var r=void 0===t?e.len:e.pos+t,n=new d.waves.InvokeScriptResult.Lease;e.pos<r;){var i=e.uint32();switch(i>>>3){case 1:n.recipient=d.waves.Recipient.decode(e,e.uint32());break;case 2:n.amount=e.int64();break;case 3:n.nonce=e.int64();break;case 4:n.leaseId=e.bytes();break;default:e.skipType(7&i)}}return n},e}(),e.LeaseCancel=function(){function e(e){if(e)for(var t=Object.keys(e),r=0;r<t.length;++r)null!=e[t[r]]&&(this[t[r]]=e[t[r]])}return e.prototype.leaseId=p.newBuffer([]),e.encode=function(e,t){return t||(t=f.create()),null!=e.leaseId&&e.hasOwnProperty("leaseId")&&t.uint32(10).bytes(e.leaseId),t},e.decode=function(e,t){e instanceof l||(e=l.create(e));for(var r=void 0===t?e.len:e.pos+t,n=new d.waves.InvokeScriptResult.LeaseCancel;e.pos<r;){var i=e.uint32();switch(i>>>3){case 1:n.leaseId=e.bytes();break;default:e.skipType(7&i)}}return n},e}(),e.ErrorMessage=function(){function e(e){if(e)for(var t=Object.keys(e),r=0;r<t.length;++r)null!=e[t[r]]&&(this[t[r]]=e[t[r]])}return e.prototype.code=0,e.prototype.text="",e.encode=function(e,t){return t||(t=f.create()),null!=e.code&&e.hasOwnProperty("code")&&t.uint32(8).int32(e.code),null!=e.text&&e.hasOwnProperty("text")&&t.uint32(18).string(e.text),t},e.decode=function(e,t){e instanceof l||(e=l.create(e));for(var r=void 0===t?e.len:e.pos+t,n=new d.waves.InvokeScriptResult.ErrorMessage;e.pos<r;){var i=e.uint32();switch(i>>>3){case 1:n.code=e.int32();break;case 2:n.text=e.string();break;default:e.skipType(7&i)}}return n},e}(),e.Call=function(){function e(e){if(this.args=[],e)for(var t=Object.keys(e),r=0;r<t.length;++r)null!=e[t[r]]&&(this[t[r]]=e[t[r]])}return e.prototype.function="",e.prototype.args=p.emptyArray,e.encode=function(e,t){if(t||(t=f.create()),null!=e.function&&e.hasOwnProperty("function")&&t.uint32(10).string(e.function),null!=e.args&&e.args.length)for(var r=0;r<e.args.length;++r)t.uint32(18).bytes(e.args[r]);return t},e.decode=function(e,t){e instanceof l||(e=l.create(e));for(var r=void 0===t?e.len:e.pos+t,n=new d.waves.InvokeScriptResult.Call;e.pos<r;){var i=e.uint32();switch(i>>>3){case 1:n.function=e.string();break;case 2:n.args&&n.args.length||(n.args=[]),n.args.push(e.bytes());break;default:e.skipType(7&i)}}return n},e}(),e.Invocation=function(){function e(e){if(this.payments=[],e)for(var t=Object.keys(e),r=0;r<t.length;++r)null!=e[t[r]]&&(this[t[r]]=e[t[r]])}return e.prototype.dApp=p.newBuffer([]),e.prototype.call=null,e.prototype.payments=p.emptyArray,e.prototype.stateChanges=null,e.encode=function(e,t){if(t||(t=f.create()),null!=e.dApp&&e.hasOwnProperty("dApp")&&t.uint32(10).bytes(e.dApp),null!=e.call&&e.hasOwnProperty("call")&&d.waves.InvokeScriptResult.Call.encode(e.call,t.uint32(18).fork()).ldelim(),null!=e.payments&&e.payments.length)for(var r=0;r<e.payments.length;++r)d.waves.Amount.encode(e.payments[r],t.uint32(26).fork()).ldelim();return null!=e.stateChanges&&e.hasOwnProperty("stateChanges")&&d.waves.InvokeScriptResult.encode(e.stateChanges,t.uint32(34).fork()).ldelim(),t},e.decode=function(e,t){e instanceof l||(e=l.create(e));for(var r=void 0===t?e.len:e.pos+t,n=new d.waves.InvokeScriptResult.Invocation;e.pos<r;){var i=e.uint32();switch(i>>>3){case 1:n.dApp=e.bytes();break;case 2:n.call=d.waves.InvokeScriptResult.Call.decode(e,e.uint32());break;case 3:n.payments&&n.payments.length||(n.payments=[]),n.payments.push(d.waves.Amount.decode(e,e.uint32()));break;case 4:n.stateChanges=d.waves.InvokeScriptResult.decode(e,e.uint32());break;default:e.skipType(7&i)}}return n},e}(),e}(),s.node=((a={}).grpc=function(){var e,t,r={};return r.AccountsApi=function(){function e(e,t,r){c.rpc.Service.call(this,e,t,r)}return(e.prototype=Object.create(c.rpc.Service.prototype)).constructor=e,Object.defineProperty(e.prototype.getBalances=function e(t,r){return this.rpcCall(e,d.waves.node.grpc.BalancesRequest,d.waves.node.grpc.BalanceResponse,t,r)},"name",{value:"GetBalances"}),Object.defineProperty(e.prototype.getScript=function e(t,r){return this.rpcCall(e,d.waves.node.grpc.AccountRequest,d.waves.node.grpc.ScriptData,t,r)},"name",{value:"GetScript"}),Object.defineProperty(e.prototype.getActiveLeases=function e(t,r){return this.rpcCall(e,d.waves.node.grpc.AccountRequest,d.waves.node.grpc.LeaseResponse,t,r)},"name",{value:"GetActiveLeases"}),Object.defineProperty(e.prototype.getDataEntries=function e(t,r){return this.rpcCall(e,d.waves.node.grpc.DataRequest,d.waves.node.grpc.DataEntryResponse,t,r)},"name",{value:"GetDataEntries"}),Object.defineProperty(e.prototype.resolveAlias=function e(t,r){return this.rpcCall(e,d.google.protobuf.StringValue,d.google.protobuf.BytesValue,t,r)},"name",{value:"ResolveAlias"}),e}(),r.AccountRequest=function(){function e(e){if(e)for(var t=Object.keys(e),r=0;r<t.length;++r)null!=e[t[r]]&&(this[t[r]]=e[t[r]])}return e.prototype.address=p.newBuffer([]),e.encode=function(e,t){return t||(t=f.create()),null!=e.address&&e.hasOwnProperty("address")&&t.uint32(10).bytes(e.address),t},e.decode=function(e,t){e instanceof l||(e=l.create(e));for(var r=void 0===t?e.len:e.pos+t,n=new d.waves.node.grpc.AccountRequest;e.pos<r;){var i=e.uint32();switch(i>>>3){case 1:n.address=e.bytes();break;default:e.skipType(7&i)}}return n},e}(),r.DataRequest=function(){function e(e){if(e)for(var t=Object.keys(e),r=0;r<t.length;++r)null!=e[t[r]]&&(this[t[r]]=e[t[r]])}return e.prototype.address=p.newBuffer([]),e.prototype.key="",e.encode=function(e,t){return t||(t=f.create()),null!=e.address&&e.hasOwnProperty("address")&&t.uint32(10).bytes(e.address),null!=e.key&&e.hasOwnProperty("key")&&t.uint32(18).string(e.key),t},e.decode=function(e,t){e instanceof l||(e=l.create(e));for(var r=void 0===t?e.len:e.pos+t,n=new d.waves.node.grpc.DataRequest;e.pos<r;){var i=e.uint32();switch(i>>>3){case 1:n.address=e.bytes();break;case 2:n.key=e.string();break;default:e.skipType(7&i)}}return n},e}(),r.BalancesRequest=function(){function e(e){if(this.assets=[],e)for(var t=Object.keys(e),r=0;r<t.length;++r)null!=e[t[r]]&&(this[t[r]]=e[t[r]])}return e.prototype.address=p.newBuffer([]),e.prototype.assets=p.emptyArray,e.encode=function(e,t){if(t||(t=f.create()),null!=e.address&&e.hasOwnProperty("address")&&t.uint32(10).bytes(e.address),null!=e.assets&&e.assets.length)for(var r=0;r<e.assets.length;++r)t.uint32(34).bytes(e.assets[r]);return t},e.decode=function(e,t){e instanceof l||(e=l.create(e));for(var r=void 0===t?e.len:e.pos+t,n=new d.waves.node.grpc.BalancesRequest;e.pos<r;){var i=e.uint32();switch(i>>>3){case 1:n.address=e.bytes();break;case 4:n.assets&&n.assets.length||(n.assets=[]),n.assets.push(e.bytes());break;default:e.skipType(7&i)}}return n},e}(),r.BalanceResponse=function(){function e(e){if(e)for(var t=Object.keys(e),r=0;r<t.length;++r)null!=e[t[r]]&&(this[t[r]]=e[t[r]])}var t;return e.prototype.waves=null,e.prototype.asset=null,Object.defineProperty(e.prototype,"balance",{get:p.oneOfGetter(t=["waves","asset"]),set:p.oneOfSetter(t)}),e.encode=function(e,t){return t||(t=f.create()),null!=e.waves&&e.hasOwnProperty("waves")&&d.waves.node.grpc.BalanceResponse.WavesBalances.encode(e.waves,t.uint32(10).fork()).ldelim(),null!=e.asset&&e.hasOwnProperty("asset")&&d.waves.Amount.encode(e.asset,t.uint32(18).fork()).ldelim(),t},e.decode=function(e,t){e instanceof l||(e=l.create(e));for(var r=void 0===t?e.len:e.pos+t,n=new d.waves.node.grpc.BalanceResponse;e.pos<r;){var i=e.uint32();switch(i>>>3){case 1:n.waves=d.waves.node.grpc.BalanceResponse.WavesBalances.decode(e,e.uint32());break;case 2:n.asset=d.waves.Amount.decode(e,e.uint32());break;default:e.skipType(7&i)}}return n},e.WavesBalances=function(){function e(e){if(e)for(var t=Object.keys(e),r=0;r<t.length;++r)null!=e[t[r]]&&(this[t[r]]=e[t[r]])}return e.prototype.regular=p.Long?p.Long.fromBits(0,0,!1):0,e.prototype.generating=p.Long?p.Long.fromBits(0,0,!1):0,e.prototype.available=p.Long?p.Long.fromBits(0,0,!1):0,e.prototype.effective=p.Long?p.Long.fromBits(0,0,!1):0,e.prototype.leaseIn=p.Long?p.Long.fromBits(0,0,!1):0,e.prototype.leaseOut=p.Long?p.Long.fromBits(0,0,!1):0,e.encode=function(e,t){return t||(t=f.create()),null!=e.regular&&e.hasOwnProperty("regular")&&t.uint32(8).int64(e.regular),null!=e.generating&&e.hasOwnProperty("generating")&&t.uint32(16).int64(e.generating),null!=e.available&&e.hasOwnProperty("available")&&t.uint32(24).int64(e.available),null!=e.effective&&e.hasOwnProperty("effective")&&t.uint32(32).int64(e.effective),null!=e.leaseIn&&e.hasOwnProperty("leaseIn")&&t.uint32(40).int64(e.leaseIn),null!=e.leaseOut&&e.hasOwnProperty("leaseOut")&&t.uint32(48).int64(e.leaseOut),t},e.decode=function(e,t){e instanceof l||(e=l.create(e));for(var r=void 0===t?e.len:e.pos+t,n=new d.waves.node.grpc.BalanceResponse.WavesBalances;e.pos<r;){var i=e.uint32();switch(i>>>3){case 1:n.regular=e.int64();break;case 2:n.generating=e.int64();break;case 3:n.available=e.int64();break;case 4:n.effective=e.int64();break;case 5:n.leaseIn=e.int64();break;case 6:n.leaseOut=e.int64();break;default:e.skipType(7&i)}}return n},e}(),e}(),r.DataEntryResponse=function(){function e(e){if(e)for(var t=Object.keys(e),r=0;r<t.length;++r)null!=e[t[r]]&&(this[t[r]]=e[t[r]])}return e.prototype.address=p.newBuffer([]),e.prototype.entry=null,e.encode=function(e,t){return t||(t=f.create()),null!=e.address&&e.hasOwnProperty("address")&&t.uint32(10).bytes(e.address),null!=e.entry&&e.hasOwnProperty("entry")&&d.waves.DataTransactionData.DataEntry.encode(e.entry,t.uint32(18).fork()).ldelim(),t},e.decode=function(e,t){e instanceof l||(e=l.create(e));for(var r=void 0===t?e.len:e.pos+t,n=new d.waves.node.grpc.DataEntryResponse;e.pos<r;){var i=e.uint32();switch(i>>>3){case 1:n.address=e.bytes();break;case 2:n.entry=d.waves.DataTransactionData.DataEntry.decode(e,e.uint32());break;default:e.skipType(7&i)}}return n},e}(),r.ScriptData=function(){function e(e){if(e)for(var t=Object.keys(e),r=0;r<t.length;++r)null!=e[t[r]]&&(this[t[r]]=e[t[r]])}return e.prototype.scriptBytes=p.newBuffer([]),e.prototype.scriptText="",e.prototype.complexity=p.Long?p.Long.fromBits(0,0,!1):0,e.encode=function(e,t){return t||(t=f.create()),null!=e.scriptBytes&&e.hasOwnProperty("scriptBytes")&&t.uint32(10).bytes(e.scriptBytes),null!=e.scriptText&&e.hasOwnProperty("scriptText")&&t.uint32(18).string(e.scriptText),null!=e.complexity&&e.hasOwnProperty("complexity")&&t.uint32(24).int64(e.complexity),t},e.decode=function(e,t){e instanceof l||(e=l.create(e));for(var r=void 0===t?e.len:e.pos+t,n=new d.waves.node.grpc.ScriptData;e.pos<r;){var i=e.uint32();switch(i>>>3){case 1:n.scriptBytes=e.bytes();break;case 2:n.scriptText=e.string();break;case 3:n.complexity=e.int64();break;default:e.skipType(7&i)}}return n},e}(),r.LeaseResponse=function(){function e(e){if(e)for(var t=Object.keys(e),r=0;r<t.length;++r)null!=e[t[r]]&&(this[t[r]]=e[t[r]])}return e.prototype.leaseId=p.newBuffer([]),e.prototype.originTransactionId=p.newBuffer([]),e.prototype.sender=p.newBuffer([]),e.prototype.recipient=null,e.prototype.amount=p.Long?p.Long.fromBits(0,0,!1):0,e.prototype.height=p.Long?p.Long.fromBits(0,0,!1):0,e.encode=function(e,t){return t||(t=f.create()),null!=e.leaseId&&e.hasOwnProperty("leaseId")&&t.uint32(10).bytes(e.leaseId),null!=e.originTransactionId&&e.hasOwnProperty("originTransactionId")&&t.uint32(18).bytes(e.originTransactionId),null!=e.sender&&e.hasOwnProperty("sender")&&t.uint32(26).bytes(e.sender),null!=e.recipient&&e.hasOwnProperty("recipient")&&d.waves.Recipient.encode(e.recipient,t.uint32(34).fork()).ldelim(),null!=e.amount&&e.hasOwnProperty("amount")&&t.uint32(40).int64(e.amount),null!=e.height&&e.hasOwnProperty("height")&&t.uint32(48).int64(e.height),t},e.decode=function(e,t){e instanceof l||(e=l.create(e));for(var r=void 0===t?e.len:e.pos+t,n=new d.waves.node.grpc.LeaseResponse;e.pos<r;){var i=e.uint32();switch(i>>>3){case 1:n.leaseId=e.bytes();break;case 2:n.originTransactionId=e.bytes();break;case 3:n.sender=e.bytes();break;case 4:n.recipient=d.waves.Recipient.decode(e,e.uint32());break;case 5:n.amount=e.int64();break;case 6:n.height=e.int64();break;default:e.skipType(7&i)}}return n},e}(),r.AssetsApi=function(){function e(e,t,r){c.rpc.Service.call(this,e,t,r)}return(e.prototype=Object.create(c.rpc.Service.prototype)).constructor=e,Object.defineProperty(e.prototype.getInfo=function e(t,r){return this.rpcCall(e,d.waves.node.grpc.AssetRequest,d.waves.node.grpc.AssetInfoResponse,t,r)},"name",{value:"GetInfo"}),Object.defineProperty(e.prototype.getNFTList=function e(t,r){return this.rpcCall(e,d.waves.node.grpc.NFTRequest,d.waves.node.grpc.NFTResponse,t,r)},"name",{value:"GetNFTList"}),e}(),r.AssetRequest=function(){function e(e){if(e)for(var t=Object.keys(e),r=0;r<t.length;++r)null!=e[t[r]]&&(this[t[r]]=e[t[r]])}return e.prototype.assetId=p.newBuffer([]),e.encode=function(e,t){return t||(t=f.create()),null!=e.assetId&&e.hasOwnProperty("assetId")&&t.uint32(10).bytes(e.assetId),t},e.decode=function(e,t){e instanceof l||(e=l.create(e));for(var r=void 0===t?e.len:e.pos+t,n=new d.waves.node.grpc.AssetRequest;e.pos<r;){var i=e.uint32();switch(i>>>3){case 1:n.assetId=e.bytes();break;default:e.skipType(7&i)}}return n},e}(),r.NFTRequest=function(){function e(e){if(e)for(var t=Object.keys(e),r=0;r<t.length;++r)null!=e[t[r]]&&(this[t[r]]=e[t[r]])}return e.prototype.address=p.newBuffer([]),e.prototype.limit=0,e.prototype.afterAssetId=p.newBuffer([]),e.encode=function(e,t){return t||(t=f.create()),null!=e.address&&e.hasOwnProperty("address")&&t.uint32(10).bytes(e.address),null!=e.limit&&e.hasOwnProperty("limit")&&t.uint32(16).int32(e.limit),null!=e.afterAssetId&&e.hasOwnProperty("afterAssetId")&&t.uint32(26).bytes(e.afterAssetId),t},e.decode=function(e,t){e instanceof l||(e=l.create(e));for(var r=void 0===t?e.len:e.pos+t,n=new d.waves.node.grpc.NFTRequest;e.pos<r;){var i=e.uint32();switch(i>>>3){case 1:n.address=e.bytes();break;case 2:n.limit=e.int32();break;case 3:n.afterAssetId=e.bytes();break;default:e.skipType(7&i)}}return n},e}(),r.NFTResponse=function(){function e(e){if(e)for(var t=Object.keys(e),r=0;r<t.length;++r)null!=e[t[r]]&&(this[t[r]]=e[t[r]])}return e.prototype.assetId=p.newBuffer([]),e.prototype.assetInfo=null,e.encode=function(e,t){return t||(t=f.create()),null!=e.assetId&&e.hasOwnProperty("assetId")&&t.uint32(10).bytes(e.assetId),null!=e.assetInfo&&e.hasOwnProperty("assetInfo")&&d.waves.node.grpc.AssetInfoResponse.encode(e.assetInfo,t.uint32(18).fork()).ldelim(),t},e.decode=function(e,t){e instanceof l||(e=l.create(e));for(var r=void 0===t?e.len:e.pos+t,n=new d.waves.node.grpc.NFTResponse;e.pos<r;){var i=e.uint32();switch(i>>>3){case 1:n.assetId=e.bytes();break;case 2:n.assetInfo=d.waves.node.grpc.AssetInfoResponse.decode(e,e.uint32());break;default:e.skipType(7&i)}}return n},e}(),r.AssetInfoResponse=function(){function e(e){if(e)for(var t=Object.keys(e),r=0;r<t.length;++r)null!=e[t[r]]&&(this[t[r]]=e[t[r]])}return e.prototype.issuer=p.newBuffer([]),e.prototype.name="",e.prototype.description="",e.prototype.decimals=0,e.prototype.reissuable=!1,e.prototype.totalVolume=p.Long?p.Long.fromBits(0,0,!1):0,e.prototype.script=null,e.prototype.sponsorship=p.Long?p.Long.fromBits(0,0,!1):0,e.prototype.issueTransaction=null,e.prototype.sponsorBalance=p.Long?p.Long.fromBits(0,0,!1):0,e.encode=function(e,t){return t||(t=f.create()),null!=e.issuer&&e.hasOwnProperty("issuer")&&t.uint32(10).bytes(e.issuer),null!=e.name&&e.hasOwnProperty("name")&&t.uint32(18).string(e.name),null!=e.description&&e.hasOwnProperty("description")&&t.uint32(26).string(e.description),null!=e.decimals&&e.hasOwnProperty("decimals")&&t.uint32(32).int32(e.decimals),null!=e.reissuable&&e.hasOwnProperty("reissuable")&&t.uint32(40).bool(e.reissuable),null!=e.totalVolume&&e.hasOwnProperty("totalVolume")&&t.uint32(48).int64(e.totalVolume),null!=e.script&&e.hasOwnProperty("script")&&d.waves.node.grpc.ScriptData.encode(e.script,t.uint32(58).fork()).ldelim(),null!=e.sponsorship&&e.hasOwnProperty("sponsorship")&&t.uint32(64).int64(e.sponsorship),null!=e.sponsorBalance&&e.hasOwnProperty("sponsorBalance")&&t.uint32(80).int64(e.sponsorBalance),null!=e.issueTransaction&&e.hasOwnProperty("issueTransaction")&&d.waves.SignedTransaction.encode(e.issueTransaction,t.uint32(90).fork()).ldelim(),t},e.decode=function(e,t){e instanceof l||(e=l.create(e));for(var r=void 0===t?e.len:e.pos+t,n=new d.waves.node.grpc.AssetInfoResponse;e.pos<r;){var i=e.uint32();switch(i>>>3){case 1:n.issuer=e.bytes();break;case 2:n.name=e.string();break;case 3:n.description=e.string();break;case 4:n.decimals=e.int32();break;case 5:n.reissuable=e.bool();break;case 6:n.totalVolume=e.int64();break;case 7:n.script=d.waves.node.grpc.ScriptData.decode(e,e.uint32());break;case 8:n.sponsorship=e.int64();break;case 11:n.issueTransaction=d.waves.SignedTransaction.decode(e,e.uint32());break;case 10:n.sponsorBalance=e.int64();break;default:e.skipType(7&i)}}return n},e}(),r.BlockchainApi=function(){function e(e,t,r){c.rpc.Service.call(this,e,t,r)}return(e.prototype=Object.create(c.rpc.Service.prototype)).constructor=e,Object.defineProperty(e.prototype.getActivationStatus=function e(t,r){return this.rpcCall(e,d.waves.node.grpc.ActivationStatusRequest,d.waves.node.grpc.ActivationStatusResponse,t,r)},"name",{value:"GetActivationStatus"}),Object.defineProperty(e.prototype.getBaseTarget=function e(t,r){return this.rpcCall(e,d.google.protobuf.Empty,d.waves.node.grpc.BaseTargetResponse,t,r)},"name",{value:"GetBaseTarget"}),Object.defineProperty(e.prototype.getCumulativeScore=function e(t,r){return this.rpcCall(e,d.google.protobuf.Empty,d.waves.node.grpc.ScoreResponse,t,r)},"name",{value:"GetCumulativeScore"}),e}(),r.ActivationStatusRequest=function(){function e(e){if(e)for(var t=Object.keys(e),r=0;r<t.length;++r)null!=e[t[r]]&&(this[t[r]]=e[t[r]])}return e.prototype.height=0,e.encode=function(e,t){return t||(t=f.create()),null!=e.height&&e.hasOwnProperty("height")&&t.uint32(8).int32(e.height),t},e.decode=function(e,t){e instanceof l||(e=l.create(e));for(var r=void 0===t?e.len:e.pos+t,n=new d.waves.node.grpc.ActivationStatusRequest;e.pos<r;){var i=e.uint32();switch(i>>>3){case 1:n.height=e.int32();break;default:e.skipType(7&i)}}return n},e}(),r.ActivationStatusResponse=function(){function e(e){if(this.features=[],e)for(var t=Object.keys(e),r=0;r<t.length;++r)null!=e[t[r]]&&(this[t[r]]=e[t[r]])}return e.prototype.height=0,e.prototype.votingInterval=0,e.prototype.votingThreshold=0,e.prototype.nextCheck=0,e.prototype.features=p.emptyArray,e.encode=function(e,t){if(t||(t=f.create()),null!=e.height&&e.hasOwnProperty("height")&&t.uint32(8).int32(e.height),null!=e.votingInterval&&e.hasOwnProperty("votingInterval")&&t.uint32(16).int32(e.votingInterval),null!=e.votingThreshold&&e.hasOwnProperty("votingThreshold")&&t.uint32(24).int32(e.votingThreshold),null!=e.nextCheck&&e.hasOwnProperty("nextCheck")&&t.uint32(32).int32(e.nextCheck),null!=e.features&&e.features.length)for(var r=0;r<e.features.length;++r)d.waves.node.grpc.FeatureActivationStatus.encode(e.features[r],t.uint32(42).fork()).ldelim();return t},e.decode=function(e,t){e instanceof l||(e=l.create(e));for(var r=void 0===t?e.len:e.pos+t,n=new d.waves.node.grpc.ActivationStatusResponse;e.pos<r;){var i=e.uint32();switch(i>>>3){case 1:n.height=e.int32();break;case 2:n.votingInterval=e.int32();break;case 3:n.votingThreshold=e.int32();break;case 4:n.nextCheck=e.int32();break;case 5:n.features&&n.features.length||(n.features=[]),n.features.push(d.waves.node.grpc.FeatureActivationStatus.decode(e,e.uint32()));break;default:e.skipType(7&i)}}return n},e}(),r.FeatureActivationStatus=function(){function e(e){if(e)for(var t=Object.keys(e),r=0;r<t.length;++r)null!=e[t[r]]&&(this[t[r]]=e[t[r]])}var t,r;return e.prototype.id=0,e.prototype.description="",e.prototype.blockchainStatus=0,e.prototype.nodeStatus=0,e.prototype.activationHeight=0,e.prototype.supportingBlocks=0,e.encode=function(e,t){return t||(t=f.create()),null!=e.id&&e.hasOwnProperty("id")&&t.uint32(8).int32(e.id),null!=e.description&&e.hasOwnProperty("description")&&t.uint32(18).string(e.description),null!=e.blockchainStatus&&e.hasOwnProperty("blockchainStatus")&&t.uint32(24).int32(e.blockchainStatus),null!=e.nodeStatus&&e.hasOwnProperty("nodeStatus")&&t.uint32(32).int32(e.nodeStatus),null!=e.activationHeight&&e.hasOwnProperty("activationHeight")&&t.uint32(40).int32(e.activationHeight),null!=e.supportingBlocks&&e.hasOwnProperty("supportingBlocks")&&t.uint32(48).int32(e.supportingBlocks),t},e.decode=function(e,t){e instanceof l||(e=l.create(e));for(var r=void 0===t?e.len:e.pos+t,n=new d.waves.node.grpc.FeatureActivationStatus;e.pos<r;){var i=e.uint32();switch(i>>>3){case 1:n.id=e.int32();break;case 2:n.description=e.string();break;case 3:n.blockchainStatus=e.int32();break;case 4:n.nodeStatus=e.int32();break;case 5:n.activationHeight=e.int32();break;case 6:n.supportingBlocks=e.int32();break;default:e.skipType(7&i)}}return n},e.BlockchainFeatureStatus=(t={},(r=Object.create(t))[t[0]="UNDEFINED"]=0,r[t[1]="APPROVED"]=1,r[t[2]="ACTIVATED"]=2,r),e.NodeFeatureStatus=function(){var e={},t=Object.create(e);return t[e[0]="NOT_IMPLEMENTED"]=0,t[e[1]="IMPLEMENTED"]=1,t[e[2]="VOTED"]=2,t}(),e}(),r.BaseTargetResponse=function(){function e(e){if(e)for(var t=Object.keys(e),r=0;r<t.length;++r)null!=e[t[r]]&&(this[t[r]]=e[t[r]])}return e.prototype.baseTarget=p.Long?p.Long.fromBits(0,0,!1):0,e.encode=function(e,t){return t||(t=f.create()),null!=e.baseTarget&&e.hasOwnProperty("baseTarget")&&t.uint32(8).int64(e.baseTarget),t},e.decode=function(e,t){e instanceof l||(e=l.create(e));for(var r=void 0===t?e.len:e.pos+t,n=new d.waves.node.grpc.BaseTargetResponse;e.pos<r;){var i=e.uint32();switch(i>>>3){case 1:n.baseTarget=e.int64();break;default:e.skipType(7&i)}}return n},e}(),r.ScoreResponse=function(){function e(e){if(e)for(var t=Object.keys(e),r=0;r<t.length;++r)null!=e[t[r]]&&(this[t[r]]=e[t[r]])}return e.prototype.score=p.newBuffer([]),e.encode=function(e,t){return t||(t=f.create()),null!=e.score&&e.hasOwnProperty("score")&&t.uint32(10).bytes(e.score),t},e.decode=function(e,t){e instanceof l||(e=l.create(e));for(var r=void 0===t?e.len:e.pos+t,n=new d.waves.node.grpc.ScoreResponse;e.pos<r;){var i=e.uint32();switch(i>>>3){case 1:n.score=e.bytes();break;default:e.skipType(7&i)}}return n},e}(),r.BlocksApi=function(){function e(e,t,r){c.rpc.Service.call(this,e,t,r)}return(e.prototype=Object.create(c.rpc.Service.prototype)).constructor=e,Object.defineProperty(e.prototype.getBlock=function e(t,r){return this.rpcCall(e,d.waves.node.grpc.BlockRequest,d.waves.node.grpc.BlockWithHeight,t,r)},"name",{value:"GetBlock"}),Object.defineProperty(e.prototype.getBlockRange=function e(t,r){return this.rpcCall(e,d.waves.node.grpc.BlockRangeRequest,d.waves.node.grpc.BlockWithHeight,t,r)},"name",{value:"GetBlockRange"}),Object.defineProperty(e.prototype.getCurrentHeight=function e(t,r){return this.rpcCall(e,d.google.protobuf.Empty,d.google.protobuf.UInt32Value,t,r)},"name",{value:"GetCurrentHeight"}),e}(),r.BlockRequest=function(){function e(e){if(e)for(var t=Object.keys(e),r=0;r<t.length;++r)null!=e[t[r]]&&(this[t[r]]=e[t[r]])}var t;return e.prototype.blockId=p.newBuffer([]),e.prototype.height=0,e.prototype.includeTransactions=!1,Object.defineProperty(e.prototype,"request",{get:p.oneOfGetter(t=["blockId","height"]),set:p.oneOfSetter(t)}),e.encode=function(e,t){return t||(t=f.create()),null!=e.blockId&&e.hasOwnProperty("blockId")&&t.uint32(10).bytes(e.blockId),null!=e.height&&e.hasOwnProperty("height")&&t.uint32(16).int32(e.height),null!=e.includeTransactions&&e.hasOwnProperty("includeTransactions")&&t.uint32(800).bool(e.includeTransactions),t},e.decode=function(e,t){e instanceof l||(e=l.create(e));for(var r=void 0===t?e.len:e.pos+t,n=new d.waves.node.grpc.BlockRequest;e.pos<r;){var i=e.uint32();switch(i>>>3){case 1:n.blockId=e.bytes();break;case 2:n.height=e.int32();break;case 100:n.includeTransactions=e.bool();break;default:e.skipType(7&i)}}return n},e}(),r.BlockRangeRequest=function(){function e(e){if(e)for(var t=Object.keys(e),r=0;r<t.length;++r)null!=e[t[r]]&&(this[t[r]]=e[t[r]])}var t;return e.prototype.fromHeight=0,e.prototype.toHeight=0,e.prototype.generatorPublicKey=p.newBuffer([]),e.prototype.generatorAddress=p.newBuffer([]),e.prototype.includeTransactions=!1,Object.defineProperty(e.prototype,"filter",{get:p.oneOfGetter(t=["generatorPublicKey","generatorAddress"]),set:p.oneOfSetter(t)}),e.encode=function(e,t){return t||(t=f.create()),null!=e.fromHeight&&e.hasOwnProperty("fromHeight")&&t.uint32(8).uint32(e.fromHeight),null!=e.toHeight&&e.hasOwnProperty("toHeight")&&t.uint32(16).uint32(e.toHeight),null!=e.generatorPublicKey&&e.hasOwnProperty("generatorPublicKey")&&t.uint32(26).bytes(e.generatorPublicKey),null!=e.generatorAddress&&e.hasOwnProperty("generatorAddress")&&t.uint32(34).bytes(e.generatorAddress),null!=e.includeTransactions&&e.hasOwnProperty("includeTransactions")&&t.uint32(800).bool(e.includeTransactions),t},e.decode=function(e,t){e instanceof l||(e=l.create(e));for(var r=void 0===t?e.len:e.pos+t,n=new d.waves.node.grpc.BlockRangeRequest;e.pos<r;){var i=e.uint32();switch(i>>>3){case 1:n.fromHeight=e.uint32();break;case 2:n.toHeight=e.uint32();break;case 3:n.generatorPublicKey=e.bytes();break;case 4:n.generatorAddress=e.bytes();break;case 100:n.includeTransactions=e.bool();break;default:e.skipType(7&i)}}return n},e}(),r.BlockWithHeight=function(){function e(e){if(e)for(var t=Object.keys(e),r=0;r<t.length;++r)null!=e[t[r]]&&(this[t[r]]=e[t[r]])}return e.prototype.block=null,e.prototype.height=0,e.encode=function(e,t){return t||(t=f.create()),null!=e.block&&e.hasOwnProperty("block")&&d.waves.Block.encode(e.block,t.uint32(10).fork()).ldelim(),null!=e.height&&e.hasOwnProperty("height")&&t.uint32(16).uint32(e.height),t},e.decode=function(e,t){e instanceof l||(e=l.create(e));for(var r=void 0===t?e.len:e.pos+t,n=new d.waves.node.grpc.BlockWithHeight;e.pos<r;){var i=e.uint32();switch(i>>>3){case 1:n.block=d.waves.Block.decode(e,e.uint32());break;case 2:n.height=e.uint32();break;default:e.skipType(7&i)}}return n},e}(),r.TransactionsApi=function(){function e(e,t,r){c.rpc.Service.call(this,e,t,r)}return(e.prototype=Object.create(c.rpc.Service.prototype)).constructor=e,Object.defineProperty(e.prototype.getTransactions=function e(t,r){return this.rpcCall(e,d.waves.node.grpc.TransactionsRequest,d.waves.node.grpc.TransactionResponse,t,r)},"name",{value:"GetTransactions"}),Object.defineProperty(e.prototype.getStateChanges=function e(t,r){return this.rpcCall(e,d.waves.node.grpc.TransactionsRequest,d.waves.node.grpc.InvokeScriptResultResponse,t,r)},"name",{value:"GetStateChanges"}),Object.defineProperty(e.prototype.getStatuses=function e(t,r){return this.rpcCall(e,d.waves.node.grpc.TransactionsByIdRequest,d.waves.node.grpc.TransactionStatus,t,r)},"name",{value:"GetStatuses"}),Object.defineProperty(e.prototype.getUnconfirmed=function e(t,r){return this.rpcCall(e,d.waves.node.grpc.TransactionsRequest,d.waves.node.grpc.TransactionResponse,t,r)},"name",{value:"GetUnconfirmed"}),Object.defineProperty(e.prototype.sign=function e(t,r){return this.rpcCall(e,d.waves.node.grpc.SignRequest,d.waves.SignedTransaction,t,r)},"name",{value:"Sign"}),Object.defineProperty(e.prototype.broadcast=function e(t,r){return this.rpcCall(e,d.waves.SignedTransaction,d.waves.SignedTransaction,t,r)},"name",{value:"Broadcast"}),e}(),r.ApplicationStatus=(e={},(t=Object.create(e))[e[0]="UNKNOWN"]=0,t[e[1]="SUCCEEDED"]=1,t[e[2]="SCRIPT_EXECUTION_FAILED"]=2,t),r.TransactionStatus=function(){function e(e){if(e)for(var t=Object.keys(e),r=0;r<t.length;++r)null!=e[t[r]]&&(this[t[r]]=e[t[r]])}return e.prototype.id=p.newBuffer([]),e.prototype.status=0,e.prototype.height=p.Long?p.Long.fromBits(0,0,!1):0,e.prototype.applicationStatus=0,e.encode=function(e,t){return t||(t=f.create()),null!=e.id&&e.hasOwnProperty("id")&&t.uint32(10).bytes(e.id),null!=e.status&&e.hasOwnProperty("status")&&t.uint32(16).int32(e.status),null!=e.height&&e.hasOwnProperty("height")&&t.uint32(24).int64(e.height),null!=e.applicationStatus&&e.hasOwnProperty("applicationStatus")&&t.uint32(32).int32(e.applicationStatus),t},e.decode=function(e,t){e instanceof l||(e=l.create(e));for(var r=void 0===t?e.len:e.pos+t,n=new d.waves.node.grpc.TransactionStatus;e.pos<r;){var i=e.uint32();switch(i>>>3){case 1:n.id=e.bytes();break;case 2:n.status=e.int32();break;case 3:n.height=e.int64();break;case 4:n.applicationStatus=e.int32();break;default:e.skipType(7&i)}}return n},e.Status=function(){var e={},t=Object.create(e);return t[e[0]="NOT_EXISTS"]=0,t[e[1]="UNCONFIRMED"]=1,t[e[2]="CONFIRMED"]=2,t}(),e}(),r.TransactionResponse=function(){function e(e){if(e)for(var t=Object.keys(e),r=0;r<t.length;++r)null!=e[t[r]]&&(this[t[r]]=e[t[r]])}return e.prototype.id=p.newBuffer([]),e.prototype.height=p.Long?p.Long.fromBits(0,0,!1):0,e.prototype.transaction=null,e.prototype.applicationStatus=0,e.prototype.invokeScriptResult=null,e.encode=function(e,t){return t||(t=f.create()),null!=e.id&&e.hasOwnProperty("id")&&t.uint32(10).bytes(e.id),null!=e.height&&e.hasOwnProperty("height")&&t.uint32(16).int64(e.height),null!=e.transaction&&e.hasOwnProperty("transaction")&&d.waves.SignedTransaction.encode(e.transaction,t.uint32(26).fork()).ldelim(),null!=e.applicationStatus&&e.hasOwnProperty("applicationStatus")&&t.uint32(32).int32(e.applicationStatus),null!=e.invokeScriptResult&&e.hasOwnProperty("invokeScriptResult")&&d.waves.InvokeScriptResult.encode(e.invokeScriptResult,t.uint32(42).fork()).ldelim(),t},e.decode=function(e,t){e instanceof l||(e=l.create(e));for(var r=void 0===t?e.len:e.pos+t,n=new d.waves.node.grpc.TransactionResponse;e.pos<r;){var i=e.uint32();switch(i>>>3){case 1:n.id=e.bytes();break;case 2:n.height=e.int64();break;case 3:n.transaction=d.waves.SignedTransaction.decode(e,e.uint32());break;case 4:n.applicationStatus=e.int32();break;case 5:n.invokeScriptResult=d.waves.InvokeScriptResult.decode(e,e.uint32());break;default:e.skipType(7&i)}}return n},e}(),r.TransactionsRequest=function(){function e(e){if(this.transactionIds=[],e)for(var t=Object.keys(e),r=0;r<t.length;++r)null!=e[t[r]]&&(this[t[r]]=e[t[r]])}return e.prototype.sender=p.newBuffer([]),e.prototype.recipient=null,e.prototype.transactionIds=p.emptyArray,e.encode=function(e,t){if(t||(t=f.create()),null!=e.sender&&e.hasOwnProperty("sender")&&t.uint32(10).bytes(e.sender),null!=e.recipient&&e.hasOwnProperty("recipient")&&d.waves.Recipient.encode(e.recipient,t.uint32(18).fork()).ldelim(),null!=e.transactionIds&&e.transactionIds.length)for(var r=0;r<e.transactionIds.length;++r)t.uint32(26).bytes(e.transactionIds[r]);return t},e.decode=function(e,t){e instanceof l||(e=l.create(e));for(var r=void 0===t?e.len:e.pos+t,n=new d.waves.node.grpc.TransactionsRequest;e.pos<r;){var i=e.uint32();switch(i>>>3){case 1:n.sender=e.bytes();break;case 2:n.recipient=d.waves.Recipient.decode(e,e.uint32());break;case 3:n.transactionIds&&n.transactionIds.length||(n.transactionIds=[]),n.transactionIds.push(e.bytes());break;default:e.skipType(7&i)}}return n},e}(),r.TransactionsByIdRequest=function(){function e(e){if(this.transactionIds=[],e)for(var t=Object.keys(e),r=0;r<t.length;++r)null!=e[t[r]]&&(this[t[r]]=e[t[r]])}return e.prototype.transactionIds=p.emptyArray,e.encode=function(e,t){if(t||(t=f.create()),null!=e.transactionIds&&e.transactionIds.length)for(var r=0;r<e.transactionIds.length;++r)t.uint32(26).bytes(e.transactionIds[r]);return t},e.decode=function(e,t){e instanceof l||(e=l.create(e));for(var r=void 0===t?e.len:e.pos+t,n=new d.waves.node.grpc.TransactionsByIdRequest;e.pos<r;){var i=e.uint32();switch(i>>>3){case 3:n.transactionIds&&n.transactionIds.length||(n.transactionIds=[]),n.transactionIds.push(e.bytes());break;default:e.skipType(7&i)}}return n},e}(),r.CalculateFeeResponse=function(){function e(e){if(e)for(var t=Object.keys(e),r=0;r<t.length;++r)null!=e[t[r]]&&(this[t[r]]=e[t[r]])}return e.prototype.assetId=p.newBuffer([]),e.prototype.amount=p.Long?p.Long.fromBits(0,0,!0):0,e.encode=function(e,t){return t||(t=f.create()),null!=e.assetId&&e.hasOwnProperty("assetId")&&t.uint32(10).bytes(e.assetId),null!=e.amount&&e.hasOwnProperty("amount")&&t.uint32(16).uint64(e.amount),t},e.decode=function(e,t){e instanceof l||(e=l.create(e));for(var r=void 0===t?e.len:e.pos+t,n=new d.waves.node.grpc.CalculateFeeResponse;e.pos<r;){var i=e.uint32();switch(i>>>3){case 1:n.assetId=e.bytes();break;case 2:n.amount=e.uint64();break;default:e.skipType(7&i)}}return n},e}(),r.SignRequest=function(){function e(e){if(e)for(var t=Object.keys(e),r=0;r<t.length;++r)null!=e[t[r]]&&(this[t[r]]=e[t[r]])}return e.prototype.transaction=null,e.prototype.signerPublicKey=p.newBuffer([]),e.encode=function(e,t){return t||(t=f.create()),null!=e.transaction&&e.hasOwnProperty("transaction")&&d.waves.Transaction.encode(e.transaction,t.uint32(10).fork()).ldelim(),null!=e.signerPublicKey&&e.hasOwnProperty("signerPublicKey")&&t.uint32(18).bytes(e.signerPublicKey),t},e.decode=function(e,t){e instanceof l||(e=l.create(e));for(var r=void 0===t?e.len:e.pos+t,n=new d.waves.node.grpc.SignRequest;e.pos<r;){var i=e.uint32();switch(i>>>3){case 1:n.transaction=d.waves.Transaction.decode(e,e.uint32());break;case 2:n.signerPublicKey=e.bytes();break;default:e.skipType(7&i)}}return n},e}(),r.InvokeScriptResultResponse=function(){function e(e){if(e)for(var t=Object.keys(e),r=0;r<t.length;++r)null!=e[t[r]]&&(this[t[r]]=e[t[r]])}return e.prototype.transaction=null,e.prototype.result=null,e.encode=function(e,t){return t||(t=f.create()),null!=e.transaction&&e.hasOwnProperty("transaction")&&d.waves.SignedTransaction.encode(e.transaction,t.uint32(10).fork()).ldelim(),null!=e.result&&e.hasOwnProperty("result")&&d.waves.InvokeScriptResult.encode(e.result,t.uint32(18).fork()).ldelim(),t},e.decode=function(e,t){e instanceof l||(e=l.create(e));for(var r=void 0===t?e.len:e.pos+t,n=new d.waves.node.grpc.InvokeScriptResultResponse;e.pos<r;){var i=e.uint32();switch(i>>>3){case 1:n.transaction=d.waves.SignedTransaction.decode(e,e.uint32());break;case 2:n.result=d.waves.InvokeScriptResult.decode(e,e.uint32());break;default:e.skipType(7&i)}}return n},e}(),r}(),a),s.AssetPair=function(){function e(e){if(e)for(var t=Object.keys(e),r=0;r<t.length;++r)null!=e[t[r]]&&(this[t[r]]=e[t[r]])}return e.prototype.amountAssetId=p.newBuffer([]),e.prototype.priceAssetId=p.newBuffer([]),e.encode=function(e,t){return t||(t=f.create()),null!=e.amountAssetId&&e.hasOwnProperty("amountAssetId")&&t.uint32(10).bytes(e.amountAssetId),null!=e.priceAssetId&&e.hasOwnProperty("priceAssetId")&&t.uint32(18).bytes(e.priceAssetId),t},e.decode=function(e,t){e instanceof l||(e=l.create(e));for(var r=void 0===t?e.len:e.pos+t,n=new d.waves.AssetPair;e.pos<r;){var i=e.uint32();switch(i>>>3){case 1:n.amountAssetId=e.bytes();break;case 2:n.priceAssetId=e.bytes();break;default:e.skipType(7&i)}}return n},e}(),s.Order=function(){function e(e){if(this.proofs=[],e)for(var t=Object.keys(e),r=0;r<t.length;++r)null!=e[t[r]]&&(this[t[r]]=e[t[r]])}var t,r;return e.prototype.chainId=0,e.prototype.senderPublicKey=p.newBuffer([]),e.prototype.matcherPublicKey=p.newBuffer([]),e.prototype.assetPair=null,e.prototype.orderSide=0,e.prototype.amount=p.Long?p.Long.fromBits(0,0,!1):0,e.prototype.price=p.Long?p.Long.fromBits(0,0,!1):0,e.prototype.timestamp=p.Long?p.Long.fromBits(0,0,!1):0,e.prototype.expiration=p.Long?p.Long.fromBits(0,0,!1):0,e.prototype.matcherFee=null,e.prototype.version=0,e.prototype.proofs=p.emptyArray,e.encode=function(e,t){if(t||(t=f.create()),null!=e.chainId&&e.hasOwnProperty("chainId")&&t.uint32(8).int32(e.chainId),null!=e.senderPublicKey&&e.hasOwnProperty("senderPublicKey")&&t.uint32(18).bytes(e.senderPublicKey),null!=e.matcherPublicKey&&e.hasOwnProperty("matcherPublicKey")&&t.uint32(26).bytes(e.matcherPublicKey),null!=e.assetPair&&e.hasOwnProperty("assetPair")&&d.waves.AssetPair.encode(e.assetPair,t.uint32(34).fork()).ldelim(),null!=e.orderSide&&e.hasOwnProperty("orderSide")&&t.uint32(40).int32(e.orderSide),null!=e.amount&&e.hasOwnProperty("amount")&&t.uint32(48).int64(e.amount),null!=e.price&&e.hasOwnProperty("price")&&t.uint32(56).int64(e.price),null!=e.timestamp&&e.hasOwnProperty("timestamp")&&t.uint32(64).int64(e.timestamp),null!=e.expiration&&e.hasOwnProperty("expiration")&&t.uint32(72).int64(e.expiration),null!=e.matcherFee&&e.hasOwnProperty("matcherFee")&&d.waves.Amount.encode(e.matcherFee,t.uint32(82).fork()).ldelim(),null!=e.version&&e.hasOwnProperty("version")&&t.uint32(88).int32(e.version),null!=e.proofs&&e.proofs.length)for(var r=0;r<e.proofs.length;++r)t.uint32(98).bytes(e.proofs[r]);return t},e.decode=function(e,t){e instanceof l||(e=l.create(e));for(var r=void 0===t?e.len:e.pos+t,n=new d.waves.Order;e.pos<r;){var i=e.uint32();switch(i>>>3){case 1:n.chainId=e.int32();break;case 2:n.senderPublicKey=e.bytes();break;case 3:n.matcherPublicKey=e.bytes();break;case 4:n.assetPair=d.waves.AssetPair.decode(e,e.uint32());break;case 5:n.orderSide=e.int32();break;case 6:n.amount=e.int64();break;case 7:n.price=e.int64();break;case 8:n.timestamp=e.int64();break;case 9:n.expiration=e.int64();break;case 10:n.matcherFee=d.waves.Amount.decode(e,e.uint32());break;case 11:n.version=e.int32();break;case 12:n.proofs&&n.proofs.length||(n.proofs=[]),n.proofs.push(e.bytes());break;default:e.skipType(7&i)}}return n},e.Side=(t={},(r=Object.create(t))[t[0]="BUY"]=0,r[t[1]="SELL"]=1,r),e}(),s.Recipient=function(){function e(e){if(e)for(var t=Object.keys(e),r=0;r<t.length;++r)null!=e[t[r]]&&(this[t[r]]=e[t[r]])}var t;return e.prototype.publicKeyHash=p.newBuffer([]),e.prototype.alias="",Object.defineProperty(e.prototype,"recipient",{get:p.oneOfGetter(t=["publicKeyHash","alias"]),set:p.oneOfSetter(t)}),e.encode=function(e,t){return t||(t=f.create()),null!=e.publicKeyHash&&e.hasOwnProperty("publicKeyHash")&&t.uint32(10).bytes(e.publicKeyHash),null!=e.alias&&e.hasOwnProperty("alias")&&t.uint32(18).string(e.alias),t},e.decode=function(e,t){e instanceof l||(e=l.create(e));for(var r=void 0===t?e.len:e.pos+t,n=new d.waves.Recipient;e.pos<r;){var i=e.uint32();switch(i>>>3){case 1:n.publicKeyHash=e.bytes();break;case 2:n.alias=e.string();break;default:e.skipType(7&i)}}return n},e}(),s.SignedTransaction=function(){function e(e){if(this.proofs=[],e)for(var t=Object.keys(e),r=0;r<t.length;++r)null!=e[t[r]]&&(this[t[r]]=e[t[r]])}return e.prototype.transaction=null,e.prototype.proofs=p.emptyArray,e.encode=function(e,t){if(t||(t=f.create()),null!=e.transaction&&e.hasOwnProperty("transaction")&&d.waves.Transaction.encode(e.transaction,t.uint32(10).fork()).ldelim(),null!=e.proofs&&e.proofs.length)for(var r=0;r<e.proofs.length;++r)t.uint32(18).bytes(e.proofs[r]);return t},e.decode=function(e,t){e instanceof l||(e=l.create(e));for(var r=void 0===t?e.len:e.pos+t,n=new d.waves.SignedTransaction;e.pos<r;){var i=e.uint32();switch(i>>>3){case 1:n.transaction=d.waves.Transaction.decode(e,e.uint32());break;case 2:n.proofs&&n.proofs.length||(n.proofs=[]),n.proofs.push(e.bytes());break;default:e.skipType(7&i)}}return n},e}(),s.Transaction=function(){function e(e){if(e)for(var t=Object.keys(e),r=0;r<t.length;++r)null!=e[t[r]]&&(this[t[r]]=e[t[r]])}var t;return e.prototype.chainId=0,e.prototype.senderPublicKey=p.newBuffer([]),e.prototype.fee=null,e.prototype.timestamp=p.Long?p.Long.fromBits(0,0,!1):0,e.prototype.version=0,e.prototype.genesis=null,e.prototype.payment=null,e.prototype.issue=null,e.prototype.transfer=null,e.prototype.reissue=null,e.prototype.burn=null,e.prototype.exchange=null,e.prototype.lease=null,e.prototype.leaseCancel=null,e.prototype.createAlias=null,e.prototype.massTransfer=null,e.prototype.dataTransaction=null,e.prototype.setScript=null,e.prototype.sponsorFee=null,e.prototype.setAssetScript=null,e.prototype.invokeScript=null,e.prototype.updateAssetInfo=null,e.prototype.invokeExpression=null,Object.defineProperty(e.prototype,"data",{get:p.oneOfGetter(t=["genesis","payment","issue","transfer","reissue","burn","exchange","lease","leaseCancel","createAlias","massTransfer","dataTransaction","setScript","sponsorFee","setAssetScript","invokeScript","updateAssetInfo","invokeExpression"]),set:p.oneOfSetter(t)}),e.encode=function(e,t){return t||(t=f.create()),null!=e.chainId&&e.hasOwnProperty("chainId")&&t.uint32(8).int32(e.chainId),null!=e.senderPublicKey&&e.hasOwnProperty("senderPublicKey")&&t.uint32(18).bytes(e.senderPublicKey),null!=e.fee&&e.hasOwnProperty("fee")&&d.waves.Amount.encode(e.fee,t.uint32(26).fork()).ldelim(),null!=e.timestamp&&e.hasOwnProperty("timestamp")&&t.uint32(32).int64(e.timestamp),null!=e.version&&e.hasOwnProperty("version")&&t.uint32(40).int32(e.version),null!=e.genesis&&e.hasOwnProperty("genesis")&&d.waves.GenesisTransactionData.encode(e.genesis,t.uint32(810).fork()).ldelim(),null!=e.payment&&e.hasOwnProperty("payment")&&d.waves.PaymentTransactionData.encode(e.payment,t.uint32(818).fork()).ldelim(),null!=e.issue&&e.hasOwnProperty("issue")&&d.waves.IssueTransactionData.encode(e.issue,t.uint32(826).fork()).ldelim(),null!=e.transfer&&e.hasOwnProperty("transfer")&&d.waves.TransferTransactionData.encode(e.transfer,t.uint32(834).fork()).ldelim(),null!=e.reissue&&e.hasOwnProperty("reissue")&&d.waves.ReissueTransactionData.encode(e.reissue,t.uint32(842).fork()).ldelim(),null!=e.burn&&e.hasOwnProperty("burn")&&d.waves.BurnTransactionData.encode(e.burn,t.uint32(850).fork()).ldelim(),null!=e.exchange&&e.hasOwnProperty("exchange")&&d.waves.ExchangeTransactionData.encode(e.exchange,t.uint32(858).fork()).ldelim(),null!=e.lease&&e.hasOwnProperty("lease")&&d.waves.LeaseTransactionData.encode(e.lease,t.uint32(866).fork()).ldelim(),null!=e.leaseCancel&&e.hasOwnProperty("leaseCancel")&&d.waves.LeaseCancelTransactionData.encode(e.leaseCancel,t.uint32(874).fork()).ldelim(),null!=e.createAlias&&e.hasOwnProperty("createAlias")&&d.waves.CreateAliasTransactionData.encode(e.createAlias,t.uint32(882).fork()).ldelim(),null!=e.massTransfer&&e.hasOwnProperty("massTransfer")&&d.waves.MassTransferTransactionData.encode(e.massTransfer,t.uint32(890).fork()).ldelim(),null!=e.dataTransaction&&e.hasOwnProperty("dataTransaction")&&d.waves.DataTransactionData.encode(e.dataTransaction,t.uint32(898).fork()).ldelim(),null!=e.setScript&&e.hasOwnProperty("setScript")&&d.waves.SetScriptTransactionData.encode(e.setScript,t.uint32(906).fork()).ldelim(),null!=e.sponsorFee&&e.hasOwnProperty("sponsorFee")&&d.waves.SponsorFeeTransactionData.encode(e.sponsorFee,t.uint32(914).fork()).ldelim(),null!=e.setAssetScript&&e.hasOwnProperty("setAssetScript")&&d.waves.SetAssetScriptTransactionData.encode(e.setAssetScript,t.uint32(922).fork()).ldelim(),null!=e.invokeScript&&e.hasOwnProperty("invokeScript")&&d.waves.InvokeScriptTransactionData.encode(e.invokeScript,t.uint32(930).fork()).ldelim(),null!=e.updateAssetInfo&&e.hasOwnProperty("updateAssetInfo")&&d.waves.UpdateAssetInfoTransactionData.encode(e.updateAssetInfo,t.uint32(938).fork()).ldelim(),null!=e.invokeExpression&&e.hasOwnProperty("invokeExpression")&&d.waves.InvokeExpressionTransactionData.encode(e.invokeExpression,t.uint32(946).fork()).ldelim(),t},e.decode=function(e,t){e instanceof l||(e=l.create(e));for(var r=void 0===t?e.len:e.pos+t,n=new d.waves.Transaction;e.pos<r;){var i=e.uint32();switch(i>>>3){case 1:n.chainId=e.int32();break;case 2:n.senderPublicKey=e.bytes();break;case 3:n.fee=d.waves.Amount.decode(e,e.uint32());break;case 4:n.timestamp=e.int64();break;case 5:n.version=e.int32();break;case 101:n.genesis=d.waves.GenesisTransactionData.decode(e,e.uint32());break;case 102:n.payment=d.waves.PaymentTransactionData.decode(e,e.uint32());break;case 103:n.issue=d.waves.IssueTransactionData.decode(e,e.uint32());break;case 104:n.transfer=d.waves.TransferTransactionData.decode(e,e.uint32());break;case 105:n.reissue=d.waves.ReissueTransactionData.decode(e,e.uint32());break;case 106:n.burn=d.waves.BurnTransactionData.decode(e,e.uint32());break;case 107:n.exchange=d.waves.ExchangeTransactionData.decode(e,e.uint32());break;case 108:n.lease=d.waves.LeaseTransactionData.decode(e,e.uint32());break;case 109:n.leaseCancel=d.waves.LeaseCancelTransactionData.decode(e,e.uint32());break;case 110:n.createAlias=d.waves.CreateAliasTransactionData.decode(e,e.uint32());break;case 111:n.massTransfer=d.waves.MassTransferTransactionData.decode(e,e.uint32());break;case 112:n.dataTransaction=d.waves.DataTransactionData.decode(e,e.uint32());break;case 113:n.setScript=d.waves.SetScriptTransactionData.decode(e,e.uint32());break;case 114:n.sponsorFee=d.waves.SponsorFeeTransactionData.decode(e,e.uint32());break;case 115:n.setAssetScript=d.waves.SetAssetScriptTransactionData.decode(e,e.uint32());break;case 116:n.invokeScript=d.waves.InvokeScriptTransactionData.decode(e,e.uint32());break;case 117:n.updateAssetInfo=d.waves.UpdateAssetInfoTransactionData.decode(e,e.uint32());break;case 118:n.invokeExpression=d.waves.InvokeExpressionTransactionData.decode(e,e.uint32());break;default:e.skipType(7&i)}}return n},e}(),s.GenesisTransactionData=function(){function e(e){if(e)for(var t=Object.keys(e),r=0;r<t.length;++r)null!=e[t[r]]&&(this[t[r]]=e[t[r]])}return e.prototype.recipientAddress=p.newBuffer([]),e.prototype.amount=p.Long?p.Long.fromBits(0,0,!1):0,e.encode=function(e,t){return t||(t=f.create()),null!=e.recipientAddress&&e.hasOwnProperty("recipientAddress")&&t.uint32(10).bytes(e.recipientAddress),null!=e.amount&&e.hasOwnProperty("amount")&&t.uint32(16).int64(e.amount),t},e.decode=function(e,t){e instanceof l||(e=l.create(e));for(var r=void 0===t?e.len:e.pos+t,n=new d.waves.GenesisTransactionData;e.pos<r;){var i=e.uint32();switch(i>>>3){case 1:n.recipientAddress=e.bytes();break;case 2:n.amount=e.int64();break;default:e.skipType(7&i)}}return n},e}(),s.PaymentTransactionData=function(){function e(e){if(e)for(var t=Object.keys(e),r=0;r<t.length;++r)null!=e[t[r]]&&(this[t[r]]=e[t[r]])}return e.prototype.recipientAddress=p.newBuffer([]),e.prototype.amount=p.Long?p.Long.fromBits(0,0,!1):0,e.encode=function(e,t){return t||(t=f.create()),null!=e.recipientAddress&&e.hasOwnProperty("recipientAddress")&&t.uint32(10).bytes(e.recipientAddress),null!=e.amount&&e.hasOwnProperty("amount")&&t.uint32(16).int64(e.amount),t},e.decode=function(e,t){e instanceof l||(e=l.create(e));for(var r=void 0===t?e.len:e.pos+t,n=new d.waves.PaymentTransactionData;e.pos<r;){var i=e.uint32();switch(i>>>3){case 1:n.recipientAddress=e.bytes();break;case 2:n.amount=e.int64();break;default:e.skipType(7&i)}}return n},e}(),s.TransferTransactionData=function(){function e(e){if(e)for(var t=Object.keys(e),r=0;r<t.length;++r)null!=e[t[r]]&&(this[t[r]]=e[t[r]])}return e.prototype.recipient=null,e.prototype.amount=null,e.prototype.attachment=p.newBuffer([]),e.encode=function(e,t){return t||(t=f.create()),null!=e.recipient&&e.hasOwnProperty("recipient")&&d.waves.Recipient.encode(e.recipient,t.uint32(10).fork()).ldelim(),null!=e.amount&&e.hasOwnProperty("amount")&&d.waves.Amount.encode(e.amount,t.uint32(18).fork()).ldelim(),null!=e.attachment&&e.hasOwnProperty("attachment")&&t.uint32(26).bytes(e.attachment),t},e.decode=function(e,t){e instanceof l||(e=l.create(e));for(var r=void 0===t?e.len:e.pos+t,n=new d.waves.TransferTransactionData;e.pos<r;){var i=e.uint32();switch(i>>>3){case 1:n.recipient=d.waves.Recipient.decode(e,e.uint32());break;case 2:n.amount=d.waves.Amount.decode(e,e.uint32());break;case 3:n.attachment=e.bytes();break;default:e.skipType(7&i)}}return n},e}(),s.CreateAliasTransactionData=function(){function e(e){if(e)for(var t=Object.keys(e),r=0;r<t.length;++r)null!=e[t[r]]&&(this[t[r]]=e[t[r]])}return e.prototype.alias="",e.encode=function(e,t){return t||(t=f.create()),null!=e.alias&&e.hasOwnProperty("alias")&&t.uint32(10).string(e.alias),t},e.decode=function(e,t){e instanceof l||(e=l.create(e));for(var r=void 0===t?e.len:e.pos+t,n=new d.waves.CreateAliasTransactionData;e.pos<r;){var i=e.uint32();switch(i>>>3){case 1:n.alias=e.string();break;default:e.skipType(7&i)}}return n},e}(),s.DataTransactionData=function(){function e(e){if(this.data=[],e)for(var t=Object.keys(e),r=0;r<t.length;++r)null!=e[t[r]]&&(this[t[r]]=e[t[r]])}return e.prototype.data=p.emptyArray,e.encode=function(e,t){if(t||(t=f.create()),null!=e.data&&e.data.length)for(var r=0;r<e.data.length;++r)d.waves.DataTransactionData.DataEntry.encode(e.data[r],t.uint32(10).fork()).ldelim();return t},e.decode=function(e,t){e instanceof l||(e=l.create(e));for(var r=void 0===t?e.len:e.pos+t,n=new d.waves.DataTransactionData;e.pos<r;){var i=e.uint32();switch(i>>>3){case 1:n.data&&n.data.length||(n.data=[]),n.data.push(d.waves.DataTransactionData.DataEntry.decode(e,e.uint32()));break;default:e.skipType(7&i)}}return n},e.DataEntry=function(){function e(e){if(e)for(var t=Object.keys(e),r=0;r<t.length;++r)null!=e[t[r]]&&(this[t[r]]=e[t[r]])}var t;return e.prototype.key="",e.prototype.intValue=p.Long?p.Long.fromBits(0,0,!1):0,e.prototype.boolValue=!1,e.prototype.binaryValue=p.newBuffer([]),e.prototype.stringValue="",Object.defineProperty(e.prototype,"value",{get:p.oneOfGetter(t=["intValue","boolValue","binaryValue","stringValue"]),set:p.oneOfSetter(t)}),e.encode=function(e,t){return t||(t=f.create()),null!=e.key&&e.hasOwnProperty("key")&&t.uint32(10).string(e.key),null!=e.intValue&&e.hasOwnProperty("intValue")&&t.uint32(80).int64(e.intValue),null!=e.boolValue&&e.hasOwnProperty("boolValue")&&t.uint32(88).bool(e.boolValue),null!=e.binaryValue&&e.hasOwnProperty("binaryValue")&&t.uint32(98).bytes(e.binaryValue),null!=e.stringValue&&e.hasOwnProperty("stringValue")&&t.uint32(106).string(e.stringValue),t},e.decode=function(e,t){e instanceof l||(e=l.create(e));for(var r=void 0===t?e.len:e.pos+t,n=new d.waves.DataTransactionData.DataEntry;e.pos<r;){var i=e.uint32();switch(i>>>3){case 1:n.key=e.string();break;case 10:n.intValue=e.int64();break;case 11:n.boolValue=e.bool();break;case 12:n.binaryValue=e.bytes();break;case 13:n.stringValue=e.string();break;default:e.skipType(7&i)}}return n},e}(),e}(),s.MassTransferTransactionData=function(){function e(e){if(this.transfers=[],e)for(var t=Object.keys(e),r=0;r<t.length;++r)null!=e[t[r]]&&(this[t[r]]=e[t[r]])}return e.prototype.assetId=p.newBuffer([]),e.prototype.transfers=p.emptyArray,e.prototype.attachment=p.newBuffer([]),e.encode=function(e,t){if(t||(t=f.create()),null!=e.assetId&&e.hasOwnProperty("assetId")&&t.uint32(10).bytes(e.assetId),null!=e.transfers&&e.transfers.length)for(var r=0;r<e.transfers.length;++r)d.waves.MassTransferTransactionData.Transfer.encode(e.transfers[r],t.uint32(18).fork()).ldelim();return null!=e.attachment&&e.hasOwnProperty("attachment")&&t.uint32(26).bytes(e.attachment),t},e.decode=function(e,t){e instanceof l||(e=l.create(e));for(var r=void 0===t?e.len:e.pos+t,n=new d.waves.MassTransferTransactionData;e.pos<r;){var i=e.uint32();switch(i>>>3){case 1:n.assetId=e.bytes();break;case 2:n.transfers&&n.transfers.length||(n.transfers=[]),n.transfers.push(d.waves.MassTransferTransactionData.Transfer.decode(e,e.uint32()));break;case 3:n.attachment=e.bytes();break;default:e.skipType(7&i)}}return n},e.Transfer=function(){function e(e){if(e)for(var t=Object.keys(e),r=0;r<t.length;++r)null!=e[t[r]]&&(this[t[r]]=e[t[r]])}return e.prototype.recipient=null,e.prototype.amount=p.Long?p.Long.fromBits(0,0,!1):0,e.encode=function(e,t){return t||(t=f.create()),null!=e.recipient&&e.hasOwnProperty("recipient")&&d.waves.Recipient.encode(e.recipient,t.uint32(10).fork()).ldelim(),null!=e.amount&&e.hasOwnProperty("amount")&&t.uint32(16).int64(e.amount),t},e.decode=function(e,t){e instanceof l||(e=l.create(e));for(var r=void 0===t?e.len:e.pos+t,n=new d.waves.MassTransferTransactionData.Transfer;e.pos<r;){var i=e.uint32();switch(i>>>3){case 1:n.recipient=d.waves.Recipient.decode(e,e.uint32());break;case 2:n.amount=e.int64();break;default:e.skipType(7&i)}}return n},e}(),e}(),s.LeaseTransactionData=function(){function e(e){if(e)for(var t=Object.keys(e),r=0;r<t.length;++r)null!=e[t[r]]&&(this[t[r]]=e[t[r]])}return e.prototype.recipient=null,e.prototype.amount=p.Long?p.Long.fromBits(0,0,!1):0,e.encode=function(e,t){return t||(t=f.create()),null!=e.recipient&&e.hasOwnProperty("recipient")&&d.waves.Recipient.encode(e.recipient,t.uint32(10).fork()).ldelim(),null!=e.amount&&e.hasOwnProperty("amount")&&t.uint32(16).int64(e.amount),t},e.decode=function(e,t){e instanceof l||(e=l.create(e));for(var r=void 0===t?e.len:e.pos+t,n=new d.waves.LeaseTransactionData;e.pos<r;){var i=e.uint32();switch(i>>>3){case 1:n.recipient=d.waves.Recipient.decode(e,e.uint32());break;case 2:n.amount=e.int64();break;default:e.skipType(7&i)}}return n},e}(),s.LeaseCancelTransactionData=function(){function e(e){if(e)for(var t=Object.keys(e),r=0;r<t.length;++r)null!=e[t[r]]&&(this[t[r]]=e[t[r]])}return e.prototype.leaseId=p.newBuffer([]),e.encode=function(e,t){return t||(t=f.create()),null!=e.leaseId&&e.hasOwnProperty("leaseId")&&t.uint32(10).bytes(e.leaseId),t},e.decode=function(e,t){e instanceof l||(e=l.create(e));for(var r=void 0===t?e.len:e.pos+t,n=new d.waves.LeaseCancelTransactionData;e.pos<r;){var i=e.uint32();switch(i>>>3){case 1:n.leaseId=e.bytes();break;default:e.skipType(7&i)}}return n},e}(),s.BurnTransactionData=function(){function e(e){if(e)for(var t=Object.keys(e),r=0;r<t.length;++r)null!=e[t[r]]&&(this[t[r]]=e[t[r]])}return e.prototype.assetAmount=null,e.encode=function(e,t){return t||(t=f.create()),null!=e.assetAmount&&e.hasOwnProperty("assetAmount")&&d.waves.Amount.encode(e.assetAmount,t.uint32(10).fork()).ldelim(),t},e.decode=function(e,t){e instanceof l||(e=l.create(e));for(var r=void 0===t?e.len:e.pos+t,n=new d.waves.BurnTransactionData;e.pos<r;){var i=e.uint32();switch(i>>>3){case 1:n.assetAmount=d.waves.Amount.decode(e,e.uint32());break;default:e.skipType(7&i)}}return n},e}(),s.IssueTransactionData=function(){function e(e){if(e)for(var t=Object.keys(e),r=0;r<t.length;++r)null!=e[t[r]]&&(this[t[r]]=e[t[r]])}return e.prototype.name="",e.prototype.description="",e.prototype.amount=p.Long?p.Long.fromBits(0,0,!1):0,e.prototype.decimals=0,e.prototype.reissuable=!1,e.prototype.script=p.newBuffer([]),e.encode=function(e,t){return t||(t=f.create()),null!=e.name&&e.hasOwnProperty("name")&&t.uint32(10).string(e.name),null!=e.description&&e.hasOwnProperty("description")&&t.uint32(18).string(e.description),null!=e.amount&&e.hasOwnProperty("amount")&&t.uint32(24).int64(e.amount),null!=e.decimals&&e.hasOwnProperty("decimals")&&t.uint32(32).int32(e.decimals),null!=e.reissuable&&e.hasOwnProperty("reissuable")&&t.uint32(40).bool(e.reissuable),null!=e.script&&e.hasOwnProperty("script")&&t.uint32(50).bytes(e.script),t},e.decode=function(e,t){e instanceof l||(e=l.create(e));for(var r=void 0===t?e.len:e.pos+t,n=new d.waves.IssueTransactionData;e.pos<r;){var i=e.uint32();switch(i>>>3){case 1:n.name=e.string();break;case 2:n.description=e.string();break;case 3:n.amount=e.int64();break;case 4:n.decimals=e.int32();break;case 5:n.reissuable=e.bool();break;case 6:n.script=e.bytes();break;default:e.skipType(7&i)}}return n},e}(),s.ReissueTransactionData=function(){function e(e){if(e)for(var t=Object.keys(e),r=0;r<t.length;++r)null!=e[t[r]]&&(this[t[r]]=e[t[r]])}return e.prototype.assetAmount=null,e.prototype.reissuable=!1,e.encode=function(e,t){return t||(t=f.create()),null!=e.assetAmount&&e.hasOwnProperty("assetAmount")&&d.waves.Amount.encode(e.assetAmount,t.uint32(10).fork()).ldelim(),null!=e.reissuable&&e.hasOwnProperty("reissuable")&&t.uint32(16).bool(e.reissuable),t},e.decode=function(e,t){e instanceof l||(e=l.create(e));for(var r=void 0===t?e.len:e.pos+t,n=new d.waves.ReissueTransactionData;e.pos<r;){var i=e.uint32();switch(i>>>3){case 1:n.assetAmount=d.waves.Amount.decode(e,e.uint32());break;case 2:n.reissuable=e.bool();break;default:e.skipType(7&i)}}return n},e}(),s.SetAssetScriptTransactionData=function(){function e(e){if(e)for(var t=Object.keys(e),r=0;r<t.length;++r)null!=e[t[r]]&&(this[t[r]]=e[t[r]])}return e.prototype.assetId=p.newBuffer([]),e.prototype.script=p.newBuffer([]),e.encode=function(e,t){return t||(t=f.create()),null!=e.assetId&&e.hasOwnProperty("assetId")&&t.uint32(10).bytes(e.assetId),null!=e.script&&e.hasOwnProperty("script")&&t.uint32(18).bytes(e.script),t},e.decode=function(e,t){e instanceof l||(e=l.create(e));for(var r=void 0===t?e.len:e.pos+t,n=new d.waves.SetAssetScriptTransactionData;e.pos<r;){var i=e.uint32();switch(i>>>3){case 1:n.assetId=e.bytes();break;case 2:n.script=e.bytes();break;default:e.skipType(7&i)}}return n},e}(),s.SetScriptTransactionData=function(){function e(e){if(e)for(var t=Object.keys(e),r=0;r<t.length;++r)null!=e[t[r]]&&(this[t[r]]=e[t[r]])}return e.prototype.script=p.newBuffer([]),e.encode=function(e,t){return t||(t=f.create()),null!=e.script&&e.hasOwnProperty("script")&&t.uint32(10).bytes(e.script),t},e.decode=function(e,t){e instanceof l||(e=l.create(e));for(var r=void 0===t?e.len:e.pos+t,n=new d.waves.SetScriptTransactionData;e.pos<r;){var i=e.uint32();switch(i>>>3){case 1:n.script=e.bytes();break;default:e.skipType(7&i)}}return n},e}(),s.ExchangeTransactionData=function(){function e(e){if(this.orders=[],e)for(var t=Object.keys(e),r=0;r<t.length;++r)null!=e[t[r]]&&(this[t[r]]=e[t[r]])}return e.prototype.amount=p.Long?p.Long.fromBits(0,0,!1):0,e.prototype.price=p.Long?p.Long.fromBits(0,0,!1):0,e.prototype.buyMatcherFee=p.Long?p.Long.fromBits(0,0,!1):0,e.prototype.sellMatcherFee=p.Long?p.Long.fromBits(0,0,!1):0,e.prototype.orders=p.emptyArray,e.encode=function(e,t){if(t||(t=f.create()),null!=e.amount&&e.hasOwnProperty("amount")&&t.uint32(8).int64(e.amount),null!=e.price&&e.hasOwnProperty("price")&&t.uint32(16).int64(e.price),null!=e.buyMatcherFee&&e.hasOwnProperty("buyMatcherFee")&&t.uint32(24).int64(e.buyMatcherFee),null!=e.sellMatcherFee&&e.hasOwnProperty("sellMatcherFee")&&t.uint32(32).int64(e.sellMatcherFee),null!=e.orders&&e.orders.length)for(var r=0;r<e.orders.length;++r)d.waves.Order.encode(e.orders[r],t.uint32(42).fork()).ldelim();return t},e.decode=function(e,t){e instanceof l||(e=l.create(e));for(var r=void 0===t?e.len:e.pos+t,n=new d.waves.ExchangeTransactionData;e.pos<r;){var i=e.uint32();switch(i>>>3){case 1:n.amount=e.int64();break;case 2:n.price=e.int64();break;case 3:n.buyMatcherFee=e.int64();break;case 4:n.sellMatcherFee=e.int64();break;case 5:n.orders&&n.orders.length||(n.orders=[]),n.orders.push(d.waves.Order.decode(e,e.uint32()));break;default:e.skipType(7&i)}}return n},e}(),s.SponsorFeeTransactionData=function(){function e(e){if(e)for(var t=Object.keys(e),r=0;r<t.length;++r)null!=e[t[r]]&&(this[t[r]]=e[t[r]])}return e.prototype.minFee=null,e.encode=function(e,t){return t||(t=f.create()),null!=e.minFee&&e.hasOwnProperty("minFee")&&d.waves.Amount.encode(e.minFee,t.uint32(10).fork()).ldelim(),t},e.decode=function(e,t){e instanceof l||(e=l.create(e));for(var r=void 0===t?e.len:e.pos+t,n=new d.waves.SponsorFeeTransactionData;e.pos<r;){var i=e.uint32();switch(i>>>3){case 1:n.minFee=d.waves.Amount.decode(e,e.uint32());break;default:e.skipType(7&i)}}return n},e}(),s.InvokeScriptTransactionData=function(){function e(e){if(this.payments=[],e)for(var t=Object.keys(e),r=0;r<t.length;++r)null!=e[t[r]]&&(this[t[r]]=e[t[r]])}return e.prototype.dApp=null,e.prototype.functionCall=p.newBuffer([]),e.prototype.payments=p.emptyArray,e.encode=function(e,t){if(t||(t=f.create()),null!=e.dApp&&e.hasOwnProperty("dApp")&&d.waves.Recipient.encode(e.dApp,t.uint32(10).fork()).ldelim(),null!=e.functionCall&&e.hasOwnProperty("functionCall")&&t.uint32(18).bytes(e.functionCall),null!=e.payments&&e.payments.length)for(var r=0;r<e.payments.length;++r)d.waves.Amount.encode(e.payments[r],t.uint32(26).fork()).ldelim();return t},e.decode=function(e,t){e instanceof l||(e=l.create(e));for(var r=void 0===t?e.len:e.pos+t,n=new d.waves.InvokeScriptTransactionData;e.pos<r;){var i=e.uint32();switch(i>>>3){case 1:n.dApp=d.waves.Recipient.decode(e,e.uint32());break;case 2:n.functionCall=e.bytes();break;case 3:n.payments&&n.payments.length||(n.payments=[]),n.payments.push(d.waves.Amount.decode(e,e.uint32()));break;default:e.skipType(7&i)}}return n},e}(),s.UpdateAssetInfoTransactionData=function(){function e(e){if(e)for(var t=Object.keys(e),r=0;r<t.length;++r)null!=e[t[r]]&&(this[t[r]]=e[t[r]])}return e.prototype.assetId=p.newBuffer([]),e.prototype.name="",e.prototype.description="",e.encode=function(e,t){return t||(t=f.create()),null!=e.assetId&&e.hasOwnProperty("assetId")&&t.uint32(10).bytes(e.assetId),null!=e.name&&e.hasOwnProperty("name")&&t.uint32(18).string(e.name),null!=e.description&&e.hasOwnProperty("description")&&t.uint32(26).string(e.description),t},e.decode=function(e,t){e instanceof l||(e=l.create(e));for(var r=void 0===t?e.len:e.pos+t,n=new d.waves.UpdateAssetInfoTransactionData;e.pos<r;){var i=e.uint32();switch(i>>>3){case 1:n.assetId=e.bytes();break;case 2:n.name=e.string();break;case 3:n.description=e.string();break;default:e.skipType(7&i)}}return n},e}(),s.InvokeExpressionTransactionData=function(){function e(e){if(e)for(var t=Object.keys(e),r=0;r<t.length;++r)null!=e[t[r]]&&(this[t[r]]=e[t[r]])}return e.prototype.expression=p.newBuffer([]),e.encode=function(e,t){return t||(t=f.create()),null!=e.expression&&e.hasOwnProperty("expression")&&t.uint32(10).bytes(e.expression),t},e.decode=function(e,t){e instanceof l||(e=l.create(e));for(var r=void 0===t?e.len:e.pos+t,n=new d.waves.InvokeExpressionTransactionData;e.pos<r;){var i=e.uint32();switch(i>>>3){case 1:n.expression=e.bytes();break;default:e.skipType(7&i)}}return n},e}(),s),d.google=((u={}).protobuf=((o={}).DoubleValue=function(){function e(e){if(e)for(var t=Object.keys(e),r=0;r<t.length;++r)null!=e[t[r]]&&(this[t[r]]=e[t[r]])}return e.prototype.value=0,e.encode=function(e,t){return t||(t=f.create()),null!=e.value&&e.hasOwnProperty("value")&&t.uint32(9).double(e.value),t},e.decode=function(e,t){e instanceof l||(e=l.create(e));for(var r=void 0===t?e.len:e.pos+t,n=new d.google.protobuf.DoubleValue;e.pos<r;){var i=e.uint32();switch(i>>>3){case 1:n.value=e.double();break;default:e.skipType(7&i)}}return n},e}(),o.FloatValue=function(){function e(e){if(e)for(var t=Object.keys(e),r=0;r<t.length;++r)null!=e[t[r]]&&(this[t[r]]=e[t[r]])}return e.prototype.value=0,e.encode=function(e,t){return t||(t=f.create()),null!=e.value&&e.hasOwnProperty("value")&&t.uint32(13).float(e.value),t},e.decode=function(e,t){e instanceof l||(e=l.create(e));for(var r=void 0===t?e.len:e.pos+t,n=new d.google.protobuf.FloatValue;e.pos<r;){var i=e.uint32();switch(i>>>3){case 1:n.value=e.float();break;default:e.skipType(7&i)}}return n},e}(),o.Int64Value=function(){function e(e){if(e)for(var t=Object.keys(e),r=0;r<t.length;++r)null!=e[t[r]]&&(this[t[r]]=e[t[r]])}return e.prototype.value=p.Long?p.Long.fromBits(0,0,!1):0,e.encode=function(e,t){return t||(t=f.create()),null!=e.value&&e.hasOwnProperty("value")&&t.uint32(8).int64(e.value),t},e.decode=function(e,t){e instanceof l||(e=l.create(e));for(var r=void 0===t?e.len:e.pos+t,n=new d.google.protobuf.Int64Value;e.pos<r;){var i=e.uint32();switch(i>>>3){case 1:n.value=e.int64();break;default:e.skipType(7&i)}}return n},e}(),o.UInt64Value=function(){function e(e){if(e)for(var t=Object.keys(e),r=0;r<t.length;++r)null!=e[t[r]]&&(this[t[r]]=e[t[r]])}return e.prototype.value=p.Long?p.Long.fromBits(0,0,!0):0,e.encode=function(e,t){return t||(t=f.create()),null!=e.value&&e.hasOwnProperty("value")&&t.uint32(8).uint64(e.value),t},e.decode=function(e,t){e instanceof l||(e=l.create(e));for(var r=void 0===t?e.len:e.pos+t,n=new d.google.protobuf.UInt64Value;e.pos<r;){var i=e.uint32();switch(i>>>3){case 1:n.value=e.uint64();break;default:e.skipType(7&i)}}return n},e}(),o.Int32Value=function(){function e(e){if(e)for(var t=Object.keys(e),r=0;r<t.length;++r)null!=e[t[r]]&&(this[t[r]]=e[t[r]])}return e.prototype.value=0,e.encode=function(e,t){return t||(t=f.create()),null!=e.value&&e.hasOwnProperty("value")&&t.uint32(8).int32(e.value),t},e.decode=function(e,t){e instanceof l||(e=l.create(e));for(var r=void 0===t?e.len:e.pos+t,n=new d.google.protobuf.Int32Value;e.pos<r;){var i=e.uint32();switch(i>>>3){case 1:n.value=e.int32();break;default:e.skipType(7&i)}}return n},e}(),o.UInt32Value=function(){function e(e){if(e)for(var t=Object.keys(e),r=0;r<t.length;++r)null!=e[t[r]]&&(this[t[r]]=e[t[r]])}return e.prototype.value=0,e.encode=function(e,t){return t||(t=f.create()),null!=e.value&&e.hasOwnProperty("value")&&t.uint32(8).uint32(e.value),t},e.decode=function(e,t){e instanceof l||(e=l.create(e));for(var r=void 0===t?e.len:e.pos+t,n=new d.google.protobuf.UInt32Value;e.pos<r;){var i=e.uint32();switch(i>>>3){case 1:n.value=e.uint32();break;default:e.skipType(7&i)}}return n},e}(),o.BoolValue=function(){function e(e){if(e)for(var t=Object.keys(e),r=0;r<t.length;++r)null!=e[t[r]]&&(this[t[r]]=e[t[r]])}return e.prototype.value=!1,e.encode=function(e,t){return t||(t=f.create()),null!=e.value&&e.hasOwnProperty("value")&&t.uint32(8).bool(e.value),t},e.decode=function(e,t){e instanceof l||(e=l.create(e));for(var r=void 0===t?e.len:e.pos+t,n=new d.google.protobuf.BoolValue;e.pos<r;){var i=e.uint32();switch(i>>>3){case 1:n.value=e.bool();break;default:e.skipType(7&i)}}return n},e}(),o.StringValue=function(){function e(e){if(e)for(var t=Object.keys(e),r=0;r<t.length;++r)null!=e[t[r]]&&(this[t[r]]=e[t[r]])}return e.prototype.value="",e.encode=function(e,t){return t||(t=f.create()),null!=e.value&&e.hasOwnProperty("value")&&t.uint32(10).string(e.value),t},e.decode=function(e,t){e instanceof l||(e=l.create(e));for(var r=void 0===t?e.len:e.pos+t,n=new d.google.protobuf.StringValue;e.pos<r;){var i=e.uint32();switch(i>>>3){case 1:n.value=e.string();break;default:e.skipType(7&i)}}return n},e}(),o.BytesValue=function(){function e(e){if(e)for(var t=Object.keys(e),r=0;r<t.length;++r)null!=e[t[r]]&&(this[t[r]]=e[t[r]])}return e.prototype.value=p.newBuffer([]),e.encode=function(e,t){return t||(t=f.create()),null!=e.value&&e.hasOwnProperty("value")&&t.uint32(10).bytes(e.value),t},e.decode=function(e,t){e instanceof l||(e=l.create(e));for(var r=void 0===t?e.len:e.pos+t,n=new d.google.protobuf.BytesValue;e.pos<r;){var i=e.uint32();switch(i>>>3){case 1:n.value=e.bytes();break;default:e.skipType(7&i)}}return n},e}(),o.Empty=function(){function e(e){if(e)for(var t=Object.keys(e),r=0;r<t.length;++r)null!=e[t[r]]&&(this[t[r]]=e[t[r]])}return e.encode=function(e,t){return t||(t=f.create()),t},e.decode=function(e,t){e instanceof l||(e=l.create(e));for(var r=void 0===t?e.len:e.pos+t,n=new d.google.protobuf.Empty;e.pos<r;){var i=e.uint32();e.skipType(7&i)}return n},e}(),o),u),e.exports=d},function(e,t,r){"use strict";e.exports=f;var n,i=r(14),a=i.LongBits,s=i.base64,o=i.utf8;function u(e,t,r){this.fn=e,this.len=t,this.next=void 0,this.val=r}function c(){}function l(e){this.head=e.head,this.tail=e.tail,this.len=e.len,this.next=e.states}function f(){this.len=0,this.head=new u(c,0,0),this.tail=this.head,this.states=null}var p=function(){return i.Buffer?function(){return(f.create=function(){return new n})()}:function(){return new f}};function d(e,t,r){t[r]=255&e}function h(e,t){this.len=e,this.next=void 0,this.val=t}function y(e,t,r){for(;e.hi;)t[r++]=127&e.lo|128,e.lo=(e.lo>>>7|e.hi<<25)>>>0,e.hi>>>=7;for(;e.lo>127;)t[r++]=127&e.lo|128,e.lo=e.lo>>>7;t[r++]=e.lo}function g(e,t,r){t[r]=255&e,t[r+1]=e>>>8&255,t[r+2]=e>>>16&255,t[r+3]=e>>>24}f.create=p(),f.alloc=function(e){return new i.Array(e)},i.Array!==Array&&(f.alloc=i.pool(f.alloc,i.Array.prototype.subarray)),f.prototype._push=function(e,t,r){return this.tail=this.tail.next=new u(e,t,r),this.len+=t,this},h.prototype=Object.create(u.prototype),h.prototype.fn=function(e,t,r){for(;e>127;)t[r++]=127&e|128,e>>>=7;t[r]=e},f.prototype.uint32=function(e){return this.len+=(this.tail=this.tail.next=new h((e>>>=0)<128?1:e<16384?2:e<2097152?3:e<268435456?4:5,e)).len,this},f.prototype.int32=function(e){return e<0?this._push(y,10,a.fromNumber(e)):this.uint32(e)},f.prototype.sint32=function(e){return this.uint32((e<<1^e>>31)>>>0)},f.prototype.uint64=function(e){var t=a.from(e);return this._push(y,t.length(),t)},f.prototype.int64=f.prototype.uint64,f.prototype.sint64=function(e){var t=a.from(e).zzEncode();return this._push(y,t.length(),t)},f.prototype.bool=function(e){return this._push(d,1,e?1:0)},f.prototype.fixed32=function(e){return this._push(g,4,e>>>0)},f.prototype.sfixed32=f.prototype.fixed32,f.prototype.fixed64=function(e){var t=a.from(e);return this._push(g,4,t.lo)._push(g,4,t.hi)},f.prototype.sfixed64=f.prototype.fixed64,f.prototype.float=function(e){return this._push(i.float.writeFloatLE,4,e)},f.prototype.double=function(e){return this._push(i.float.writeDoubleLE,8,e)};var v=i.Array.prototype.set?function(e,t,r){t.set(e,r)}:function(e,t,r){for(var n=0;n<e.length;++n)t[r+n]=e[n]};f.prototype.bytes=function(e){var t=e.length>>>0;if(!t)return this._push(d,1,0);if(i.isString(e)){var r=f.alloc(t=s.length(e));s.decode(e,r,0),e=r}return this.uint32(t)._push(v,t,e)},f.prototype.string=function(e){var t=o.length(e);return t?this.uint32(t)._push(o.write,t,e):this._push(d,1,0)},f.prototype.fork=function(){return this.states=new l(this),this.head=this.tail=new u(c,0,0),this.len=0,this},f.prototype.reset=function(){return this.states?(this.head=this.states.head,this.tail=this.states.tail,this.len=this.states.len,this.states=this.states.next):(this.head=this.tail=new u(c,0,0),this.len=0),this},f.prototype.ldelim=function(){var e=this.head,t=this.tail,r=this.len;return this.reset().uint32(r),r&&(this.tail.next=e.next,this.tail=t,this.len+=r),this},f.prototype.finish=function(){for(var e=this.head.next,t=this.constructor.alloc(this.len),r=0;e;)e.fn(e.val,t,r),r+=e.len,e=e.next;return t},f._configure=function(e){n=e,f.create=p(),n._configure()}},function(e,t,r){"use strict";e.exports=u;var n,i=r(14),a=i.LongBits,s=i.utf8;function o(e,t){return RangeError("index out of range: "+e.pos+" + "+(t||1)+" > "+e.len)}function u(e){this.buf=e,this.pos=0,this.len=e.length}var c,l="undefined"!=typeof Uint8Array?function(e){if(e instanceof Uint8Array||Array.isArray(e))return new u(e);throw Error("illegal buffer")}:function(e){if(Array.isArray(e))return new u(e);throw Error("illegal buffer")},f=function(){return i.Buffer?function(e){return(u.create=function(e){return i.Buffer.isBuffer(e)?new n(e):l(e)})(e)}:l};function p(){var e=new a(0,0),t=0;if(!(this.len-this.pos>4)){for(;t<3;++t){if(this.pos>=this.len)throw o(this);if(e.lo=(e.lo|(127&this.buf[this.pos])<<7*t)>>>0,this.buf[this.pos++]<128)return e}return e.lo=(e.lo|(127&this.buf[this.pos++])<<7*t)>>>0,e}for(;t<4;++t)if(e.lo=(e.lo|(127&this.buf[this.pos])<<7*t)>>>0,this.buf[this.pos++]<128)return e;if(e.lo=(e.lo|(127&this.buf[this.pos])<<28)>>>0,e.hi=(e.hi|(127&this.buf[this.pos])>>4)>>>0,this.buf[this.pos++]<128)return e;if(t=0,this.len-this.pos>4){for(;t<5;++t)if(e.hi=(e.hi|(127&this.buf[this.pos])<<7*t+3)>>>0,this.buf[this.pos++]<128)return e}else for(;t<5;++t){if(this.pos>=this.len)throw o(this);if(e.hi=(e.hi|(127&this.buf[this.pos])<<7*t+3)>>>0,this.buf[this.pos++]<128)return e}throw Error("invalid varint encoding")}function d(e,t){return(e[t-4]|e[t-3]<<8|e[t-2]<<16|e[t-1]<<24)>>>0}function h(){if(this.pos+8>this.len)throw o(this,8);return new a(d(this.buf,this.pos+=4),d(this.buf,this.pos+=4))}u.create=f(),u.prototype._slice=i.Array.prototype.subarray||i.Array.prototype.slice,u.prototype.uint32=(c=4294967295,function(){if(c=(127&this.buf[this.pos])>>>0,this.buf[this.pos++]<128)return c;if(c=(c|(127&this.buf[this.pos])<<7)>>>0,this.buf[this.pos++]<128)return c;if(c=(c|(127&this.buf[this.pos])<<14)>>>0,this.buf[this.pos++]<128)return c;if(c=(c|(127&this.buf[this.pos])<<21)>>>0,this.buf[this.pos++]<128)return c;if(c=(c|(15&this.buf[this.pos])<<28)>>>0,this.buf[this.pos++]<128)return c;if((this.pos+=5)>this.len)throw this.pos=this.len,o(this,10);return c}),u.prototype.int32=function(){return 0|this.uint32()},u.prototype.sint32=function(){var e=this.uint32();return e>>>1^-(1&e)|0},u.prototype.bool=function(){return 0!==this.uint32()},u.prototype.fixed32=function(){if(this.pos+4>this.len)throw o(this,4);return d(this.buf,this.pos+=4)},u.prototype.sfixed32=function(){if(this.pos+4>this.len)throw o(this,4);return 0|d(this.buf,this.pos+=4)},u.prototype.float=function(){if(this.pos+4>this.len)throw o(this,4);var e=i.float.readFloatLE(this.buf,this.pos);return this.pos+=4,e},u.prototype.double=function(){if(this.pos+8>this.len)throw o(this,4);var e=i.float.readDoubleLE(this.buf,this.pos);return this.pos+=8,e},u.prototype.bytes=function(){var e=this.uint32(),t=this.pos,r=this.pos+e;if(r>this.len)throw o(this,e);return this.pos+=e,Array.isArray(this.buf)?this.buf.slice(t,r):t===r?new this.buf.constructor(0):this._slice.call(this.buf,t,r)},u.prototype.string=function(){var e=this.bytes();return s.read(e,0,e.length)},u.prototype.skip=function(e){if("number"==typeof e){if(this.pos+e>this.len)throw o(this,e);this.pos+=e}else do{if(this.pos>=this.len)throw o(this)}while(128&this.buf[this.pos++]);return this},u.prototype.skipType=function(e){switch(e){case 0:this.skip();break;case 1:this.skip(8);break;case 2:this.skip(this.uint32());break;case 3:for(;4!=(e=7&this.uint32());)this.skipType(e);break;case 5:this.skip(4);break;default:throw Error("invalid wire type "+e+" at offset "+this.pos)}return this},u._configure=function(e){n=e,u.create=f(),n._configure();var t=i.Long?"toLong":"toNumber";i.merge(u.prototype,{int64:function(){return p.call(this)[t](!1)},uint64:function(){return p.call(this)[t](!0)},sint64:function(){return p.call(this).zzDecode()[t](!1)},fixed64:function(){return h.call(this)[t](!0)},sfixed64:function(){return h.call(this)[t](!1)}})}},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.serializeCustomData=t.customData=void 0;const n=r(2),i=r(4),a=r(4),s=r(6);function o(e){if(1===e.version)return n.concat([255,255,255,1],i.serializePrimitives.BASE64_STRING(e.binary));if(2===e.version){const t=a.binary.serializerFromSchema(i.schemas.txFields.data[1]);return n.concat([255,255,255,2],t(e.data))}throw new Error("Invalid CustomData version: "+e.version)}t.customData=function(e,t){s.validate.customData(e);let r=o(e);const i=n.base58Encode(n.blake2b(r)),a=e.publicKey?e.publicKey:t&&n.publicKey(t),u=t&&n.signBytes(t,r);return Object.assign(Object.assign({},e),{hash:i,publicKey:a,signature:u})},t.serializeCustomData=o},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.auth=t.serializeAuthData=void 0;const n=r(2),i=r(4),{STRING:a,LEN:s,SHORT:o}=i.serializePrimitives,u=r(5),c=r(6);t.serializeAuthData=e=>n.concat(s(o)(a)("WavesWalletAuthentication"),s(o)(a)(e.host||""),s(o)(a)(e.data||"")),t.auth=function(e,r,i){const a=u.convertToPairs(r),s=e.publicKey||u.getSenderPublicKey(a,{senderPublicKey:void 0});c.validate.auth(e);const o={hash:"",signature:"",host:e.host,data:e.data,publicKey:s,address:n.address({publicKey:s},i)},l=t.serializeAuthData(o);return o.signature=null!=r&&n.signBytes(r,l)||"",o.hash=n.base58Encode(n.blake2b(Uint8Array.from(l))),o}},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.wavesAuth=t.serializeWavesAuthData=void 0;const n=r(2),i=r(4),{LONG:a,BASE58_STRING:s}=i.serializePrimitives,o=r(5),u=r(6);t.serializeWavesAuthData=e=>n.concat(s(e.publicKey),a(e.timestamp)),t.wavesAuth=function(e,r,i){const a=o.convertToPairs(r),s=e.publicKey||o.getSenderPublicKey(a,{senderPublicKey:void 0}),c=e.timestamp||Date.now();u.validate.wavesAuth({publicKey:s,timestamp:c});const l={hash:"",signature:"",timestamp:c,publicKey:s,address:n.address({publicKey:s},i)},f=t.serializeWavesAuthData(l);return l.signature=a.map(([e])=>n.signBytes(e,f))[0]||"",l.hash=n.base58Encode(n.blake2b(Uint8Array.from(f))),l}},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=["amount","matcherFee","price","fee","minSponsoredAssetFee","quantity","sellMatcherFee","buyMatcherFee"];t.default=function(e){return JSON.stringify(e,(function(e,t){return n.includes(e)||"value"===e&&"integer"===this.type?"!"+t+"!":t}),0).replace(/"\!(-?\d+)\!"/g,"$1")}},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.invokeExpression=void 0;const n=r(2),i=r(5),a=r(6),s=r(8),o=r(9),u=r(0);t.invokeExpression=function(e,t){const r=u.TRANSACTION_TYPE.INVOKE_EXPRESSION,c=e.version||o.DEFAULT_VERSIONS.INVOKE_EXPRESSION,l=i.convertToPairs(t),f={type:r,version:c,senderPublicKey:i.getSenderPublicKey(l,e),expression:i.base64Prefix(e.expression),fee:i.fee(e,1e6),feeAssetId:i.normalizeAssetId(e.feeAssetId),timestamp:e.timestamp||Date.now(),chainId:i.networkByte(e.chainId,87),proofs:e.proofs||[],id:""};a.validate.invokeExpression(f);const p=s.txToProtoBytes(f);return l.forEach(([e,t])=>i.addProof(f,n.signBytes(e,p),t)),f.id=n.base58Encode(n.base58Encode(n.blake2b(p))),f}},function(e,t,r){"use strict";var n=this&&this.__createBinding||(Object.create?function(e,t,r,n){void 0===n&&(n=r),Object.defineProperty(e,n,{enumerable:!0,get:function(){return t[r]}})}:function(e,t,r,n){void 0===n&&(n=r),e[n]=t[r]}),i=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),a=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var r in e)"default"!==r&&Object.hasOwnProperty.call(e,r)&&n(t,e,r);return i(t,e),t},s=this&&this.__awaiter||function(e,t,r,n){return new(r||(r=Promise))((function(i,a){function s(e){try{u(n.next(e))}catch(e){a(e)}}function o(e){try{u(n.throw(e))}catch(e){a(e)}}function u(e){var t;e.done?i(e.value):(t=e.value,t instanceof r?t:new r((function(e){e(t)}))).then(s,o)}u((n=n.apply(e,t||[])).next())}))};Object.defineProperty(t,"__esModule",{value:!0}),t.broadcast=t.stateChanges=t.rewards=t.scriptMeta=t.scriptInfo=t.accountDataByKey=t.accountData=t.assetBalance=t.balanceDetails=t.balance=t.transactionById=t.waitNBlocks=t.waitForTxWithNConfirmations=t.waitForTx=t.waitForHeight=t.currentHeight=void 0;const o=a(r(161)),u=a(r(85)),c=a(r(167)),l=a(r(168)),f=a(r(169)),p=a(r(170)),d=e=>{const t={},r=new Promise((r,n)=>{t.resolve=r,t.id=setTimeout(()=>r(),e)});return r.cancel=()=>{t.resolve(),clearTimeout(t.id)},r},h=(e,t,r=1e3)=>d(r).then(r=>t?Promise.reject(new Error("Tx wait stopped: timeout")):e()),y={timeout:12e4,apiBase:"https://nodes.wavesplatform.com"};function g(e,r){return s(this,void 0,void 0,(function*(){const{timeout:n,apiBase:i}=Object.assign(Object.assign({},y),r);let a=!1;const s=d(n);s.then(()=>a=!0);const o=()=>t.currentHeight(i).then(t=>t>=e?(s.cancel(),t):h(o,a,1e4)).catch(e=>h(o,a));return o()}))}function v(e,t,r){return s(this,void 0,void 0,(function*(){const{timeout:n,apiBase:i}=Object.assign(Object.assign({},y),t);let a=!1;const s=d(n);s.then(()=>a=!0);const u=()=>o.fetchInfo(i,e,r).then(e=>(s.cancel(),e)).catch(e=>d(1e3).then(e=>a?Promise.reject(new Error("Tx wait stopped: timeout")):u()));return u()}))}t.currentHeight=e=>s(void 0,void 0,void 0,(function*(){return u.fetchHeight(e).then(({height:e})=>e)})),t.waitForHeight=g,t.waitForTx=v;t.waitForTxWithNConfirmations=function(e,t,r,n){return s(this,void 0,void 0,(function*(){const{timeout:i}=Object.assign(Object.assign({},y),r);let a=!1;d(i).then(()=>a=!0);let s=yield v(e,r,n),o=s.height,u=s.height;for(;o+t>u;){if(a)throw new Error("Tx wait stopped: timeout");yield g(o+t,r),s=yield v(e,r,n),o=s.height}return s}))},t.waitNBlocks=function(e,r=y,n){return s(this,void 0,void 0,(function*(){const{apiBase:n}=Object.assign(Object.assign({},y),r),i=(yield t.currentHeight(n))+e;return yield g(i,r)}))},t.transactionById=function(e,t,r){return s(this,void 0,void 0,(function*(){return o.fetchInfo(t,e,r)}))},t.balance=function(e,t,r){return s(this,void 0,void 0,(function*(){return c.fetchBalance(t,e,r).then(e=>+e.balance)}))},t.balanceDetails=function(e,t,r){return s(this,void 0,void 0,(function*(){return c.fetchBalanceDetails(t,e,r)}))},t.assetBalance=function(e,t,r,n){return s(this,void 0,void 0,(function*(){return l.fetchAssetsBalance(r,t,n).then(t=>t.balances.filter(t=>t.assetId===e)).then(e=>{var t;return null===(t=e[0])||void 0===t?void 0:t.balance})}))},t.accountData=function(e,t,r){return s(this,void 0,void 0,(function*(){let n,i;"string"==typeof e?(n=e,i=void 0):(n=e.address,i=e.match&&encodeURIComponent("string"==typeof e.match?e.match:e.match.source));return(yield c.data(t,n,{matches:i},r)).reduce((e,t)=>Object.assign(Object.assign({},e),{[t.key]:t}),{})}))},t.accountDataByKey=function(e,t,r,n){return s(this,void 0,void 0,(function*(){return c.fetchDataKey(r,t,e,n).catch(e=>{if(304===e.error)return null;throw e})}))},t.scriptInfo=function(e,t,r){return s(this,void 0,void 0,(function*(){return c.fetchScriptInfo(t,e,r)}))},t.scriptMeta=function(e,t){return s(this,void 0,void 0,(function*(){return c.fetchScriptInfoMeta(t,e)}))},t.rewards=function(...e){return s(this,void 0,void 0,(function*(){let t,r=void 0;return void 0!==e[1]?(t=e[1],r=e[0]):t=e[0],f.fetchRewards(t,r)}))},t.stateChanges=function(e,t,r){return s(this,void 0,void 0,(function*(){return p.fetchStateChangesByTxId(t,e,r).then(e=>e.stateChanges)}))},t.broadcast=function(e,t,r){return o.broadcast(t,e,r)}},function(e,t,r){"use strict";var n=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.fetchHeightByTimestamp=t.fetchHeight=t.fetchDelay=t.fetchLast=t.fetchBlocksByAddress=t.fetchFirst=t.fetchBlockById=t.fetchSeq=t.fetchBlockAt=t.fetchHeadersById=t.fetchHeadersAt=t.fetchHeightById=t.fetchHeadersLast=t.fetchHeadersSeq=void 0;var i=n(r(15));t.fetchHeadersSeq=function(e,t,r,n){return void 0===n&&(n=Object.create(null)),i.default({base:e,url:"/blocks/headers/seq/"+t+"/"+r,options:n})},t.fetchHeadersLast=function(e,t){return void 0===t&&(t=Object.create(null)),i.default({base:e,url:"/blocks/headers/last",options:t})},t.fetchHeightById=function(e,t){return i.default({base:e,url:"/blocks/height/"+t})},t.fetchHeadersAt=function(e,t,r){return void 0===r&&(r=Object.create(null)),i.default({base:e,url:"/blocks/headers/at/"+t,options:r})},t.fetchHeadersById=function(e,t,r){return void 0===r&&(r=Object.create(null)),i.default({base:e,url:"/blocks/headers/"+t,options:r})},t.fetchBlockAt=function(e,t,r){return void 0===r&&(r=Object.create(null)),i.default({base:e,url:"/blocks/at/"+t,options:r})},t.fetchSeq=function(e,t,r,n){return void 0===n&&(n=Object.create(null)),i.default({base:e,url:"/blocks/seq/"+t+"/"+r,options:n})},t.fetchBlockById=function(e,t,r){return void 0===r&&(r=Object.create(null)),i.default({base:e,url:"/blocks/"+t,options:r})},t.fetchFirst=function(e,t){return void 0===t&&(t=Object.create(null)),i.default({base:e,url:"/blocks/first",options:t})},t.fetchBlocksByAddress=function(e,t,r,n,a){return void 0===a&&(a=Object.create(null)),i.default({base:e,url:"/blocks/address/"+t+"/"+r+"/"+n,options:a})},t.fetchLast=function(e,t){return void 0===t&&(t=Object.create(null)),i.default({base:e,url:"/blocks/last",options:t})},t.fetchDelay=function(e,t,r){return i.default({base:e,url:"/blocks/delay/"+t+"/"+r})},t.fetchHeight=function(e){return i.default({base:e,url:"/blocks/height"})},t.fetchHeightByTimestamp=function(e,t,r){return void 0===r&&(r=Object.create(null)),i.default({base:e,url:"/blocks/heightByTimestamp/"+t,options:r})}},function(e,t,r){"use strict";function n(e){if("object"==typeof e&&null!==e){if("function"==typeof Object.getPrototypeOf){var t=Object.getPrototypeOf(e);return t===Object.prototype||null===t}return"[object Object]"===Object.prototype.toString.call(e)}return!1}Object.defineProperty(t,"__esModule",{value:!0}),t.pipe=t.switchTransactionByType=t.uniq=t.indexBy=t.filter=t.map=t.deepAssign=t.assign=t.values=t.entries=t.keys=t.prop=t.wait=t.head=t.toArray=t.isObject=void 0,t.isObject=n,t.toArray=function(e){return Array.isArray(e)?e:[e]},t.head=function(e){return e[0]},t.wait=function(e){return new Promise((function(t){setTimeout(t,e)}))},t.prop=function(e){return function(t){return t[e]}},t.keys=function(e){return Object.keys(e)},t.entries=function(e){return t.keys(e).map((function(t){return[t,e[t]]}))},t.values=function(e){return t.keys(e).map((function(t){return e[t]}))},t.assign=function(e,r){return t.entries(r).reduce((function(t,r){var n=r[0],i=r[1];return e[n]=i,e}),e)},t.deepAssign=function(){for(var e=[],r=0;r<arguments.length;r++)e[r]=arguments[r];return e.reduce((function(e,r){return t.keys(r).forEach((function(i){Array.isArray(e[i])&&Array.isArray(r[i])?e[i]=Array.from(new Set(e[i].concat(r[i]))):n(e[i])&&n(r[i])?e[i]=t.deepAssign(e[i],r[i]):e[i]=r[i]})),e}),e[0]||{})},t.map=function(e){return function(t){return t.map(e)}},t.filter=function(e){return function(t){return t.filter(e)}},t.indexBy=function(e,t){return t.reduce((function(t,r){return t[e(r)]=r,t}),{})},t.uniq=function(e){return t.keys(e.reduce((function(e,t){return null!=t&&(e[t]=t),e}),Object.create(null)))},t.switchTransactionByType=function(e){return function(t){return e[t.type]&&"function"==typeof e[t.type]?e[t.type](t):void 0}},t.pipe=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];return function(t){return e.reduce((function(e,t){return t(e)}),t)}}},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.ProviderSeed=void 0;var n=r(88);t.ProviderSeed=n.ProviderSeed,t.default=n.ProviderSeed},function(e,t,r){"use strict";var n=this&&this.__assign||function(){return(n=Object.assign||function(e){for(var t,r=1,n=arguments.length;r<n;r++)for(var i in t=arguments[r])Object.prototype.hasOwnProperty.call(t,i)&&(e[i]=t[i]);return e}).apply(this,arguments)},i=this&&this.__awaiter||function(e,t,r,n){return new(r||(r=Promise))((function(i,a){function s(e){try{u(n.next(e))}catch(e){a(e)}}function o(e){try{u(n.throw(e))}catch(e){a(e)}}function u(e){var t;e.done?i(e.value):(t=e.value,t instanceof r?t:new r((function(e){e(t)}))).then(s,o)}u((n=n.apply(e,t||[])).next())}))},a=this&&this.__generator||function(e,t){var r,n,i,a,s={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]};return a={next:o(0),throw:o(1),return:o(2)},"function"==typeof Symbol&&(a[Symbol.iterator]=function(){return this}),a;function o(a){return function(o){return function(a){if(r)throw new TypeError("Generator is already executing.");for(;s;)try{if(r=1,n&&(i=2&a[0]?n.return:a[0]?n.throw||((i=n.return)&&i.call(n),0):n.next)&&!(i=i.call(n,a[1])).done)return i;switch(n=0,i&&(a=[2&a[0],i.value]),a[0]){case 0:case 1:i=a;break;case 4:return s.label++,{value:a[1],done:!1};case 5:s.label++,n=a[1],a=[0];continue;case 7:a=s.ops.pop(),s.trys.pop();continue;default:if(!(i=s.trys,(i=i.length>0&&i[i.length-1])||6!==a[0]&&2!==a[0])){s=0;continue}if(3===a[0]&&(!i||a[1]>i[0]&&a[1]<i[3])){s.label=a[1];break}if(6===a[0]&&s.label<i[1]){s.label=i[1],i=a;break}if(i&&s.label<i[2]){s.label=i[2],s.ops.push(a);break}i[2]&&s.ops.pop(),s.trys.pop();continue}a=t.call(e,s)}catch(e){a=[6,e],n=0}finally{r=i=0}if(5&a[0])throw a[1];return{value:a[0]?a[1]:void 0,done:!0}}([a,o])}}};Object.defineProperty(t,"__esModule",{value:!0}),t.ProviderSeed=void 0;var s=r(89),o=function(){function e(e){this._options={NETWORK_BYTE:"W".charCodeAt(0),NODE_URL:"https://nodes.wavesplatform.com"},this.user=null,e&&("string"==typeof e?this._seed=e:"function"==typeof e&&(this._seedMaker=e))}return e.prototype.connect=function(e){return this._options=e,Promise.resolve()},e.prototype.sign=function(e){return i(this,void 0,void 0,(function(){var t,r=this;return a(this,(function(i){switch(i.label){case 0:return[4,this.getSeed()];case 1:return t=i.sent(),[2,Promise.resolve(e.map((function(e){return s.signTx(n({chainId:r._options.NETWORK_BYTE},e),t)})))]}}))}))},e.prototype.login=function(){return i(this,void 0,void 0,(function(){var e;return a(this,(function(t){switch(t.label){case 0:return[4,this.getSeed()];case 1:return e=t.sent(),this.user={address:s.libs.crypto.address(e,this._options.NETWORK_BYTE),publicKey:s.libs.crypto.publicKey(e)},[2,Promise.resolve(this.user)]}}))}))},e.prototype.logout=function(){return Promise.resolve()},e.prototype.signTypedData=function(e){return Promise.resolve("// TODO")},e.prototype.signMessage=function(e){return Promise.resolve("// TODO")},e.prototype.on=function(e,t){return console.error("Not implemented"),this},e.prototype.once=function(e,t){return console.error("Not implemented"),this},e.prototype.off=function(e,t){return console.error("Not implemented"),this},e.prototype.getSeed=function(){return i(this,void 0,void 0,(function(){var e;return a(this,(function(t){switch(t.label){case 0:return this._seed?[3,3]:this._seedMaker?(e=this,[4,this._seedMaker()]):[3,2];case 1:return e._seed=t.sent(),[3,3];case 2:this._seed=s.libs.crypto.randomSeed(),t.label=3;case 3:return[2,this._seed]}}))}))},e}();t.ProviderSeed=o},function(e,t,r){"use strict";var n=this&&this.__createBinding||(Object.create?function(e,t,r,n){void 0===n&&(n=r),Object.defineProperty(e,n,{enumerable:!0,get:function(){return t[r]}})}:function(e,t,r,n){void 0===n&&(n=r),e[n]=t[r]}),i=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),a=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var r in e)"default"!==r&&Object.hasOwnProperty.call(e,r)&&n(t,e,r);return i(t,e),t};Object.defineProperty(t,"__esModule",{value:!0}),t.protoPerialize=t.validators=t.nodeInteraction=t.seedUtils=t.libs=void 0;var s=r(30);Object.defineProperty(t,"massTransfer",{enumerable:!0,get:function(){return s.massTransfer}});var o=r(42);Object.defineProperty(t,"reissue",{enumerable:!0,get:function(){return o.reissue}});var u=r(43);Object.defineProperty(t,"burn",{enumerable:!0,get:function(){return u.burn}});var c=r(44);Object.defineProperty(t,"exchange",{enumerable:!0,get:function(){return c.exchange}});var l=r(45);Object.defineProperty(t,"lease",{enumerable:!0,get:function(){return l.lease}});var f=r(46);Object.defineProperty(t,"cancelLease",{enumerable:!0,get:function(){return f.cancelLease}});var p=r(47);Object.defineProperty(t,"data",{enumerable:!0,get:function(){return p.data}});var d=r(48);Object.defineProperty(t,"issue",{enumerable:!0,get:function(){return d.issue}});var h=r(49);Object.defineProperty(t,"transfer",{enumerable:!0,get:function(){return h.transfer}});var y=r(50);Object.defineProperty(t,"alias",{enumerable:!0,get:function(){return y.alias}});var g=r(51);Object.defineProperty(t,"setScript",{enumerable:!0,get:function(){return g.setScript}});var v=r(52);Object.defineProperty(t,"setAssetScript",{enumerable:!0,get:function(){return v.setAssetScript}});var m=r(53);Object.defineProperty(t,"sponsorship",{enumerable:!0,get:function(){return m.sponsorship}});var b=r(155);Object.defineProperty(t,"order",{enumerable:!0,get:function(){return b.order}});var E=r(156);Object.defineProperty(t,"cancelOrder",{enumerable:!0,get:function(){return E.cancelOrder}});var S=r(79);Object.defineProperty(t,"customData",{enumerable:!0,get:function(){return S.customData}}),Object.defineProperty(t,"serializeCustomData",{enumerable:!0,get:function(){return S.serializeCustomData}});var T=r(80);Object.defineProperty(t,"auth",{enumerable:!0,get:function(){return T.auth}});var A=r(81);Object.defineProperty(t,"wavesAuth",{enumerable:!0,get:function(){return A.wavesAuth}});var w=r(54);Object.defineProperty(t,"invokeScript",{enumerable:!0,get:function(){return w.invokeScript}});var I=r(55);Object.defineProperty(t,"updateAssetInfo",{enumerable:!0,get:function(){return I.updateAssetInfo}});var C=r(157);Object.defineProperty(t,"signTx",{enumerable:!0,get:function(){return C.signTx}}),Object.defineProperty(t,"verify",{enumerable:!0,get:function(){return C.verify}}),Object.defineProperty(t,"serialize",{enumerable:!0,get:function(){return C.serialize}}),Object.defineProperty(t,"submitOrder",{enumerable:!0,get:function(){return C.submitOrder}}),Object.defineProperty(t,"cancelSubmittedOrder",{enumerable:!0,get:function(){return C.cancelSubmittedOrder}}),Object.defineProperty(t,"verifyAuthData",{enumerable:!0,get:function(){return C.verifyAuthData}}),Object.defineProperty(t,"verifyCustomData",{enumerable:!0,get:function(){return C.verifyCustomData}}),Object.defineProperty(t,"verifyWavesAuthData",{enumerable:!0,get:function(){return C.verifyWavesAuthData}});var B=r(84);Object.defineProperty(t,"waitForTx",{enumerable:!0,get:function(){return B.waitForTx}}),Object.defineProperty(t,"broadcast",{enumerable:!0,get:function(){return B.broadcast}});var k=r(171);Object.defineProperty(t,"makeTx",{enumerable:!0,get:function(){return k.makeTx}}),Object.defineProperty(t,"makeTxBytes",{enumerable:!0,get:function(){return k.makeTxBytes}});var P=r(83);Object.defineProperty(t,"invokeExpression",{enumerable:!0,get:function(){return P.invokeExpression}});const O={crypto:a(r(2)),marshall:a(r(4))};t.libs=O;const N=a(r(172));t.seedUtils=N;const _=a(r(84));t.nodeInteraction=_;const R=a(r(6));t.validators=R;const L=a(r(8));t.protoPerialize=L},function(e,t){
/*! ieee754. BSD-3-Clause License. Feross Aboukhadijeh <https://feross.org/opensource> */
t.read=function(e,t,r,n,i){var a,s,o=8*i-n-1,u=(1<<o)-1,c=u>>1,l=-7,f=r?i-1:0,p=r?-1:1,d=e[t+f];for(f+=p,a=d&(1<<-l)-1,d>>=-l,l+=o;l>0;a=256*a+e[t+f],f+=p,l-=8);for(s=a&(1<<-l)-1,a>>=-l,l+=n;l>0;s=256*s+e[t+f],f+=p,l-=8);if(0===a)a=1-c;else{if(a===u)return s?NaN:1/0*(d?-1:1);s+=Math.pow(2,n),a-=c}return(d?-1:1)*s*Math.pow(2,a-n)},t.write=function(e,t,r,n,i,a){var s,o,u,c=8*a-i-1,l=(1<<c)-1,f=l>>1,p=23===i?Math.pow(2,-24)-Math.pow(2,-77):0,d=n?0:a-1,h=n?1:-1,y=t<0||0===t&&1/t<0?1:0;for(t=Math.abs(t),isNaN(t)||t===1/0?(o=isNaN(t)?1:0,s=l):(s=Math.floor(Math.log(t)/Math.LN2),t*(u=Math.pow(2,-s))<1&&(s--,u*=2),(t+=s+f>=1?p/u:p*Math.pow(2,1-f))*u>=2&&(s++,u/=2),s+f>=l?(o=0,s=l):s+f>=1?(o=(t*u-1)*Math.pow(2,i),s+=f):(o=t*Math.pow(2,f-1)*Math.pow(2,i),s=0));i>=8;e[r+d]=255&o,d+=h,o/=256,i-=8);for(s=s<<i|o,c+=i;c>0;e[r+d]=255&s,d+=h,s/=256,c-=8);e[r+d-h]|=128*y}},function(e,t){var r={}.toString;e.exports=Array.isArray||function(e){return"[object Array]"==r.call(e)}},function(e,t,r){(function(e){var n=void 0!==e&&e||"undefined"!=typeof self&&self||window,i=Function.prototype.apply;function a(e,t){this._id=e,this._clearFn=t}t.setTimeout=function(){return new a(i.call(setTimeout,n,arguments),clearTimeout)},t.setInterval=function(){return new a(i.call(setInterval,n,arguments),clearInterval)},t.clearTimeout=t.clearInterval=function(e){e&&e.close()},a.prototype.unref=a.prototype.ref=function(){},a.prototype.close=function(){this._clearFn.call(n,this._id)},t.enroll=function(e,t){clearTimeout(e._idleTimeoutId),e._idleTimeout=t},t.unenroll=function(e){clearTimeout(e._idleTimeoutId),e._idleTimeout=-1},t._unrefActive=t.active=function(e){clearTimeout(e._idleTimeoutId);var t=e._idleTimeout;t>=0&&(e._idleTimeoutId=setTimeout((function(){e._onTimeout&&e._onTimeout()}),t))},r(93),t.setImmediate="undefined"!=typeof self&&self.setImmediate||void 0!==e&&e.setImmediate||this&&this.setImmediate,t.clearImmediate="undefined"!=typeof self&&self.clearImmediate||void 0!==e&&e.clearImmediate||this&&this.clearImmediate}).call(this,r(17))},function(e,t,r){(function(e,t){!function(e,r){"use strict";if(!e.setImmediate){var n,i,a,s,o,u=1,c={},l=!1,f=e.document,p=Object.getPrototypeOf&&Object.getPrototypeOf(e);p=p&&p.setTimeout?p:e,"[object process]"==={}.toString.call(e.process)?n=function(e){t.nextTick((function(){h(e)}))}:!function(){if(e.postMessage&&!e.importScripts){var t=!0,r=e.onmessage;return e.onmessage=function(){t=!1},e.postMessage("","*"),e.onmessage=r,t}}()?e.MessageChannel?((a=new MessageChannel).port1.onmessage=function(e){h(e.data)},n=function(e){a.port2.postMessage(e)}):f&&"onreadystatechange"in f.createElement("script")?(i=f.documentElement,n=function(e){var t=f.createElement("script");t.onreadystatechange=function(){h(e),t.onreadystatechange=null,i.removeChild(t),t=null},i.appendChild(t)}):n=function(e){setTimeout(h,0,e)}:(s="setImmediate$"+Math.random()+"$",o=function(t){t.source===e&&"string"==typeof t.data&&0===t.data.indexOf(s)&&h(+t.data.slice(s.length))},e.addEventListener?e.addEventListener("message",o,!1):e.attachEvent("onmessage",o),n=function(t){e.postMessage(s+t,"*")}),p.setImmediate=function(e){"function"!=typeof e&&(e=new Function(""+e));for(var t=new Array(arguments.length-1),r=0;r<t.length;r++)t[r]=arguments[r+1];var i={callback:e,args:t};return c[u]=i,n(u),u++},p.clearImmediate=d}function d(e){delete c[e]}function h(e){if(l)setTimeout(h,0,e);else{var t=c[e];if(t){l=!0;try{!function(e){var t=e.callback,r=e.args;switch(r.length){case 0:t();break;case 1:t(r[0]);break;case 2:t(r[0],r[1]);break;case 3:t(r[0],r[1],r[2]);break;default:t.apply(void 0,r)}}(t)}finally{d(e),l=!1}}}}}("undefined"==typeof self?void 0===e?this:e:self)}).call(this,r(17),r(25))},function(e,t,r){(function(t){var r={};e.exports=r;var n={};r.encode=function(e,t,r){if("string"!=typeof t)throw new TypeError('"alphabet" must be a string.');if(void 0!==r&&"number"!=typeof r)throw new TypeError('"maxline" must be a number.');var n="";if(e instanceof Uint8Array){var i=0,a=t.length,s=t.charAt(0),o=[0];for(i=0;i<e.length;++i){for(var u=0,c=e[i];u<o.length;++u)c+=o[u]<<8,o[u]=c%a,c=c/a|0;for(;c>0;)o.push(c%a),c=c/a|0}for(i=0;0===e[i]&&i<e.length-1;++i)n+=s;for(i=o.length-1;i>=0;--i)n+=t[o[i]]}else n=function(e,t){var r=0,n=t.length,i=t.charAt(0),a=[0];for(r=0;r<e.length();++r){for(var s=0,o=e.at(r);s<a.length;++s)o+=a[s]<<8,a[s]=o%n,o=o/n|0;for(;o>0;)a.push(o%n),o=o/n|0}var u="";for(r=0;0===e.at(r)&&r<e.length()-1;++r)u+=i;for(r=a.length-1;r>=0;--r)u+=t[a[r]];return u}(e,t);if(r){var l=new RegExp(".{1,"+r+"}","g");n=n.match(l).join("\r\n")}return n},r.decode=function(e,r){if("string"!=typeof e)throw new TypeError('"input" must be a string.');if("string"!=typeof r)throw new TypeError('"alphabet" must be a string.');var i=n[r];if(!i){i=n[r]=[];for(var a=0;a<r.length;++a)i[r.charCodeAt(a)]=a}e=e.replace(/\s/g,"");var s=r.length,o=r.charAt(0),u=[0];for(a=0;a<e.length;a++){var c=i[e.charCodeAt(a)];if(void 0===c)return;for(var l=0,f=c;l<u.length;++l)f+=u[l]*s,u[l]=255&f,f>>=8;for(;f>0;)u.push(255&f),f>>=8}for(var p=0;e[p]===o&&p<e.length-1;++p)u.push(0);return void 0!==t?t.from(u.reverse()):new Uint8Array(u.reverse())}}).call(this,r(16).Buffer)},function(e,t,r){(function(t){var n=r(1);r(3);var i=null;!n.util.isNodejs||n.options.usePureJavaScript||t.versions["node-webkit"]||(i=r(34)),(e.exports=n.prng=n.prng||{}).create=function(e){for(var t={plugin:e,key:null,seed:null,time:null,reseeds:0,generated:0,keyBytes:""},r=e.md,a=new Array(32),s=0;s<32;++s)a[s]=r.create();function o(){if(t.pools[0].messageLength>=32)return u();var e=32-t.pools[0].messageLength<<5;t.collect(t.seedFileSync(e)),u()}function u(){t.reseeds=4294967295===t.reseeds?0:t.reseeds+1;var e=t.plugin.md.create();e.update(t.keyBytes);for(var r=1,n=0;n<32;++n)t.reseeds%r==0&&(e.update(t.pools[n].digest().getBytes()),t.pools[n].start()),r<<=1;t.keyBytes=e.digest().getBytes(),e.start(),e.update(t.keyBytes);var i=e.digest().getBytes();t.key=t.plugin.formatKey(t.keyBytes),t.seed=t.plugin.formatSeed(i),t.generated=0}function c(e){var t=null,r=n.util.globalScope,i=r.crypto||r.msCrypto;i&&i.getRandomValues&&(t=function(e){return i.getRandomValues(e)});var a=n.util.createBuffer();if(t)for(;a.length()<e;){var s=Math.max(1,Math.min(e-a.length(),65536)/4),o=new Uint32Array(Math.floor(s));try{t(o);for(var u=0;u<o.length;++u)a.putInt32(o[u])}catch(e){if(!("undefined"!=typeof QuotaExceededError&&e instanceof QuotaExceededError))throw e}}if(a.length()<e)for(var c,l,f,p=Math.floor(65536*Math.random());a.length()<e;){l=16807*(65535&p),l+=(32767&(c=16807*(p>>16)))<<16,p=4294967295&(l=(2147483647&(l+=c>>15))+(l>>31));for(u=0;u<3;++u)f=p>>>(u<<3),f^=Math.floor(256*Math.random()),a.putByte(String.fromCharCode(255&f))}return a.getBytes(e)}return t.pools=a,t.pool=0,t.generate=function(e,r){if(!r)return t.generateSync(e);var i=t.plugin.cipher,a=t.plugin.increment,s=t.plugin.formatKey,o=t.plugin.formatSeed,c=n.util.createBuffer();t.key=null,function l(f){if(f)return r(f);if(c.length()>=e)return r(null,c.getBytes(e));t.generated>1048575&&(t.key=null);if(null===t.key)return n.util.nextTick((function(){!function(e){if(t.pools[0].messageLength>=32)return u(),e();var r=32-t.pools[0].messageLength<<5;t.seedFile(r,(function(r,n){if(r)return e(r);t.collect(n),u(),e()}))}(l)}));var p=i(t.key,t.seed);t.generated+=p.length,c.putBytes(p),t.key=s(i(t.key,a(t.seed))),t.seed=o(i(t.key,t.seed)),n.util.setImmediate(l)}()},t.generateSync=function(e){var r=t.plugin.cipher,i=t.plugin.increment,a=t.plugin.formatKey,s=t.plugin.formatSeed;t.key=null;for(var u=n.util.createBuffer();u.length()<e;){t.generated>1048575&&(t.key=null),null===t.key&&o();var c=r(t.key,t.seed);t.generated+=c.length,u.putBytes(c),t.key=a(r(t.key,i(t.seed))),t.seed=s(r(t.key,t.seed))}return u.getBytes(e)},i?(t.seedFile=function(e,t){i.randomBytes(e,(function(e,r){if(e)return t(e);t(null,r.toString())}))},t.seedFileSync=function(e){return i.randomBytes(e).toString()}):(t.seedFile=function(e,t){try{t(null,c(e))}catch(e){t(e)}},t.seedFileSync=c),t.collect=function(e){for(var r=e.length,n=0;n<r;++n)t.pools[t.pool].update(e.substr(n,1)),t.pool=31===t.pool?0:t.pool+1},t.collectInt=function(e,r){for(var n="",i=0;i<r;i+=8)n+=String.fromCharCode(e>>i&255);t.collect(n)},t.registerWorker=function(e){if(e===self)t.seedFile=function(e,t){self.addEventListener("message",(function e(r){var n=r.data;n.forge&&n.forge.prng&&(self.removeEventListener("message",e),t(n.forge.prng.err,n.forge.prng.bytes))})),self.postMessage({forge:{prng:{needed:e}}})};else{e.addEventListener("message",(function(r){var n=r.data;n.forge&&n.forge.prng&&t.seedFile(n.forge.prng.needed,(function(t,r){e.postMessage({forge:{prng:{err:t,bytes:r}}})}))}))}},t}}).call(this,r(25))},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n="123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz",i=n.split("").reduce((function(e,t,r){return e[t]=r,e}),{});t.default={encode:function(e){if(!e.length)return"";for(var t=[0],r=0;r<e.length;r++){for(var i=0;i<t.length;i++)t[i]<<=8;t[0]+=e[r];for(var a=0,s=0;s<t.length;s++)t[s]+=a,a=t[s]/58|0,t[s]%=58;for(;a;)t.push(a%58),a=a/58|0}for(r=0;0===e[r]&&r<e.length-1;r++)t.push(0);return t.reverse().map((function(e){return n[e]})).join("")},decode:function(e){if(!e.length)return new Uint8Array(0);for(var t=[0],r=0;r<e.length;r++){var n=e[r];if(!(n in i))throw'There is no character "'+n+'" in the Base58 sequence!';for(var a=0;a<t.length;a++)t[a]*=58;t[0]+=i[n];var s=0;for(a=0;a<t.length;a++)t[a]+=s,s=t[a]>>8,t[a]&=255;for(;s;)t.push(255&s),s>>=8}for(r=0;"1"===e[r]&&r<e.length-1;r++)t.push(0);return new Uint8Array(t.reverse())}}},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n,i,a;t.utf8ArrayToStr=(n=new Array(128),i=String.fromCodePoint||String.fromCharCode,a=[],function(e){var t,r,s=e.length;a.length=0;for(var o=0;o<s;)(r=e[o++])<=127?t=r:r<=223?t=(31&r)<<6|63&e[o++]:r<=239?t=(15&r)<<12|(63&e[o++])<<6|63&e[o++]:String.fromCodePoint?t=(7&r)<<18|(63&e[o++])<<12|(63&e[o++])<<6|63&e[o++]:(t=63,o+=3),a.push(n[t]||(n[t]=i(t)));return a.join("")}),t.strToUtf8Array=function(e){for(var t=[],r=0;r<e.length;r++){var n=e.charCodeAt(r);n<128?t.push(n):n<2048?t.push(192|n>>6,128|63&n):n<55296||n>=57344?t.push(224|n>>12,128|n>>6&63,128|63&n):(r++,n=65536+((1023&n)<<10|1023&e.charCodeAt(r)),t.push(240|n>>18,128|n>>12&63,128|n>>6&63,128|63&n))}return Uint8Array.from(t)}},function(e,t,r){"use strict";
/**
 * [js-sha3]{@link https://github.com/emn178/js-sha3}
 *
 * @version 0.5.7
 * @author Chen, Yi-Cyuan [emn178@gmail.com]
 * @copyright Chen, Yi-Cyuan 2015-2016
 * @license MIT
 */t.__esModule=!0;for(var n="0123456789abcdef".split(""),i=[0,8,16,24],a=[1,0,32898,0,32906,2147483648,2147516416,2147483648,32907,0,2147483649,0,2147516545,2147483648,32777,2147483648,138,0,136,0,2147516425,0,2147483658,0,2147516555,0,139,2147483648,32905,2147483648,32771,2147483648,32770,2147483648,128,2147483648,32778,0,2147483658,2147483648,2147516545,2147483648,32896,2147483648,2147483649,0,2147516424,2147483648],s=[224,256,384,512],o=["hex","buffer","arrayBuffer","array"],u=function(e,t,r){return function(n){return new b(e,t,e).update(n)[r]()}},c=function(e,t,r){return function(n,i){return new b(e,t,i).update(n)[r]()}},l=function(e,t){var r=u(e,t,"hex");r.create=function(){return new b(e,t,e)},r.update=function(e){return r.create().update(e)};for(var n=0;n<o.length;++n){var i=o[n];r[i]=u(e,t,i)}return r},f=[{name:"keccak",padding:[1,256,65536,16777216],bits:s,createMethod:l},{name:"sha3",padding:[6,1536,393216,100663296],bits:s,createMethod:l},{name:"shake",padding:[31,7936,2031616,520093696],bits:[128,256],createMethod:function(e,t){var r=c(e,t,"hex");r.create=function(r){return new b(e,t,r)},r.update=function(e,t){return r.create(t).update(e)};for(var n=0;n<o.length;++n){var i=o[n];r[i]=c(e,t,i)}return r}}],p={},d=[],h=0;h<f.length;++h)for(var y=f[h],g=y.bits,v=0;v<g.length;++v){var m=y.name+"_"+g[v];d.push(m),p[m]=y.createMethod(g[v],y.padding)}function b(e,t,r){this.blocks=[],this.s=[],this.padding=t,this.outputBits=r,this.reset=!0,this.block=0,this.start=0,this.blockCount=1600-(e<<1)>>5,this.byteCount=this.blockCount<<2,this.outputBlocks=r>>5,this.extraBytes=(31&r)>>3;for(var n=0;n<50;++n)this.s[n]=0}b.prototype.update=function(e){var t="string"!=typeof e;t&&e.constructor===ArrayBuffer&&(e=new Uint8Array(e));for(var r,n,a=e.length,s=this.blocks,o=this.byteCount,u=this.blockCount,c=0,l=this.s;c<a;){if(this.reset)for(this.reset=!1,s[0]=this.block,r=1;r<u+1;++r)s[r]=0;if(t)for(r=this.start;c<a&&r<o;++c)s[r>>2]|=e[c]<<i[3&r++];else for(r=this.start;c<a&&r<o;++c)(n=e.charCodeAt(c))<128?s[r>>2]|=n<<i[3&r++]:n<2048?(s[r>>2]|=(192|n>>6)<<i[3&r++],s[r>>2]|=(128|63&n)<<i[3&r++]):n<55296||n>=57344?(s[r>>2]|=(224|n>>12)<<i[3&r++],s[r>>2]|=(128|n>>6&63)<<i[3&r++],s[r>>2]|=(128|63&n)<<i[3&r++]):(n=65536+((1023&n)<<10|1023&e.charCodeAt(++c)),s[r>>2]|=(240|n>>18)<<i[3&r++],s[r>>2]|=(128|n>>12&63)<<i[3&r++],s[r>>2]|=(128|n>>6&63)<<i[3&r++],s[r>>2]|=(128|63&n)<<i[3&r++]);if(this.lastByteIndex=r,r>=o){for(this.start=r-o,this.block=s[u],r=0;r<u;++r)l[r]^=s[r];E(l),this.reset=!0}else this.start=r}return this},b.prototype.finalize=function(){var e=this.blocks,t=this.lastByteIndex,r=this.blockCount,n=this.s;if(e[t>>2]|=this.padding[3&t],this.lastByteIndex===this.byteCount)for(e[0]=e[r],t=1;t<r+1;++t)e[t]=0;for(e[r-1]|=2147483648,t=0;t<r;++t)n[t]^=e[t];E(n)},b.prototype.toString=b.prototype.hex=function(){this.finalize();for(var e,t=this.blockCount,r=this.s,i=this.outputBlocks,a=this.extraBytes,s=0,o=0,u="";o<i;){for(s=0;s<t&&o<i;++s,++o)e=r[s],u+=n[e>>4&15]+n[15&e]+n[e>>12&15]+n[e>>8&15]+n[e>>20&15]+n[e>>16&15]+n[e>>28&15]+n[e>>24&15];o%t==0&&(E(r),s=0)}return a&&(e=r[s],a>0&&(u+=n[e>>4&15]+n[15&e]),a>1&&(u+=n[e>>12&15]+n[e>>8&15]),a>2&&(u+=n[e>>20&15]+n[e>>16&15])),u},b.prototype.arrayBuffer=function(){this.finalize();var e,t=this.blockCount,r=this.s,n=this.outputBlocks,i=this.extraBytes,a=0,s=0,o=this.outputBits>>3;e=i?new ArrayBuffer(n+1<<2):new ArrayBuffer(o);for(var u=new Uint32Array(e);s<n;){for(a=0;a<t&&s<n;++a,++s)u[s]=r[a];s%t==0&&E(r)}return i&&(u[a]=r[a],e=e.slice(0,o)),e},b.prototype.buffer=b.prototype.arrayBuffer,b.prototype.digest=b.prototype.array=function(){this.finalize();for(var e,t,r=this.blockCount,n=this.s,i=this.outputBlocks,a=this.extraBytes,s=0,o=0,u=[];o<i;){for(s=0;s<r&&o<i;++s,++o)e=o<<2,t=n[s],u[e]=255&t,u[e+1]=t>>8&255,u[e+2]=t>>16&255,u[e+3]=t>>24&255;o%r==0&&E(n)}return a&&(e=o<<2,t=n[s],a>0&&(u[e]=255&t),a>1&&(u[e+1]=t>>8&255),a>2&&(u[e+2]=t>>16&255)),u};var E=function(e){var t,r,n,i,s,o,u,c,l,f,p,d,h,y,g,v,m,b,E,S,T,A,w,I,C,B,k,P,O,N,_,R,L,U,D,V,j,x,M,K,F,q,Y,G,z,H,W,Q,X,J,Z,$,ee,te,re,ne,ie,ae,se,oe,ue,ce,le;for(n=0;n<48;n+=2)i=e[0]^e[10]^e[20]^e[30]^e[40],s=e[1]^e[11]^e[21]^e[31]^e[41],o=e[2]^e[12]^e[22]^e[32]^e[42],u=e[3]^e[13]^e[23]^e[33]^e[43],c=e[4]^e[14]^e[24]^e[34]^e[44],l=e[5]^e[15]^e[25]^e[35]^e[45],f=e[6]^e[16]^e[26]^e[36]^e[46],p=e[7]^e[17]^e[27]^e[37]^e[47],t=(d=e[8]^e[18]^e[28]^e[38]^e[48])^(o<<1|u>>>31),r=(h=e[9]^e[19]^e[29]^e[39]^e[49])^(u<<1|o>>>31),e[0]^=t,e[1]^=r,e[10]^=t,e[11]^=r,e[20]^=t,e[21]^=r,e[30]^=t,e[31]^=r,e[40]^=t,e[41]^=r,t=i^(c<<1|l>>>31),r=s^(l<<1|c>>>31),e[2]^=t,e[3]^=r,e[12]^=t,e[13]^=r,e[22]^=t,e[23]^=r,e[32]^=t,e[33]^=r,e[42]^=t,e[43]^=r,t=o^(f<<1|p>>>31),r=u^(p<<1|f>>>31),e[4]^=t,e[5]^=r,e[14]^=t,e[15]^=r,e[24]^=t,e[25]^=r,e[34]^=t,e[35]^=r,e[44]^=t,e[45]^=r,t=c^(d<<1|h>>>31),r=l^(h<<1|d>>>31),e[6]^=t,e[7]^=r,e[16]^=t,e[17]^=r,e[26]^=t,e[27]^=r,e[36]^=t,e[37]^=r,e[46]^=t,e[47]^=r,t=f^(i<<1|s>>>31),r=p^(s<<1|i>>>31),e[8]^=t,e[9]^=r,e[18]^=t,e[19]^=r,e[28]^=t,e[29]^=r,e[38]^=t,e[39]^=r,e[48]^=t,e[49]^=r,y=e[0],g=e[1],H=e[11]<<4|e[10]>>>28,W=e[10]<<4|e[11]>>>28,P=e[20]<<3|e[21]>>>29,O=e[21]<<3|e[20]>>>29,oe=e[31]<<9|e[30]>>>23,ue=e[30]<<9|e[31]>>>23,q=e[40]<<18|e[41]>>>14,Y=e[41]<<18|e[40]>>>14,U=e[2]<<1|e[3]>>>31,D=e[3]<<1|e[2]>>>31,v=e[13]<<12|e[12]>>>20,m=e[12]<<12|e[13]>>>20,Q=e[22]<<10|e[23]>>>22,X=e[23]<<10|e[22]>>>22,N=e[33]<<13|e[32]>>>19,_=e[32]<<13|e[33]>>>19,ce=e[42]<<2|e[43]>>>30,le=e[43]<<2|e[42]>>>30,te=e[5]<<30|e[4]>>>2,re=e[4]<<30|e[5]>>>2,V=e[14]<<6|e[15]>>>26,j=e[15]<<6|e[14]>>>26,b=e[25]<<11|e[24]>>>21,E=e[24]<<11|e[25]>>>21,J=e[34]<<15|e[35]>>>17,Z=e[35]<<15|e[34]>>>17,R=e[45]<<29|e[44]>>>3,L=e[44]<<29|e[45]>>>3,I=e[6]<<28|e[7]>>>4,C=e[7]<<28|e[6]>>>4,ne=e[17]<<23|e[16]>>>9,ie=e[16]<<23|e[17]>>>9,x=e[26]<<25|e[27]>>>7,M=e[27]<<25|e[26]>>>7,S=e[36]<<21|e[37]>>>11,T=e[37]<<21|e[36]>>>11,$=e[47]<<24|e[46]>>>8,ee=e[46]<<24|e[47]>>>8,G=e[8]<<27|e[9]>>>5,z=e[9]<<27|e[8]>>>5,B=e[18]<<20|e[19]>>>12,k=e[19]<<20|e[18]>>>12,ae=e[29]<<7|e[28]>>>25,se=e[28]<<7|e[29]>>>25,K=e[38]<<8|e[39]>>>24,F=e[39]<<8|e[38]>>>24,A=e[48]<<14|e[49]>>>18,w=e[49]<<14|e[48]>>>18,e[0]=y^~v&b,e[1]=g^~m&E,e[10]=I^~B&P,e[11]=C^~k&O,e[20]=U^~V&x,e[21]=D^~j&M,e[30]=G^~H&Q,e[31]=z^~W&X,e[40]=te^~ne&ae,e[41]=re^~ie&se,e[2]=v^~b&S,e[3]=m^~E&T,e[12]=B^~P&N,e[13]=k^~O&_,e[22]=V^~x&K,e[23]=j^~M&F,e[32]=H^~Q&J,e[33]=W^~X&Z,e[42]=ne^~ae&oe,e[43]=ie^~se&ue,e[4]=b^~S&A,e[5]=E^~T&w,e[14]=P^~N&R,e[15]=O^~_&L,e[24]=x^~K&q,e[25]=M^~F&Y,e[34]=Q^~J&$,e[35]=X^~Z&ee,e[44]=ae^~oe&ce,e[45]=se^~ue&le,e[6]=S^~A&y,e[7]=T^~w&g,e[16]=N^~R&I,e[17]=_^~L&C,e[26]=K^~q&U,e[27]=F^~Y&D,e[36]=J^~$&G,e[37]=Z^~ee&z,e[46]=oe^~ce&te,e[47]=ue^~le&re,e[8]=A^~y&v,e[9]=w^~g&m,e[18]=R^~I&B,e[19]=L^~C&k,e[28]=q^~U&V,e[29]=Y^~D&j,e[38]=$^~G&H,e[39]=ee^~z&W,e[48]=ce^~te&ne,e[49]=le^~re&ie,e[0]^=a[n],e[1]^=a[n+1]};t.keccak256=p.keccak_256},function(e,t,r){"use strict";(function(e){t.__esModule=!0;function r(e,t,r){var n=e[t]+e[r],i=e[t+1]+e[r+1];n>=4294967296&&i++,e[t]=n,e[t+1]=i}function n(e,t,r,n){var i=e[t]+r;r<0&&(i+=4294967296);var a=e[t+1]+n;i>=4294967296&&a++,e[t]=i,e[t+1]=a}function i(e,t){return e[t]^e[t+1]<<8^e[t+2]<<16^e[t+3]<<24}function a(e,t,i,a,s,o){var l=c[s],f=c[s+1],p=c[o],d=c[o+1];r(u,e,t),n(u,e,l,f);var h=u[a]^u[e],y=u[a+1]^u[e+1];u[a]=y,u[a+1]=h,r(u,i,a),h=u[t]^u[i],y=u[t+1]^u[i+1],u[t]=h>>>24^y<<8,u[t+1]=y>>>24^h<<8,r(u,e,t),n(u,e,p,d),h=u[a]^u[e],y=u[a+1]^u[e+1],u[a]=h>>>16^y<<16,u[a+1]=y>>>16^h<<16,r(u,i,a),h=u[t]^u[i],y=u[t+1]^u[i+1],u[t]=y>>>31^h<<1,u[t+1]=h>>>31^y<<1}var s=new Uint32Array([4089235720,1779033703,2227873595,3144134277,4271175723,1013904242,1595750129,2773480762,2917565137,1359893119,725511199,2600822924,4215389547,528734635,327033209,1541459225]),o=new Uint8Array([0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,14,10,4,8,9,15,13,6,1,12,0,2,11,7,5,3,11,8,12,0,5,2,15,13,10,14,3,6,7,1,9,4,7,9,3,1,13,12,11,14,2,6,5,10,4,0,15,8,9,0,5,7,2,4,10,15,14,1,11,12,6,8,3,13,2,12,6,10,0,11,8,3,4,13,7,5,15,14,1,9,12,5,1,15,14,13,4,10,0,7,6,3,9,2,8,11,13,11,7,14,12,1,3,9,5,0,15,4,8,6,2,10,6,15,14,9,11,3,0,8,12,2,13,7,1,4,10,5,10,2,8,4,7,6,1,5,15,11,9,14,3,12,13,0,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,14,10,4,8,9,15,13,6,1,12,0,2,11,7,5,3].map((function(e){return 2*e}))),u=new Uint32Array(32),c=new Uint32Array(32);function l(e,t){var r=0;for(r=0;r<16;r++)u[r]=e.h[r],u[r+16]=s[r];for(u[24]=u[24]^e.t,u[25]=u[25]^e.t/4294967296,t&&(u[28]=~u[28],u[29]=~u[29]),r=0;r<32;r++)c[r]=i(e.b,4*r);for(r=0;r<12;r++)a(0,8,16,24,o[16*r+0],o[16*r+1]),a(2,10,18,26,o[16*r+2],o[16*r+3]),a(4,12,20,28,o[16*r+4],o[16*r+5]),a(6,14,22,30,o[16*r+6],o[16*r+7]),a(0,10,20,30,o[16*r+8],o[16*r+9]),a(2,12,22,24,o[16*r+10],o[16*r+11]),a(4,14,16,26,o[16*r+12],o[16*r+13]),a(6,8,18,28,o[16*r+14],o[16*r+15]);for(r=0;r<16;r++)e.h[r]=e.h[r]^u[r]^u[r+16]}function f(e,t){if(0===e||e>64)throw new Error("Illegal output length, expected 0 < length <= 64");if(t&&t.length>64)throw new Error("Illegal key, expected Uint8Array with 0 < length <= 64");for(var r={b:new Uint8Array(128),h:new Uint32Array(16),t:0,c:0,outlen:e},n=0;n<16;n++)r.h[n]=s[n];var i=t?t.length:0;return r.h[0]^=16842752^i<<8^e,t&&(p(r,t),r.c=128),r}function p(e,t){for(var r=0;r<t.length;r++)128===e.c&&(e.t+=e.c,l(e,!1),e.c=0),e.b[e.c++]=t[r]}function d(e){for(e.t+=e.c;e.c<128;)e.b[e.c++]=0;l(e,!0);for(var t=new Uint8Array(e.outlen),r=0;r<e.outlen;r++)t[r]=e.h[r>>2]>>8*(3&r);return t}function h(t,r,n){n=n||64,t=function(t){var r;if(t instanceof Uint8Array)r=t;else if(t instanceof e)r=new Uint8Array(t);else{if("string"!=typeof t)throw new Error("Input must be an string, Buffer or Uint8Array");r=new Uint8Array(e.from(t,"utf8"))}return r}(t);var i=f(n,r);return p(i,t),d(i)}t.blake2bInit=f,t.blake2bUpdate=p,t.blake2bFinal=d,t.blake2b=h,t.blake2bHex=function(e,t,r){var n,i=h(e,t,r);return n=i,Array.prototype.map.call(n,(function(e){return(e<16?"0":"")+e.toString(16)})).join("")}}).call(this,r(16).Buffer)},function(e,t,r){"use strict";var n=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});var i=n(r(27)),a=r(12),s=r(37),o=r(36),u=r(24);t.signBytes=function(e,t,r){return i.default.sign(a._fromIn(s.isPrivateKey(e)?e.privateKey:o.privateKey(e)),a._fromIn(t),a._fromIn(r||u.randomBytes(64)))}},function(e,t,r){"use strict";var n=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});var i=r(22),a=r(64),s=r(12),o=r(18),u=r(36),c=n(r(27));t.verifyAddress=function(e,t){var r=t?t.chainId:void 0;try{var n=s._fromIn(e);if(1!=n[0]||r&&n[1]!=a.ChaidId.toNumber(r))return!1;for(var i=n.slice(0,22),c=n.slice(22,26),l=o._hashChain(i).slice(0,4),f=0;f<4;f++)if(c[f]!=l[f])return!1;if(t&&t.publicKey){var p=u.address({publicKey:t.publicKey},r);if(n.length!==p.length)return!1;for(f=0;f<p.length;f++)if(p[f]!==n[f])return!1}}catch(e){return!1}return!0},t.verifySignature=function(e,t,r){try{return c.default.verify(s._fromIn(e),s._fromIn(t),s._fromIn(r))}catch(e){return!1}},t.verifyPublicKey=function(e){return s._fromIn(e).length===i.PUBLIC_KEY_LENGTH}},function(e,t,r){"use strict";var n=this&&this.__awaiter||function(e,t,r,n){return new(r||(r=Promise))((function(i,a){function s(e){try{u(n.next(e))}catch(e){a(e)}}function o(e){try{u(n.throw(e))}catch(e){a(e)}}function u(e){e.done?i(e.value):new r((function(t){t(e.value)})).then(s,o)}u((n=n.apply(e,t||[])).next())}))},i=this&&this.__generator||function(e,t){var r,n,i,a,s={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]};return a={next:o(0),throw:o(1),return:o(2)},"function"==typeof Symbol&&(a[Symbol.iterator]=function(){return this}),a;function o(a){return function(o){return function(a){if(r)throw new TypeError("Generator is already executing.");for(;s;)try{if(r=1,n&&(i=2&a[0]?n.return:a[0]?n.throw||((i=n.return)&&i.call(n),0):n.next)&&!(i=i.call(n,a[1])).done)return i;switch(n=0,i&&(a=[2&a[0],i.value]),a[0]){case 0:case 1:i=a;break;case 4:return s.label++,{value:a[1],done:!1};case 5:s.label++,n=a[1],a=[0];continue;case 7:a=s.ops.pop(),s.trys.pop();continue;default:if(!(i=s.trys,(i=i.length>0&&i[i.length-1])||6!==a[0]&&2!==a[0])){s=0;continue}if(3===a[0]&&(!i||a[1]>i[0]&&a[1]<i[3])){s.label=a[1];break}if(6===a[0]&&s.label<i[1]){s.label=i[1],i=a;break}if(i&&s.label<i[2]){s.label=i[2],s.ops.push(a);break}i[2]&&s.ops.pop(),s.trys.pop();continue}a=t.call(e,s)}catch(e){a=[6,e],n=0}finally{r=i=0}if(5&a[0])throw a[1];return{value:a[0]?a[1]:void 0,done:!0}}([a,o])}}},a=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var r in e)Object.hasOwnProperty.call(e,r)&&(t[r]=e[r]);return t.default=e,t},s=this;Object.defineProperty(t,"__esModule",{value:!0});var o=a(r(103)),u=a(r(10)),c=a(r(72)),l=a(r(3)),f=r(26),p=r(11),d=a(r(111));o.oids.sha224="2.16.840.1.101.3.4.2.4",o.oids["2.16.840.1.101.3.4.2.4"]="sha224",o.oids["sha3-224"]="2.16.840.1.101.3.4.2.7",o.oids["2.16.840.1.101.3.4.2.7"]="sha3-224",o.oids["sha3-256"]="2.16.840.1.101.3.4.2.8",o.oids["2.16.840.1.101.3.4.2.8"]="sha3-256",o.oids["sha3-384"]="2.16.840.1.101.3.4.2.9",o.oids["2.16.840.1.101.3.4.2.9"]="sha3-384",o.oids["sha3-512"]="2.16.840.1.101.3.4.2.10",o.oids["2.16.840.1.101.3.4.2.10"]="sha3-512",t.pemToBytes=function(e){return f.base64Decode(e.trim().split(/\r\n|\n/).slice(1,-1).join("").trim())};var h={rsaPrivateNonEncrypted:"RSA PRIVATE KEY",rsaPublic:"PUBLIC KEY"};t.bytesToPem=function(e,t){var r="-----BEGIN "+h[t]+"-----\n",n="-----END "+h[t]+"-----\n",i=f.base64Encode(e);i.length%64!=0&&(i+=" ".repeat(64-i.length%64));for(var a=r,s=0;s<i.length/64;s++)a+=i.slice(64*s,64*(s+1))+"\n";return a+=n},t.rsaKeyPairSync=function(e,r){var n=o.rsa.generateKeyPair(e,r);return{rsaPrivate:t.pemToBytes(o.privateKeyToPem(n.privateKey)),rsaPublic:t.pemToBytes(o.publicKeyToPem(n.publicKey))}},t.rsaKeyPair=function(e,r){return n(s,void 0,void 0,(function(){return i(this,(function(n){return[2,new Promise((function(n,i){o.rsa.generateKeyPair(e,r,(function(e,r){e&&i(e),n({rsaPrivate:t.pemToBytes(o.privateKeyToPem(r.privateKey)),rsaPublic:t.pemToBytes(o.publicKeyToPem(r.publicKey))})}))}))]}))}))};var y,g=function(){function e(e,t){this.sha3Digest=e,this.algorithm=t}return e.makeCreator=function(t,r){return{create:function(){return new e(t.create(),r)}}},e.prototype.update=function(e,t){return this.sha3Digest.update(p.stringToBytes(e,null==t?"raw":t)),this},e.prototype.digest=function(){var e=Uint8Array.from(this.sha3Digest.digest());return l.createBuffer(p.bytesToString(e,"raw"))},e}(),v={MD5:c,SHA1:u.algorithms.sha1,SHA224:(y="SHA224",function(){throw new Error("Digest "+y+" is unsupported")}),SHA256:u.algorithms.sha256,SHA384:u.algorithms.sha384,SHA512:u.algorithms.sha512,"SHA3-224":g.makeCreator(d.sha3_224,"sha3-224"),"SHA3-256":g.makeCreator(d.sha3_256,"sha3-256"),"SHA3-384":g.makeCreator(d.sha3_384,"sha3-384"),"SHA3-512":g.makeCreator(d.sha3_512,"sha3-512")};t.rsaSign=function(e,r,n){void 0===n&&(n="SHA256");var i=t.bytesToPem(e,"rsaPrivateNonEncrypted"),a=o.privateKeyFromPem(i),s=v[n].create();return s.update(p.bytesToString(r,"raw")),p.stringToBytes(a.sign(s),"raw")},t.rsaVerify=function(e,r,n,i){void 0===i&&(i="SHA256");var a=o.publicKeyFromPem(t.bytesToPem(e,"rsaPublic")),s=v[i].create();return s.update(p.bytesToString(r),"raw"),a.verify(s.digest().getBytes(),p.bytesToString(n,"raw"))}},function(e,t,r){var n=r(1);r(19),r(20),r(65),r(38),r(67),r(107),r(71),r(28),r(3),r(70);var i=n.asn1,a=e.exports=n.pki=n.pki||{};a.pemToDer=function(e){var t=n.pem.decode(e)[0];if(t.procType&&"ENCRYPTED"===t.procType.type)throw new Error("Could not convert PEM to DER; PEM is encrypted.");return n.util.createBuffer(t.body)},a.privateKeyFromPem=function(e){var t=n.pem.decode(e)[0];if("PRIVATE KEY"!==t.type&&"RSA PRIVATE KEY"!==t.type){var r=new Error('Could not convert private key from PEM; PEM header type is not "PRIVATE KEY" or "RSA PRIVATE KEY".');throw r.headerType=t.type,r}if(t.procType&&"ENCRYPTED"===t.procType.type)throw new Error("Could not convert private key from PEM; PEM is encrypted.");var s=i.fromDer(t.body);return a.privateKeyFromAsn1(s)},a.privateKeyToPem=function(e,t){var r={type:"RSA PRIVATE KEY",body:i.toDer(a.privateKeyToAsn1(e)).getBytes()};return n.pem.encode(r,{maxline:t})},a.privateKeyInfoToPem=function(e,t){var r={type:"PRIVATE KEY",body:i.toDer(e).getBytes()};return n.pem.encode(r,{maxline:t})}},function(e,t,r){var n=r(1);r(3);var i=[217,120,249,196,25,221,181,237,40,233,253,121,74,160,216,157,198,126,55,131,43,118,83,142,98,76,100,136,68,139,251,162,23,154,89,245,135,179,79,19,97,69,109,141,9,129,125,50,189,143,64,235,134,183,123,11,240,149,33,34,92,107,78,130,84,214,101,147,206,96,178,28,115,86,192,20,167,140,241,220,18,117,202,31,59,190,228,209,66,61,212,48,163,60,182,38,111,191,14,218,70,105,7,87,39,242,29,155,188,148,67,3,248,17,199,246,144,239,62,231,6,195,213,47,200,102,30,215,8,232,234,222,128,82,238,247,132,170,114,172,53,77,106,42,150,26,210,113,90,21,73,116,75,159,208,94,4,24,164,236,194,224,65,110,15,81,203,204,36,145,175,80,161,244,112,57,153,124,58,133,35,184,180,122,252,2,54,91,37,85,151,49,45,93,250,152,227,138,146,174,5,223,41,16,103,108,186,201,211,0,230,207,225,158,168,44,99,22,1,63,88,226,137,169,13,56,52,27,171,51,255,176,187,72,12,95,185,177,205,46,197,243,219,71,229,165,156,119,10,166,32,104,254,127,193,173],a=[1,2,3,5],s=function(e,t){return e<<t&65535|(65535&e)>>16-t},o=function(e,t){return(65535&e)>>t|e<<16-t&65535};e.exports=n.rc2=n.rc2||{},n.rc2.expandKey=function(e,t){"string"==typeof e&&(e=n.util.createBuffer(e)),t=t||128;var r,a=e,s=e.length(),o=t,u=Math.ceil(o/8),c=255>>(7&o);for(r=s;r<128;r++)a.putByte(i[a.at(r-1)+a.at(r-s)&255]);for(a.setAt(128-u,i[a.at(128-u)&c]),r=127-u;r>=0;r--)a.setAt(r,i[a.at(r+1)^a.at(r+u)]);return a};var u=function(e,t,r){var i,u,c,l,f=!1,p=null,d=null,h=null,y=[];for(e=n.rc2.expandKey(e,t),c=0;c<64;c++)y.push(e.getInt16Le());r?(i=function(e){for(c=0;c<4;c++)e[c]+=y[l]+(e[(c+3)%4]&e[(c+2)%4])+(~e[(c+3)%4]&e[(c+1)%4]),e[c]=s(e[c],a[c]),l++},u=function(e){for(c=0;c<4;c++)e[c]+=y[63&e[(c+3)%4]]}):(i=function(e){for(c=3;c>=0;c--)e[c]=o(e[c],a[c]),e[c]-=y[l]+(e[(c+3)%4]&e[(c+2)%4])+(~e[(c+3)%4]&e[(c+1)%4]),l--},u=function(e){for(c=3;c>=0;c--)e[c]-=y[63&e[(c+3)%4]]});var g=function(e){var t=[];for(c=0;c<4;c++){var n=p.getInt16Le();null!==h&&(r?n^=h.getInt16Le():h.putInt16Le(n)),t.push(65535&n)}l=r?0:63;for(var i=0;i<e.length;i++)for(var a=0;a<e[i][0];a++)e[i][1](t);for(c=0;c<4;c++)null!==h&&(r?h.putInt16Le(t[c]):t[c]^=h.getInt16Le()),d.putInt16Le(t[c])},v=null;return v={start:function(e,t){e&&"string"==typeof e&&(e=n.util.createBuffer(e)),f=!1,p=n.util.createBuffer(),d=t||new n.util.createBuffer,h=e,v.output=d},update:function(e){for(f||p.putBuffer(e);p.length()>=8;)g([[5,i],[1,u],[6,i],[1,u],[5,i]])},finish:function(e){var t=!0;if(r)if(e)t=e(8,p,!r);else{var n=8===p.length()?8:8-p.length();p.fillWithByte(n,n)}if(t&&(f=!0,v.update()),!r&&(t=0===p.length()))if(e)t=e(8,d,!r);else{var i=d.length(),a=d.at(i-1);a>i?t=!1:d.truncate(a)}return t}}};n.rc2.startEncrypting=function(e,t,r){var i=n.rc2.createEncryptionCipher(e,128);return i.start(t,r),i},n.rc2.createEncryptionCipher=function(e,t){return u(e,t,!0)},n.rc2.startDecrypting=function(e,t,r){var i=n.rc2.createDecryptionCipher(e,128);return i.start(t,r),i},n.rc2.createDecryptionCipher=function(e,t){return u(e,t,!1)}},function(e,t,r){var n=r(1);r(3),r(13),r(69);var i=e.exports=n.pkcs1=n.pkcs1||{};function a(e,t,r){r||(r=n.md.sha1.create());for(var i="",a=Math.ceil(t/r.digestLength),s=0;s<a;++s){var o=String.fromCharCode(s>>24&255,s>>16&255,s>>8&255,255&s);r.start(),r.update(e+o),i+=r.digest().getBytes()}return i.substring(0,t)}i.encode_rsa_oaep=function(e,t,r){var i,s,o,u;"string"==typeof r?(i=r,s=arguments[3]||void 0,o=arguments[4]||void 0):r&&(i=r.label||void 0,s=r.seed||void 0,o=r.md||void 0,r.mgf1&&r.mgf1.md&&(u=r.mgf1.md)),o?o.start():o=n.md.sha1.create(),u||(u=o);var c=Math.ceil(e.n.bitLength()/8),l=c-2*o.digestLength-2;if(t.length>l)throw(g=new Error("RSAES-OAEP input message length is too long.")).length=t.length,g.maxLength=l,g;i||(i=""),o.update(i,"raw");for(var f=o.digest(),p="",d=l-t.length,h=0;h<d;h++)p+="\0";var y=f.getBytes()+p+""+t;if(s){if(s.length!==o.digestLength){var g;throw(g=new Error("Invalid RSAES-OAEP seed. The seed length must match the digest length.")).seedLength=s.length,g.digestLength=o.digestLength,g}}else s=n.random.getBytes(o.digestLength);var v=a(s,c-o.digestLength-1,u),m=n.util.xorBytes(y,v,y.length),b=a(m,o.digestLength,u),E=n.util.xorBytes(s,b,s.length);return"\0"+E+m},i.decode_rsa_oaep=function(e,t,r){var i,s,o;"string"==typeof r?(i=r,s=arguments[3]||void 0):r&&(i=r.label||void 0,s=r.md||void 0,r.mgf1&&r.mgf1.md&&(o=r.mgf1.md));var u=Math.ceil(e.n.bitLength()/8);if(t.length!==u)throw(m=new Error("RSAES-OAEP encoded message length is invalid.")).length=t.length,m.expectedLength=u,m;if(void 0===s?s=n.md.sha1.create():s.start(),o||(o=s),u<2*s.digestLength+2)throw new Error("RSAES-OAEP key is too short for the hash function.");i||(i=""),s.update(i,"raw");for(var c=s.digest().getBytes(),l=t.charAt(0),f=t.substring(1,s.digestLength+1),p=t.substring(1+s.digestLength),d=a(p,s.digestLength,o),h=n.util.xorBytes(f,d,f.length),y=a(h,u-s.digestLength-1,o),g=n.util.xorBytes(p,y,p.length),v=g.substring(0,s.digestLength),m="\0"!==l,b=0;b<s.digestLength;++b)m|=c.charAt(b)!==v.charAt(b);for(var E=1,S=s.digestLength,T=s.digestLength;T<g.length;T++){var A=g.charCodeAt(T),w=1&A^1,I=E?65534:0;m|=A&I,S+=E&=w}if(m||1!==g.charCodeAt(S))throw new Error("Invalid RSAES-OAEP padding.");return g.substring(S+1)}},function(e,t,r){var n=r(1);r(3),r(68),r(13),function(){if(n.prime)e.exports=n.prime;else{var t=e.exports=n.prime=n.prime||{},r=n.jsbn.BigInteger,i=[6,4,2,4,2,4,6,2],a=new r(null);a.fromInt(30);var s=function(e,t){return e|t};t.generateProbablePrime=function(e,t,i){"function"==typeof t&&(i=t,t={});var a=(t=t||{}).algorithm||"PRIMEINC";"string"==typeof a&&(a={name:a}),a.options=a.options||{};var s=t.prng||n.random,c={nextBytes:function(e){for(var t=s.getBytesSync(e.length),r=0;r<e.length;++r)e[r]=t.charCodeAt(r)}};if("PRIMEINC"===a.name)return function(e,t,i,a){if("workers"in i)return function(e,t,i,a){if("undefined"==typeof Worker)return o(e,t,i,a);var s=u(e,t),c=i.workers,l=i.workLoad||100,f=30*l/8,p=i.workerScript||"forge/prime.worker.js";if(-1===c)return n.util.estimateCores((function(e,t){e&&(t=2),c=t-1,d()}));function d(){c=Math.max(1,c);for(var n=[],i=0;i<c;++i)n[i]=new Worker(p);for(i=0;i<c;++i)n[i].addEventListener("message",d);var o=!1;function d(i){if(!o){0;var c=i.data;if(c.found){for(var p=0;p<n.length;++p)n[p].terminate();return o=!0,a(null,new r(c.prime,16))}s.bitLength()>e&&(s=u(e,t));var d=s.toString(16);i.target.postMessage({hex:d,workLoad:l}),s.dAddOffset(f,0)}}}d()}(e,t,i,a);return o(e,t,i,a)}(e,c,a.options,i);throw new Error("Invalid prime generation algorithm: "+a.name)}}function o(e,t,r,a){var s=u(e,t),o=function(e){return e<=100?27:e<=150?18:e<=200?15:e<=250?12:e<=300?9:e<=350?8:e<=400?7:e<=500?6:e<=600?5:e<=800?4:e<=1250?3:2}(s.bitLength());"millerRabinTests"in r&&(o=r.millerRabinTests);var c=10;"maxBlockTime"in r&&(c=r.maxBlockTime),function e(t,r,a,s,o,c,l){var f=+new Date;do{if(t.bitLength()>r&&(t=u(r,a)),t.isProbablePrime(o))return l(null,t);t.dAddOffset(i[s++%8],0)}while(c<0||+new Date-f<c);n.util.setImmediate((function(){e(t,r,a,s,o,c,l)}))}(s,e,t,0,o,c,a)}function u(e,t){var n=new r(e,t),i=e-1;return n.testBit(i)||n.bitwiseTo(r.ONE.shiftLeft(i),s,n),n.dAddOffset(31-n.mod(a).byteValue(),0),n}}()},function(e,t,r){var n=r(1);r(19),r(35),r(20),r(108),r(65),r(13),r(28),r(69),r(3),r(70);var i=n.asn1,a=n.pki,s=e.exports=n.pkcs12=n.pkcs12||{},o={name:"ContentInfo",tagClass:i.Class.UNIVERSAL,type:i.Type.SEQUENCE,constructed:!0,value:[{name:"ContentInfo.contentType",tagClass:i.Class.UNIVERSAL,type:i.Type.OID,constructed:!1,capture:"contentType"},{name:"ContentInfo.content",tagClass:i.Class.CONTEXT_SPECIFIC,constructed:!0,captureAsn1:"content"}]},u={name:"PFX",tagClass:i.Class.UNIVERSAL,type:i.Type.SEQUENCE,constructed:!0,value:[{name:"PFX.version",tagClass:i.Class.UNIVERSAL,type:i.Type.INTEGER,constructed:!1,capture:"version"},o,{name:"PFX.macData",tagClass:i.Class.UNIVERSAL,type:i.Type.SEQUENCE,constructed:!0,optional:!0,captureAsn1:"mac",value:[{name:"PFX.macData.mac",tagClass:i.Class.UNIVERSAL,type:i.Type.SEQUENCE,constructed:!0,value:[{name:"PFX.macData.mac.digestAlgorithm",tagClass:i.Class.UNIVERSAL,type:i.Type.SEQUENCE,constructed:!0,value:[{name:"PFX.macData.mac.digestAlgorithm.algorithm",tagClass:i.Class.UNIVERSAL,type:i.Type.OID,constructed:!1,capture:"macAlgorithm"},{name:"PFX.macData.mac.digestAlgorithm.parameters",tagClass:i.Class.UNIVERSAL,captureAsn1:"macAlgorithmParameters"}]},{name:"PFX.macData.mac.digest",tagClass:i.Class.UNIVERSAL,type:i.Type.OCTETSTRING,constructed:!1,capture:"macDigest"}]},{name:"PFX.macData.macSalt",tagClass:i.Class.UNIVERSAL,type:i.Type.OCTETSTRING,constructed:!1,capture:"macSalt"},{name:"PFX.macData.iterations",tagClass:i.Class.UNIVERSAL,type:i.Type.INTEGER,constructed:!1,optional:!0,capture:"macIterations"}]}]},c={name:"SafeBag",tagClass:i.Class.UNIVERSAL,type:i.Type.SEQUENCE,constructed:!0,value:[{name:"SafeBag.bagId",tagClass:i.Class.UNIVERSAL,type:i.Type.OID,constructed:!1,capture:"bagId"},{name:"SafeBag.bagValue",tagClass:i.Class.CONTEXT_SPECIFIC,constructed:!0,captureAsn1:"bagValue"},{name:"SafeBag.bagAttributes",tagClass:i.Class.UNIVERSAL,type:i.Type.SET,constructed:!0,optional:!0,capture:"bagAttributes"}]},l={name:"Attribute",tagClass:i.Class.UNIVERSAL,type:i.Type.SEQUENCE,constructed:!0,value:[{name:"Attribute.attrId",tagClass:i.Class.UNIVERSAL,type:i.Type.OID,constructed:!1,capture:"oid"},{name:"Attribute.attrValues",tagClass:i.Class.UNIVERSAL,type:i.Type.SET,constructed:!0,capture:"values"}]},f={name:"CertBag",tagClass:i.Class.UNIVERSAL,type:i.Type.SEQUENCE,constructed:!0,value:[{name:"CertBag.certId",tagClass:i.Class.UNIVERSAL,type:i.Type.OID,constructed:!1,capture:"certId"},{name:"CertBag.certValue",tagClass:i.Class.CONTEXT_SPECIFIC,constructed:!0,value:[{name:"CertBag.certValue[0]",tagClass:i.Class.UNIVERSAL,type:i.Class.OCTETSTRING,constructed:!1,capture:"cert"}]}]};function p(e,t,r,n){for(var i=[],a=0;a<e.length;a++)for(var s=0;s<e[a].safeBags.length;s++){var o=e[a].safeBags[s];void 0!==n&&o.type!==n||(null!==t?void 0!==o.attributes[t]&&o.attributes[t].indexOf(r)>=0&&i.push(o):i.push(o))}return i}function d(e){if(e.composed||e.constructed){for(var t=n.util.createBuffer(),r=0;r<e.value.length;++r)t.putBytes(e.value[r].value);e.composed=e.constructed=!1,e.value=t.getBytes()}return e}function h(e,t){var r={},s=[];if(!i.validate(e,n.pkcs7.asn1.encryptedDataValidator,r,s))throw(o=new Error("Cannot read EncryptedContentInfo.")).errors=s,o;var o,u=i.derToOid(r.contentType);if(u!==a.oids.data)throw(o=new Error("PKCS#12 EncryptedContentInfo ContentType is not Data.")).oid=u,o;u=i.derToOid(r.encAlgorithm);var c=a.pbe.getCipher(u,r.encParameter,t),l=d(r.encryptedContentAsn1),f=n.util.createBuffer(l.value);if(c.update(f),!c.finish())throw new Error("Failed to decrypt PKCS#12 SafeContents.");return c.output.getBytes()}function y(e,t,r){if(!t&&0===e.length)return[];if((e=i.fromDer(e,t)).tagClass!==i.Class.UNIVERSAL||e.type!==i.Type.SEQUENCE||!0!==e.constructed)throw new Error("PKCS#12 SafeContents expected to be a SEQUENCE OF SafeBag.");for(var n=[],s=0;s<e.value.length;s++){var o=e.value[s],u={},l=[];if(!i.validate(o,c,u,l))throw(v=new Error("Cannot read SafeBag.")).errors=l,v;var p,d,h={type:i.derToOid(u.bagId),attributes:g(u.bagAttributes)};n.push(h);var y=u.bagValue.value[0];switch(h.type){case a.oids.pkcs8ShroudedKeyBag:if(null===(y=a.decryptPrivateKeyInfo(y,r)))throw new Error("Unable to decrypt PKCS#8 ShroudedKeyBag, wrong password?");case a.oids.keyBag:try{h.key=a.privateKeyFromAsn1(y)}catch(e){h.key=null,h.asn1=y}continue;case a.oids.certBag:p=f,d=function(){if(i.derToOid(u.certId)!==a.oids.x509Certificate){var e=new Error("Unsupported certificate type, only X.509 supported.");throw e.oid=i.derToOid(u.certId),e}var r=i.fromDer(u.cert,t);try{h.cert=a.certificateFromAsn1(r,!0)}catch(e){h.cert=null,h.asn1=r}};break;default:var v;throw(v=new Error("Unsupported PKCS#12 SafeBag type.")).oid=h.type,v}if(void 0!==p&&!i.validate(y,p,u,l))throw(v=new Error("Cannot read PKCS#12 "+p.name)).errors=l,v;d()}return n}function g(e){var t={};if(void 0!==e)for(var r=0;r<e.length;++r){var n={},s=[];if(!i.validate(e[r],l,n,s)){var o=new Error("Cannot read PKCS#12 BagAttribute.");throw o.errors=s,o}var u=i.derToOid(n.oid);if(void 0!==a.oids[u]){t[a.oids[u]]=[];for(var c=0;c<n.values.length;++c)t[a.oids[u]].push(n.values[c].value)}}return t}s.pkcs12FromAsn1=function(e,t,r){"string"==typeof t?(r=t,t=!0):void 0===t&&(t=!0);var c={};if(!i.validate(e,u,c,[]))throw(l=new Error("Cannot read PKCS#12 PFX. ASN.1 object is not an PKCS#12 PFX.")).errors=l,l;var l,f={version:c.version.charCodeAt(0),safeContents:[],getBags:function(e){var t,r={};return"localKeyId"in e?t=e.localKeyId:"localKeyIdHex"in e&&(t=n.util.hexToBytes(e.localKeyIdHex)),void 0===t&&!("friendlyName"in e)&&"bagType"in e&&(r[e.bagType]=p(f.safeContents,null,null,e.bagType)),void 0!==t&&(r.localKeyId=p(f.safeContents,"localKeyId",t,e.bagType)),"friendlyName"in e&&(r.friendlyName=p(f.safeContents,"friendlyName",e.friendlyName,e.bagType)),r},getBagsByFriendlyName:function(e,t){return p(f.safeContents,"friendlyName",e,t)},getBagsByLocalKeyId:function(e,t){return p(f.safeContents,"localKeyId",e,t)}};if(3!==c.version.charCodeAt(0))throw(l=new Error("PKCS#12 PFX of version other than 3 not supported.")).version=c.version.charCodeAt(0),l;if(i.derToOid(c.contentType)!==a.oids.data)throw(l=new Error("Only PKCS#12 PFX in password integrity mode supported.")).oid=i.derToOid(c.contentType),l;var g=c.content.value[0];if(g.tagClass!==i.Class.UNIVERSAL||g.type!==i.Type.OCTETSTRING)throw new Error("PKCS#12 authSafe content data is not an OCTET STRING.");if(g=d(g),c.mac){var v=null,m=0,b=i.derToOid(c.macAlgorithm);switch(b){case a.oids.sha1:v=n.md.sha1.create(),m=20;break;case a.oids.sha256:v=n.md.sha256.create(),m=32;break;case a.oids.sha384:v=n.md.sha384.create(),m=48;break;case a.oids.sha512:v=n.md.sha512.create(),m=64;break;case a.oids.md5:v=n.md.md5.create(),m=16}if(null===v)throw new Error("PKCS#12 uses unsupported MAC algorithm: "+b);var E=new n.util.ByteBuffer(c.macSalt),S="macIterations"in c?parseInt(n.util.bytesToHex(c.macIterations),16):1,T=s.generateKey(r,E,3,S,m,v),A=n.hmac.create();if(A.start(v,T),A.update(g.value),A.getMac().getBytes()!==c.macDigest)throw new Error("PKCS#12 MAC could not be verified. Invalid password?")}return function(e,t,r,n){if((t=i.fromDer(t,r)).tagClass!==i.Class.UNIVERSAL||t.type!==i.Type.SEQUENCE||!0!==t.constructed)throw new Error("PKCS#12 AuthenticatedSafe expected to be a SEQUENCE OF ContentInfo");for(var s=0;s<t.value.length;s++){var u=t.value[s],c={},l=[];if(!i.validate(u,o,c,l))throw(v=new Error("Cannot read ContentInfo.")).errors=l,v;var f={encrypted:!1},p=null,g=c.content.value[0];switch(i.derToOid(c.contentType)){case a.oids.data:if(g.tagClass!==i.Class.UNIVERSAL||g.type!==i.Type.OCTETSTRING)throw new Error("PKCS#12 SafeContents Data is not an OCTET STRING.");p=d(g).value;break;case a.oids.encryptedData:p=h(g,n),f.encrypted=!0;break;default:var v;throw(v=new Error("Unsupported PKCS#12 contentType.")).contentType=i.derToOid(c.contentType),v}f.safeBags=y(p,r,n),e.safeContents.push(f)}}(f,g.value,t,r),f},s.toPkcs12Asn1=function(e,t,r,o){(o=o||{}).saltSize=o.saltSize||8,o.count=o.count||2048,o.algorithm=o.algorithm||o.encAlgorithm||"aes128","useMac"in o||(o.useMac=!0),"localKeyId"in o||(o.localKeyId=null),"generateLocalKeyId"in o||(o.generateLocalKeyId=!0);var u,c=o.localKeyId;if(null!==c)c=n.util.hexToBytes(c);else if(o.generateLocalKeyId)if(t){var l=n.util.isArray(t)?t[0]:t;"string"==typeof l&&(l=a.certificateFromPem(l)),(B=n.md.sha1.create()).update(i.toDer(a.certificateToAsn1(l)).getBytes()),c=B.digest().getBytes()}else c=n.random.getBytes(20);var f=[];null!==c&&f.push(i.create(i.Class.UNIVERSAL,i.Type.SEQUENCE,!0,[i.create(i.Class.UNIVERSAL,i.Type.OID,!1,i.oidToDer(a.oids.localKeyId).getBytes()),i.create(i.Class.UNIVERSAL,i.Type.SET,!0,[i.create(i.Class.UNIVERSAL,i.Type.OCTETSTRING,!1,c)])])),"friendlyName"in o&&f.push(i.create(i.Class.UNIVERSAL,i.Type.SEQUENCE,!0,[i.create(i.Class.UNIVERSAL,i.Type.OID,!1,i.oidToDer(a.oids.friendlyName).getBytes()),i.create(i.Class.UNIVERSAL,i.Type.SET,!0,[i.create(i.Class.UNIVERSAL,i.Type.BMPSTRING,!1,o.friendlyName)])])),f.length>0&&(u=i.create(i.Class.UNIVERSAL,i.Type.SET,!0,f));var p=[],d=[];null!==t&&(d=n.util.isArray(t)?t:[t]);for(var h=[],y=0;y<d.length;++y){"string"==typeof(t=d[y])&&(t=a.certificateFromPem(t));var g=0===y?u:void 0,v=a.certificateToAsn1(t),m=i.create(i.Class.UNIVERSAL,i.Type.SEQUENCE,!0,[i.create(i.Class.UNIVERSAL,i.Type.OID,!1,i.oidToDer(a.oids.certBag).getBytes()),i.create(i.Class.CONTEXT_SPECIFIC,0,!0,[i.create(i.Class.UNIVERSAL,i.Type.SEQUENCE,!0,[i.create(i.Class.UNIVERSAL,i.Type.OID,!1,i.oidToDer(a.oids.x509Certificate).getBytes()),i.create(i.Class.CONTEXT_SPECIFIC,0,!0,[i.create(i.Class.UNIVERSAL,i.Type.OCTETSTRING,!1,i.toDer(v).getBytes())])])]),g]);h.push(m)}if(h.length>0){var b=i.create(i.Class.UNIVERSAL,i.Type.SEQUENCE,!0,h),E=i.create(i.Class.UNIVERSAL,i.Type.SEQUENCE,!0,[i.create(i.Class.UNIVERSAL,i.Type.OID,!1,i.oidToDer(a.oids.data).getBytes()),i.create(i.Class.CONTEXT_SPECIFIC,0,!0,[i.create(i.Class.UNIVERSAL,i.Type.OCTETSTRING,!1,i.toDer(b).getBytes())])]);p.push(E)}var S=null;if(null!==e){var T=a.wrapRsaPrivateKey(a.privateKeyToAsn1(e));S=null===r?i.create(i.Class.UNIVERSAL,i.Type.SEQUENCE,!0,[i.create(i.Class.UNIVERSAL,i.Type.OID,!1,i.oidToDer(a.oids.keyBag).getBytes()),i.create(i.Class.CONTEXT_SPECIFIC,0,!0,[T]),u]):i.create(i.Class.UNIVERSAL,i.Type.SEQUENCE,!0,[i.create(i.Class.UNIVERSAL,i.Type.OID,!1,i.oidToDer(a.oids.pkcs8ShroudedKeyBag).getBytes()),i.create(i.Class.CONTEXT_SPECIFIC,0,!0,[a.encryptPrivateKeyInfo(T,r,o)]),u]);var A=i.create(i.Class.UNIVERSAL,i.Type.SEQUENCE,!0,[S]),w=i.create(i.Class.UNIVERSAL,i.Type.SEQUENCE,!0,[i.create(i.Class.UNIVERSAL,i.Type.OID,!1,i.oidToDer(a.oids.data).getBytes()),i.create(i.Class.CONTEXT_SPECIFIC,0,!0,[i.create(i.Class.UNIVERSAL,i.Type.OCTETSTRING,!1,i.toDer(A).getBytes())])]);p.push(w)}var I,C=i.create(i.Class.UNIVERSAL,i.Type.SEQUENCE,!0,p);if(o.useMac){var B=n.md.sha1.create(),k=new n.util.ByteBuffer(n.random.getBytes(o.saltSize)),P=o.count,O=(e=s.generateKey(r,k,3,P,20),n.hmac.create());O.start(B,e),O.update(i.toDer(C).getBytes());var N=O.getMac();I=i.create(i.Class.UNIVERSAL,i.Type.SEQUENCE,!0,[i.create(i.Class.UNIVERSAL,i.Type.SEQUENCE,!0,[i.create(i.Class.UNIVERSAL,i.Type.SEQUENCE,!0,[i.create(i.Class.UNIVERSAL,i.Type.OID,!1,i.oidToDer(a.oids.sha1).getBytes()),i.create(i.Class.UNIVERSAL,i.Type.NULL,!1,"")]),i.create(i.Class.UNIVERSAL,i.Type.OCTETSTRING,!1,N.getBytes())]),i.create(i.Class.UNIVERSAL,i.Type.OCTETSTRING,!1,k.getBytes()),i.create(i.Class.UNIVERSAL,i.Type.INTEGER,!1,i.integerToDer(P).getBytes())])}return i.create(i.Class.UNIVERSAL,i.Type.SEQUENCE,!0,[i.create(i.Class.UNIVERSAL,i.Type.INTEGER,!1,i.integerToDer(3).getBytes()),i.create(i.Class.UNIVERSAL,i.Type.SEQUENCE,!0,[i.create(i.Class.UNIVERSAL,i.Type.OID,!1,i.oidToDer(a.oids.data).getBytes()),i.create(i.Class.CONTEXT_SPECIFIC,0,!0,[i.create(i.Class.UNIVERSAL,i.Type.OCTETSTRING,!1,i.toDer(C).getBytes())])]),I])},s.generateKey=n.pbe.generatePkcs12Key},function(e,t,r){var n=r(1);r(19),r(3);var i=n.asn1,a=e.exports=n.pkcs7asn1=n.pkcs7asn1||{};n.pkcs7=n.pkcs7||{},n.pkcs7.asn1=a;var s={name:"ContentInfo",tagClass:i.Class.UNIVERSAL,type:i.Type.SEQUENCE,constructed:!0,value:[{name:"ContentInfo.ContentType",tagClass:i.Class.UNIVERSAL,type:i.Type.OID,constructed:!1,capture:"contentType"},{name:"ContentInfo.content",tagClass:i.Class.CONTEXT_SPECIFIC,type:0,constructed:!0,optional:!0,captureAsn1:"content"}]};a.contentInfoValidator=s;var o={name:"EncryptedContentInfo",tagClass:i.Class.UNIVERSAL,type:i.Type.SEQUENCE,constructed:!0,value:[{name:"EncryptedContentInfo.contentType",tagClass:i.Class.UNIVERSAL,type:i.Type.OID,constructed:!1,capture:"contentType"},{name:"EncryptedContentInfo.contentEncryptionAlgorithm",tagClass:i.Class.UNIVERSAL,type:i.Type.SEQUENCE,constructed:!0,value:[{name:"EncryptedContentInfo.contentEncryptionAlgorithm.algorithm",tagClass:i.Class.UNIVERSAL,type:i.Type.OID,constructed:!1,capture:"encAlgorithm"},{name:"EncryptedContentInfo.contentEncryptionAlgorithm.parameter",tagClass:i.Class.UNIVERSAL,captureAsn1:"encParameter"}]},{name:"EncryptedContentInfo.encryptedContent",tagClass:i.Class.CONTEXT_SPECIFIC,type:0,capture:"encryptedContent",captureAsn1:"encryptedContentAsn1"}]};a.envelopedDataValidator={name:"EnvelopedData",tagClass:i.Class.UNIVERSAL,type:i.Type.SEQUENCE,constructed:!0,value:[{name:"EnvelopedData.Version",tagClass:i.Class.UNIVERSAL,type:i.Type.INTEGER,constructed:!1,capture:"version"},{name:"EnvelopedData.RecipientInfos",tagClass:i.Class.UNIVERSAL,type:i.Type.SET,constructed:!0,captureAsn1:"recipientInfos"}].concat(o)},a.encryptedDataValidator={name:"EncryptedData",tagClass:i.Class.UNIVERSAL,type:i.Type.SEQUENCE,constructed:!0,value:[{name:"EncryptedData.Version",tagClass:i.Class.UNIVERSAL,type:i.Type.INTEGER,constructed:!1,capture:"version"}].concat(o)};var u={name:"SignerInfo",tagClass:i.Class.UNIVERSAL,type:i.Type.SEQUENCE,constructed:!0,value:[{name:"SignerInfo.version",tagClass:i.Class.UNIVERSAL,type:i.Type.INTEGER,constructed:!1},{name:"SignerInfo.issuerAndSerialNumber",tagClass:i.Class.UNIVERSAL,type:i.Type.SEQUENCE,constructed:!0,value:[{name:"SignerInfo.issuerAndSerialNumber.issuer",tagClass:i.Class.UNIVERSAL,type:i.Type.SEQUENCE,constructed:!0,captureAsn1:"issuer"},{name:"SignerInfo.issuerAndSerialNumber.serialNumber",tagClass:i.Class.UNIVERSAL,type:i.Type.INTEGER,constructed:!1,capture:"serial"}]},{name:"SignerInfo.digestAlgorithm",tagClass:i.Class.UNIVERSAL,type:i.Type.SEQUENCE,constructed:!0,value:[{name:"SignerInfo.digestAlgorithm.algorithm",tagClass:i.Class.UNIVERSAL,type:i.Type.OID,constructed:!1,capture:"digestAlgorithm"},{name:"SignerInfo.digestAlgorithm.parameter",tagClass:i.Class.UNIVERSAL,constructed:!1,captureAsn1:"digestParameter",optional:!0}]},{name:"SignerInfo.authenticatedAttributes",tagClass:i.Class.CONTEXT_SPECIFIC,type:0,constructed:!0,optional:!0,capture:"authenticatedAttributes"},{name:"SignerInfo.digestEncryptionAlgorithm",tagClass:i.Class.UNIVERSAL,type:i.Type.SEQUENCE,constructed:!0,capture:"signatureAlgorithm"},{name:"SignerInfo.encryptedDigest",tagClass:i.Class.UNIVERSAL,type:i.Type.OCTETSTRING,constructed:!1,capture:"signature"},{name:"SignerInfo.unauthenticatedAttributes",tagClass:i.Class.CONTEXT_SPECIFIC,type:1,constructed:!0,optional:!0,capture:"unauthenticatedAttributes"}]};a.signedDataValidator={name:"SignedData",tagClass:i.Class.UNIVERSAL,type:i.Type.SEQUENCE,constructed:!0,value:[{name:"SignedData.Version",tagClass:i.Class.UNIVERSAL,type:i.Type.INTEGER,constructed:!1,capture:"version"},{name:"SignedData.DigestAlgorithms",tagClass:i.Class.UNIVERSAL,type:i.Type.SET,constructed:!0,captureAsn1:"digestAlgorithms"},s,{name:"SignedData.Certificates",tagClass:i.Class.CONTEXT_SPECIFIC,type:0,optional:!0,captureAsn1:"certificates"},{name:"SignedData.CertificateRevocationLists",tagClass:i.Class.CONTEXT_SPECIFIC,type:1,optional:!0,captureAsn1:"crls"},{name:"SignedData.SignerInfos",tagClass:i.Class.UNIVERSAL,type:i.Type.SET,capture:"signerInfos",optional:!0,value:[u]}]},a.recipientInfoValidator={name:"RecipientInfo",tagClass:i.Class.UNIVERSAL,type:i.Type.SEQUENCE,constructed:!0,value:[{name:"RecipientInfo.version",tagClass:i.Class.UNIVERSAL,type:i.Type.INTEGER,constructed:!1,capture:"version"},{name:"RecipientInfo.issuerAndSerial",tagClass:i.Class.UNIVERSAL,type:i.Type.SEQUENCE,constructed:!0,value:[{name:"RecipientInfo.issuerAndSerial.issuer",tagClass:i.Class.UNIVERSAL,type:i.Type.SEQUENCE,constructed:!0,captureAsn1:"issuer"},{name:"RecipientInfo.issuerAndSerial.serialNumber",tagClass:i.Class.UNIVERSAL,type:i.Type.INTEGER,constructed:!1,capture:"serial"}]},{name:"RecipientInfo.keyEncryptionAlgorithm",tagClass:i.Class.UNIVERSAL,type:i.Type.SEQUENCE,constructed:!0,value:[{name:"RecipientInfo.keyEncryptionAlgorithm.algorithm",tagClass:i.Class.UNIVERSAL,type:i.Type.OID,constructed:!1,capture:"encAlgorithm"},{name:"RecipientInfo.keyEncryptionAlgorithm.parameter",tagClass:i.Class.UNIVERSAL,constructed:!1,captureAsn1:"encParameter"}]},{name:"RecipientInfo.encryptedKey",tagClass:i.Class.UNIVERSAL,type:i.Type.OCTETSTRING,constructed:!1,capture:"encKey"}]}},function(e,t,r){var n=r(1);r(110),e.exports=n.mgf=n.mgf||{},n.mgf.mgf1=n.mgf1},function(e,t,r){var n=r(1);r(3),n.mgf=n.mgf||{},(e.exports=n.mgf.mgf1=n.mgf1=n.mgf1||{}).create=function(e){return{generate:function(t,r){for(var i=new n.util.ByteBuffer,a=Math.ceil(r/e.digestLength),s=0;s<a;s++){var o=new n.util.ByteBuffer;o.putInt32(s),e.start(),e.update(t+o.getBytes()),i.putBuffer(e.digest())}return i.truncate(i.length()-r),i.getBytes()}}}},function(e,t,r){(function(n,i){var a;
/**
 * [js-sha3]{@link https://github.com/emn178/js-sha3}
 *
 * @version 0.8.0
 * @author Chen, Yi-Cyuan [emn178@gmail.com]
 * @copyright Chen, Yi-Cyuan 2015-2018
 * @license MIT
 */!function(){"use strict";var s="input is invalid type",o="object"==typeof window,u=o?window:{};u.JS_SHA3_NO_WINDOW&&(o=!1);var c=!o&&"object"==typeof self;!u.JS_SHA3_NO_NODE_JS&&"object"==typeof n&&n.versions&&n.versions.node?u=i:c&&(u=self);var l=!u.JS_SHA3_NO_COMMON_JS&&"object"==typeof e&&e.exports,f=r(112),p=!u.JS_SHA3_NO_ARRAY_BUFFER&&"undefined"!=typeof ArrayBuffer,d="0123456789abcdef".split(""),h=[4,1024,262144,67108864],y=[0,8,16,24],g=[1,0,32898,0,32906,2147483648,2147516416,2147483648,32907,0,2147483649,0,2147516545,2147483648,32777,2147483648,138,0,136,0,2147516425,0,2147483658,0,2147516555,0,139,2147483648,32905,2147483648,32771,2147483648,32770,2147483648,128,2147483648,32778,0,2147483658,2147483648,2147516545,2147483648,32896,2147483648,2147483649,0,2147516424,2147483648],v=[224,256,384,512],m=[128,256],b=["hex","buffer","arrayBuffer","array","digest"],E={128:168,256:136};!u.JS_SHA3_NO_NODE_JS&&Array.isArray||(Array.isArray=function(e){return"[object Array]"===Object.prototype.toString.call(e)}),!p||!u.JS_SHA3_NO_ARRAY_BUFFER_IS_VIEW&&ArrayBuffer.isView||(ArrayBuffer.isView=function(e){return"object"==typeof e&&e.buffer&&e.buffer.constructor===ArrayBuffer});for(var S=function(e,t,r){return function(n){return new D(e,t,e).update(n)[r]()}},T=function(e,t,r){return function(n,i){return new D(e,t,i).update(n)[r]()}},A=function(e,t,r){return function(t,n,i,a){return k["cshake"+e].update(t,n,i,a)[r]()}},w=function(e,t,r){return function(t,n,i,a){return k["kmac"+e].update(t,n,i,a)[r]()}},I=function(e,t,r,n){for(var i=0;i<b.length;++i){var a=b[i];e[a]=t(r,n,a)}return e},C=function(e,t){var r=S(e,t,"hex");return r.create=function(){return new D(e,t,e)},r.update=function(e){return r.create().update(e)},I(r,S,e,t)},B=[{name:"keccak",padding:[1,256,65536,16777216],bits:v,createMethod:C},{name:"sha3",padding:[6,1536,393216,100663296],bits:v,createMethod:C},{name:"shake",padding:[31,7936,2031616,520093696],bits:m,createMethod:function(e,t){var r=T(e,t,"hex");return r.create=function(r){return new D(e,t,r)},r.update=function(e,t){return r.create(t).update(e)},I(r,T,e,t)}},{name:"cshake",padding:h,bits:m,createMethod:function(e,t){var r=E[e],n=A(e,0,"hex");return n.create=function(n,i,a){return i||a?new D(e,t,n).bytepad([i,a],r):k["shake"+e].create(n)},n.update=function(e,t,r,i){return n.create(t,r,i).update(e)},I(n,A,e,t)}},{name:"kmac",padding:h,bits:m,createMethod:function(e,t){var r=E[e],n=w(e,0,"hex");return n.create=function(n,i,a){return new V(e,t,i).bytepad(["KMAC",a],r).bytepad([n],r)},n.update=function(e,t,r,i){return n.create(e,r,i).update(t)},I(n,w,e,t)}}],k={},P=[],O=0;O<B.length;++O)for(var N=B[O],_=N.bits,R=0;R<_.length;++R){var L=N.name+"_"+_[R];if(P.push(L),k[L]=N.createMethod(_[R],N.padding),"sha3"!==N.name){var U=N.name+_[R];P.push(U),k[U]=k[L]}}function D(e,t,r){this.blocks=[],this.s=[],this.padding=t,this.outputBits=r,this.reset=!0,this.finalized=!1,this.block=0,this.start=0,this.blockCount=1600-(e<<1)>>5,this.byteCount=this.blockCount<<2,this.outputBlocks=r>>5,this.extraBytes=(31&r)>>3;for(var n=0;n<50;++n)this.s[n]=0}function V(e,t,r){D.call(this,e,t,r)}D.prototype.update=function(e){if(this.finalized)throw new Error("finalize already called");var t,r=typeof e;if("string"!==r){if("object"!==r)throw new Error(s);if(null===e)throw new Error(s);if(p&&e.constructor===ArrayBuffer)e=new Uint8Array(e);else if(!(Array.isArray(e)||p&&ArrayBuffer.isView(e)))throw new Error(s);t=!0}for(var n,i,a=this.blocks,o=this.byteCount,u=e.length,c=this.blockCount,l=0,f=this.s;l<u;){if(this.reset)for(this.reset=!1,a[0]=this.block,n=1;n<c+1;++n)a[n]=0;if(t)for(n=this.start;l<u&&n<o;++l)a[n>>2]|=e[l]<<y[3&n++];else for(n=this.start;l<u&&n<o;++l)(i=e.charCodeAt(l))<128?a[n>>2]|=i<<y[3&n++]:i<2048?(a[n>>2]|=(192|i>>6)<<y[3&n++],a[n>>2]|=(128|63&i)<<y[3&n++]):i<55296||i>=57344?(a[n>>2]|=(224|i>>12)<<y[3&n++],a[n>>2]|=(128|i>>6&63)<<y[3&n++],a[n>>2]|=(128|63&i)<<y[3&n++]):(i=65536+((1023&i)<<10|1023&e.charCodeAt(++l)),a[n>>2]|=(240|i>>18)<<y[3&n++],a[n>>2]|=(128|i>>12&63)<<y[3&n++],a[n>>2]|=(128|i>>6&63)<<y[3&n++],a[n>>2]|=(128|63&i)<<y[3&n++]);if(this.lastByteIndex=n,n>=o){for(this.start=n-o,this.block=a[c],n=0;n<c;++n)f[n]^=a[n];j(f),this.reset=!0}else this.start=n}return this},D.prototype.encode=function(e,t){var r=255&e,n=1,i=[r];for(r=255&(e>>=8);r>0;)i.unshift(r),r=255&(e>>=8),++n;return t?i.push(n):i.unshift(n),this.update(i),i.length},D.prototype.encodeString=function(e){var t,r=typeof e;if("string"!==r){if("object"!==r)throw new Error(s);if(null===e)throw new Error(s);if(p&&e.constructor===ArrayBuffer)e=new Uint8Array(e);else if(!(Array.isArray(e)||p&&ArrayBuffer.isView(e)))throw new Error(s);t=!0}var n=0,i=e.length;if(t)n=i;else for(var a=0;a<e.length;++a){var o=e.charCodeAt(a);o<128?n+=1:o<2048?n+=2:o<55296||o>=57344?n+=3:(o=65536+((1023&o)<<10|1023&e.charCodeAt(++a)),n+=4)}return n+=this.encode(8*n),this.update(e),n},D.prototype.bytepad=function(e,t){for(var r=this.encode(t),n=0;n<e.length;++n)r+=this.encodeString(e[n]);var i=t-r%t,a=[];return a.length=i,this.update(a),this},D.prototype.finalize=function(){if(!this.finalized){this.finalized=!0;var e=this.blocks,t=this.lastByteIndex,r=this.blockCount,n=this.s;if(e[t>>2]|=this.padding[3&t],this.lastByteIndex===this.byteCount)for(e[0]=e[r],t=1;t<r+1;++t)e[t]=0;for(e[r-1]|=2147483648,t=0;t<r;++t)n[t]^=e[t];j(n)}},D.prototype.toString=D.prototype.hex=function(){this.finalize();for(var e,t=this.blockCount,r=this.s,n=this.outputBlocks,i=this.extraBytes,a=0,s=0,o="";s<n;){for(a=0;a<t&&s<n;++a,++s)e=r[a],o+=d[e>>4&15]+d[15&e]+d[e>>12&15]+d[e>>8&15]+d[e>>20&15]+d[e>>16&15]+d[e>>28&15]+d[e>>24&15];s%t==0&&(j(r),a=0)}return i&&(e=r[a],o+=d[e>>4&15]+d[15&e],i>1&&(o+=d[e>>12&15]+d[e>>8&15]),i>2&&(o+=d[e>>20&15]+d[e>>16&15])),o},D.prototype.arrayBuffer=function(){this.finalize();var e,t=this.blockCount,r=this.s,n=this.outputBlocks,i=this.extraBytes,a=0,s=0,o=this.outputBits>>3;e=i?new ArrayBuffer(n+1<<2):new ArrayBuffer(o);for(var u=new Uint32Array(e);s<n;){for(a=0;a<t&&s<n;++a,++s)u[s]=r[a];s%t==0&&j(r)}return i&&(u[a]=r[a],e=e.slice(0,o)),e},D.prototype.buffer=D.prototype.arrayBuffer,D.prototype.digest=D.prototype.array=function(){this.finalize();for(var e,t,r=this.blockCount,n=this.s,i=this.outputBlocks,a=this.extraBytes,s=0,o=0,u=[];o<i;){for(s=0;s<r&&o<i;++s,++o)e=o<<2,t=n[s],u[e]=255&t,u[e+1]=t>>8&255,u[e+2]=t>>16&255,u[e+3]=t>>24&255;o%r==0&&j(n)}return a&&(e=o<<2,t=n[s],u[e]=255&t,a>1&&(u[e+1]=t>>8&255),a>2&&(u[e+2]=t>>16&255)),u},V.prototype=new D,V.prototype.finalize=function(){return this.encode(this.outputBits,!0),D.prototype.finalize.call(this)};var j=function(e){var t,r,n,i,a,s,o,u,c,l,f,p,d,h,y,v,m,b,E,S,T,A,w,I,C,B,k,P,O,N,_,R,L,U,D,V,j,x,M,K,F,q,Y,G,z,H,W,Q,X,J,Z,$,ee,te,re,ne,ie,ae,se,oe,ue,ce,le;for(n=0;n<48;n+=2)i=e[0]^e[10]^e[20]^e[30]^e[40],a=e[1]^e[11]^e[21]^e[31]^e[41],s=e[2]^e[12]^e[22]^e[32]^e[42],o=e[3]^e[13]^e[23]^e[33]^e[43],u=e[4]^e[14]^e[24]^e[34]^e[44],c=e[5]^e[15]^e[25]^e[35]^e[45],l=e[6]^e[16]^e[26]^e[36]^e[46],f=e[7]^e[17]^e[27]^e[37]^e[47],t=(p=e[8]^e[18]^e[28]^e[38]^e[48])^(s<<1|o>>>31),r=(d=e[9]^e[19]^e[29]^e[39]^e[49])^(o<<1|s>>>31),e[0]^=t,e[1]^=r,e[10]^=t,e[11]^=r,e[20]^=t,e[21]^=r,e[30]^=t,e[31]^=r,e[40]^=t,e[41]^=r,t=i^(u<<1|c>>>31),r=a^(c<<1|u>>>31),e[2]^=t,e[3]^=r,e[12]^=t,e[13]^=r,e[22]^=t,e[23]^=r,e[32]^=t,e[33]^=r,e[42]^=t,e[43]^=r,t=s^(l<<1|f>>>31),r=o^(f<<1|l>>>31),e[4]^=t,e[5]^=r,e[14]^=t,e[15]^=r,e[24]^=t,e[25]^=r,e[34]^=t,e[35]^=r,e[44]^=t,e[45]^=r,t=u^(p<<1|d>>>31),r=c^(d<<1|p>>>31),e[6]^=t,e[7]^=r,e[16]^=t,e[17]^=r,e[26]^=t,e[27]^=r,e[36]^=t,e[37]^=r,e[46]^=t,e[47]^=r,t=l^(i<<1|a>>>31),r=f^(a<<1|i>>>31),e[8]^=t,e[9]^=r,e[18]^=t,e[19]^=r,e[28]^=t,e[29]^=r,e[38]^=t,e[39]^=r,e[48]^=t,e[49]^=r,h=e[0],y=e[1],H=e[11]<<4|e[10]>>>28,W=e[10]<<4|e[11]>>>28,P=e[20]<<3|e[21]>>>29,O=e[21]<<3|e[20]>>>29,oe=e[31]<<9|e[30]>>>23,ue=e[30]<<9|e[31]>>>23,q=e[40]<<18|e[41]>>>14,Y=e[41]<<18|e[40]>>>14,U=e[2]<<1|e[3]>>>31,D=e[3]<<1|e[2]>>>31,v=e[13]<<12|e[12]>>>20,m=e[12]<<12|e[13]>>>20,Q=e[22]<<10|e[23]>>>22,X=e[23]<<10|e[22]>>>22,N=e[33]<<13|e[32]>>>19,_=e[32]<<13|e[33]>>>19,ce=e[42]<<2|e[43]>>>30,le=e[43]<<2|e[42]>>>30,te=e[5]<<30|e[4]>>>2,re=e[4]<<30|e[5]>>>2,V=e[14]<<6|e[15]>>>26,j=e[15]<<6|e[14]>>>26,b=e[25]<<11|e[24]>>>21,E=e[24]<<11|e[25]>>>21,J=e[34]<<15|e[35]>>>17,Z=e[35]<<15|e[34]>>>17,R=e[45]<<29|e[44]>>>3,L=e[44]<<29|e[45]>>>3,I=e[6]<<28|e[7]>>>4,C=e[7]<<28|e[6]>>>4,ne=e[17]<<23|e[16]>>>9,ie=e[16]<<23|e[17]>>>9,x=e[26]<<25|e[27]>>>7,M=e[27]<<25|e[26]>>>7,S=e[36]<<21|e[37]>>>11,T=e[37]<<21|e[36]>>>11,$=e[47]<<24|e[46]>>>8,ee=e[46]<<24|e[47]>>>8,G=e[8]<<27|e[9]>>>5,z=e[9]<<27|e[8]>>>5,B=e[18]<<20|e[19]>>>12,k=e[19]<<20|e[18]>>>12,ae=e[29]<<7|e[28]>>>25,se=e[28]<<7|e[29]>>>25,K=e[38]<<8|e[39]>>>24,F=e[39]<<8|e[38]>>>24,A=e[48]<<14|e[49]>>>18,w=e[49]<<14|e[48]>>>18,e[0]=h^~v&b,e[1]=y^~m&E,e[10]=I^~B&P,e[11]=C^~k&O,e[20]=U^~V&x,e[21]=D^~j&M,e[30]=G^~H&Q,e[31]=z^~W&X,e[40]=te^~ne&ae,e[41]=re^~ie&se,e[2]=v^~b&S,e[3]=m^~E&T,e[12]=B^~P&N,e[13]=k^~O&_,e[22]=V^~x&K,e[23]=j^~M&F,e[32]=H^~Q&J,e[33]=W^~X&Z,e[42]=ne^~ae&oe,e[43]=ie^~se&ue,e[4]=b^~S&A,e[5]=E^~T&w,e[14]=P^~N&R,e[15]=O^~_&L,e[24]=x^~K&q,e[25]=M^~F&Y,e[34]=Q^~J&$,e[35]=X^~Z&ee,e[44]=ae^~oe&ce,e[45]=se^~ue&le,e[6]=S^~A&h,e[7]=T^~w&y,e[16]=N^~R&I,e[17]=_^~L&C,e[26]=K^~q&U,e[27]=F^~Y&D,e[36]=J^~$&G,e[37]=Z^~ee&z,e[46]=oe^~ce&te,e[47]=ue^~le&re,e[8]=A^~h&v,e[9]=w^~y&m,e[18]=R^~I&B,e[19]=L^~C&k,e[28]=q^~U&V,e[29]=Y^~D&j,e[38]=$^~G&H,e[39]=ee^~z&W,e[48]=ce^~te&ne,e[49]=le^~re&ie,e[0]^=g[n],e[1]^=g[n+1]};if(l)e.exports=k;else{for(O=0;O<P.length;++O)u[P[O]]=k[P[O]];f&&(void 0===(a=function(){return k}.call(t,r,t,e))||(e.exports=a))}}()}).call(this,r(25),r(17))},function(e,t){(function(t){e.exports=t}).call(this,{})},function(e,t,r){"use strict";var n=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var r in e)Object.hasOwnProperty.call(e,r)&&(t[r]=e[r]);return t.default=e,t};Object.defineProperty(t,"__esModule",{value:!0});var i=r(11),a=n(r(72)),s=r(21),o=r(62),u=r(26),c=r(18),l=r(24);function f(e,t){for(void 0===t&&(t=5e3);t--;){var r=i.stringToBytes(e);e=u.base16Encode(c.sha256(r))}return e}function p(e,t,r){void 0===r&&(r=48);for(var n=i.bytesToString(s.concat(e,t),"raw"),o="",u=o;u.length<r;)u+=o=a.create().update(o+n).digest().getBytes();return u}t.encryptSeed=function(e,t,r){var n=f(t,r),a=l.randomBytes(8),c=p(i.stringToBytes(n,"raw"),a),d=i.stringToBytes(c.slice(0,32),"raw"),h=i.stringToBytes(c.slice(32),"raw"),y=o.aesEncrypt(i.stringToBytes(e),d,"CBC",h);return u.base64Encode(s.concat(i.stringToBytes("Salted__"),a,y))},t.decryptSeed=function(e,t,r){var n=f(t,r),a=u.base64Decode(e),s=a.slice(8,16),c=p(i.stringToBytes(n,"raw"),s),l=i.stringToBytes(c.slice(0,32),"raw"),d=i.stringToBytes(c.slice(32),"raw");return i.bytesToString(o.aesDecrypt(a.slice(16),l,"CBC",d))}},function(e,t,r){"use strict";var n=this&&this.__read||function(e,t){var r="function"==typeof Symbol&&e[Symbol.iterator];if(!r)return e;var n,i,a=r.call(e),s=[];try{for(;(void 0===t||t-- >0)&&!(n=a.next()).done;)s.push(n.value)}catch(e){i={error:e}}finally{try{n&&!n.done&&(r=a.return)&&r.call(a)}finally{if(i)throw i.error}}return s};Object.defineProperty(t,"__esModule",{value:!0});var i=r(18),a=r(21);t.merkleVerify=function(e,t,r){var s=Uint8Array.from([0]),o=Uint8Array.from([1]);if(32!==e.length)throw new Error("Failed to parse merkleProof: Invalid rootHash length");for(var u=i.blake2b(a.concat(s,r)),c=[],l=t.map((function(e){return e}));l.length>0;){var f=0===l[0]?"L":"R",p=l[1];if(p<1)throw new Error("Failed to parse merkleProof: Wrong hash size");var d=l.slice(2,2+p);c.push([f,d]),l=l.slice(2+p)}return c.reduce((function(e,t){var r=n(t,2),s=r[0],u=r[1];return i.blake2b(a.concat(o,"R"===s?a.concat(u,e):a.concat(e,u)))}),u).every((function(t,r){return t===e[r]}))}},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n,i,a;t.Utf8ArrayToStr=(n=new Array(128),i=String.fromCodePoint||String.fromCharCode,a=[],function(e){var t,r,s=e.length;a.length=0;for(var o=0;o<s;)(r=e[o++])<=127?t=r:r<=223?t=(31&r)<<6|63&e[o++]:r<=239?t=(15&r)<<12|(63&e[o++])<<6|63&e[o++]:String.fromCodePoint?t=(7&r)<<18|(63&e[o++])<<12|(63&e[o++])<<6|63&e[o++]:(t=63,o+=3),a.push(n[t]||(n[t]=i(t)));return a.join("")})},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),function(e){e.INTEGER="integer",e.BOOLEAN="boolean",e.STRING="string",e.BINARY="binary"}(t.DATA_FIELD_TYPE||(t.DATA_FIELD_TYPE={})),t.anyOf=function(e,t){return new n(e,t)};class n{constructor(e,t){this._items=e,this.type="anyOf",this.discriminatorField="type",this.discriminatorBytePos=0,Object.assign(this,t)}itemByKey(e){const t=this._items.find(([t,r,n])=>n===e||t==e);return t&&{schema:t[1],key:t[0],strKey:t[2]}}itemByByteKey(e){const t=this._items.find(([t,r])=>t===e);return t&&{schema:t[1],key:t[0],strKey:t[2]||t[0].toString(10)}}}},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(41),i=r(39),a=r(23);t.parserFromSchema=(e,r)=>(a,s=0)=>{let o=s;if("array"===e.type){const u=[],{value:c,shift:l}=(e.fromBytes||n.P_SHORT)(a,s);return o+=l,i.range(0,c).forEach(n=>{const i=t.parserFromSchema(e.items,r),{value:s,shift:c}=i(a,o);u.push(s),o+=c}),{value:u,shift:o-s}}if("object"===e.type){if(e.optional){const e=1===a[o];if(o+=1,!e)return{value:void 0,shift:1}}if(e.withLength){const t=e.withLength.fromBytes(a,o);o+=t.shift}const n={};return e.schema.forEach(e=>{const[i,s]=e,u=t.parserFromSchema(s,r),{value:c,shift:l}=u(a,o);o+=l,void 0!==c&&(Array.isArray(i)?Object.assign(n,c):n[i]=c)}),{value:n,shift:o-s}}if("anyOf"===e.type){const i=(e.fromBytes||n.P_BYTE)(a,o+e.discriminatorBytePos);e.valueField&&0===e.discriminatorBytePos&&(o+=i.shift);const u=e.itemByByteKey(i.value);if(null==u)throw new Error("Failed to get schema for item with bytecode: "+i.value);const c=t.parserFromSchema(u.schema,r),{value:l,shift:f}=c(a,o);return o+=f,{value:e.valueField?{[e.discriminatorField]:u.strKey,[e.valueField]:l}:l,shift:o-s}}if("dataTxField"===e.type){const i=n.byteToStringWithLength(a,o);o+=i.shift;let s=n.P_BYTE(a,o);o+=s.shift;const u=[...e.items].find((e,t)=>t===s.value);if(!u)throw new Error("Parser Error: Unknown dataTxField type: "+s.value);const c=t.parserFromSchema(u[1],r)(a,o);return{value:{value:c.value,key:i.value,type:u[0]},shift:c.shift+i.shift+s.shift}}if("primitive"===e.type||void 0===e.type){const t=e.fromBytes;let{value:i,shift:o}=t(a,s);return t===n.P_LONG&&r&&(i=r(i)),{value:i,shift:o}}throw new Error("Parser Error: Unknown schema type: "+e.type)},t.parseHeader=e=>{let t=0,r=n.P_BYTE(e,t);t+=r.shift,0===r.value&&(r=n.P_BYTE(e,t),t+=r.shift);let i=n.P_BYTE(e,t);return{type:r.value,version:i.value}},t.parseTx=function(e,r){const{type:n,version:i}=t.parseHeader(e),s=a.getTransactionSchema(n,i);return t.parserFromSchema(s,r)(e).value},t.parseOrder=function(e,r){return t.parserFromSchema(a.orderSchemaV2,r)(e).value}},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(119),{parse:i,stringify:a}=n(),s=r(23),o=r(29),u=r(4);function c(e,t){return 0===e.length?t:"object"==typeof t?c(e.slice(1),t[e[0]]):void 0}function l(e,t){const r=[],n=[];function i(s){return"string"==typeof s&&(l=e,function e(t,r){if(null==r)return!1;if(0===t.length&&("primitive"===r.type||void 0===r.type))return r.toBytes===o.LONG;if("object"===r.type){const n=r.schema.find(([e,r])=>e===t[0]);return e(t.slice(1),n&&n[1])}if("array"===r.type)return e(t.slice(1),r.items);if("dataTxField"===r.type){if("value"!==t[0])return!1;const n=c(u.slice(0,u.length-1),l),i=r.items.get(n.type);return e(t.slice(1),i)}if("anyOf"===r.type){const n=c(u.slice(0,u.length-1),l)[r.discriminatorField],i=r.itemByKey(n);return!!i&&(null!=r.valueField&&u[u.length-1]===r.valueField?e(t.slice(1),i.schema):e(t,i.schema))}return!1}(u=r,t))?s:"boolean"==typeof s||s instanceof Boolean||null===s||"number"==typeof s||s instanceof Number||"string"==typeof s||s instanceof String||s instanceof Date?JSON.stringify(s):Array.isArray(s)?function(e){let t="[";const a=n.length;n[a]=e;for(let n=0;n<e.length;n++){let s=n+"",o=e[n];void 0!==o&&"function"!=typeof o?(r[a]=s,t+=i(o)):t+="null",n<e.length-1&&(t+=",")}return n.length=a,r.length=a,t+="]",t}(s):s&&"object"==typeof s?function(e){let t=!0,s="{";const o=n.length;n[o]=e;for(let n in e)if(e.hasOwnProperty(n)){let u=e[n];a(u)&&(t?t=!1:s+=",",s+='"'+n+'":',r[o]=n,s+=i(u))}return n.length=o,r.length=o,s+="}",s}(s):void 0;var u,l}function a(e){return void 0!==e&&"function"!=typeof e}return i(e)||""}t.stringifyWithSchema=l,t.parseTx=function(e,t){const r=i(e);return t?u.convertTxLongFields(r,t):r},t.stringifyTx=function(e,t){const{type:r,version:n}=e,i=s.getTransactionSchema(r,n);return l(u.convertLongFields(e,i,void 0,t),i)},t.parseOrder=function(e,t){const r=i(e),n=2===r.version?s.orderSchemaV2:s.orderSchemaV1;return t?u.convertLongFields(r,n,t):r},t.stringifyOrder=function(e,t){const r=2===e.version?s.orderSchemaV2:s.orderSchemaV1;return l(u.convertLongFields(e,r,void 0,t),r)}},function(e,t,r){"use strict";e.exports=function(e){var t={strict:!1};null!=e&&!0===e.strict&&(t.strict=!0);var r,n,i,a,s={'"':'"',"\\":"\\","/":"/",b:"\b",f:"\f",n:"\n",r:"\r",t:"\t"},o=function(e){throw{name:"SyntaxError",message:e,at:r,text:i}},u=function(e){return e&&e!==n&&o("Expected '"+e+"' instead of '"+n+"'"),n=i.charAt(r),r+=1,n},c=function(){var t,r="";for("-"===n&&(r="-",u("-"));n>="0"&&n<="9";)r+=n,u();if("."===n)for(r+=".";u()&&n>="0"&&n<="9";)r+=n;if("e"===n||"E"===n)for(r+=n,u(),"-"!==n&&"+"!==n||(r+=n,u());n>="0"&&n<="9";)r+=n,u();return t=+r,e&&e.parse?e.parse(r):isFinite(t)?r.length>15?r:t:void o("Bad number")},l=function(){var e,t,r,i="";if('"'===n)for(;u();){if('"'===n)return u(),i;if("\\"===n)if(u(),"u"===n){for(r=0,t=0;t<4&&(e=parseInt(u(),16),isFinite(e));t+=1)r=16*r+e;i+=String.fromCharCode(r)}else{if("string"!=typeof s[n])break;i+=s[n]}else i+=n}o("Bad string")},f=function(){for(;n&&n<=" ";)u()};a=function(){switch(f(),n){case"{":return function(){var e,r={};if("{"===n){if(u("{"),f(),"}"===n)return u("}"),r;for(;n;){if(e=l(),f(),u(":"),!0===t.strict&&Object.hasOwnProperty.call(r,e)&&o('Duplicate key "'+e+'"'),r[e]=a(),f(),"}"===n)return u("}"),r;u(","),f()}}o("Bad object")}();case"[":return function(){var e=[];if("["===n){if(u("["),f(),"]"===n)return u("]"),e;for(;n;){if(e.push(a()),f(),"]"===n)return u("]"),e;u(","),f()}}o("Bad array")}();case'"':return l();case"-":return c();default:return n>="0"&&n<="9"?c():function(){switch(n){case"t":return u("t"),u("r"),u("u"),u("e"),!0;case"f":return u("f"),u("a"),u("l"),u("s"),u("e"),!1;case"n":return u("n"),u("u"),u("l"),u("l"),null}o("Unexpected '"+n+"'")}()}};var p,d,h,y=/[\\"\u0000-\u001f\u007f-\u009f\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g,g={"\b":"\\b","\t":"\\t","\n":"\\n","\f":"\\f","\r":"\\r",'"':'\\"',"\\":"\\\\"};function v(e){return y.lastIndex=0,y.test(e)?'"'+e.replace(y,(function(e){var t=g[e];return"string"==typeof t?t:"\\u"+("0000"+e.charCodeAt(0).toString(16)).slice(-4)}))+'"':'"'+e+'"'}return{parse:function(e,t){var s;return i=e+"",r=0,n=" ",s=a(),f(),n&&o("Syntax error"),"function"==typeof t?function e(r,n){var i,a=r[n];return a&&"object"==typeof a&&Object.keys(a).forEach((function(t){void 0!==(i=e(a,t))?a[t]=i:delete a[t]})),t.call(r,n,a)}({"":s},""):s},stringify:function(t,r,n){var i;if(p="",d="","number"==typeof n)for(i=0;i<n;i+=1)d+=" ";else"string"==typeof n&&(d=n);if(h=r,r&&"function"!=typeof r&&("object"!=typeof r||"number"!=typeof r.length))throw new Error("JSON.stringify");return function t(r,n){var i,a,s,o,u,c=p,l=n[r],f=e&&e.isInstance&&e.isInstance(l);switch(f&&!l.isFinite()&&(l=null),f?l=e.stringify(l):l&&"object"==typeof l&&"function"==typeof l.toJSON&&(l=l.toJSON(r)),"function"==typeof h&&(l=h.call(n,r,l)),typeof l){case"string":return f?l:v(l);case"number":return isFinite(l)?String(l):"null";case"boolean":return String(l);case"object":if(!l)return"null";if(p+=d,u=[],"[object Array]"===Object.prototype.toString.apply(l)){for(o=l.length,i=0;i<o;i+=1)u[i]=t(i,l)||"null";return s=0===u.length?"[]":p?"[\n"+p+u.join(",\n"+p)+"\n"+c+"]":"["+u.join(",")+"]",p=c,s}if(h&&"object"==typeof h)for(o=h.length,i=0;i<o;i+=1)"string"==typeof h[i]&&(s=t(a=h[i],l))&&u.push(v(a)+(p?": ":":")+s);else for(a in l)Object.prototype.hasOwnProperty.call(l,a)&&(s=t(a,l))&&u.push(v(a)+(p?": ":":")+s);return s=0===u.length?"{}":p?"{\n"+p+u.join(",\n"+p)+"\n"+c+"}":"{"+u.join(",")+"}",p=c,s}}("",{"":t})}}}},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.transferValidator=void 0;const n=r(7),i=r(0),a={type:n.isEq(i.TRANSACTION_TYPE.TRANSFER),senderPublicKey:n.isPublicKey,version:n.orEq([void 0,2,3]),assetId:n.isAssetId,feeAssetId:n.isAssetId,recipient:n.isRecipient,amount:n.isNumberLike,attachment:n.isAttachment,fee:n.isNumberLike,timestamp:n.isNumber,proofs:n.ifElse(n.isArray,n.defaultValue(!0),n.orEq([void 0]))};t.transferValidator=n.validateByShema(a,n.getError)},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.massTransferValidator=void 0;const n=r(0),i=r(7),a={type:i.isEq(n.TRANSACTION_TYPE.MASS_TRANSFER),senderPublicKey:i.isPublicKey,version:i.orEq([void 0,0,1,2]),transfers:i.validatePipe(i.isArray,i.pipe(i.prop("length"),i.gte(0)),e=>e.every(i.validatePipe(i.isRequired(!0),i.pipe(i.prop("recipient"),i.isRecipient),i.pipe(i.prop("amount"),i.isNumberLike)))),assetId:i.isAssetId,attachment:i.isAttachment,fee:i.isNumberLike,timestamp:i.isNumber,proofs:i.ifElse(i.isArray,i.defaultValue(!0),i.orEq([void 0]))};t.massTransferValidator=i.validateByShema(a,i.getError)},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.aliasValidator=void 0;const n=r(7),i=r(0),a={type:n.isEq(i.TRANSACTION_TYPE.ALIAS),version:n.orEq([void 0,2,3]),senderPublicKey:n.isPublicKey,alias:n.isValidAliasName,fee:n.isNumberLike,chainId:n.isNumber,timestamp:n.isNumber,proofs:n.ifElse(n.isArray,n.defaultValue(!0),n.orEq([void 0]))};t.aliasValidator=n.validateByShema(a,n.getError)},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.burnValidator=void 0;const n=r(0),i=r(7),a={type:i.isEq(n.TRANSACTION_TYPE.BURN),senderPublicKey:i.isPublicKey,version:i.orEq([void 0,2,3]),assetId:i.isAssetId,amount:i.isNumberLike,chainId:i.isNumber,fee:i.isNumberLike,timestamp:i.isNumber,proofs:i.ifElse(i.isArray,i.defaultValue(!0),i.orEq([void 0]))};t.burnValidator=i.validateByShema(a,i.getError)},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.cancelLeaseValidator=void 0;const n=r(0),i=r(7),a={type:i.isEq(n.TRANSACTION_TYPE.CANCEL_LEASE),senderPublicKey:i.isPublicKey,version:i.orEq([void 0,2,3]),leaseId:i.isAssetId,chainId:i.isNumber,fee:i.isNumberLike,timestamp:i.isNumber,proofs:i.ifElse(i.isArray,i.defaultValue(!0),i.orEq([void 0]))};t.cancelLeaseValidator=i.validateByShema(a,i.getError)},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.dataValidator=void 0;const n=r(0),i=r(7),a={type:i.isEq(n.TRANSACTION_TYPE.DATA),senderPublicKey:i.isPublicKey,version:i.orEq([void 0,0,1,2]),data:e=>i.isArray(e)&&e.every(e=>i.isValidData(e)||i.isValidDeleteRequest),fee:i.isNumberLike,timestamp:i.isNumber,proofs:i.ifElse(i.isArray,i.defaultValue(!0),i.orEq([void 0]))};t.dataValidator=i.validateByShema(a,i.getError)},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.sponsorshipValidator=void 0;const n=r(0),i=r(7),a={type:i.isEq(n.TRANSACTION_TYPE.SPONSORSHIP),senderPublicKey:i.isPublicKey,version:i.orEq([void 0,0,1,2]),assetId:i.isAssetId,minSponsoredAssetFee:i.isNumberLike,fee:i.isNumberLike,timestamp:i.isNumber,proofs:i.ifElse(i.isArray,i.defaultValue(!0),i.orEq([void 0]))};t.sponsorshipValidator=i.validateByShema(a,i.getError)},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.setAssetScriptValidator=void 0;const n=r(0),i=r(7),a={type:i.isEq(n.TRANSACTION_TYPE.SET_ASSET_SCRIPT),senderPublicKey:i.isPublicKey,version:i.orEq([void 0,0,1,2]),assetId:i.isAssetId,chainId:i.isNumber,fee:i.isNumberLike,timestamp:i.isNumber,script:i.isBase64,proofs:i.ifElse(i.isArray,i.defaultValue(!0),i.orEq([void 0]))};t.setAssetScriptValidator=i.validateByShema(a,i.getError)},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.setScriptValidator=void 0;const n=r(0),i=r(7),a={type:i.isEq(n.TRANSACTION_TYPE.SET_SCRIPT),senderPublicKey:i.isPublicKey,version:i.orEq([void 0,0,1,2]),chainId:i.isNumber,fee:i.isNumberLike,timestamp:i.isNumber,script:i.ifElse(i.isEq(null),i.defaultValue(!0),i.isBase64),proofs:i.ifElse(i.isArray,i.defaultValue(!0),i.orEq([void 0]))};t.setScriptValidator=i.validateByShema(a,i.getError)},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.reissueValidator=void 0;const n=r(0),i=r(7),a={type:i.isEq(n.TRANSACTION_TYPE.REISSUE),senderPublicKey:i.isPublicKey,version:i.orEq([void 0,2,3]),assetId:i.isAssetId,quantity:i.isNumberLike,reissuable:i.isBoolean,chainId:i.isNumber,fee:i.isNumberLike,timestamp:i.isNumber,proofs:i.ifElse(i.isArray,i.defaultValue(!0),i.orEq([void 0]))};t.reissueValidator=i.validateByShema(a,i.getError)},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.issueValidator=void 0;const n=r(0),i=r(7),a={type:i.isEq(n.TRANSACTION_TYPE.ISSUE),version:i.orEq([void 0,2,3]),senderPublicKey:i.isPublicKey,name:i.isValidAssetName,description:i.isValidAssetDescription,quantity:i.isNumberLike,decimals:i.isNumber,reissuable:i.isBoolean,script:i.ifElse(i.isRequired(!0),i.isBase64,i.defaultValue(!0)),chainId:i.isNumber,fee:i.isNumberLike,timestamp:i.isNumber,proofs:i.ifElse(i.isArray,i.defaultValue(!0),i.orEq([void 0]))};t.issueValidator=i.validateByShema(a,i.getError)},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.leaseValidator=void 0;const n=r(0),i=r(7),a={type:i.isEq(n.TRANSACTION_TYPE.LEASE),version:i.orEq([void 0,2,3]),senderPublicKey:i.isPublicKey,recipient:i.isRecipient,amount:i.isNumberLike,fee:i.isNumberLike,timestamp:i.isNumber,proofs:i.ifElse(i.isArray,i.defaultValue(!0),i.orEq([void 0]))};t.leaseValidator=i.validateByShema(a,i.getError)},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.invokeValidator=void 0;const n=r(0),i=r(7),a={type:i.isEq(n.TRANSACTION_TYPE.INVOKE_SCRIPT),senderPublicKey:i.isPublicKey,version:i.orEq([void 0,0,1,2]),dApp:i.isRecipient,call:i.ifElse(i.isRequired(!1),i.defaultValue(!0),i.validatePipe(i.pipe(i.prop("function"),i.isString),i.pipe(i.prop("function"),i.prop("length"),i.gte(0)),i.pipe(i.prop("args"),i.isArray),e=>e.every(i.validatePipe(i.isRequired(!0),i.isValidDataPair)))),payment:i.validatePipe(i.isArray,e=>e.every(i.validatePipe(i.pipe(i.prop("amount"),i.isNumberLike),i.pipe(i.prop("assetId"),i.isAssetId)))),fee:i.isNumberLike,feeAssetId:i.isAssetId,chainId:i.isNumber,timestamp:i.isNumber,proofs:i.ifElse(i.isArray,i.defaultValue(!0),i.orEq([void 0]))};t.invokeValidator=i.validateByShema(a,i.getError)},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.exchangeValidator=void 0;const n=r(0),i=r(75),a=r(7),s={type:a.isEq(n.TRANSACTION_TYPE.EXCHANGE),senderPublicKey:a.isPublicKey,version:a.orEq([void 0,0,1,2,3]),order1:a.validatePipe(a.isRequired(!0),i.orderValidator),order2:a.validatePipe(a.isRequired(!0),i.orderValidator),amount:a.isNumberLike,price:a.isNumberLike,buyMatcherFee:a.isNumberLike,sellMatcherFee:a.isNumberLike,fee:a.isNumberLike,timestamp:a.isNumber,proofs:a.ifElse(a.isArray,a.defaultValue(!0),a.orEq([void 0]))};t.exchangeValidator=a.validateByShema(s,a.getError)},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.updateAssetInfoValidator=void 0;const n=r(0),i=r(7),a={type:i.isEq(n.TRANSACTION_TYPE.UPDATE_ASSET_INFO),senderPublicKey:i.isPublicKey,name:i.isValidAssetName,description:i.isValidAssetDescription,version:i.orEq([1]),assetId:i.isAssetId,feeAssetId:i.isAssetId,fee:i.isNumberLike,timestamp:i.isNumber,proofs:i.ifElse(i.isArray,i.defaultValue(!0),i.orEq([void 0]))};t.updateAssetInfoValidator=i.validateByShema(a,i.getError)},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.invokeExpressionValidator=void 0;const n=r(0),i=r(7),a={type:i.isEq(n.TRANSACTION_TYPE.INVOKE_EXPRESSION),senderPublicKey:i.isPublicKey,version:i.isEq(1),expression:i.isBase64,fee:i.isNumberLike,feeAssetId:i.isAssetId,chainId:i.isNumber,timestamp:i.isNumber,proofs:i.ifElse(i.isArray,i.defaultValue(!0),i.orEq([void 0]))};t.invokeExpressionValidator=i.validateByShema(a,i.getError)},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.cancelOrderValidator=void 0;const n=r(7),i={sender:n.isPublicKey,orderId:n.isHash,signature:n.isBase58,hash:n.isBase58};t.cancelOrderValidator=n.validateByShema(i,n.getError)},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.customDataValidator=void 0;const n=r(7),i={version:n.isEq(1),binary:n.isBase64},a={version:n.isEq(2),data:n.validatePipe(n.isArray,e=>e.every(n.validatePipe(n.isRequired(!0),n.isValidDataPair)))},s=n.validateByShema(i,n.getError),o=n.validateByShema(a,n.getError);t.customDataValidator=n.ifElse(n.pipe(n.prop("version"),n.isEq(1)),s,o)},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.authValidator=void 0;const n=r(7),i={data:n.isString,host:n.isString};t.authValidator=n.validateByShema(i,n.getError)},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.authValidator=void 0;const n=r(7),i={publicKey:n.isPublicKey,timestamp:n.isNumber};t.authValidator=n.validateByShema(i,n.getError)},function(e,t,r){"use strict";e.exports=r(141)},function(e,t,r){"use strict";var n=t;function i(){n.util._configure(),n.Writer._configure(n.BufferWriter),n.Reader._configure(n.BufferReader)}n.build="minimal",n.Writer=r(77),n.BufferWriter=r(150),n.Reader=r(78),n.BufferReader=r(151),n.util=r(14),n.rpc=r(152),n.roots=r(154),n.configure=i,i()},function(e,t,r){"use strict";e.exports=function(e,t){var r=new Array(arguments.length-1),n=0,i=2,a=!0;for(;i<arguments.length;)r[n++]=arguments[i++];return new Promise((function(i,s){r[n]=function(e){if(a)if(a=!1,e)s(e);else{for(var t=new Array(arguments.length-1),r=0;r<t.length;)t[r++]=arguments[r];i.apply(null,t)}};try{e.apply(t||null,r)}catch(e){a&&(a=!1,s(e))}}))}},function(e,t,r){"use strict";var n=t;n.length=function(e){var t=e.length;if(!t)return 0;for(var r=0;--t%4>1&&"="===e.charAt(t);)++r;return Math.ceil(3*e.length)/4-r};for(var i=new Array(64),a=new Array(123),s=0;s<64;)a[i[s]=s<26?s+65:s<52?s+71:s<62?s-4:s-59|43]=s++;n.encode=function(e,t,r){for(var n,a=null,s=[],o=0,u=0;t<r;){var c=e[t++];switch(u){case 0:s[o++]=i[c>>2],n=(3&c)<<4,u=1;break;case 1:s[o++]=i[n|c>>4],n=(15&c)<<2,u=2;break;case 2:s[o++]=i[n|c>>6],s[o++]=i[63&c],u=0}o>8191&&((a||(a=[])).push(String.fromCharCode.apply(String,s)),o=0)}return u&&(s[o++]=i[n],s[o++]=61,1===u&&(s[o++]=61)),a?(o&&a.push(String.fromCharCode.apply(String,s.slice(0,o))),a.join("")):String.fromCharCode.apply(String,s.slice(0,o))};n.decode=function(e,t,r){for(var n,i=r,s=0,o=0;o<e.length;){var u=e.charCodeAt(o++);if(61===u&&s>1)break;if(void 0===(u=a[u]))throw Error("invalid encoding");switch(s){case 0:n=u,s=1;break;case 1:t[r++]=n<<2|(48&u)>>4,n=u,s=2;break;case 2:t[r++]=(15&n)<<4|(60&u)>>2,n=u,s=3;break;case 3:t[r++]=(3&n)<<6|u,s=0}}if(1===s)throw Error("invalid encoding");return r-i},n.test=function(e){return/^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$/.test(e)}},function(e,t,r){"use strict";function n(){this._listeners={}}e.exports=n,n.prototype.on=function(e,t,r){return(this._listeners[e]||(this._listeners[e]=[])).push({fn:t,ctx:r||this}),this},n.prototype.off=function(e,t){if(void 0===e)this._listeners={};else if(void 0===t)this._listeners[e]=[];else for(var r=this._listeners[e],n=0;n<r.length;)r[n].fn===t?r.splice(n,1):++n;return this},n.prototype.emit=function(e){var t=this._listeners[e];if(t){for(var r=[],n=1;n<arguments.length;)r.push(arguments[n++]);for(n=0;n<t.length;)t[n].fn.apply(t[n++].ctx,r)}return this}},function(e,t,r){"use strict";function n(e){return"undefined"!=typeof Float32Array?function(){var t=new Float32Array([-0]),r=new Uint8Array(t.buffer),n=128===r[3];function i(e,n,i){t[0]=e,n[i]=r[0],n[i+1]=r[1],n[i+2]=r[2],n[i+3]=r[3]}function a(e,n,i){t[0]=e,n[i]=r[3],n[i+1]=r[2],n[i+2]=r[1],n[i+3]=r[0]}function s(e,n){return r[0]=e[n],r[1]=e[n+1],r[2]=e[n+2],r[3]=e[n+3],t[0]}function o(e,n){return r[3]=e[n],r[2]=e[n+1],r[1]=e[n+2],r[0]=e[n+3],t[0]}e.writeFloatLE=n?i:a,e.writeFloatBE=n?a:i,e.readFloatLE=n?s:o,e.readFloatBE=n?o:s}():function(){function t(e,t,r,n){var i=t<0?1:0;if(i&&(t=-t),0===t)e(1/t>0?0:2147483648,r,n);else if(isNaN(t))e(2143289344,r,n);else if(t>34028234663852886e22)e((i<<31|2139095040)>>>0,r,n);else if(t<11754943508222875e-54)e((i<<31|Math.round(t/1401298464324817e-60))>>>0,r,n);else{var a=Math.floor(Math.log(t)/Math.LN2);e((i<<31|a+127<<23|8388607&Math.round(t*Math.pow(2,-a)*8388608))>>>0,r,n)}}function r(e,t,r){var n=e(t,r),i=2*(n>>31)+1,a=n>>>23&255,s=8388607&n;return 255===a?s?NaN:i*(1/0):0===a?1401298464324817e-60*i*s:i*Math.pow(2,a-150)*(s+8388608)}e.writeFloatLE=t.bind(null,i),e.writeFloatBE=t.bind(null,a),e.readFloatLE=r.bind(null,s),e.readFloatBE=r.bind(null,o)}(),"undefined"!=typeof Float64Array?function(){var t=new Float64Array([-0]),r=new Uint8Array(t.buffer),n=128===r[7];function i(e,n,i){t[0]=e,n[i]=r[0],n[i+1]=r[1],n[i+2]=r[2],n[i+3]=r[3],n[i+4]=r[4],n[i+5]=r[5],n[i+6]=r[6],n[i+7]=r[7]}function a(e,n,i){t[0]=e,n[i]=r[7],n[i+1]=r[6],n[i+2]=r[5],n[i+3]=r[4],n[i+4]=r[3],n[i+5]=r[2],n[i+6]=r[1],n[i+7]=r[0]}function s(e,n){return r[0]=e[n],r[1]=e[n+1],r[2]=e[n+2],r[3]=e[n+3],r[4]=e[n+4],r[5]=e[n+5],r[6]=e[n+6],r[7]=e[n+7],t[0]}function o(e,n){return r[7]=e[n],r[6]=e[n+1],r[5]=e[n+2],r[4]=e[n+3],r[3]=e[n+4],r[2]=e[n+5],r[1]=e[n+6],r[0]=e[n+7],t[0]}e.writeDoubleLE=n?i:a,e.writeDoubleBE=n?a:i,e.readDoubleLE=n?s:o,e.readDoubleBE=n?o:s}():function(){function t(e,t,r,n,i,a){var s=n<0?1:0;if(s&&(n=-n),0===n)e(0,i,a+t),e(1/n>0?0:2147483648,i,a+r);else if(isNaN(n))e(0,i,a+t),e(2146959360,i,a+r);else if(n>17976931348623157e292)e(0,i,a+t),e((s<<31|2146435072)>>>0,i,a+r);else{var o;if(n<22250738585072014e-324)e((o=n/5e-324)>>>0,i,a+t),e((s<<31|o/4294967296)>>>0,i,a+r);else{var u=Math.floor(Math.log(n)/Math.LN2);1024===u&&(u=1023),e(4503599627370496*(o=n*Math.pow(2,-u))>>>0,i,a+t),e((s<<31|u+1023<<20|1048576*o&1048575)>>>0,i,a+r)}}}function r(e,t,r,n,i){var a=e(n,i+t),s=e(n,i+r),o=2*(s>>31)+1,u=s>>>20&2047,c=4294967296*(1048575&s)+a;return 2047===u?c?NaN:o*(1/0):0===u?5e-324*o*c:o*Math.pow(2,u-1075)*(c+4503599627370496)}e.writeDoubleLE=t.bind(null,i,0,4),e.writeDoubleBE=t.bind(null,a,4,0),e.readDoubleLE=r.bind(null,s,0,4),e.readDoubleBE=r.bind(null,o,4,0)}(),e}function i(e,t,r){t[r]=255&e,t[r+1]=e>>>8&255,t[r+2]=e>>>16&255,t[r+3]=e>>>24}function a(e,t,r){t[r]=e>>>24,t[r+1]=e>>>16&255,t[r+2]=e>>>8&255,t[r+3]=255&e}function s(e,t){return(e[t]|e[t+1]<<8|e[t+2]<<16|e[t+3]<<24)>>>0}function o(e,t){return(e[t]<<24|e[t+1]<<16|e[t+2]<<8|e[t+3])>>>0}e.exports=n(n)},function(module,exports,__webpack_require__){"use strict";function inquire(moduleName){try{var mod=eval("quire".replace(/^/,"re"))(moduleName);if(mod&&(mod.length||Object.keys(mod).length))return mod}catch(e){}return null}module.exports=inquire},function(e,t,r){"use strict";var n=t;n.length=function(e){for(var t=0,r=0,n=0;n<e.length;++n)(r=e.charCodeAt(n))<128?t+=1:r<2048?t+=2:55296==(64512&r)&&56320==(64512&e.charCodeAt(n+1))?(++n,t+=4):t+=3;return t},n.read=function(e,t,r){if(r-t<1)return"";for(var n,i=null,a=[],s=0;t<r;)(n=e[t++])<128?a[s++]=n:n>191&&n<224?a[s++]=(31&n)<<6|63&e[t++]:n>239&&n<365?(n=((7&n)<<18|(63&e[t++])<<12|(63&e[t++])<<6|63&e[t++])-65536,a[s++]=55296+(n>>10),a[s++]=56320+(1023&n)):a[s++]=(15&n)<<12|(63&e[t++])<<6|63&e[t++],s>8191&&((i||(i=[])).push(String.fromCharCode.apply(String,a)),s=0);return i?(s&&i.push(String.fromCharCode.apply(String,a.slice(0,s))),i.join("")):String.fromCharCode.apply(String,a.slice(0,s))},n.write=function(e,t,r){for(var n,i,a=r,s=0;s<e.length;++s)(n=e.charCodeAt(s))<128?t[r++]=n:n<2048?(t[r++]=n>>6|192,t[r++]=63&n|128):55296==(64512&n)&&56320==(64512&(i=e.charCodeAt(s+1)))?(n=65536+((1023&n)<<10)+(1023&i),++s,t[r++]=n>>18|240,t[r++]=n>>12&63|128,t[r++]=n>>6&63|128,t[r++]=63&n|128):(t[r++]=n>>12|224,t[r++]=n>>6&63|128,t[r++]=63&n|128);return r-a}},function(e,t,r){"use strict";e.exports=function(e,t,r){var n=r||8192,i=n>>>1,a=null,s=n;return function(r){if(r<1||r>i)return e(r);s+r>n&&(a=e(n),s=0);var o=t.call(a,s,s+=r);return 7&s&&(s=1+(7|s)),o}}},function(e,t,r){"use strict";e.exports=i;var n=r(14);function i(e,t){this.lo=e>>>0,this.hi=t>>>0}var a=i.zero=new i(0,0);a.toNumber=function(){return 0},a.zzEncode=a.zzDecode=function(){return this},a.length=function(){return 1};var s=i.zeroHash="\0\0\0\0\0\0\0\0";i.fromNumber=function(e){if(0===e)return a;var t=e<0;t&&(e=-e);var r=e>>>0,n=(e-r)/4294967296>>>0;return t&&(n=~n>>>0,r=~r>>>0,++r>4294967295&&(r=0,++n>4294967295&&(n=0))),new i(r,n)},i.from=function(e){if("number"==typeof e)return i.fromNumber(e);if(n.isString(e)){if(!n.Long)return i.fromNumber(parseInt(e,10));e=n.Long.fromString(e)}return e.low||e.high?new i(e.low>>>0,e.high>>>0):a},i.prototype.toNumber=function(e){if(!e&&this.hi>>>31){var t=1+~this.lo>>>0,r=~this.hi>>>0;return t||(r=r+1>>>0),-(t+4294967296*r)}return this.lo+4294967296*this.hi},i.prototype.toLong=function(e){return n.Long?new n.Long(0|this.lo,0|this.hi,Boolean(e)):{low:0|this.lo,high:0|this.hi,unsigned:Boolean(e)}};var o=String.prototype.charCodeAt;i.fromHash=function(e){return e===s?a:new i((o.call(e,0)|o.call(e,1)<<8|o.call(e,2)<<16|o.call(e,3)<<24)>>>0,(o.call(e,4)|o.call(e,5)<<8|o.call(e,6)<<16|o.call(e,7)<<24)>>>0)},i.prototype.toHash=function(){return String.fromCharCode(255&this.lo,this.lo>>>8&255,this.lo>>>16&255,this.lo>>>24,255&this.hi,this.hi>>>8&255,this.hi>>>16&255,this.hi>>>24)},i.prototype.zzEncode=function(){var e=this.hi>>31;return this.hi=((this.hi<<1|this.lo>>>31)^e)>>>0,this.lo=(this.lo<<1^e)>>>0,this},i.prototype.zzDecode=function(){var e=-(1&this.lo);return this.lo=((this.lo>>>1|this.hi<<31)^e)>>>0,this.hi=(this.hi>>>1^e)>>>0,this},i.prototype.length=function(){var e=this.lo,t=(this.lo>>>28|this.hi<<4)>>>0,r=this.hi>>>24;return 0===r?0===t?e<16384?e<128?1:2:e<2097152?3:4:t<16384?t<128?5:6:t<2097152?7:8:r<128?9:10}},function(e,t,r){"use strict";e.exports=a;var n=r(77);(a.prototype=Object.create(n.prototype)).constructor=a;var i=r(14);function a(){n.call(this)}function s(e,t,r){e.length<40?i.utf8.write(e,t,r):t.utf8Write?t.utf8Write(e,r):t.write(e,r)}a._configure=function(){a.alloc=i._Buffer_allocUnsafe,a.writeBytesBuffer=i.Buffer&&i.Buffer.prototype instanceof Uint8Array&&"set"===i.Buffer.prototype.set.name?function(e,t,r){t.set(e,r)}:function(e,t,r){if(e.copy)e.copy(t,r,0,e.length);else for(var n=0;n<e.length;)t[r++]=e[n++]}},a.prototype.bytes=function(e){i.isString(e)&&(e=i._Buffer_from(e,"base64"));var t=e.length>>>0;return this.uint32(t),t&&this._push(a.writeBytesBuffer,t,e),this},a.prototype.string=function(e){var t=i.Buffer.byteLength(e);return this.uint32(t),t&&this._push(s,t,e),this},a._configure()},function(e,t,r){"use strict";e.exports=a;var n=r(78);(a.prototype=Object.create(n.prototype)).constructor=a;var i=r(14);function a(e){n.call(this,e)}a._configure=function(){i.Buffer&&(a.prototype._slice=i.Buffer.prototype.slice)},a.prototype.string=function(){var e=this.uint32();return this.buf.utf8Slice?this.buf.utf8Slice(this.pos,this.pos=Math.min(this.pos+e,this.len)):this.buf.toString("utf-8",this.pos,this.pos=Math.min(this.pos+e,this.len))},a._configure()},function(e,t,r){"use strict";t.Service=r(153)},function(e,t,r){"use strict";e.exports=i;var n=r(14);function i(e,t,r){if("function"!=typeof e)throw TypeError("rpcImpl must be a function");n.EventEmitter.call(this),this.rpcImpl=e,this.requestDelimited=Boolean(t),this.responseDelimited=Boolean(r)}(i.prototype=Object.create(n.EventEmitter.prototype)).constructor=i,i.prototype.rpcCall=function e(t,r,i,a,s){if(!a)throw TypeError("request must be specified");var o=this;if(!s)return n.asPromise(e,o,t,r,i,a);if(o.rpcImpl)try{return o.rpcImpl(t,r[o.requestDelimited?"encodeDelimited":"encode"](a).finish(),(function(e,r){if(e)return o.emit("error",e,t),s(e);if(null!==r){if(!(r instanceof i))try{r=i[o.responseDelimited?"decodeDelimited":"decode"](r)}catch(e){return o.emit("error",e,t),s(e)}return o.emit("data",r,t),s(null,r)}o.end(!0)}))}catch(e){return o.emit("error",e,t),void setTimeout((function(){s(e)}),0)}else setTimeout((function(){s(Error("already ended"))}),0)},i.prototype.end=function(e){return this.rpcImpl&&(e||this.rpcImpl(null,null,null),this.rpcImpl=null,this.emit("end").off()),this}},function(e,t,r){"use strict";e.exports={}},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.order=void 0;const n=r(2),i=r(5),a=r(4),s=r(6);t.order=function(e,t){const r=i.isOrder(e)?e.assetPair.amountAsset:e.amountAsset,o=i.isOrder(e)?e.assetPair.priceAsset:e.priceAsset,u=i.isOrder(e)?e.proofs:[],{matcherFee:c,matcherPublicKey:l,price:f,amount:p,orderType:d,expiration:h,timestamp:y}=e,g=y||Date.now(),v=i.convertToPairs(t),m=e.senderPublicKey||i.getSenderPublicKey(v,e),b={orderType:d,version:null===e.version?void 0:e.version||2,assetPair:{amountAsset:r,priceAsset:o},price:f,amount:p,timestamp:g,expiration:h||g+25056e5,matcherFee:c||3e5,matcherPublicKey:l,senderPublicKey:m,proofs:u,matcherFeeAssetId:null,id:""};3!==b.version&&4!==b.version||(b.matcherFeeAssetId="WAVES"===e.matcherFeeAssetId?null:e.matcherFeeAssetId);const E=a.binary.serializeOrder(b);return v.forEach(([e,t])=>i.addProof(b,n.signBytes(e,E),t)),s.validate.order(b),b.id=n.base58Encode(n.blake2b(E)),void 0!==b.version&&1!==b.version||(b.signature=b.proofs&&b.proofs[0]),b}},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.cancelOrder=t.cancelOrderParamsToBytes=void 0;const n=r(2),i=r(4),{BASE58_STRING:a}=i.serializePrimitives,s=r(5),o=r(6);t.cancelOrderParamsToBytes=e=>n.concat(a(e.sender),a(e.orderId)),t.cancelOrder=function(e,t){const r=s.convertToPairs(t),i=e.senderPublicKey||s.getSenderPublicKey(r,{senderPublicKey:void 0}),u=n.concat(a(i),a(e.orderId)),c=e.signature||null!=t&&n.signBytes(t,u)||"",l=n.base58Encode(n.blake2b(Uint8Array.from(u))),f={sender:i,orderId:e.orderId,signature:c,hash:l};return o.validate.cancelOrder(f),f}},function(e,t,r){"use strict";var n=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.cancelSubmittedOrder=t.submitOrder=t.verifyWavesAuthData=t.verifyAuthData=t.verifyCustomData=t.verify=t.serialize=t.signTx=t.txTypeMap=void 0;const i=r(4),a=r(2),s=n(r(15)),o=n(r(82)),u=r(48),c=r(49),l=r(42),f=r(43),p=r(45),d=r(46),h=r(47),y=r(30),g=r(50),v=r(51),m=r(5),b=r(52),E=r(44),S=r(53),T=r(54),A=r(79),w=r(80),I=r(81),C=r(0),B=r(55),k=r(83);function P(e){return m.isOrder(e)?i.binary.serializeOrder(e):i.binary.serializeTx(e)}t.txTypeMap={[C.TRANSACTION_TYPE.ISSUE]:{sign:(e,t)=>u.issue(e,t)},[C.TRANSACTION_TYPE.TRANSFER]:{sign:(e,t)=>c.transfer(e,t)},[C.TRANSACTION_TYPE.REISSUE]:{sign:(e,t)=>l.reissue(e,t)},[C.TRANSACTION_TYPE.BURN]:{sign:(e,t)=>f.burn(e,t)},[C.TRANSACTION_TYPE.LEASE]:{sign:(e,t)=>p.lease(e,t)},[C.TRANSACTION_TYPE.CANCEL_LEASE]:{sign:(e,t)=>d.cancelLease(e,t)},[C.TRANSACTION_TYPE.ALIAS]:{sign:(e,t)=>g.alias(e,t)},[C.TRANSACTION_TYPE.MASS_TRANSFER]:{sign:(e,t)=>y.massTransfer(e,t)},[C.TRANSACTION_TYPE.DATA]:{sign:(e,t)=>h.data(e,t)},[C.TRANSACTION_TYPE.SET_SCRIPT]:{sign:(e,t)=>v.setScript(e,t)},[C.TRANSACTION_TYPE.SET_ASSET_SCRIPT]:{sign:(e,t)=>b.setAssetScript(e,t)},[C.TRANSACTION_TYPE.SPONSORSHIP]:{sign:(e,t)=>S.sponsorship(e,t)},[C.TRANSACTION_TYPE.EXCHANGE]:{sign:(e,t)=>E.exchange(e,t)},[C.TRANSACTION_TYPE.INVOKE_SCRIPT]:{sign:(e,t)=>T.invokeScript(e,t)},[C.TRANSACTION_TYPE.UPDATE_ASSET_INFO]:{sign:(e,t)=>B.updateAssetInfo(e,t)},[C.TRANSACTION_TYPE.INVOKE_EXPRESSION]:{sign:(e,t)=>k.invokeExpression(e,t)}},t.signTx=function(e,r){if(!t.txTypeMap[e.type])throw new Error("Unknown tx type: "+e.type);return t.txTypeMap[e.type].sign(e,r)},t.serialize=P,t.verify=function(e,t=0,r){r=r||e.senderPublicKey;const n=P(e),i=null==e.version?e.signature:e.proofs[t];return a.verifySignature(r,n,i)},t.verifyCustomData=function(e){const t=A.serializeCustomData(e);return a.verifySignature(e.publicKey,t,e.signature)},t.verifyAuthData=function(e,t,r){r=r||"W";const n=w.serializeAuthData(t);return a.address({publicKey:e.publicKey},r)===e.address&&a.verifySignature(e.publicKey,n,e.signature)},t.verifyWavesAuthData=function(e,t,r){r=r||"W";const n=I.serializeWavesAuthData(t);return a.address({publicKey:e.publicKey},r)===e.address&&a.verifySignature(e.publicKey,n,e.signature)},t.submitOrder=function(e,t){let r,n;return"string"==typeof t?(n=t,r="matcher/orderbook"):(n=t.matcherUrl,r=t.market?"matcher/orderbook/market":"matcher/orderbook"),s.default({base:n,url:r,options:{method:"POST",body:o.default(e),headers:{"Content-Type":"application/json"}}})},t.cancelSubmittedOrder=function(e,t,r,n){const i=`matcher/orderbook/${t||"WAVES"}/${r||"WAVES"}/cancel`;return s.default({base:n,url:i,options:{method:"POST",body:o.default(e),headers:{"Content-Type":"application/json"}}})}},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t){return new URL(e,t).toString()}},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=new RegExp('((?!\\\\)"\\w+"):\\s*(-?[\\d|\\.]{14,})',"g");t.default=function(e){return JSON.parse(e.replace(n,'$1:"$2"'))}},function(e,t,r){"use strict";var n=function(){if("undefined"!=typeof self)return self;if("undefined"!=typeof window)return window;if(void 0!==n)return n;throw new Error("unable to locate global object")}();e.exports=t=n.fetch,n.fetch&&(t.default=n.fetch.bind(n)),t.Headers=n.Headers,t.Request=n.Request,t.Response=n.Response},function(e,t,r){"use strict";var n=this&&this.__assign||function(){return(n=Object.assign||function(e){for(var t,r=1,n=arguments.length;r<n;r++)for(var i in t=arguments[r])Object.prototype.hasOwnProperty.call(t,i)&&(e[i]=t[i]);return e}).apply(this,arguments)},i=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.broadcast=t.fetchStatus=t.fetchInfo=t.fetchUnconfirmedInfo=t.fetchTransactions=t.fetchUnconfirmed=t.fetchCalculateFee=t.fetchUnconfirmedSize=void 0;var a=r(162),s=r(85),o=i(r(15)),u=i(r(56)),c=r(86),l=i(r(82)),f=r(163);function p(e,t,r){return void 0===r&&(r=Object.create(null)),o.default({base:e,url:"/transactions/unconfirmed/info/"+t,options:r})}function d(e,t,r){return void 0===r&&(r=Object.create(null)),o.default({base:e,url:"/transactions/info/"+t,options:r}).then((function(e){return f.addStateUpdateField(e)}))}t.fetchUnconfirmedSize=function(e){return o.default({base:e,url:"/transactions/unconfirmed/size"})},t.fetchCalculateFee=function(e,t,r){return void 0===r&&(r=Object.create(null)),o.default({base:e,url:"/transactions/calculateFee",options:c.deepAssign(n({},r),{method:"POST",body:l.default(t),headers:{"Content-Type":"application/json"}})})},t.fetchUnconfirmed=function(e,t){return void 0===t&&(t=Object.create(null)),o.default({base:e,url:"/transactions/unconfirmed",options:t})},t.fetchTransactions=function(e,t,r,n,i,a){return void 0===a&&(a=Object.create(null)),o.default({base:e,url:"/transactions/address/"+t+"/limit/"+r+u.default({after:n}),options:a}).then((function(e){var t=e[0];return t.forEach((function(e){return f.addStateUpdateField(e)})),t}))},t.fetchUnconfirmedInfo=p,t.fetchInfo=d,t.fetchStatus=function(e,t){var r={id:"",confirmations:-1,height:-1,inUTX:!1,status:a.TRANSACTION_STATUSES.NOT_FOUND},i=t.map((function(t){return p(e,t).then((function(){return n(n({},r),{id:t,status:a.TRANSACTION_STATUSES.UNCONFIRMED,inUTX:!0})})).catch((function(){return d(e,t).then((function(e){return n(n({},r),{id:t,status:a.TRANSACTION_STATUSES.IN_BLOCKCHAIN,height:e.height,applicationStatus:e.applicationStatus})}))})).catch((function(){return n(n({},r),{id:t})}))}));return Promise.all([s.fetchHeight(e),Promise.all(i)]).then((function(e){var t=e[0].height,r=e[1];return{height:t,statuses:r.map((function(e){return n(n({},e),{confirmations:e.status===a.TRANSACTION_STATUSES.IN_BLOCKCHAIN?t-e.height:e.confirmations})}))}}))},t.broadcast=function(e,t,r){return void 0===r&&(r=Object.create(null)),o.default({base:e,url:"/transactions/broadcast",options:c.deepAssign(n({},r),{method:"POST",body:l.default(t),headers:{"Content-Type":"application/json"}})})}},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.TRANSACTION_STATUSES=t.NAME_MAP=t.TYPE_MAP=void 0,t.TYPE_MAP={3:"issue",4:"transfer",5:"reissue",6:"burn",7:"exchange",8:"lease",9:"cancelLease",10:"alias",11:"massTransfer",12:"data",13:"setScript",14:"sponsorship",15:"setAssetScript",16:"invoke",17:"updateAsset"},t.NAME_MAP={issue:3,transfer:4,reissue:5,burn:6,exchange:7,lease:8,cancelLease:9,alias:10,massTransfer:11,data:12,setScript:13,sponsorship:14,setAssetScript:15,invoke:16,updateAsset:17},t.TRANSACTION_STATUSES={IN_BLOCKCHAIN:"in_blockchain",UNCONFIRMED:"unconfirmed",NOT_FOUND:"not_found"}},function(e,t,r){"use strict";var n=this&&this.__assign||function(){return(n=Object.assign||function(e){for(var t,r=1,n=arguments.length;r<n;r++)for(var i in t=arguments[r])Object.prototype.hasOwnProperty.call(t,i)&&(e[i]=t[i]);return e}).apply(this,arguments)};Object.defineProperty(t,"__esModule",{value:!0}),t.makeStateUpdate=t.addStateUpdateField=void 0;var i=r(164),a=r(57);function s(e,t,r,a){var s=t.map((function(e){return{payment:e,dApp:r,sender:a}})),o=function(e,t){return e.map((function(e){var i;return n(n({},e),((i={})[t]=r,i))}))},u=o(e.transfers,"sender"),c=o(e.leases,"sender"),l=o(e.issues,"address"),f=o(e.data,"address"),p=o(e.reissues,"address"),d=o(e.burns,"address"),h=o(e.sponsorFees,"address"),y=o(e.leaseCancels,"address"),g={payments:s,data:f,transfers:u,reissues:p,issues:l,burns:d,sponsorFees:h,leases:c,leaseCancels:y},v=function(e,t){e.invokes.length&&e.invokes.forEach((function(e){e.payment&&e.payment.forEach((function(r){var n=s.findIndex((function(n){return n.payment.assetId===r.assetId&&n.dApp===e.dApp&&t===e.dApp}));-1!==n?s[n].payment.amount=new i.BigNumber(s[n].payment.amount).add(r.amount).toNumber():s.push({payment:r,sender:t,dApp:e.dApp})})),e.stateChanges.data.forEach((function(t){var r=g.data.findIndex((function(r){return r.key===t.key&&r.address===e.dApp}));-1!==r?g.data[r]=n(n({},t),{address:e.dApp}):g.data.push(n(n({},t),{address:e.dApp}))})),e.stateChanges.burns.forEach((function(t){var r=g.burns.findIndex((function(e){return e.assetId===t.assetId}));-1!==r?g.burns[r].quantity+=t.quantity:g.burns.push(n(n({},t),{address:e.dApp}))})),e.stateChanges.issues.forEach((function(t){return g.issues.push(n(n({},t),{address:e.dApp}))})),e.stateChanges.reissues.forEach((function(t){var r=g.reissues.findIndex((function(e){return e.assetId===t.assetId}));-1!==r?g.reissues[r].quantity+=t.quantity:g.reissues.push(n(n({},t),{address:e.dApp}))})),e.stateChanges.transfers.forEach((function(t){var r=g.transfers.findIndex((function(r){return r.asset===t.asset&&r.address===t.address&&e.dApp===r.sender}));-1!==r?g.transfers[r].amount=new i.BigNumber(g.transfers[r].amount).add(t.amount).toNumber():g.transfers.push(n(n({},t),{sender:e.dApp}))})),e.stateChanges.sponsorFees.forEach((function(t){var r=g.sponsorFees.findIndex((function(r){return r.assetId===t.assetId&&r.address===e.dApp}));-1!==r?g.sponsorFees[r]=n(n({},t),{address:e.dApp}):g.sponsorFees.push(n(n({},t),{address:e.dApp}))})),e.stateChanges.leases.forEach((function(t){return g.leases.push(n(n({},t),{sender:e.dApp}))})),e.stateChanges.leaseCancels.forEach((function(t){return g.leaseCancels.push(n(n({},t),{address:e.dApp}))})),v(e.stateChanges,e.dApp)}))};return v(e,a),g}t.addStateUpdateField=function(e){if(e.type===a.TRANSACTION_TYPE.INVOKE_SCRIPT&&e.stateChanges.invokes&&e.stateChanges.invokes.length){var t=e.payment?e.payment.map((function(e){return{assetId:e.assetId,amount:e.amount}})):[];return Object.defineProperty(e,"stateUpdate",{get:function(){return s(e.stateChanges,t,e.dApp,e.sender)}})}return e},t.makeStateUpdate=s},function(e,t,r){!function(e){"use strict";var t=/^-?(?:\d+(?:\.\d*)?|\.\d+)(?:e[+-]?\d+)?$/i,r=Math.ceil,n=Math.floor,i="[BigNumber Error] ",a=i+"Number primitive has more than 15 significant digits: ",s=1e14,o=14,u=9007199254740991,c=[1,10,100,1e3,1e4,1e5,1e6,1e7,1e8,1e9,1e10,1e11,1e12,1e13],l=1e7,f=1e9;function p(e){var t=0|e;return e>0||e===t?t:t-1}function d(e){for(var t,r,n=1,i=e.length,a=e[0]+"";n<i;){for(t=e[n++]+"",r=o-t.length;r--;t="0"+t);a+=t}for(i=a.length;48===a.charCodeAt(--i););return a.slice(0,i+1||1)}function h(e,t){var r,n,i=e.c,a=t.c,s=e.s,o=t.s,u=e.e,c=t.e;if(!s||!o)return null;if(r=i&&!i[0],n=a&&!a[0],r||n)return r?n?0:-o:s;if(s!=o)return s;if(r=s<0,n=u==c,!i||!a)return n?0:!i^r?1:-1;if(!n)return u>c^r?1:-1;for(o=(u=i.length)<(c=a.length)?u:c,s=0;s<o;s++)if(i[s]!=a[s])return i[s]>a[s]^r?1:-1;return u==c?0:u>c^r?1:-1}function y(e,t,r,a){if(e<t||e>r||e!==n(e))throw Error(i+(a||"Argument")+("number"==typeof e?e<t||e>r?" out of range: ":" not an integer: ":" not a primitive number: ")+String(e))}function g(e){var t=e.c.length-1;return p(e.e/o)==t&&e.c[t]%2!=0}function v(e,t){return(e.length>1?e.charAt(0)+"."+e.slice(1):e)+(t<0?"e":"e+")+t}function m(e,t,r){var n,i;if(t<0){for(i=r+".";++t;i+=r);e=i+e}else if(++t>(n=e.length)){for(i=r,t-=n;--t;i+=r);e+=i}else t<n&&(e=e.slice(0,t)+"."+e.slice(t));return e}var b=function e(b){var E,S,T,A,w,I,C,B,k,P=F.prototype={constructor:F,toString:null,valueOf:null},O=new F(1),N=20,_=4,R=-7,L=21,U=-1e7,D=1e7,V=!1,j=1,x=0,M={prefix:"",groupSize:3,secondaryGroupSize:0,groupSeparator:",",decimalSeparator:".",fractionGroupSize:0,fractionGroupSeparator:" ",suffix:""},K="0123456789abcdefghijklmnopqrstuvwxyz";function F(e,r){var i,s,c,l,f,p,d,h,g=this;if(!(g instanceof F))return new F(e,r);if(null==r){if(e&&!0===e._isBigNumber)return g.s=e.s,void(!e.c||e.e>D?g.c=g.e=null:e.e<U?g.c=[g.e=0]:(g.e=e.e,g.c=e.c.slice()));if((p="number"==typeof e)&&0*e==0){if(g.s=1/e<0?(e=-e,-1):1,e===~~e){for(l=0,f=e;f>=10;f/=10,l++);return void(l>D?g.c=g.e=null:(g.e=l,g.c=[e]))}h=String(e)}else{if(!t.test(h=String(e)))return T(g,h,p);g.s=45==h.charCodeAt(0)?(h=h.slice(1),-1):1}(l=h.indexOf("."))>-1&&(h=h.replace(".","")),(f=h.search(/e/i))>0?(l<0&&(l=f),l+=+h.slice(f+1),h=h.substring(0,f)):l<0&&(l=h.length)}else{if(y(r,2,K.length,"Base"),10==r)return z(g=new F(e),N+g.e+1,_);if(h=String(e),p="number"==typeof e){if(0*e!=0)return T(g,h,p,r);if(g.s=1/e<0?(h=h.slice(1),-1):1,F.DEBUG&&h.replace(/^0\.0*|\./,"").length>15)throw Error(a+e)}else g.s=45===h.charCodeAt(0)?(h=h.slice(1),-1):1;for(i=K.slice(0,r),l=f=0,d=h.length;f<d;f++)if(i.indexOf(s=h.charAt(f))<0){if("."==s){if(f>l){l=d;continue}}else if(!c&&(h==h.toUpperCase()&&(h=h.toLowerCase())||h==h.toLowerCase()&&(h=h.toUpperCase()))){c=!0,f=-1,l=0;continue}return T(g,String(e),p,r)}p=!1,(l=(h=S(h,r,10,g.s)).indexOf("."))>-1?h=h.replace(".",""):l=h.length}for(f=0;48===h.charCodeAt(f);f++);for(d=h.length;48===h.charCodeAt(--d););if(h=h.slice(f,++d)){if(d-=f,p&&F.DEBUG&&d>15&&(e>u||e!==n(e)))throw Error(a+g.s*e);if((l=l-f-1)>D)g.c=g.e=null;else if(l<U)g.c=[g.e=0];else{if(g.e=l,g.c=[],f=(l+1)%o,l<0&&(f+=o),f<d){for(f&&g.c.push(+h.slice(0,f)),d-=o;f<d;)g.c.push(+h.slice(f,f+=o));f=o-(h=h.slice(f)).length}else f-=d;for(;f--;h+="0");g.c.push(+h)}}else g.c=[g.e=0]}function q(e,t,r,n){var i,a,s,o,u;if(null==r?r=_:y(r,0,8),!e.c)return e.toString();if(i=e.c[0],s=e.e,null==t)u=d(e.c),u=1==n||2==n&&(s<=R||s>=L)?v(u,s):m(u,s,"0");else if(a=(e=z(new F(e),t,r)).e,o=(u=d(e.c)).length,1==n||2==n&&(t<=a||a<=R)){for(;o<t;u+="0",o++);u=v(u,a)}else if(t-=s,u=m(u,a,"0"),a+1>o){if(--t>0)for(u+=".";t--;u+="0");}else if((t+=a-o)>0)for(a+1==o&&(u+=".");t--;u+="0");return e.s<0&&i?"-"+u:u}function Y(e,t){for(var r,n=1,i=new F(e[0]);n<e.length;n++){if(!(r=new F(e[n])).s){i=r;break}t.call(i,r)&&(i=r)}return i}function G(e,t,r){for(var n=1,i=t.length;!t[--i];t.pop());for(i=t[0];i>=10;i/=10,n++);return(r=n+r*o-1)>D?e.c=e.e=null:r<U?e.c=[e.e=0]:(e.e=r,e.c=t),e}function z(e,t,i,a){var u,l,f,p,d,h,y,g=e.c,v=c;if(g){e:{for(u=1,p=g[0];p>=10;p/=10,u++);if((l=t-u)<0)l+=o,f=t,y=(d=g[h=0])/v[u-f-1]%10|0;else if((h=r((l+1)/o))>=g.length){if(!a)break e;for(;g.length<=h;g.push(0));d=y=0,u=1,f=(l%=o)-o+1}else{for(d=p=g[h],u=1;p>=10;p/=10,u++);y=(f=(l%=o)-o+u)<0?0:d/v[u-f-1]%10|0}if(a=a||t<0||null!=g[h+1]||(f<0?d:d%v[u-f-1]),a=i<4?(y||a)&&(0==i||i==(e.s<0?3:2)):y>5||5==y&&(4==i||a||6==i&&(l>0?f>0?d/v[u-f]:0:g[h-1])%10&1||i==(e.s<0?8:7)),t<1||!g[0])return g.length=0,a?(t-=e.e+1,g[0]=v[(o-t%o)%o],e.e=-t||0):g[0]=e.e=0,e;if(0==l?(g.length=h,p=1,h--):(g.length=h+1,p=v[o-l],g[h]=f>0?n(d/v[u-f]%v[f])*p:0),a)for(;;){if(0==h){for(l=1,f=g[0];f>=10;f/=10,l++);for(f=g[0]+=p,p=1;f>=10;f/=10,p++);l!=p&&(e.e++,g[0]==s&&(g[0]=1));break}if(g[h]+=p,g[h]!=s)break;g[h--]=0,p=1}for(l=g.length;0===g[--l];g.pop());}e.e>D?e.c=e.e=null:e.e<U&&(e.c=[e.e=0])}return e}function H(e){var t,r=e.e;return null===r?e.toString():(t=d(e.c),t=r<=R||r>=L?v(t,r):m(t,r,"0"),e.s<0?"-"+t:t)}return F.clone=e,F.ROUND_UP=0,F.ROUND_DOWN=1,F.ROUND_CEIL=2,F.ROUND_FLOOR=3,F.ROUND_HALF_UP=4,F.ROUND_HALF_DOWN=5,F.ROUND_HALF_EVEN=6,F.ROUND_HALF_CEIL=7,F.ROUND_HALF_FLOOR=8,F.EUCLID=9,F.config=F.set=function(e){var t,r;if(null!=e){if("object"!=typeof e)throw Error(i+"Object expected: "+e);if(e.hasOwnProperty(t="DECIMAL_PLACES")&&(y(r=e[t],0,f,t),N=r),e.hasOwnProperty(t="ROUNDING_MODE")&&(y(r=e[t],0,8,t),_=r),e.hasOwnProperty(t="EXPONENTIAL_AT")&&((r=e[t])&&r.pop?(y(r[0],-f,0,t),y(r[1],0,f,t),R=r[0],L=r[1]):(y(r,-f,f,t),R=-(L=r<0?-r:r))),e.hasOwnProperty(t="RANGE"))if((r=e[t])&&r.pop)y(r[0],-f,-1,t),y(r[1],1,f,t),U=r[0],D=r[1];else{if(y(r,-f,f,t),!r)throw Error(i+t+" cannot be zero: "+r);U=-(D=r<0?-r:r)}if(e.hasOwnProperty(t="CRYPTO")){if((r=e[t])!==!!r)throw Error(i+t+" not true or false: "+r);if(r){if("undefined"==typeof crypto||!crypto||!crypto.getRandomValues&&!crypto.randomBytes)throw V=!r,Error(i+"crypto unavailable");V=r}else V=r}if(e.hasOwnProperty(t="MODULO_MODE")&&(y(r=e[t],0,9,t),j=r),e.hasOwnProperty(t="POW_PRECISION")&&(y(r=e[t],0,f,t),x=r),e.hasOwnProperty(t="FORMAT")){if("object"!=typeof(r=e[t]))throw Error(i+t+" not an object: "+r);M=r}if(e.hasOwnProperty(t="ALPHABET")){if("string"!=typeof(r=e[t])||/^.$|[+-.\s]|(.).*\1/.test(r))throw Error(i+t+" invalid: "+r);K=r}}return{DECIMAL_PLACES:N,ROUNDING_MODE:_,EXPONENTIAL_AT:[R,L],RANGE:[U,D],CRYPTO:V,MODULO_MODE:j,POW_PRECISION:x,FORMAT:M,ALPHABET:K}},F.isBigNumber=function(e){if(!e||!0!==e._isBigNumber)return!1;if(!F.DEBUG)return!0;var t,r,a=e.c,u=e.e,c=e.s;e:if("[object Array]"=={}.toString.call(a)){if((1===c||-1===c)&&u>=-f&&u<=f&&u===n(u)){if(0===a[0]){if(0===u&&1===a.length)return!0;break e}if((t=(u+1)%o)<1&&(t+=o),String(a[0]).length==t){for(t=0;t<a.length;t++)if((r=a[t])<0||r>=s||r!==n(r))break e;if(0!==r)return!0}}}else if(null===a&&null===u&&(null===c||1===c||-1===c))return!0;throw Error(i+"Invalid BigNumber: "+e)},F.maximum=F.max=function(){return Y(arguments,P.lt)},F.minimum=F.min=function(){return Y(arguments,P.gt)},F.random=(A=9007199254740992*Math.random()&2097151?function(){return n(9007199254740992*Math.random())}:function(){return 8388608*(1073741824*Math.random()|0)+(8388608*Math.random()|0)},function(e){var t,a,s,u,l,p=0,d=[],h=new F(O);if(null==e?e=N:y(e,0,f),u=r(e/o),V)if(crypto.getRandomValues){for(t=crypto.getRandomValues(new Uint32Array(u*=2));p<u;)(l=131072*t[p]+(t[p+1]>>>11))>=9e15?(a=crypto.getRandomValues(new Uint32Array(2)),t[p]=a[0],t[p+1]=a[1]):(d.push(l%1e14),p+=2);p=u/2}else{if(!crypto.randomBytes)throw V=!1,Error(i+"crypto unavailable");for(t=crypto.randomBytes(u*=7);p<u;)(l=281474976710656*(31&t[p])+1099511627776*t[p+1]+4294967296*t[p+2]+16777216*t[p+3]+(t[p+4]<<16)+(t[p+5]<<8)+t[p+6])>=9e15?crypto.randomBytes(7).copy(t,p):(d.push(l%1e14),p+=7);p=u/7}if(!V)for(;p<u;)(l=A())<9e15&&(d[p++]=l%1e14);for(u=d[--p],e%=o,u&&e&&(l=c[o-e],d[p]=n(u/l)*l);0===d[p];d.pop(),p--);if(p<0)d=[s=0];else{for(s=-1;0===d[0];d.splice(0,1),s-=o);for(p=1,l=d[0];l>=10;l/=10,p++);p<o&&(s-=o-p)}return h.e=s,h.c=d,h}),F.sum=function(){for(var e=1,t=arguments,r=new F(t[0]);e<t.length;)r=r.plus(t[e++]);return r},S=function(){function e(e,t,r,n){for(var i,a,s=[0],o=0,u=e.length;o<u;){for(a=s.length;a--;s[a]*=t);for(s[0]+=n.indexOf(e.charAt(o++)),i=0;i<s.length;i++)s[i]>r-1&&(null==s[i+1]&&(s[i+1]=0),s[i+1]+=s[i]/r|0,s[i]%=r)}return s.reverse()}return function(t,r,n,i,a){var s,o,u,c,l,f,p,h,y=t.indexOf("."),g=N,v=_;for(y>=0&&(c=x,x=0,t=t.replace(".",""),f=(h=new F(r)).pow(t.length-y),x=c,h.c=e(m(d(f.c),f.e,"0"),10,n,"0123456789"),h.e=h.c.length),u=c=(p=e(t,r,n,a?(s=K,"0123456789"):(s="0123456789",K))).length;0==p[--c];p.pop());if(!p[0])return s.charAt(0);if(y<0?--u:(f.c=p,f.e=u,f.s=i,p=(f=E(f,h,g,v,n)).c,l=f.r,u=f.e),y=p[o=u+g+1],c=n/2,l=l||o<0||null!=p[o+1],l=v<4?(null!=y||l)&&(0==v||v==(f.s<0?3:2)):y>c||y==c&&(4==v||l||6==v&&1&p[o-1]||v==(f.s<0?8:7)),o<1||!p[0])t=l?m(s.charAt(1),-g,s.charAt(0)):s.charAt(0);else{if(p.length=o,l)for(--n;++p[--o]>n;)p[o]=0,o||(++u,p=[1].concat(p));for(c=p.length;!p[--c];);for(y=0,t="";y<=c;t+=s.charAt(p[y++]));t=m(t,u,s.charAt(0))}return t}}(),E=function(){function e(e,t,r){var n,i,a,s,o=0,u=e.length,c=t%l,f=t/l|0;for(e=e.slice();u--;)o=((i=c*(a=e[u]%l)+(n=f*a+(s=e[u]/l|0)*c)%l*l+o)/r|0)+(n/l|0)+f*s,e[u]=i%r;return o&&(e=[o].concat(e)),e}function t(e,t,r,n){var i,a;if(r!=n)a=r>n?1:-1;else for(i=a=0;i<r;i++)if(e[i]!=t[i]){a=e[i]>t[i]?1:-1;break}return a}function r(e,t,r,n){for(var i=0;r--;)e[r]-=i,i=e[r]<t[r]?1:0,e[r]=i*n+e[r]-t[r];for(;!e[0]&&e.length>1;e.splice(0,1));}return function(i,a,u,c,l){var f,d,h,y,g,v,m,b,E,S,T,A,w,I,C,B,k,P=i.s==a.s?1:-1,O=i.c,N=a.c;if(!(O&&O[0]&&N&&N[0]))return new F(i.s&&a.s&&(O?!N||O[0]!=N[0]:N)?O&&0==O[0]||!N?0*P:P/0:NaN);for(E=(b=new F(P)).c=[],P=u+(d=i.e-a.e)+1,l||(l=s,d=p(i.e/o)-p(a.e/o),P=P/o|0),h=0;N[h]==(O[h]||0);h++);if(N[h]>(O[h]||0)&&d--,P<0)E.push(1),y=!0;else{for(I=O.length,B=N.length,h=0,P+=2,(g=n(l/(N[0]+1)))>1&&(N=e(N,g,l),O=e(O,g,l),B=N.length,I=O.length),w=B,T=(S=O.slice(0,B)).length;T<B;S[T++]=0);k=N.slice(),k=[0].concat(k),C=N[0],N[1]>=l/2&&C++;do{if(g=0,(f=t(N,S,B,T))<0){if(A=S[0],B!=T&&(A=A*l+(S[1]||0)),(g=n(A/C))>1)for(g>=l&&(g=l-1),m=(v=e(N,g,l)).length,T=S.length;1==t(v,S,m,T);)g--,r(v,B<m?k:N,m,l),m=v.length,f=1;else 0==g&&(f=g=1),m=(v=N.slice()).length;if(m<T&&(v=[0].concat(v)),r(S,v,T,l),T=S.length,-1==f)for(;t(N,S,B,T)<1;)g++,r(S,B<T?k:N,T,l),T=S.length}else 0===f&&(g++,S=[0]);E[h++]=g,S[0]?S[T++]=O[w]||0:(S=[O[w]],T=1)}while((w++<I||null!=S[0])&&P--);y=null!=S[0],E[0]||E.splice(0,1)}if(l==s){for(h=1,P=E[0];P>=10;P/=10,h++);z(b,u+(b.e=h+d*o-1)+1,c,y)}else b.e=d,b.r=+y;return b}}(),w=/^(-?)0([xbo])(?=\w[\w.]*$)/i,I=/^([^.]+)\.$/,C=/^\.([^.]+)$/,B=/^-?(Infinity|NaN)$/,k=/^\s*\+(?=[\w.])|^\s+|\s+$/g,T=function(e,t,r,n){var a,s=r?t:t.replace(k,"");if(B.test(s))e.s=isNaN(s)?null:s<0?-1:1;else{if(!r&&(s=s.replace(w,(function(e,t,r){return a="x"==(r=r.toLowerCase())?16:"b"==r?2:8,n&&n!=a?e:t})),n&&(a=n,s=s.replace(I,"$1").replace(C,"0.$1")),t!=s))return new F(s,a);if(F.DEBUG)throw Error(i+"Not a"+(n?" base "+n:"")+" number: "+t);e.s=null}e.c=e.e=null},P.absoluteValue=P.abs=function(){var e=new F(this);return e.s<0&&(e.s=1),e},P.comparedTo=function(e,t){return h(this,new F(e,t))},P.decimalPlaces=P.dp=function(e,t){var r,n,i,a=this;if(null!=e)return y(e,0,f),null==t?t=_:y(t,0,8),z(new F(a),e+a.e+1,t);if(!(r=a.c))return null;if(n=((i=r.length-1)-p(this.e/o))*o,i=r[i])for(;i%10==0;i/=10,n--);return n<0&&(n=0),n},P.dividedBy=P.div=function(e,t){return E(this,new F(e,t),N,_)},P.dividedToIntegerBy=P.idiv=function(e,t){return E(this,new F(e,t),0,1)},P.exponentiatedBy=P.pow=function(e,t){var a,s,u,c,l,f,p,d,h=this;if((e=new F(e)).c&&!e.isInteger())throw Error(i+"Exponent not an integer: "+H(e));if(null!=t&&(t=new F(t)),l=e.e>14,!h.c||!h.c[0]||1==h.c[0]&&!h.e&&1==h.c.length||!e.c||!e.c[0])return d=new F(Math.pow(+H(h),l?2-g(e):+H(e))),t?d.mod(t):d;if(f=e.s<0,t){if(t.c?!t.c[0]:!t.s)return new F(NaN);(s=!f&&h.isInteger()&&t.isInteger())&&(h=h.mod(t))}else{if(e.e>9&&(h.e>0||h.e<-1||(0==h.e?h.c[0]>1||l&&h.c[1]>=24e7:h.c[0]<8e13||l&&h.c[0]<=9999975e7)))return c=h.s<0&&g(e)?-0:0,h.e>-1&&(c=1/c),new F(f?1/c:c);x&&(c=r(x/o+2))}for(l?(a=new F(.5),f&&(e.s=1),p=g(e)):p=(u=Math.abs(+H(e)))%2,d=new F(O);;){if(p){if(!(d=d.times(h)).c)break;c?d.c.length>c&&(d.c.length=c):s&&(d=d.mod(t))}if(u){if(0===(u=n(u/2)))break;p=u%2}else if(z(e=e.times(a),e.e+1,1),e.e>14)p=g(e);else{if(0==(u=+H(e)))break;p=u%2}h=h.times(h),c?h.c&&h.c.length>c&&(h.c.length=c):s&&(h=h.mod(t))}return s?d:(f&&(d=O.div(d)),t?d.mod(t):c?z(d,x,_,void 0):d)},P.integerValue=function(e){var t=new F(this);return null==e?e=_:y(e,0,8),z(t,t.e+1,e)},P.isEqualTo=P.eq=function(e,t){return 0===h(this,new F(e,t))},P.isFinite=function(){return!!this.c},P.isGreaterThan=P.gt=function(e,t){return h(this,new F(e,t))>0},P.isGreaterThanOrEqualTo=P.gte=function(e,t){return 1===(t=h(this,new F(e,t)))||0===t},P.isInteger=function(){return!!this.c&&p(this.e/o)>this.c.length-2},P.isLessThan=P.lt=function(e,t){return h(this,new F(e,t))<0},P.isLessThanOrEqualTo=P.lte=function(e,t){return-1===(t=h(this,new F(e,t)))||0===t},P.isNaN=function(){return!this.s},P.isNegative=function(){return this.s<0},P.isPositive=function(){return this.s>0},P.isZero=function(){return!!this.c&&0==this.c[0]},P.minus=function(e,t){var r,n,i,a,u=this,c=u.s;if(t=(e=new F(e,t)).s,!c||!t)return new F(NaN);if(c!=t)return e.s=-t,u.plus(e);var l=u.e/o,f=e.e/o,d=u.c,h=e.c;if(!l||!f){if(!d||!h)return d?(e.s=-t,e):new F(h?u:NaN);if(!d[0]||!h[0])return h[0]?(e.s=-t,e):new F(d[0]?u:3==_?-0:0)}if(l=p(l),f=p(f),d=d.slice(),c=l-f){for((a=c<0)?(c=-c,i=d):(f=l,i=h),i.reverse(),t=c;t--;i.push(0));i.reverse()}else for(n=(a=(c=d.length)<(t=h.length))?c:t,c=t=0;t<n;t++)if(d[t]!=h[t]){a=d[t]<h[t];break}if(a&&(i=d,d=h,h=i,e.s=-e.s),(t=(n=h.length)-(r=d.length))>0)for(;t--;d[r++]=0);for(t=s-1;n>c;){if(d[--n]<h[n]){for(r=n;r&&!d[--r];d[r]=t);--d[r],d[n]+=s}d[n]-=h[n]}for(;0==d[0];d.splice(0,1),--f);return d[0]?G(e,d,f):(e.s=3==_?-1:1,e.c=[e.e=0],e)},P.modulo=P.mod=function(e,t){var r,n,i=this;return e=new F(e,t),!i.c||!e.s||e.c&&!e.c[0]?new F(NaN):!e.c||i.c&&!i.c[0]?new F(i):(9==j?(n=e.s,e.s=1,r=E(i,e,0,3),e.s=n,r.s*=n):r=E(i,e,0,j),(e=i.minus(r.times(e))).c[0]||1!=j||(e.s=i.s),e)},P.multipliedBy=P.times=function(e,t){var r,n,i,a,u,c,f,d,h,y,g,v,m,b,E,S=this,T=S.c,A=(e=new F(e,t)).c;if(!(T&&A&&T[0]&&A[0]))return!S.s||!e.s||T&&!T[0]&&!A||A&&!A[0]&&!T?e.c=e.e=e.s=null:(e.s*=S.s,T&&A?(e.c=[0],e.e=0):e.c=e.e=null),e;for(n=p(S.e/o)+p(e.e/o),e.s*=S.s,(f=T.length)<(y=A.length)&&(m=T,T=A,A=m,i=f,f=y,y=i),i=f+y,m=[];i--;m.push(0));for(b=s,E=l,i=y;--i>=0;){for(r=0,g=A[i]%E,v=A[i]/E|0,a=i+(u=f);a>i;)r=((d=g*(d=T[--u]%E)+(c=v*d+(h=T[u]/E|0)*g)%E*E+m[a]+r)/b|0)+(c/E|0)+v*h,m[a--]=d%b;m[a]=r}return r?++n:m.splice(0,1),G(e,m,n)},P.negated=function(){var e=new F(this);return e.s=-e.s||null,e},P.plus=function(e,t){var r,n=this,i=n.s;if(t=(e=new F(e,t)).s,!i||!t)return new F(NaN);if(i!=t)return e.s=-t,n.minus(e);var a=n.e/o,u=e.e/o,c=n.c,l=e.c;if(!a||!u){if(!c||!l)return new F(i/0);if(!c[0]||!l[0])return l[0]?e:new F(c[0]?n:0*i)}if(a=p(a),u=p(u),c=c.slice(),i=a-u){for(i>0?(u=a,r=l):(i=-i,r=c),r.reverse();i--;r.push(0));r.reverse()}for((i=c.length)-(t=l.length)<0&&(r=l,l=c,c=r,t=i),i=0;t;)i=(c[--t]=c[t]+l[t]+i)/s|0,c[t]=s===c[t]?0:c[t]%s;return i&&(c=[i].concat(c),++u),G(e,c,u)},P.precision=P.sd=function(e,t){var r,n,i,a=this;if(null!=e&&e!==!!e)return y(e,1,f),null==t?t=_:y(t,0,8),z(new F(a),e,t);if(!(r=a.c))return null;if(n=(i=r.length-1)*o+1,i=r[i]){for(;i%10==0;i/=10,n--);for(i=r[0];i>=10;i/=10,n++);}return e&&a.e+1>n&&(n=a.e+1),n},P.shiftedBy=function(e){return y(e,-u,u),this.times("1e"+e)},P.squareRoot=P.sqrt=function(){var e,t,r,n,i,a=this,s=a.c,o=a.s,u=a.e,c=N+4,l=new F("0.5");if(1!==o||!s||!s[0])return new F(!o||o<0&&(!s||s[0])?NaN:s?a:1/0);if(0==(o=Math.sqrt(+H(a)))||o==1/0?(((t=d(s)).length+u)%2==0&&(t+="0"),o=Math.sqrt(+t),u=p((u+1)/2)-(u<0||u%2),r=new F(t=o==1/0?"5e"+u:(t=o.toExponential()).slice(0,t.indexOf("e")+1)+u)):r=new F(o+""),r.c[0])for((o=(u=r.e)+c)<3&&(o=0);;)if(i=r,r=l.times(i.plus(E(a,i,c,1))),d(i.c).slice(0,o)===(t=d(r.c)).slice(0,o)){if(r.e<u&&--o,"9999"!=(t=t.slice(o-3,o+1))&&(n||"4999"!=t)){+t&&(+t.slice(1)||"5"!=t.charAt(0))||(z(r,r.e+N+2,1),e=!r.times(r).eq(a));break}if(!n&&(z(i,i.e+N+2,0),i.times(i).eq(a))){r=i;break}c+=4,o+=4,n=1}return z(r,r.e+N+1,_,e)},P.toExponential=function(e,t){return null!=e&&(y(e,0,f),e++),q(this,e,t,1)},P.toFixed=function(e,t){return null!=e&&(y(e,0,f),e=e+this.e+1),q(this,e,t)},P.toFormat=function(e,t,r){var n,a=this;if(null==r)null!=e&&t&&"object"==typeof t?(r=t,t=null):e&&"object"==typeof e?(r=e,e=t=null):r=M;else if("object"!=typeof r)throw Error(i+"Argument not an object: "+r);if(n=a.toFixed(e,t),a.c){var s,o=n.split("."),u=+r.groupSize,c=+r.secondaryGroupSize,l=r.groupSeparator||"",f=o[0],p=o[1],d=a.s<0,h=d?f.slice(1):f,y=h.length;if(c&&(s=u,u=c,c=s,y-=s),u>0&&y>0){for(s=y%u||u,f=h.substr(0,s);s<y;s+=u)f+=l+h.substr(s,u);c>0&&(f+=l+h.slice(s)),d&&(f="-"+f)}n=p?f+(r.decimalSeparator||"")+((c=+r.fractionGroupSize)?p.replace(new RegExp("\\d{"+c+"}\\B","g"),"$&"+(r.fractionGroupSeparator||"")):p):f}return(r.prefix||"")+n+(r.suffix||"")},P.toFraction=function(e){var t,r,n,a,s,u,l,f,p,h,y,g,v=this,m=v.c;if(null!=e&&(!(l=new F(e)).isInteger()&&(l.c||1!==l.s)||l.lt(O)))throw Error(i+"Argument "+(l.isInteger()?"out of range: ":"not an integer: ")+H(l));if(!m)return new F(v);for(t=new F(O),p=r=new F(O),n=f=new F(O),g=d(m),s=t.e=g.length-v.e-1,t.c[0]=c[(u=s%o)<0?o+u:u],e=!e||l.comparedTo(t)>0?s>0?t:p:l,u=D,D=1/0,l=new F(g),f.c[0]=0;h=E(l,t,0,1),1!=(a=r.plus(h.times(n))).comparedTo(e);)r=n,n=a,p=f.plus(h.times(a=p)),f=a,t=l.minus(h.times(a=t)),l=a;return a=E(e.minus(r),n,0,1),f=f.plus(a.times(p)),r=r.plus(a.times(n)),f.s=p.s=v.s,y=E(p,n,s*=2,_).minus(v).abs().comparedTo(E(f,r,s,_).minus(v).abs())<1?[p,n]:[f,r],D=u,y},P.toNumber=function(){return+H(this)},P.toPrecision=function(e,t){return null!=e&&y(e,1,f),q(this,e,t,2)},P.toString=function(e){var t,r=this,n=r.s,i=r.e;return null===i?n?(t="Infinity",n<0&&(t="-"+t)):t="NaN":(null==e?t=i<=R||i>=L?v(d(r.c),i):m(d(r.c),i,"0"):10===e?t=m(d((r=z(new F(r),N+i+1,_)).c),r.e,"0"):(y(e,2,K.length,"Base"),t=S(m(d(r.c),i,"0"),10,e,n,!0)),n<0&&r.c[0]&&(t="-"+t)),t},P.valueOf=P.toJSON=function(){return H(this)},P._isBigNumber=!0,P[Symbol.toStringTag]="BigNumber",P[Symbol.for("nodejs.util.inspect.custom")]=P.valueOf,null!=b&&F.set(b),F}(),E=function(){return(E=Object.assign||function(e){for(var t,r=1,n=arguments.length;r<n;r++)for(var i in t=arguments[r])Object.prototype.hasOwnProperty.call(t,i)&&(e[i]=t[i]);return e}).apply(this,arguments)},S=function(){function e(){this.format=e.DEFAULT_FORMAT,b.config({FORMAT:this.format})}return e.prototype.set=function(e){"FORMAT"in e&&(this.format=E({},this.format,e.FORMAT),e.FORMAT=this.format),b.config(e)},e.DEFAULT_FORMAT={prefix:"",decimalSeparator:".",groupSeparator:",",groupSize:3,secondaryGroupSize:0,fractionGroupSeparator:" ",fractionGroupSize:0,suffix:""},e}();e.BigNumber=function(){function e(t){"object"==typeof t&&e.isBigNumber(t)?this.bn=t.bn.plus(0):this.bn=e.toBigNumberJs(t)}return e.prototype.clone=function(){return new e(this)},e.prototype.add=function(t){return new e(this.bn.plus(e.toBigNumberJs(t)))},e.prototype.sub=function(t){return new e(this.bn.minus(e.toBigNumberJs(t)))},e.prototype.mul=function(t){return new e(this.bn.times(e.toBigNumberJs(t)))},e.prototype.div=function(t){return new e(this.bn.div(e.toBigNumberJs(t)))},e.prototype.pow=function(t){return new e(this.bn.pow(e.toBigNumberJs(t)))},e.prototype.sqrt=function(){return new e(this.bn.sqrt())},e.prototype.abs=function(){return new e(this.bn.abs())},e.prototype.mod=function(t){return new e(this.bn.mod(e.toBigNumberJs(t)))},e.prototype.roundTo=function(t,r){return void 0===t&&(t=0),void 0===r&&(r=4),new e(this.bn.dp(t||0,r))},e.prototype.eq=function(t){return this.bn.eq(e.toBigNumberJs(t))},e.prototype.lt=function(t){return this.bn.lt(e.toBigNumberJs(t))},e.prototype.gt=function(t){return this.bn.gt(e.toBigNumberJs(t))},e.prototype.lte=function(t){return this.bn.lte(e.toBigNumberJs(t))},e.prototype.gte=function(t){return this.bn.gte(e.toBigNumberJs(t))},e.prototype.isNaN=function(){return this.bn.isNaN()},e.prototype.isFinite=function(){return this.bn.isFinite()},e.prototype.isZero=function(){return this.eq(0)},e.prototype.isPositive=function(){return this.gt(0)},e.prototype.isNegative=function(){return this.lt(0)},e.prototype.isInt=function(){return this.bn.isInteger()},e.prototype.getDecimalsCount=function(){return this.bn.dp()},e.prototype.isEven=function(){return this.mod(2).eq(0)},e.prototype.isOdd=function(){return!this.isEven()},e.prototype.isInSignedRange=function(){return this.gte(e.MIN_VALUE)&&this.lte(e.MAX_VALUE)},e.prototype.isInUnsignedRange=function(){return this.gte(e.MIN_UNSIGNED_VALUE)&&this.lte(e.MAX_UNSIGNED_VALUE)},e.prototype.toFormat=function(e,t,r){return this.bn.toFormat(e,t,r)},e.prototype.toFixed=function(e,t){return null==e?this.bn.toFixed():this.bn.toFixed(e,t)},e.prototype.toString=function(){return this.toFixed()},e.prototype.toNumber=function(){return this.bn.toNumber()},e.prototype.toJSON=function(){return this.bn.toFixed()},e.prototype.valueOf=function(){return this.bn.valueOf()},e.prototype.toBytes=function(t){var r=void 0===t?{}:t,n=r.isSigned,i=void 0===n||n,a=r.isLong,s=void 0===a||a;if(!this.isInt())throw new Error("Cant create bytes from number with decimals!");if(!i&&this.isNegative())throw new Error("Cant create bytes from negative number in signed mode!");if(s&&i&&!this.isInSignedRange())throw new Error("Number is not from signed numbers range");if(s&&!i&&!this.isInUnsignedRange())throw new Error("Number is not from unsigned numbers range");var o=i&&this.isNegative(),u=o?"1":"0",c=this.bn.plus(u).toString(2).replace("-",""),l=s?64:8*Math.ceil(c.length/8),f=e._toLength(l,c).split(""),p=[];do{p.push(parseInt(f.splice(0,8).join(""),2))}while(f.length);return o?Uint8Array.from(p.map((function(e){return 255-e}))):Uint8Array.from(p)},e.fromBytes=function(t,r){var n=void 0===r?{}:r,i=n.isSigned,a=void 0===i||i,s=n.isLong,o=void 0===s||s;if(o&&8!==t.length)throw new Error("Wrong bytes length! Minimal length is 8 byte!");t=!o&&t.length>0||o?t:[0];var u=!!a&&t[0]>127,c=Array.from(t).map((function(e){return u?255-e:e})).map((function(t){return e._toLength(8,t.toString(2))})).join(""),l=new e(new b(c,2));return u?l.mul(-1).sub(1):l},e.max=function(){for(var t=[],r=0;r<arguments.length;r++)t[r]=arguments[r];return e.toBigNumber(t).reduce((function(e,t){return e.gte(t)?e:t}))},e.min=function(){for(var t=[],r=0;r<arguments.length;r++)t[r]=arguments[r];return e.toBigNumber(t).reduce((function(e,t){return e.lte(t)?e:t}))},e.sum=function(){for(var t=[],r=0;r<arguments.length;r++)t[r]=arguments[r];return e.toBigNumber(t).reduce((function(e,t){return e.add(t)}))},e.isBigNumber=function(t){return t&&"object"==typeof t&&(t instanceof e||Object.entries(e.prototype).filter((function(e){return"_"!==e[0].charAt(0)})).every((function(e){var r=e[0],n=e[1];return r in t&&typeof n==typeof t[r]})))},e.toBigNumber=function(t){return Array.isArray(t)?t.map((function(t){return new e(t)})):new e(t)},e.toBigNumberJs=function(t){return b.isBigNumber(t)?t:t instanceof e?t.bn:new b(t)},e._toLength=function(e,t){return new Array(e).fill("0",0,e).concat(t.split("")).slice(-e).join("")},e.MIN_VALUE=new e("-9223372036854775808"),e.MAX_VALUE=new e("9223372036854775807"),e.MIN_UNSIGNED_VALUE=new e("0"),e.MAX_UNSIGNED_VALUE=new e("18446744073709551615"),e.config=new S,e}(),function(e){!function(e){e[e.ROUND_UP=0]="ROUND_UP",e[e.ROUND_DOWN=1]="ROUND_DOWN",e[e.ROUND_CEIL=2]="ROUND_CEIL",e[e.ROUND_FLOOR=3]="ROUND_FLOOR",e[e.ROUND_HALF_UP=4]="ROUND_HALF_UP",e[e.ROUND_HALF_DOWN=5]="ROUND_HALF_DOWN",e[e.ROUND_HALF_EVEN=6]="ROUND_HALF_EVEN",e[e.ROUND_HALF_CEIL=7]="ROUND_HALF_CEIL",e[e.ROUND_HALF_FLOOR=8]="ROUND_HALF_FLOOR"}(e.ROUND_MODE||(e.ROUND_MODE={}))}(e.BigNumber||(e.BigNumber={}));var T=e.BigNumber;e.default=T,Object.defineProperty(e,"__esModule",{value:!0})}(t)},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});r(57)},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0})},function(e,t,r){"use strict";var n=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.fetchAddresses=t.fetchPublicKey=t.fetchSeed=t.fetchSeq=t.fetchEffectiveBalance=t.fetchEffectiveBalanceConfirmations=t.fetchBalance=t.fetchValidate=t.data=t.fetchScriptInfo=t.fetchBalanceConfirmations=t.fetchBalanceDetails=t.fetchScriptInfoMeta=t.fetchDataKey=void 0;var i=n(r(15)),a=n(r(56));t.fetchDataKey=function(e,t,r,n){return void 0===n&&(n=Object.create(null)),i.default({base:e,url:"/addresses/data/"+t+"/"+encodeURIComponent(r),options:n})},t.fetchScriptInfoMeta=function(e,t){return i.default({base:e,url:"/addresses/scriptInfo/"+t+"/meta"})},t.fetchBalanceDetails=function(e,t,r){return void 0===r&&(r=Object.create(null)),i.default({base:e,url:"/addresses/balance/details/"+t,options:r})},t.fetchBalanceConfirmations=function(e,t,r,n){return void 0===n&&(n=Object.create(null)),i.default({base:e,url:"/addresses/balance/"+t+"/"+r,options:n})},t.fetchScriptInfo=function(e,t,r){return void 0===r&&(r=Object.create(null)),i.default({base:e,url:"/addresses/scriptInfo/"+t,options:r})},t.data=function(e,t,r,n){return void 0===r&&(r=Object.create(null)),void 0===n&&(n=Object.create(null)),i.default({base:e,url:"/addresses/data/"+t+a.default(r),options:n})},t.fetchValidate=function(e,t){return i.default({base:e,url:"/addresses/validate/"+t})},t.fetchBalance=function(e,t,r){return void 0===r&&(r=Object.create(null)),i.default({base:e,url:"/addresses/balance/"+t,options:r})},t.fetchEffectiveBalanceConfirmations=function(e,t,r,n){return void 0===n&&(n=Object.create(null)),i.default({base:e,url:"/addresses/effectiveBalance/"+t+"/"+r,options:n})},t.fetchEffectiveBalance=function(e,t,r){return void 0===r&&(r=Object.create(null)),i.default({base:e,url:"/addresses/effectiveBalance/"+t,options:r})},t.fetchSeq=function(e,t,r){return i.default({base:e,url:"/addresses/seq/"+t+"/"+r})},t.fetchSeed=function(e,t){return i.default({base:e,url:"/addresses/seed/"+t})},t.fetchPublicKey=function(e,t){return i.default({base:e,url:"/addresses/publicKey/"+t})},t.fetchAddresses=function(e){return i.default({base:e,url:"/addresses"})}},function(e,t,r){"use strict";var n=this&&this.__awaiter||function(e,t,r,n){return new(r||(r=Promise))((function(i,a){function s(e){try{u(n.next(e))}catch(e){a(e)}}function o(e){try{u(n.throw(e))}catch(e){a(e)}}function u(e){var t;e.done?i(e.value):(t=e.value,t instanceof r?t:new r((function(e){e(t)}))).then(s,o)}u((n=n.apply(e,t||[])).next())}))},i=this&&this.__generator||function(e,t){var r,n,i,a,s={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]};return a={next:o(0),throw:o(1),return:o(2)},"function"==typeof Symbol&&(a[Symbol.iterator]=function(){return this}),a;function o(a){return function(o){return function(a){if(r)throw new TypeError("Generator is already executing.");for(;s;)try{if(r=1,n&&(i=2&a[0]?n.return:a[0]?n.throw||((i=n.return)&&i.call(n),0):n.next)&&!(i=i.call(n,a[1])).done)return i;switch(n=0,i&&(a=[2&a[0],i.value]),a[0]){case 0:case 1:i=a;break;case 4:return s.label++,{value:a[1],done:!1};case 5:s.label++,n=a[1],a=[0];continue;case 7:a=s.ops.pop(),s.trys.pop();continue;default:if(!(i=s.trys,(i=i.length>0&&i[i.length-1])||6!==a[0]&&2!==a[0])){s=0;continue}if(3===a[0]&&(!i||a[1]>i[0]&&a[1]<i[3])){s.label=a[1];break}if(6===a[0]&&s.label<i[1]){s.label=i[1],i=a;break}if(i&&s.label<i[2]){s.label=i[2],s.ops.push(a);break}i[2]&&s.ops.pop(),s.trys.pop();continue}a=t.call(e,s)}catch(e){a=[6,e],n=0}finally{r=i=0}if(5&a[0])throw a[1];return{value:a[0]?a[1]:void 0,done:!0}}([a,o])}}},a=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.fetchBalanceAddressAssetId=t.fetchAssetsBalance=t.fetchAssetsAddressLimit=t.fetchAssetDistribution=t.fetchAssetsDetails=t.fetchDetails=void 0;var s=r(57),o=a(r(15)),u=r(86);function c(e,t,r){void 0===r&&(r=Object.create(null));var n=t.map((function(e){return"id="+e})).join("&"),i=t.length?"?"+n:"";return o.default({base:e,url:"/assets/details"+i,options:r})}t.fetchDetails=function(e,t,r){void 0===r&&(r=Object.create(null));var n=!Array.isArray(t);return Promise.all(u.toArray(t).map((function(t){return o.default({base:e,url:"/assets/details/"+t,options:r})}))).then((function(e){return n?e[0]:e}))},t.fetchAssetsDetails=c,t.fetchAssetDistribution=function(e,t,r,n,i){return void 0===i&&(i=Object.create(null)),o.default({base:e,url:"/assets/"+t+"/distribution/"+r+"/limit/"+n,options:i})},t.fetchAssetsAddressLimit=function(e,t,r,n){return void 0===n&&(n=Object.create(null)),o.default({base:e,url:"assets/nft/"+t+"/limit/"+r,options:n})},t.fetchAssetsBalance=function(e,t,r){return void 0===r&&(r=Object.create(null)),n(this,void 0,void 0,(function(){var n,a;return i(this,(function(i){switch(i.label){case 0:return[4,o.default({base:e,url:"/assets/balance/"+t,options:r})];case 1:return n=i.sent(),a=n.balances.reduce((function(e,t,r){return t.issueTransaction||(e[t.assetId]=r),e}),{}),[4,c(e,Object.keys(a),r)];case 2:return i.sent().forEach((function(e){if(!("error"in e)){var t=a[e.assetId],r=n.balances[t];r&&(r.issueTransaction={id:e.originTransactionId,name:e.name,decimals:e.decimals,description:e.description,quantity:e.quantity,reissuable:e.reissuable,sender:e.issuer,senderPublicKey:e.issuerPublicKey,timestamp:e.issueTimestamp,height:e.issueHeight,script:e.scripted?"-":null,proofs:[],fee:Math.pow(10,8),feeAssetId:null,version:3,type:s.TRANSACTION_TYPE.ISSUE,chainId:0})}})),[2,n]}}))}))},t.fetchBalanceAddressAssetId=function(e,t,r,n){return void 0===n&&(n=Object.create(null)),o.default({base:e,url:"/assets/balance/"+t+"/"+r,options:n})}},function(e,t,r){"use strict";var n=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.fetchRewards=void 0;var i=n(r(15));t.fetchRewards=function(e,t,r){return void 0===r&&(r=Object.create(null)),i.default({base:e,url:t?"/blockchain/rewards/"+t:"/blockchain/rewards",options:r})}},function(e,t,r){"use strict";var n=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.fetchStateChangesByTxId=t.fetchStateChangesByAddress=t.fetchBalanceHistory=void 0;var i=n(r(15)),a=n(r(56));t.fetchBalanceHistory=function(e,t,r){return void 0===r&&(r=Object.create(null)),i.default({base:e,url:"/debug/balances/history/"+t,options:r})},t.fetchStateChangesByAddress=function(e,t,r,n,s){return void 0===s&&(s=Object.create(null)),i.default({base:e,url:"/debug/stateChanges/address/"+t+"/limit/"+r+a.default({after:n}),options:s})},t.fetchStateChangesByTxId=function(e,t,r){return void 0===r&&(r=Object.create(null)),i.default({base:e,url:"/debug/stateChanges/info/"+t,options:r})}},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.makeTxBytes=t.makeTx=void 0;const n=r(48),i=r(49),a=r(42),s=r(43),o=r(45),u=r(46),c=r(50),l=r(30),f=r(47),p=r(51),d=r(52),h=r(53),y=r(44),g=r(54),v=r(55),m=r(8),b=r(4),E=r(0);t.makeTx=function(e){switch(e.type){case E.TRANSACTION_TYPE.ISSUE:return n.issue(e);case E.TRANSACTION_TYPE.TRANSFER:return i.transfer(e);case E.TRANSACTION_TYPE.REISSUE:return a.reissue(e);case E.TRANSACTION_TYPE.BURN:return s.burn(e);case E.TRANSACTION_TYPE.LEASE:return o.lease(e);case E.TRANSACTION_TYPE.CANCEL_LEASE:return u.cancelLease(e);case E.TRANSACTION_TYPE.ALIAS:return c.alias(e);case E.TRANSACTION_TYPE.MASS_TRANSFER:return l.massTransfer(e);case E.TRANSACTION_TYPE.DATA:return f.data(e);case E.TRANSACTION_TYPE.SET_SCRIPT:return p.setScript(e);case E.TRANSACTION_TYPE.SET_ASSET_SCRIPT:return d.setAssetScript(e);case E.TRANSACTION_TYPE.SPONSORSHIP:return h.sponsorship(e);case E.TRANSACTION_TYPE.EXCHANGE:return y.exchange(e);case E.TRANSACTION_TYPE.INVOKE_SCRIPT:return g.invokeScript(e);case E.TRANSACTION_TYPE.UPDATE_ASSET_INFO:return v.updateAssetInfo(e);case E.TRANSACTION_TYPE.INVOKE_EXPRESSION:return m.txToProtoBytes(e);default:throw new Error("Unknown tx type: "+e.type)}},t.makeTxBytes=function(e){switch(e.type){case E.TRANSACTION_TYPE.ISSUE:case E.TRANSACTION_TYPE.TRANSFER:case E.TRANSACTION_TYPE.REISSUE:case E.TRANSACTION_TYPE.BURN:case E.TRANSACTION_TYPE.LEASE:case E.TRANSACTION_TYPE.CANCEL_LEASE:case E.TRANSACTION_TYPE.ALIAS:return e.version>2?m.txToProtoBytes(e):b.binary.serializeTx(e);case E.TRANSACTION_TYPE.MASS_TRANSFER:case E.TRANSACTION_TYPE.DATA:case E.TRANSACTION_TYPE.SET_SCRIPT:case E.TRANSACTION_TYPE.SET_ASSET_SCRIPT:case E.TRANSACTION_TYPE.SPONSORSHIP:return e.version>1?m.txToProtoBytes(e):b.binary.serializeTx(e);case E.TRANSACTION_TYPE.EXCHANGE:return e.version>2?m.txToProtoBytes(e):b.binary.serializeTx(e);case E.TRANSACTION_TYPE.INVOKE_SCRIPT:return e.version>1?m.txToProtoBytes(e):b.binary.serializeTx(e);case E.TRANSACTION_TYPE.UPDATE_ASSET_INFO:case E.TRANSACTION_TYPE.INVOKE_EXPRESSION:return m.txToProtoBytes(e);default:throw new Error("Unknown tx type: "+e.type)}}},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.decryptSeed=t.encryptSeed=t.strengthenPassword=t.generateNewSeed=t.Seed=void 0;const n=r(2);Object.defineProperty(t,"encryptSeed",{enumerable:!0,get:function(){return n.encryptSeed}}),Object.defineProperty(t,"decryptSeed",{enumerable:!0,get:function(){return n.decryptSeed}});const i=r(4);class a{constructor(e,t){if(e.length<12)throw new Error("Your seed length is less than allowed in config");this.phrase=e,this.address=n.address(e,t),this.keyPair={privateKey:n.privateKey(e),publicKey:n.publicKey(e)},Object.freeze(this),Object.freeze(this.keyPair)}encrypt(e,t){return a.encryptSeedPhrase(this.phrase,e,t)}static encryptSeedPhrase(e,t,r=5e3){if(t&&t.length,e.length<12)throw new Error("The seed phrase you are trying to encrypt is too short");return n.encryptSeed(e,t,r)}static decryptSeedPhrase(e,t,r=5e3){let i;try{i=n.decryptSeed(e,t,r)}catch(e){throw new Error("The password is wrong")}if(""===i||i.length<12)throw new Error("The password is wrong");return i}static create(e=15){const t=s(e);if(t.length<12)throw new Error("The resulted seed length is less than the minimum length (12)");return new a(t)}static fromExistingPhrase(e){if(e.length<12)throw new Error("The resulted seed length is less than the minimum length (12)");return new a(e)}}function s(e=15){return n.randomSeed(e)}t.Seed=a,t.generateNewSeed=s,t.strengthenPassword=function(e,t=5e3){for(;t--;){const t=i.serializePrimitives.STRING(e);e=n.base16Encode(n.sha256(t))}return e}}])}));
},{}],"Hnt6":[function(require,module,exports) {
// can-promise has a crash in some versions of react native that dont have
// standard global objects
// https://github.com/soldair/node-qrcode/issues/157
module.exports = function () {
  return typeof Promise === 'function' && Promise.prototype && Promise.prototype.then;
};
},{}],"O0NP":[function(require,module,exports) {
var toSJISFunction;
var CODEWORDS_COUNT = [0, // Not used
26, 44, 70, 100, 134, 172, 196, 242, 292, 346, 404, 466, 532, 581, 655, 733, 815, 901, 991, 1085, 1156, 1258, 1364, 1474, 1588, 1706, 1828, 1921, 2051, 2185, 2323, 2465, 2611, 2761, 2876, 3034, 3196, 3362, 3532, 3706];
/**
 * Returns the QR Code size for the specified version
 *
 * @param  {Number} version QR Code version
 * @return {Number}         size of QR code
 */

exports.getSymbolSize = function getSymbolSize(version) {
  if (!version) throw new Error('"version" cannot be null or undefined');
  if (version < 1 || version > 40) throw new Error('"version" should be in range from 1 to 40');
  return version * 4 + 17;
};
/**
 * Returns the total number of codewords used to store data and EC information.
 *
 * @param  {Number} version QR Code version
 * @return {Number}         Data length in bits
 */


exports.getSymbolTotalCodewords = function getSymbolTotalCodewords(version) {
  return CODEWORDS_COUNT[version];
};
/**
 * Encode data with Bose-Chaudhuri-Hocquenghem
 *
 * @param  {Number} data Value to encode
 * @return {Number}      Encoded value
 */


exports.getBCHDigit = function (data) {
  var digit = 0;

  while (data !== 0) {
    digit++;
    data >>>= 1;
  }

  return digit;
};

exports.setToSJISFunction = function setToSJISFunction(f) {
  if (typeof f !== 'function') {
    throw new Error('"toSJISFunc" is not a valid function.');
  }

  toSJISFunction = f;
};

exports.isKanjiModeEnabled = function () {
  return typeof toSJISFunction !== 'undefined';
};

exports.toSJIS = function toSJIS(kanji) {
  return toSJISFunction(kanji);
};
},{}],"R7wW":[function(require,module,exports) {
exports.L = {
  bit: 1
};
exports.M = {
  bit: 0
};
exports.Q = {
  bit: 3
};
exports.H = {
  bit: 2
};

function fromString(string) {
  if (typeof string !== 'string') {
    throw new Error('Param is not a string');
  }

  var lcStr = string.toLowerCase();

  switch (lcStr) {
    case 'l':
    case 'low':
      return exports.L;

    case 'm':
    case 'medium':
      return exports.M;

    case 'q':
    case 'quartile':
      return exports.Q;

    case 'h':
    case 'high':
      return exports.H;

    default:
      throw new Error('Unknown EC Level: ' + string);
  }
}

exports.isValid = function isValid(level) {
  return level && typeof level.bit !== 'undefined' && level.bit >= 0 && level.bit < 4;
};

exports.from = function from(value, defaultValue) {
  if (exports.isValid(value)) {
    return value;
  }

  try {
    return fromString(value);
  } catch (e) {
    return defaultValue;
  }
};
},{}],"PLTI":[function(require,module,exports) {
function BitBuffer() {
  this.buffer = [];
  this.length = 0;
}

BitBuffer.prototype = {
  get: function get(index) {
    var bufIndex = Math.floor(index / 8);
    return (this.buffer[bufIndex] >>> 7 - index % 8 & 1) === 1;
  },
  put: function put(num, length) {
    for (var i = 0; i < length; i++) {
      this.putBit((num >>> length - i - 1 & 1) === 1);
    }
  },
  getLengthInBits: function getLengthInBits() {
    return this.length;
  },
  putBit: function putBit(bit) {
    var bufIndex = Math.floor(this.length / 8);

    if (this.buffer.length <= bufIndex) {
      this.buffer.push(0);
    }

    if (bit) {
      this.buffer[bufIndex] |= 0x80 >>> this.length % 8;
    }

    this.length++;
  }
};
module.exports = BitBuffer;
},{}],"Z2lI":[function(require,module,exports) {
/**
 * Helper class to handle QR Code symbol modules
 *
 * @param {Number} size Symbol size
 */
function BitMatrix(size) {
  if (!size || size < 1) {
    throw new Error('BitMatrix size must be defined and greater than 0');
  }

  this.size = size;
  this.data = new Uint8Array(size * size);
  this.reservedBit = new Uint8Array(size * size);
}
/**
 * Set bit value at specified location
 * If reserved flag is set, this bit will be ignored during masking process
 *
 * @param {Number}  row
 * @param {Number}  col
 * @param {Boolean} value
 * @param {Boolean} reserved
 */


BitMatrix.prototype.set = function (row, col, value, reserved) {
  var index = row * this.size + col;
  this.data[index] = value;
  if (reserved) this.reservedBit[index] = true;
};
/**
 * Returns bit value at specified location
 *
 * @param  {Number}  row
 * @param  {Number}  col
 * @return {Boolean}
 */


BitMatrix.prototype.get = function (row, col) {
  return this.data[row * this.size + col];
};
/**
 * Applies xor operator at specified location
 * (used during masking process)
 *
 * @param {Number}  row
 * @param {Number}  col
 * @param {Boolean} value
 */


BitMatrix.prototype.xor = function (row, col, value) {
  this.data[row * this.size + col] ^= value;
};
/**
 * Check if bit at specified location is reserved
 *
 * @param {Number}   row
 * @param {Number}   col
 * @return {Boolean}
 */


BitMatrix.prototype.isReserved = function (row, col) {
  return this.reservedBit[row * this.size + col];
};

module.exports = BitMatrix;
},{}],"ece7":[function(require,module,exports) {
/**
 * Alignment pattern are fixed reference pattern in defined positions
 * in a matrix symbology, which enables the decode software to re-synchronise
 * the coordinate mapping of the image modules in the event of moderate amounts
 * of distortion of the image.
 *
 * Alignment patterns are present only in QR Code symbols of version 2 or larger
 * and their number depends on the symbol version.
 */
var getSymbolSize = require('./utils').getSymbolSize;
/**
 * Calculate the row/column coordinates of the center module of each alignment pattern
 * for the specified QR Code version.
 *
 * The alignment patterns are positioned symmetrically on either side of the diagonal
 * running from the top left corner of the symbol to the bottom right corner.
 *
 * Since positions are simmetrical only half of the coordinates are returned.
 * Each item of the array will represent in turn the x and y coordinate.
 * @see {@link getPositions}
 *
 * @param  {Number} version QR Code version
 * @return {Array}          Array of coordinate
 */


exports.getRowColCoords = function getRowColCoords(version) {
  if (version === 1) return [];
  var posCount = Math.floor(version / 7) + 2;
  var size = getSymbolSize(version);
  var intervals = size === 145 ? 26 : Math.ceil((size - 13) / (2 * posCount - 2)) * 2;
  var positions = [size - 7]; // Last coord is always (size - 7)

  for (var i = 1; i < posCount - 1; i++) {
    positions[i] = positions[i - 1] - intervals;
  }

  positions.push(6); // First coord is always 6

  return positions.reverse();
};
/**
 * Returns an array containing the positions of each alignment pattern.
 * Each array's element represent the center point of the pattern as (x, y) coordinates
 *
 * Coordinates are calculated expanding the row/column coordinates returned by {@link getRowColCoords}
 * and filtering out the items that overlaps with finder pattern
 *
 * @example
 * For a Version 7 symbol {@link getRowColCoords} returns values 6, 22 and 38.
 * The alignment patterns, therefore, are to be centered on (row, column)
 * positions (6,22), (22,6), (22,22), (22,38), (38,22), (38,38).
 * Note that the coordinates (6,6), (6,38), (38,6) are occupied by finder patterns
 * and are not therefore used for alignment patterns.
 *
 * let pos = getPositions(7)
 * // [[6,22], [22,6], [22,22], [22,38], [38,22], [38,38]]
 *
 * @param  {Number} version QR Code version
 * @return {Array}          Array of coordinates
 */


exports.getPositions = function getPositions(version) {
  var coords = [];
  var pos = exports.getRowColCoords(version);
  var posLength = pos.length;

  for (var i = 0; i < posLength; i++) {
    for (var j = 0; j < posLength; j++) {
      // Skip if position is occupied by finder patterns
      if (i === 0 && j === 0 || // top-left
      i === 0 && j === posLength - 1 || // bottom-left
      i === posLength - 1 && j === 0) {
        // top-right
        continue;
      }

      coords.push([pos[i], pos[j]]);
    }
  }

  return coords;
};
},{"./utils":"O0NP"}],"NfUo":[function(require,module,exports) {
var getSymbolSize = require('./utils').getSymbolSize;

var FINDER_PATTERN_SIZE = 7;
/**
 * Returns an array containing the positions of each finder pattern.
 * Each array's element represent the top-left point of the pattern as (x, y) coordinates
 *
 * @param  {Number} version QR Code version
 * @return {Array}          Array of coordinates
 */

exports.getPositions = function getPositions(version) {
  var size = getSymbolSize(version);
  return [// top-left
  [0, 0], // top-right
  [size - FINDER_PATTERN_SIZE, 0], // bottom-left
  [0, size - FINDER_PATTERN_SIZE]];
};
},{"./utils":"O0NP"}],"NYIn":[function(require,module,exports) {
/**
 * Data mask pattern reference
 * @type {Object}
 */
exports.Patterns = {
  PATTERN000: 0,
  PATTERN001: 1,
  PATTERN010: 2,
  PATTERN011: 3,
  PATTERN100: 4,
  PATTERN101: 5,
  PATTERN110: 6,
  PATTERN111: 7
};
/**
 * Weighted penalty scores for the undesirable features
 * @type {Object}
 */

var PenaltyScores = {
  N1: 3,
  N2: 3,
  N3: 40,
  N4: 10
};
/**
 * Check if mask pattern value is valid
 *
 * @param  {Number}  mask    Mask pattern
 * @return {Boolean}         true if valid, false otherwise
 */

exports.isValid = function isValid(mask) {
  return mask != null && mask !== '' && !isNaN(mask) && mask >= 0 && mask <= 7;
};
/**
 * Returns mask pattern from a value.
 * If value is not valid, returns undefined
 *
 * @param  {Number|String} value        Mask pattern value
 * @return {Number}                     Valid mask pattern or undefined
 */


exports.from = function from(value) {
  return exports.isValid(value) ? parseInt(value, 10) : undefined;
};
/**
* Find adjacent modules in row/column with the same color
* and assign a penalty value.
*
* Points: N1 + i
* i is the amount by which the number of adjacent modules of the same color exceeds 5
*/


exports.getPenaltyN1 = function getPenaltyN1(data) {
  var size = data.size;
  var points = 0;
  var sameCountCol = 0;
  var sameCountRow = 0;
  var lastCol = null;
  var lastRow = null;

  for (var row = 0; row < size; row++) {
    sameCountCol = sameCountRow = 0;
    lastCol = lastRow = null;

    for (var col = 0; col < size; col++) {
      var module = data.get(row, col);

      if (module === lastCol) {
        sameCountCol++;
      } else {
        if (sameCountCol >= 5) points += PenaltyScores.N1 + (sameCountCol - 5);
        lastCol = module;
        sameCountCol = 1;
      }

      module = data.get(col, row);

      if (module === lastRow) {
        sameCountRow++;
      } else {
        if (sameCountRow >= 5) points += PenaltyScores.N1 + (sameCountRow - 5);
        lastRow = module;
        sameCountRow = 1;
      }
    }

    if (sameCountCol >= 5) points += PenaltyScores.N1 + (sameCountCol - 5);
    if (sameCountRow >= 5) points += PenaltyScores.N1 + (sameCountRow - 5);
  }

  return points;
};
/**
 * Find 2x2 blocks with the same color and assign a penalty value
 *
 * Points: N2 * (m - 1) * (n - 1)
 */


exports.getPenaltyN2 = function getPenaltyN2(data) {
  var size = data.size;
  var points = 0;

  for (var row = 0; row < size - 1; row++) {
    for (var col = 0; col < size - 1; col++) {
      var last = data.get(row, col) + data.get(row, col + 1) + data.get(row + 1, col) + data.get(row + 1, col + 1);
      if (last === 4 || last === 0) points++;
    }
  }

  return points * PenaltyScores.N2;
};
/**
 * Find 1:1:3:1:1 ratio (dark:light:dark:light:dark) pattern in row/column,
 * preceded or followed by light area 4 modules wide
 *
 * Points: N3 * number of pattern found
 */


exports.getPenaltyN3 = function getPenaltyN3(data) {
  var size = data.size;
  var points = 0;
  var bitsCol = 0;
  var bitsRow = 0;

  for (var row = 0; row < size; row++) {
    bitsCol = bitsRow = 0;

    for (var col = 0; col < size; col++) {
      bitsCol = bitsCol << 1 & 0x7FF | data.get(row, col);
      if (col >= 10 && (bitsCol === 0x5D0 || bitsCol === 0x05D)) points++;
      bitsRow = bitsRow << 1 & 0x7FF | data.get(col, row);
      if (col >= 10 && (bitsRow === 0x5D0 || bitsRow === 0x05D)) points++;
    }
  }

  return points * PenaltyScores.N3;
};
/**
 * Calculate proportion of dark modules in entire symbol
 *
 * Points: N4 * k
 *
 * k is the rating of the deviation of the proportion of dark modules
 * in the symbol from 50% in steps of 5%
 */


exports.getPenaltyN4 = function getPenaltyN4(data) {
  var darkCount = 0;
  var modulesCount = data.data.length;

  for (var i = 0; i < modulesCount; i++) {
    darkCount += data.data[i];
  }

  var k = Math.abs(Math.ceil(darkCount * 100 / modulesCount / 5) - 10);
  return k * PenaltyScores.N4;
};
/**
 * Return mask value at given position
 *
 * @param  {Number} maskPattern Pattern reference value
 * @param  {Number} i           Row
 * @param  {Number} j           Column
 * @return {Boolean}            Mask value
 */


function getMaskAt(maskPattern, i, j) {
  switch (maskPattern) {
    case exports.Patterns.PATTERN000:
      return (i + j) % 2 === 0;

    case exports.Patterns.PATTERN001:
      return i % 2 === 0;

    case exports.Patterns.PATTERN010:
      return j % 3 === 0;

    case exports.Patterns.PATTERN011:
      return (i + j) % 3 === 0;

    case exports.Patterns.PATTERN100:
      return (Math.floor(i / 2) + Math.floor(j / 3)) % 2 === 0;

    case exports.Patterns.PATTERN101:
      return i * j % 2 + i * j % 3 === 0;

    case exports.Patterns.PATTERN110:
      return (i * j % 2 + i * j % 3) % 2 === 0;

    case exports.Patterns.PATTERN111:
      return (i * j % 3 + (i + j) % 2) % 2 === 0;

    default:
      throw new Error('bad maskPattern:' + maskPattern);
  }
}
/**
 * Apply a mask pattern to a BitMatrix
 *
 * @param  {Number}    pattern Pattern reference number
 * @param  {BitMatrix} data    BitMatrix data
 */


exports.applyMask = function applyMask(pattern, data) {
  var size = data.size;

  for (var col = 0; col < size; col++) {
    for (var row = 0; row < size; row++) {
      if (data.isReserved(row, col)) continue;
      data.xor(row, col, getMaskAt(pattern, row, col));
    }
  }
};
/**
 * Returns the best mask pattern for data
 *
 * @param  {BitMatrix} data
 * @return {Number} Mask pattern reference number
 */


exports.getBestMask = function getBestMask(data, setupFormatFunc) {
  var numPatterns = Object.keys(exports.Patterns).length;
  var bestPattern = 0;
  var lowerPenalty = Infinity;

  for (var p = 0; p < numPatterns; p++) {
    setupFormatFunc(p);
    exports.applyMask(p, data); // Calculate penalty

    var penalty = exports.getPenaltyN1(data) + exports.getPenaltyN2(data) + exports.getPenaltyN3(data) + exports.getPenaltyN4(data); // Undo previously applied mask

    exports.applyMask(p, data);

    if (penalty < lowerPenalty) {
      lowerPenalty = penalty;
      bestPattern = p;
    }
  }

  return bestPattern;
};
},{}],"lpve":[function(require,module,exports) {
var ECLevel = require('./error-correction-level');

var EC_BLOCKS_TABLE = [// L  M  Q  H
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 1, 2, 2, 4, 1, 2, 4, 4, 2, 4, 4, 4, 2, 4, 6, 5, 2, 4, 6, 6, 2, 5, 8, 8, 4, 5, 8, 8, 4, 5, 8, 11, 4, 8, 10, 11, 4, 9, 12, 16, 4, 9, 16, 16, 6, 10, 12, 18, 6, 10, 17, 16, 6, 11, 16, 19, 6, 13, 18, 21, 7, 14, 21, 25, 8, 16, 20, 25, 8, 17, 23, 25, 9, 17, 23, 34, 9, 18, 25, 30, 10, 20, 27, 32, 12, 21, 29, 35, 12, 23, 34, 37, 12, 25, 34, 40, 13, 26, 35, 42, 14, 28, 38, 45, 15, 29, 40, 48, 16, 31, 43, 51, 17, 33, 45, 54, 18, 35, 48, 57, 19, 37, 51, 60, 19, 38, 53, 63, 20, 40, 56, 66, 21, 43, 59, 70, 22, 45, 62, 74, 24, 47, 65, 77, 25, 49, 68, 81];
var EC_CODEWORDS_TABLE = [// L  M  Q  H
7, 10, 13, 17, 10, 16, 22, 28, 15, 26, 36, 44, 20, 36, 52, 64, 26, 48, 72, 88, 36, 64, 96, 112, 40, 72, 108, 130, 48, 88, 132, 156, 60, 110, 160, 192, 72, 130, 192, 224, 80, 150, 224, 264, 96, 176, 260, 308, 104, 198, 288, 352, 120, 216, 320, 384, 132, 240, 360, 432, 144, 280, 408, 480, 168, 308, 448, 532, 180, 338, 504, 588, 196, 364, 546, 650, 224, 416, 600, 700, 224, 442, 644, 750, 252, 476, 690, 816, 270, 504, 750, 900, 300, 560, 810, 960, 312, 588, 870, 1050, 336, 644, 952, 1110, 360, 700, 1020, 1200, 390, 728, 1050, 1260, 420, 784, 1140, 1350, 450, 812, 1200, 1440, 480, 868, 1290, 1530, 510, 924, 1350, 1620, 540, 980, 1440, 1710, 570, 1036, 1530, 1800, 570, 1064, 1590, 1890, 600, 1120, 1680, 1980, 630, 1204, 1770, 2100, 660, 1260, 1860, 2220, 720, 1316, 1950, 2310, 750, 1372, 2040, 2430];
/**
 * Returns the number of error correction block that the QR Code should contain
 * for the specified version and error correction level.
 *
 * @param  {Number} version              QR Code version
 * @param  {Number} errorCorrectionLevel Error correction level
 * @return {Number}                      Number of error correction blocks
 */

exports.getBlocksCount = function getBlocksCount(version, errorCorrectionLevel) {
  switch (errorCorrectionLevel) {
    case ECLevel.L:
      return EC_BLOCKS_TABLE[(version - 1) * 4 + 0];

    case ECLevel.M:
      return EC_BLOCKS_TABLE[(version - 1) * 4 + 1];

    case ECLevel.Q:
      return EC_BLOCKS_TABLE[(version - 1) * 4 + 2];

    case ECLevel.H:
      return EC_BLOCKS_TABLE[(version - 1) * 4 + 3];

    default:
      return undefined;
  }
};
/**
 * Returns the number of error correction codewords to use for the specified
 * version and error correction level.
 *
 * @param  {Number} version              QR Code version
 * @param  {Number} errorCorrectionLevel Error correction level
 * @return {Number}                      Number of error correction codewords
 */


exports.getTotalCodewordsCount = function getTotalCodewordsCount(version, errorCorrectionLevel) {
  switch (errorCorrectionLevel) {
    case ECLevel.L:
      return EC_CODEWORDS_TABLE[(version - 1) * 4 + 0];

    case ECLevel.M:
      return EC_CODEWORDS_TABLE[(version - 1) * 4 + 1];

    case ECLevel.Q:
      return EC_CODEWORDS_TABLE[(version - 1) * 4 + 2];

    case ECLevel.H:
      return EC_CODEWORDS_TABLE[(version - 1) * 4 + 3];

    default:
      return undefined;
  }
};
},{"./error-correction-level":"R7wW"}],"lcOJ":[function(require,module,exports) {
var EXP_TABLE = new Uint8Array(512);
var LOG_TABLE = new Uint8Array(256)
/**
 * Precompute the log and anti-log tables for faster computation later
 *
 * For each possible value in the galois field 2^8, we will pre-compute
 * the logarithm and anti-logarithm (exponential) of this value
 *
 * ref {@link https://en.wikiversity.org/wiki/Reed%E2%80%93Solomon_codes_for_coders#Introduction_to_mathematical_fields}
 */
;

(function initTables() {
  var x = 1;

  for (var i = 0; i < 255; i++) {
    EXP_TABLE[i] = x;
    LOG_TABLE[x] = i;
    x <<= 1; // multiply by 2
    // The QR code specification says to use byte-wise modulo 100011101 arithmetic.
    // This means that when a number is 256 or larger, it should be XORed with 0x11D.

    if (x & 0x100) {
      // similar to x >= 256, but a lot faster (because 0x100 == 256)
      x ^= 0x11D;
    }
  } // Optimization: double the size of the anti-log table so that we don't need to mod 255 to
  // stay inside the bounds (because we will mainly use this table for the multiplication of
  // two GF numbers, no more).
  // @see {@link mul}


  for (var _i = 255; _i < 512; _i++) {
    EXP_TABLE[_i] = EXP_TABLE[_i - 255];
  }
})();
/**
 * Returns log value of n inside Galois Field
 *
 * @param  {Number} n
 * @return {Number}
 */


exports.log = function log(n) {
  if (n < 1) throw new Error('log(' + n + ')');
  return LOG_TABLE[n];
};
/**
 * Returns anti-log value of n inside Galois Field
 *
 * @param  {Number} n
 * @return {Number}
 */


exports.exp = function exp(n) {
  return EXP_TABLE[n];
};
/**
 * Multiplies two number inside Galois Field
 *
 * @param  {Number} x
 * @param  {Number} y
 * @return {Number}
 */


exports.mul = function mul(x, y) {
  if (x === 0 || y === 0) return 0; // should be EXP_TABLE[(LOG_TABLE[x] + LOG_TABLE[y]) % 255] if EXP_TABLE wasn't oversized
  // @see {@link initTables}

  return EXP_TABLE[LOG_TABLE[x] + LOG_TABLE[y]];
};
},{}],"JUJT":[function(require,module,exports) {
var GF = require('./galois-field');
/**
 * Multiplies two polynomials inside Galois Field
 *
 * @param  {Uint8Array} p1 Polynomial
 * @param  {Uint8Array} p2 Polynomial
 * @return {Uint8Array}    Product of p1 and p2
 */


exports.mul = function mul(p1, p2) {
  var coeff = new Uint8Array(p1.length + p2.length - 1);

  for (var i = 0; i < p1.length; i++) {
    for (var j = 0; j < p2.length; j++) {
      coeff[i + j] ^= GF.mul(p1[i], p2[j]);
    }
  }

  return coeff;
};
/**
 * Calculate the remainder of polynomials division
 *
 * @param  {Uint8Array} divident Polynomial
 * @param  {Uint8Array} divisor  Polynomial
 * @return {Uint8Array}          Remainder
 */


exports.mod = function mod(divident, divisor) {
  var result = new Uint8Array(divident);

  while (result.length - divisor.length >= 0) {
    var coeff = result[0];

    for (var i = 0; i < divisor.length; i++) {
      result[i] ^= GF.mul(divisor[i], coeff);
    } // remove all zeros from buffer head


    var offset = 0;

    while (offset < result.length && result[offset] === 0) {
      offset++;
    }

    result = result.slice(offset);
  }

  return result;
};
/**
 * Generate an irreducible generator polynomial of specified degree
 * (used by Reed-Solomon encoder)
 *
 * @param  {Number} degree Degree of the generator polynomial
 * @return {Uint8Array}    Buffer containing polynomial coefficients
 */


exports.generateECPolynomial = function generateECPolynomial(degree) {
  var poly = new Uint8Array([1]);

  for (var i = 0; i < degree; i++) {
    poly = exports.mul(poly, new Uint8Array([1, GF.exp(i)]));
  }

  return poly;
};
},{"./galois-field":"lcOJ"}],"x3Bz":[function(require,module,exports) {
var Polynomial = require('./polynomial');

function ReedSolomonEncoder(degree) {
  this.genPoly = undefined;
  this.degree = degree;
  if (this.degree) this.initialize(this.degree);
}
/**
 * Initialize the encoder.
 * The input param should correspond to the number of error correction codewords.
 *
 * @param  {Number} degree
 */


ReedSolomonEncoder.prototype.initialize = function initialize(degree) {
  // create an irreducible generator polynomial
  this.degree = degree;
  this.genPoly = Polynomial.generateECPolynomial(this.degree);
};
/**
 * Encodes a chunk of data
 *
 * @param  {Uint8Array} data Buffer containing input data
 * @return {Uint8Array}      Buffer containing encoded data
 */


ReedSolomonEncoder.prototype.encode = function encode(data) {
  if (!this.genPoly) {
    throw new Error('Encoder not initialized');
  } // Calculate EC for this data block
  // extends data size to data+genPoly size


  var paddedData = new Uint8Array(data.length + this.degree);
  paddedData.set(data); // The error correction codewords are the remainder after dividing the data codewords
  // by a generator polynomial

  var remainder = Polynomial.mod(paddedData, this.genPoly); // return EC data blocks (last n byte, where n is the degree of genPoly)
  // If coefficients number in remainder are less than genPoly degree,
  // pad with 0s to the left to reach the needed number of coefficients

  var start = this.degree - remainder.length;

  if (start > 0) {
    var buff = new Uint8Array(this.degree);
    buff.set(remainder, start);
    return buff;
  }

  return remainder;
};

module.exports = ReedSolomonEncoder;
},{"./polynomial":"JUJT"}],"X3Vf":[function(require,module,exports) {
/**
 * Check if QR Code version is valid
 *
 * @param  {Number}  version QR Code version
 * @return {Boolean}         true if valid version, false otherwise
 */
exports.isValid = function isValid(version) {
  return !isNaN(version) && version >= 1 && version <= 40;
};
},{}],"HY6w":[function(require,module,exports) {
var numeric = '[0-9]+';
var alphanumeric = '[A-Z $%*+\\-./:]+';
var kanji = '(?:[u3000-u303F]|[u3040-u309F]|[u30A0-u30FF]|' + '[uFF00-uFFEF]|[u4E00-u9FAF]|[u2605-u2606]|[u2190-u2195]|u203B|' + '[u2010u2015u2018u2019u2025u2026u201Cu201Du2225u2260]|' + '[u0391-u0451]|[u00A7u00A8u00B1u00B4u00D7u00F7])+';
kanji = kanji.replace(/u/g, "\\u");
var byte = '(?:(?![A-Z0-9 $%*+\\-./:]|' + kanji + ')(?:.|[\r\n]))+';
exports.KANJI = new RegExp(kanji, 'g');
exports.BYTE_KANJI = new RegExp('[^A-Z0-9 $%*+\\-./:]+', 'g');
exports.BYTE = new RegExp(byte, 'g');
exports.NUMERIC = new RegExp(numeric, 'g');
exports.ALPHANUMERIC = new RegExp(alphanumeric, 'g');
var TEST_KANJI = new RegExp('^' + kanji + '$');
var TEST_NUMERIC = new RegExp('^' + numeric + '$');
var TEST_ALPHANUMERIC = new RegExp('^[A-Z0-9 $%*+\\-./:]+$');

exports.testKanji = function testKanji(str) {
  return TEST_KANJI.test(str);
};

exports.testNumeric = function testNumeric(str) {
  return TEST_NUMERIC.test(str);
};

exports.testAlphanumeric = function testAlphanumeric(str) {
  return TEST_ALPHANUMERIC.test(str);
};
},{}],"vyps":[function(require,module,exports) {
var VersionCheck = require('./version-check');

var Regex = require('./regex');
/**
 * Numeric mode encodes data from the decimal digit set (0 - 9)
 * (byte values 30HEX to 39HEX).
 * Normally, 3 data characters are represented by 10 bits.
 *
 * @type {Object}
 */


exports.NUMERIC = {
  id: 'Numeric',
  bit: 1 << 0,
  ccBits: [10, 12, 14]
};
/**
 * Alphanumeric mode encodes data from a set of 45 characters,
 * i.e. 10 numeric digits (0 - 9),
 *      26 alphabetic characters (A - Z),
 *   and 9 symbols (SP, $, %, *, +, -, ., /, :).
 * Normally, two input characters are represented by 11 bits.
 *
 * @type {Object}
 */

exports.ALPHANUMERIC = {
  id: 'Alphanumeric',
  bit: 1 << 1,
  ccBits: [9, 11, 13]
};
/**
 * In byte mode, data is encoded at 8 bits per character.
 *
 * @type {Object}
 */

exports.BYTE = {
  id: 'Byte',
  bit: 1 << 2,
  ccBits: [8, 16, 16]
};
/**
 * The Kanji mode efficiently encodes Kanji characters in accordance with
 * the Shift JIS system based on JIS X 0208.
 * The Shift JIS values are shifted from the JIS X 0208 values.
 * JIS X 0208 gives details of the shift coded representation.
 * Each two-byte character value is compacted to a 13-bit binary codeword.
 *
 * @type {Object}
 */

exports.KANJI = {
  id: 'Kanji',
  bit: 1 << 3,
  ccBits: [8, 10, 12]
};
/**
 * Mixed mode will contain a sequences of data in a combination of any of
 * the modes described above
 *
 * @type {Object}
 */

exports.MIXED = {
  bit: -1
};
/**
 * Returns the number of bits needed to store the data length
 * according to QR Code specifications.
 *
 * @param  {Mode}   mode    Data mode
 * @param  {Number} version QR Code version
 * @return {Number}         Number of bits
 */

exports.getCharCountIndicator = function getCharCountIndicator(mode, version) {
  if (!mode.ccBits) throw new Error('Invalid mode: ' + mode);

  if (!VersionCheck.isValid(version)) {
    throw new Error('Invalid version: ' + version);
  }

  if (version >= 1 && version < 10) return mode.ccBits[0];else if (version < 27) return mode.ccBits[1];
  return mode.ccBits[2];
};
/**
 * Returns the most efficient mode to store the specified data
 *
 * @param  {String} dataStr Input data string
 * @return {Mode}           Best mode
 */


exports.getBestModeForData = function getBestModeForData(dataStr) {
  if (Regex.testNumeric(dataStr)) return exports.NUMERIC;else if (Regex.testAlphanumeric(dataStr)) return exports.ALPHANUMERIC;else if (Regex.testKanji(dataStr)) return exports.KANJI;else return exports.BYTE;
};
/**
 * Return mode name as string
 *
 * @param {Mode} mode Mode object
 * @returns {String}  Mode name
 */


exports.toString = function toString(mode) {
  if (mode && mode.id) return mode.id;
  throw new Error('Invalid mode');
};
/**
 * Check if input param is a valid mode object
 *
 * @param   {Mode}    mode Mode object
 * @returns {Boolean} True if valid mode, false otherwise
 */


exports.isValid = function isValid(mode) {
  return mode && mode.bit && mode.ccBits;
};
/**
 * Get mode object from its name
 *
 * @param   {String} string Mode name
 * @returns {Mode}          Mode object
 */


function fromString(string) {
  if (typeof string !== 'string') {
    throw new Error('Param is not a string');
  }

  var lcStr = string.toLowerCase();

  switch (lcStr) {
    case 'numeric':
      return exports.NUMERIC;

    case 'alphanumeric':
      return exports.ALPHANUMERIC;

    case 'kanji':
      return exports.KANJI;

    case 'byte':
      return exports.BYTE;

    default:
      throw new Error('Unknown mode: ' + string);
  }
}
/**
 * Returns mode from a value.
 * If value is not a valid mode, returns defaultValue
 *
 * @param  {Mode|String} value        Encoding mode
 * @param  {Mode}        defaultValue Fallback value
 * @return {Mode}                     Encoding mode
 */


exports.from = function from(value, defaultValue) {
  if (exports.isValid(value)) {
    return value;
  }

  try {
    return fromString(value);
  } catch (e) {
    return defaultValue;
  }
};
},{"./version-check":"X3Vf","./regex":"HY6w"}],"Sw2o":[function(require,module,exports) {
var Utils = require('./utils');

var ECCode = require('./error-correction-code');

var ECLevel = require('./error-correction-level');

var Mode = require('./mode');

var VersionCheck = require('./version-check'); // Generator polynomial used to encode version information


var G18 = 1 << 12 | 1 << 11 | 1 << 10 | 1 << 9 | 1 << 8 | 1 << 5 | 1 << 2 | 1 << 0;
var G18_BCH = Utils.getBCHDigit(G18);

function getBestVersionForDataLength(mode, length, errorCorrectionLevel) {
  for (var currentVersion = 1; currentVersion <= 40; currentVersion++) {
    if (length <= exports.getCapacity(currentVersion, errorCorrectionLevel, mode)) {
      return currentVersion;
    }
  }

  return undefined;
}

function getReservedBitsCount(mode, version) {
  // Character count indicator + mode indicator bits
  return Mode.getCharCountIndicator(mode, version) + 4;
}

function getTotalBitsFromDataArray(segments, version) {
  var totalBits = 0;
  segments.forEach(function (data) {
    var reservedBits = getReservedBitsCount(data.mode, version);
    totalBits += reservedBits + data.getBitsLength();
  });
  return totalBits;
}

function getBestVersionForMixedData(segments, errorCorrectionLevel) {
  for (var currentVersion = 1; currentVersion <= 40; currentVersion++) {
    var length = getTotalBitsFromDataArray(segments, currentVersion);

    if (length <= exports.getCapacity(currentVersion, errorCorrectionLevel, Mode.MIXED)) {
      return currentVersion;
    }
  }

  return undefined;
}
/**
 * Returns version number from a value.
 * If value is not a valid version, returns defaultValue
 *
 * @param  {Number|String} value        QR Code version
 * @param  {Number}        defaultValue Fallback value
 * @return {Number}                     QR Code version number
 */


exports.from = function from(value, defaultValue) {
  if (VersionCheck.isValid(value)) {
    return parseInt(value, 10);
  }

  return defaultValue;
};
/**
 * Returns how much data can be stored with the specified QR code version
 * and error correction level
 *
 * @param  {Number} version              QR Code version (1-40)
 * @param  {Number} errorCorrectionLevel Error correction level
 * @param  {Mode}   mode                 Data mode
 * @return {Number}                      Quantity of storable data
 */


exports.getCapacity = function getCapacity(version, errorCorrectionLevel, mode) {
  if (!VersionCheck.isValid(version)) {
    throw new Error('Invalid QR Code version');
  } // Use Byte mode as default


  if (typeof mode === 'undefined') mode = Mode.BYTE; // Total codewords for this QR code version (Data + Error correction)

  var totalCodewords = Utils.getSymbolTotalCodewords(version); // Total number of error correction codewords

  var ecTotalCodewords = ECCode.getTotalCodewordsCount(version, errorCorrectionLevel); // Total number of data codewords

  var dataTotalCodewordsBits = (totalCodewords - ecTotalCodewords) * 8;
  if (mode === Mode.MIXED) return dataTotalCodewordsBits;
  var usableBits = dataTotalCodewordsBits - getReservedBitsCount(mode, version); // Return max number of storable codewords

  switch (mode) {
    case Mode.NUMERIC:
      return Math.floor(usableBits / 10 * 3);

    case Mode.ALPHANUMERIC:
      return Math.floor(usableBits / 11 * 2);

    case Mode.KANJI:
      return Math.floor(usableBits / 13);

    case Mode.BYTE:
    default:
      return Math.floor(usableBits / 8);
  }
};
/**
 * Returns the minimum version needed to contain the amount of data
 *
 * @param  {Segment} data                    Segment of data
 * @param  {Number} [errorCorrectionLevel=H] Error correction level
 * @param  {Mode} mode                       Data mode
 * @return {Number}                          QR Code version
 */


exports.getBestVersionForData = function getBestVersionForData(data, errorCorrectionLevel) {
  var seg;
  var ecl = ECLevel.from(errorCorrectionLevel, ECLevel.M);

  if (Array.isArray(data)) {
    if (data.length > 1) {
      return getBestVersionForMixedData(data, ecl);
    }

    if (data.length === 0) {
      return 1;
    }

    seg = data[0];
  } else {
    seg = data;
  }

  return getBestVersionForDataLength(seg.mode, seg.getLength(), ecl);
};
/**
 * Returns version information with relative error correction bits
 *
 * The version information is included in QR Code symbols of version 7 or larger.
 * It consists of an 18-bit sequence containing 6 data bits,
 * with 12 error correction bits calculated using the (18, 6) Golay code.
 *
 * @param  {Number} version QR Code version
 * @return {Number}         Encoded version info bits
 */


exports.getEncodedBits = function getEncodedBits(version) {
  if (!VersionCheck.isValid(version) || version < 7) {
    throw new Error('Invalid QR Code version');
  }

  var d = version << 12;

  while (Utils.getBCHDigit(d) - G18_BCH >= 0) {
    d ^= G18 << Utils.getBCHDigit(d) - G18_BCH;
  }

  return version << 12 | d;
};
},{"./utils":"O0NP","./error-correction-code":"lpve","./error-correction-level":"R7wW","./mode":"vyps","./version-check":"X3Vf"}],"aL6p":[function(require,module,exports) {
var Utils = require('./utils');

var G15 = 1 << 10 | 1 << 8 | 1 << 5 | 1 << 4 | 1 << 2 | 1 << 1 | 1 << 0;
var G15_MASK = 1 << 14 | 1 << 12 | 1 << 10 | 1 << 4 | 1 << 1;
var G15_BCH = Utils.getBCHDigit(G15);
/**
 * Returns format information with relative error correction bits
 *
 * The format information is a 15-bit sequence containing 5 data bits,
 * with 10 error correction bits calculated using the (15, 5) BCH code.
 *
 * @param  {Number} errorCorrectionLevel Error correction level
 * @param  {Number} mask                 Mask pattern
 * @return {Number}                      Encoded format information bits
 */

exports.getEncodedBits = function getEncodedBits(errorCorrectionLevel, mask) {
  var data = errorCorrectionLevel.bit << 3 | mask;
  var d = data << 10;

  while (Utils.getBCHDigit(d) - G15_BCH >= 0) {
    d ^= G15 << Utils.getBCHDigit(d) - G15_BCH;
  } // xor final data with mask pattern in order to ensure that
  // no combination of Error Correction Level and data mask pattern
  // will result in an all-zero data string


  return (data << 10 | d) ^ G15_MASK;
};
},{"./utils":"O0NP"}],"WAM1":[function(require,module,exports) {
var Mode = require('./mode');

function NumericData(data) {
  this.mode = Mode.NUMERIC;
  this.data = data.toString();
}

NumericData.getBitsLength = function getBitsLength(length) {
  return 10 * Math.floor(length / 3) + (length % 3 ? length % 3 * 3 + 1 : 0);
};

NumericData.prototype.getLength = function getLength() {
  return this.data.length;
};

NumericData.prototype.getBitsLength = function getBitsLength() {
  return NumericData.getBitsLength(this.data.length);
};

NumericData.prototype.write = function write(bitBuffer) {
  var i, group, value; // The input data string is divided into groups of three digits,
  // and each group is converted to its 10-bit binary equivalent.

  for (i = 0; i + 3 <= this.data.length; i += 3) {
    group = this.data.substr(i, 3);
    value = parseInt(group, 10);
    bitBuffer.put(value, 10);
  } // If the number of input digits is not an exact multiple of three,
  // the final one or two digits are converted to 4 or 7 bits respectively.


  var remainingNum = this.data.length - i;

  if (remainingNum > 0) {
    group = this.data.substr(i);
    value = parseInt(group, 10);
    bitBuffer.put(value, remainingNum * 3 + 1);
  }
};

module.exports = NumericData;
},{"./mode":"vyps"}],"Ayka":[function(require,module,exports) {
var Mode = require('./mode');
/**
 * Array of characters available in alphanumeric mode
 *
 * As per QR Code specification, to each character
 * is assigned a value from 0 to 44 which in this case coincides
 * with the array index
 *
 * @type {Array}
 */


var ALPHA_NUM_CHARS = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z', ' ', '$', '%', '*', '+', '-', '.', '/', ':'];

function AlphanumericData(data) {
  this.mode = Mode.ALPHANUMERIC;
  this.data = data;
}

AlphanumericData.getBitsLength = function getBitsLength(length) {
  return 11 * Math.floor(length / 2) + 6 * (length % 2);
};

AlphanumericData.prototype.getLength = function getLength() {
  return this.data.length;
};

AlphanumericData.prototype.getBitsLength = function getBitsLength() {
  return AlphanumericData.getBitsLength(this.data.length);
};

AlphanumericData.prototype.write = function write(bitBuffer) {
  var i; // Input data characters are divided into groups of two characters
  // and encoded as 11-bit binary codes.

  for (i = 0; i + 2 <= this.data.length; i += 2) {
    // The character value of the first character is multiplied by 45
    var value = ALPHA_NUM_CHARS.indexOf(this.data[i]) * 45; // The character value of the second digit is added to the product

    value += ALPHA_NUM_CHARS.indexOf(this.data[i + 1]); // The sum is then stored as 11-bit binary number

    bitBuffer.put(value, 11);
  } // If the number of input data characters is not a multiple of two,
  // the character value of the final character is encoded as a 6-bit binary number.


  if (this.data.length % 2) {
    bitBuffer.put(ALPHA_NUM_CHARS.indexOf(this.data[i]), 6);
  }
};

module.exports = AlphanumericData;
},{"./mode":"vyps"}],"zJes":[function(require,module,exports) {
'use strict'

module.exports = function encodeUtf8 (input) {
  var result = []
  var size = input.length

  for (var index = 0; index < size; index++) {
    var point = input.charCodeAt(index)

    if (point >= 0xD800 && point <= 0xDBFF && size > index + 1) {
      var second = input.charCodeAt(index + 1)

      if (second >= 0xDC00 && second <= 0xDFFF) {
        // https://mathiasbynens.be/notes/javascript-encoding#surrogate-formulae
        point = (point - 0xD800) * 0x400 + second - 0xDC00 + 0x10000
        index += 1
      }
    }

    // US-ASCII
    if (point < 0x80) {
      result.push(point)
      continue
    }

    // 2-byte UTF-8
    if (point < 0x800) {
      result.push((point >> 6) | 192)
      result.push((point & 63) | 128)
      continue
    }

    // 3-byte UTF-8
    if (point < 0xD800 || (point >= 0xE000 && point < 0x10000)) {
      result.push((point >> 12) | 224)
      result.push(((point >> 6) & 63) | 128)
      result.push((point & 63) | 128)
      continue
    }

    // 4-byte UTF-8
    if (point >= 0x10000 && point <= 0x10FFFF) {
      result.push((point >> 18) | 240)
      result.push(((point >> 12) & 63) | 128)
      result.push(((point >> 6) & 63) | 128)
      result.push((point & 63) | 128)
      continue
    }

    // Invalid character
    result.push(0xEF, 0xBF, 0xBD)
  }

  return new Uint8Array(result).buffer
}

},{}],"FYBG":[function(require,module,exports) {
var encodeUtf8 = require('encode-utf8');

var Mode = require('./mode');

function ByteData(data) {
  this.mode = Mode.BYTE;

  if (typeof data === 'string') {
    data = encodeUtf8(data);
  }

  this.data = new Uint8Array(data);
}

ByteData.getBitsLength = function getBitsLength(length) {
  return length * 8;
};

ByteData.prototype.getLength = function getLength() {
  return this.data.length;
};

ByteData.prototype.getBitsLength = function getBitsLength() {
  return ByteData.getBitsLength(this.data.length);
};

ByteData.prototype.write = function (bitBuffer) {
  for (var i = 0, l = this.data.length; i < l; i++) {
    bitBuffer.put(this.data[i], 8);
  }
};

module.exports = ByteData;
},{"encode-utf8":"zJes","./mode":"vyps"}],"EMzp":[function(require,module,exports) {
var Mode = require('./mode');

var Utils = require('./utils');

function KanjiData(data) {
  this.mode = Mode.KANJI;
  this.data = data;
}

KanjiData.getBitsLength = function getBitsLength(length) {
  return length * 13;
};

KanjiData.prototype.getLength = function getLength() {
  return this.data.length;
};

KanjiData.prototype.getBitsLength = function getBitsLength() {
  return KanjiData.getBitsLength(this.data.length);
};

KanjiData.prototype.write = function (bitBuffer) {
  var i; // In the Shift JIS system, Kanji characters are represented by a two byte combination.
  // These byte values are shifted from the JIS X 0208 values.
  // JIS X 0208 gives details of the shift coded representation.

  for (i = 0; i < this.data.length; i++) {
    var value = Utils.toSJIS(this.data[i]); // For characters with Shift JIS values from 0x8140 to 0x9FFC:

    if (value >= 0x8140 && value <= 0x9FFC) {
      // Subtract 0x8140 from Shift JIS value
      value -= 0x8140; // For characters with Shift JIS values from 0xE040 to 0xEBBF
    } else if (value >= 0xE040 && value <= 0xEBBF) {
      // Subtract 0xC140 from Shift JIS value
      value -= 0xC140;
    } else {
      throw new Error('Invalid SJIS character: ' + this.data[i] + '\n' + 'Make sure your charset is UTF-8');
    } // Multiply most significant byte of result by 0xC0
    // and add least significant byte to product


    value = (value >>> 8 & 0xff) * 0xC0 + (value & 0xff); // Convert result to a 13-bit binary string

    bitBuffer.put(value, 13);
  }
};

module.exports = KanjiData;
},{"./mode":"vyps","./utils":"O0NP"}],"QTsx":[function(require,module,exports) {
'use strict';

/******************************************************************************
 * Created 2008-08-19.
 *
 * Dijkstra path-finding functions. Adapted from the Dijkstar Python project.
 *
 * Copyright (C) 2008
 *   Wyatt Baldwin <self@wyattbaldwin.com>
 *   All rights reserved
 *
 * Licensed under the MIT license.
 *
 *   http://www.opensource.org/licenses/mit-license.php
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 *****************************************************************************/
var dijkstra = {
  single_source_shortest_paths: function(graph, s, d) {
    // Predecessor map for each node that has been encountered.
    // node ID => predecessor node ID
    var predecessors = {};

    // Costs of shortest paths from s to all nodes encountered.
    // node ID => cost
    var costs = {};
    costs[s] = 0;

    // Costs of shortest paths from s to all nodes encountered; differs from
    // `costs` in that it provides easy access to the node that currently has
    // the known shortest path from s.
    // XXX: Do we actually need both `costs` and `open`?
    var open = dijkstra.PriorityQueue.make();
    open.push(s, 0);

    var closest,
        u, v,
        cost_of_s_to_u,
        adjacent_nodes,
        cost_of_e,
        cost_of_s_to_u_plus_cost_of_e,
        cost_of_s_to_v,
        first_visit;
    while (!open.empty()) {
      // In the nodes remaining in graph that have a known cost from s,
      // find the node, u, that currently has the shortest path from s.
      closest = open.pop();
      u = closest.value;
      cost_of_s_to_u = closest.cost;

      // Get nodes adjacent to u...
      adjacent_nodes = graph[u] || {};

      // ...and explore the edges that connect u to those nodes, updating
      // the cost of the shortest paths to any or all of those nodes as
      // necessary. v is the node across the current edge from u.
      for (v in adjacent_nodes) {
        if (adjacent_nodes.hasOwnProperty(v)) {
          // Get the cost of the edge running from u to v.
          cost_of_e = adjacent_nodes[v];

          // Cost of s to u plus the cost of u to v across e--this is *a*
          // cost from s to v that may or may not be less than the current
          // known cost to v.
          cost_of_s_to_u_plus_cost_of_e = cost_of_s_to_u + cost_of_e;

          // If we haven't visited v yet OR if the current known cost from s to
          // v is greater than the new cost we just found (cost of s to u plus
          // cost of u to v across e), update v's cost in the cost list and
          // update v's predecessor in the predecessor list (it's now u).
          cost_of_s_to_v = costs[v];
          first_visit = (typeof costs[v] === 'undefined');
          if (first_visit || cost_of_s_to_v > cost_of_s_to_u_plus_cost_of_e) {
            costs[v] = cost_of_s_to_u_plus_cost_of_e;
            open.push(v, cost_of_s_to_u_plus_cost_of_e);
            predecessors[v] = u;
          }
        }
      }
    }

    if (typeof d !== 'undefined' && typeof costs[d] === 'undefined') {
      var msg = ['Could not find a path from ', s, ' to ', d, '.'].join('');
      throw new Error(msg);
    }

    return predecessors;
  },

  extract_shortest_path_from_predecessor_list: function(predecessors, d) {
    var nodes = [];
    var u = d;
    var predecessor;
    while (u) {
      nodes.push(u);
      predecessor = predecessors[u];
      u = predecessors[u];
    }
    nodes.reverse();
    return nodes;
  },

  find_path: function(graph, s, d) {
    var predecessors = dijkstra.single_source_shortest_paths(graph, s, d);
    return dijkstra.extract_shortest_path_from_predecessor_list(
      predecessors, d);
  },

  /**
   * A very naive priority queue implementation.
   */
  PriorityQueue: {
    make: function (opts) {
      var T = dijkstra.PriorityQueue,
          t = {},
          key;
      opts = opts || {};
      for (key in T) {
        if (T.hasOwnProperty(key)) {
          t[key] = T[key];
        }
      }
      t.queue = [];
      t.sorter = opts.sorter || T.default_sorter;
      return t;
    },

    default_sorter: function (a, b) {
      return a.cost - b.cost;
    },

    /**
     * Add a new item to the queue and ensure the highest priority element
     * is at the front of the queue.
     */
    push: function (value, cost) {
      var item = {value: value, cost: cost};
      this.queue.push(item);
      this.queue.sort(this.sorter);
    },

    /**
     * Return the highest priority element in the queue.
     */
    pop: function () {
      return this.queue.shift();
    },

    empty: function () {
      return this.queue.length === 0;
    }
  }
};


// node.js module exports
if (typeof module !== 'undefined') {
  module.exports = dijkstra;
}

},{}],"VQc8":[function(require,module,exports) {
var Mode = require('./mode');

var NumericData = require('./numeric-data');

var AlphanumericData = require('./alphanumeric-data');

var ByteData = require('./byte-data');

var KanjiData = require('./kanji-data');

var Regex = require('./regex');

var Utils = require('./utils');

var dijkstra = require('dijkstrajs');
/**
 * Returns UTF8 byte length
 *
 * @param  {String} str Input string
 * @return {Number}     Number of byte
 */


function getStringByteLength(str) {
  return unescape(encodeURIComponent(str)).length;
}
/**
 * Get a list of segments of the specified mode
 * from a string
 *
 * @param  {Mode}   mode Segment mode
 * @param  {String} str  String to process
 * @return {Array}       Array of object with segments data
 */


function getSegments(regex, mode, str) {
  var segments = [];
  var result;

  while ((result = regex.exec(str)) !== null) {
    segments.push({
      data: result[0],
      index: result.index,
      mode: mode,
      length: result[0].length
    });
  }

  return segments;
}
/**
 * Extracts a series of segments with the appropriate
 * modes from a string
 *
 * @param  {String} dataStr Input string
 * @return {Array}          Array of object with segments data
 */


function getSegmentsFromString(dataStr) {
  var numSegs = getSegments(Regex.NUMERIC, Mode.NUMERIC, dataStr);
  var alphaNumSegs = getSegments(Regex.ALPHANUMERIC, Mode.ALPHANUMERIC, dataStr);
  var byteSegs;
  var kanjiSegs;

  if (Utils.isKanjiModeEnabled()) {
    byteSegs = getSegments(Regex.BYTE, Mode.BYTE, dataStr);
    kanjiSegs = getSegments(Regex.KANJI, Mode.KANJI, dataStr);
  } else {
    byteSegs = getSegments(Regex.BYTE_KANJI, Mode.BYTE, dataStr);
    kanjiSegs = [];
  }

  var segs = numSegs.concat(alphaNumSegs, byteSegs, kanjiSegs);
  return segs.sort(function (s1, s2) {
    return s1.index - s2.index;
  }).map(function (obj) {
    return {
      data: obj.data,
      mode: obj.mode,
      length: obj.length
    };
  });
}
/**
 * Returns how many bits are needed to encode a string of
 * specified length with the specified mode
 *
 * @param  {Number} length String length
 * @param  {Mode} mode     Segment mode
 * @return {Number}        Bit length
 */


function getSegmentBitsLength(length, mode) {
  switch (mode) {
    case Mode.NUMERIC:
      return NumericData.getBitsLength(length);

    case Mode.ALPHANUMERIC:
      return AlphanumericData.getBitsLength(length);

    case Mode.KANJI:
      return KanjiData.getBitsLength(length);

    case Mode.BYTE:
      return ByteData.getBitsLength(length);
  }
}
/**
 * Merges adjacent segments which have the same mode
 *
 * @param  {Array} segs Array of object with segments data
 * @return {Array}      Array of object with segments data
 */


function mergeSegments(segs) {
  return segs.reduce(function (acc, curr) {
    var prevSeg = acc.length - 1 >= 0 ? acc[acc.length - 1] : null;

    if (prevSeg && prevSeg.mode === curr.mode) {
      acc[acc.length - 1].data += curr.data;
      return acc;
    }

    acc.push(curr);
    return acc;
  }, []);
}
/**
 * Generates a list of all possible nodes combination which
 * will be used to build a segments graph.
 *
 * Nodes are divided by groups. Each group will contain a list of all the modes
 * in which is possible to encode the given text.
 *
 * For example the text '12345' can be encoded as Numeric, Alphanumeric or Byte.
 * The group for '12345' will contain then 3 objects, one for each
 * possible encoding mode.
 *
 * Each node represents a possible segment.
 *
 * @param  {Array} segs Array of object with segments data
 * @return {Array}      Array of object with segments data
 */


function buildNodes(segs) {
  var nodes = [];

  for (var i = 0; i < segs.length; i++) {
    var seg = segs[i];

    switch (seg.mode) {
      case Mode.NUMERIC:
        nodes.push([seg, {
          data: seg.data,
          mode: Mode.ALPHANUMERIC,
          length: seg.length
        }, {
          data: seg.data,
          mode: Mode.BYTE,
          length: seg.length
        }]);
        break;

      case Mode.ALPHANUMERIC:
        nodes.push([seg, {
          data: seg.data,
          mode: Mode.BYTE,
          length: seg.length
        }]);
        break;

      case Mode.KANJI:
        nodes.push([seg, {
          data: seg.data,
          mode: Mode.BYTE,
          length: getStringByteLength(seg.data)
        }]);
        break;

      case Mode.BYTE:
        nodes.push([{
          data: seg.data,
          mode: Mode.BYTE,
          length: getStringByteLength(seg.data)
        }]);
    }
  }

  return nodes;
}
/**
 * Builds a graph from a list of nodes.
 * All segments in each node group will be connected with all the segments of
 * the next group and so on.
 *
 * At each connection will be assigned a weight depending on the
 * segment's byte length.
 *
 * @param  {Array} nodes    Array of object with segments data
 * @param  {Number} version QR Code version
 * @return {Object}         Graph of all possible segments
 */


function buildGraph(nodes, version) {
  var table = {};
  var graph = {
    start: {}
  };
  var prevNodeIds = ['start'];

  for (var i = 0; i < nodes.length; i++) {
    var nodeGroup = nodes[i];
    var currentNodeIds = [];

    for (var j = 0; j < nodeGroup.length; j++) {
      var node = nodeGroup[j];
      var key = '' + i + j;
      currentNodeIds.push(key);
      table[key] = {
        node: node,
        lastCount: 0
      };
      graph[key] = {};

      for (var n = 0; n < prevNodeIds.length; n++) {
        var prevNodeId = prevNodeIds[n];

        if (table[prevNodeId] && table[prevNodeId].node.mode === node.mode) {
          graph[prevNodeId][key] = getSegmentBitsLength(table[prevNodeId].lastCount + node.length, node.mode) - getSegmentBitsLength(table[prevNodeId].lastCount, node.mode);
          table[prevNodeId].lastCount += node.length;
        } else {
          if (table[prevNodeId]) table[prevNodeId].lastCount = node.length;
          graph[prevNodeId][key] = getSegmentBitsLength(node.length, node.mode) + 4 + Mode.getCharCountIndicator(node.mode, version); // switch cost
        }
      }
    }

    prevNodeIds = currentNodeIds;
  }

  for (var _n = 0; _n < prevNodeIds.length; _n++) {
    graph[prevNodeIds[_n]].end = 0;
  }

  return {
    map: graph,
    table: table
  };
}
/**
 * Builds a segment from a specified data and mode.
 * If a mode is not specified, the more suitable will be used.
 *
 * @param  {String} data             Input data
 * @param  {Mode | String} modesHint Data mode
 * @return {Segment}                 Segment
 */


function buildSingleSegment(data, modesHint) {
  var mode;
  var bestMode = Mode.getBestModeForData(data);
  mode = Mode.from(modesHint, bestMode); // Make sure data can be encoded

  if (mode !== Mode.BYTE && mode.bit < bestMode.bit) {
    throw new Error('"' + data + '"' + ' cannot be encoded with mode ' + Mode.toString(mode) + '.\n Suggested mode is: ' + Mode.toString(bestMode));
  } // Use Mode.BYTE if Kanji support is disabled


  if (mode === Mode.KANJI && !Utils.isKanjiModeEnabled()) {
    mode = Mode.BYTE;
  }

  switch (mode) {
    case Mode.NUMERIC:
      return new NumericData(data);

    case Mode.ALPHANUMERIC:
      return new AlphanumericData(data);

    case Mode.KANJI:
      return new KanjiData(data);

    case Mode.BYTE:
      return new ByteData(data);
  }
}
/**
 * Builds a list of segments from an array.
 * Array can contain Strings or Objects with segment's info.
 *
 * For each item which is a string, will be generated a segment with the given
 * string and the more appropriate encoding mode.
 *
 * For each item which is an object, will be generated a segment with the given
 * data and mode.
 * Objects must contain at least the property "data".
 * If property "mode" is not present, the more suitable mode will be used.
 *
 * @param  {Array} array Array of objects with segments data
 * @return {Array}       Array of Segments
 */


exports.fromArray = function fromArray(array) {
  return array.reduce(function (acc, seg) {
    if (typeof seg === 'string') {
      acc.push(buildSingleSegment(seg, null));
    } else if (seg.data) {
      acc.push(buildSingleSegment(seg.data, seg.mode));
    }

    return acc;
  }, []);
};
/**
 * Builds an optimized sequence of segments from a string,
 * which will produce the shortest possible bitstream.
 *
 * @param  {String} data    Input string
 * @param  {Number} version QR Code version
 * @return {Array}          Array of segments
 */


exports.fromString = function fromString(data, version) {
  var segs = getSegmentsFromString(data, Utils.isKanjiModeEnabled());
  var nodes = buildNodes(segs);
  var graph = buildGraph(nodes, version);
  var path = dijkstra.find_path(graph.map, 'start', 'end');
  var optimizedSegs = [];

  for (var i = 1; i < path.length - 1; i++) {
    optimizedSegs.push(graph.table[path[i]].node);
  }

  return exports.fromArray(mergeSegments(optimizedSegs));
};
/**
 * Splits a string in various segments with the modes which
 * best represent their content.
 * The produced segments are far from being optimized.
 * The output of this function is only used to estimate a QR Code version
 * which may contain the data.
 *
 * @param  {string} data Input string
 * @return {Array}       Array of segments
 */


exports.rawSplit = function rawSplit(data) {
  return exports.fromArray(getSegmentsFromString(data, Utils.isKanjiModeEnabled()));
};
},{"./mode":"vyps","./numeric-data":"WAM1","./alphanumeric-data":"Ayka","./byte-data":"FYBG","./kanji-data":"EMzp","./regex":"HY6w","./utils":"O0NP","dijkstrajs":"QTsx"}],"byiX":[function(require,module,exports) {
var Utils = require('./utils');

var ECLevel = require('./error-correction-level');

var BitBuffer = require('./bit-buffer');

var BitMatrix = require('./bit-matrix');

var AlignmentPattern = require('./alignment-pattern');

var FinderPattern = require('./finder-pattern');

var MaskPattern = require('./mask-pattern');

var ECCode = require('./error-correction-code');

var ReedSolomonEncoder = require('./reed-solomon-encoder');

var Version = require('./version');

var FormatInfo = require('./format-info');

var Mode = require('./mode');

var Segments = require('./segments');
/**
 * QRCode for JavaScript
 *
 * modified by Ryan Day for nodejs support
 * Copyright (c) 2011 Ryan Day
 *
 * Licensed under the MIT license:
 *   http://www.opensource.org/licenses/mit-license.php
 *
//---------------------------------------------------------------------
// QRCode for JavaScript
//
// Copyright (c) 2009 Kazuhiko Arase
//
// URL: http://www.d-project.com/
//
// Licensed under the MIT license:
//   http://www.opensource.org/licenses/mit-license.php
//
// The word "QR Code" is registered trademark of
// DENSO WAVE INCORPORATED
//   http://www.denso-wave.com/qrcode/faqpatent-e.html
//
//---------------------------------------------------------------------
*/

/**
 * Add finder patterns bits to matrix
 *
 * @param  {BitMatrix} matrix  Modules matrix
 * @param  {Number}    version QR Code version
 */


function setupFinderPattern(matrix, version) {
  var size = matrix.size;
  var pos = FinderPattern.getPositions(version);

  for (var i = 0; i < pos.length; i++) {
    var row = pos[i][0];
    var col = pos[i][1];

    for (var r = -1; r <= 7; r++) {
      if (row + r <= -1 || size <= row + r) continue;

      for (var c = -1; c <= 7; c++) {
        if (col + c <= -1 || size <= col + c) continue;

        if (r >= 0 && r <= 6 && (c === 0 || c === 6) || c >= 0 && c <= 6 && (r === 0 || r === 6) || r >= 2 && r <= 4 && c >= 2 && c <= 4) {
          matrix.set(row + r, col + c, true, true);
        } else {
          matrix.set(row + r, col + c, false, true);
        }
      }
    }
  }
}
/**
 * Add timing pattern bits to matrix
 *
 * Note: this function must be called before {@link setupAlignmentPattern}
 *
 * @param  {BitMatrix} matrix Modules matrix
 */


function setupTimingPattern(matrix) {
  var size = matrix.size;

  for (var r = 8; r < size - 8; r++) {
    var value = r % 2 === 0;
    matrix.set(r, 6, value, true);
    matrix.set(6, r, value, true);
  }
}
/**
 * Add alignment patterns bits to matrix
 *
 * Note: this function must be called after {@link setupTimingPattern}
 *
 * @param  {BitMatrix} matrix  Modules matrix
 * @param  {Number}    version QR Code version
 */


function setupAlignmentPattern(matrix, version) {
  var pos = AlignmentPattern.getPositions(version);

  for (var i = 0; i < pos.length; i++) {
    var row = pos[i][0];
    var col = pos[i][1];

    for (var r = -2; r <= 2; r++) {
      for (var c = -2; c <= 2; c++) {
        if (r === -2 || r === 2 || c === -2 || c === 2 || r === 0 && c === 0) {
          matrix.set(row + r, col + c, true, true);
        } else {
          matrix.set(row + r, col + c, false, true);
        }
      }
    }
  }
}
/**
 * Add version info bits to matrix
 *
 * @param  {BitMatrix} matrix  Modules matrix
 * @param  {Number}    version QR Code version
 */


function setupVersionInfo(matrix, version) {
  var size = matrix.size;
  var bits = Version.getEncodedBits(version);
  var row, col, mod;

  for (var i = 0; i < 18; i++) {
    row = Math.floor(i / 3);
    col = i % 3 + size - 8 - 3;
    mod = (bits >> i & 1) === 1;
    matrix.set(row, col, mod, true);
    matrix.set(col, row, mod, true);
  }
}
/**
 * Add format info bits to matrix
 *
 * @param  {BitMatrix} matrix               Modules matrix
 * @param  {ErrorCorrectionLevel}    errorCorrectionLevel Error correction level
 * @param  {Number}    maskPattern          Mask pattern reference value
 */


function setupFormatInfo(matrix, errorCorrectionLevel, maskPattern) {
  var size = matrix.size;
  var bits = FormatInfo.getEncodedBits(errorCorrectionLevel, maskPattern);
  var i, mod;

  for (i = 0; i < 15; i++) {
    mod = (bits >> i & 1) === 1; // vertical

    if (i < 6) {
      matrix.set(i, 8, mod, true);
    } else if (i < 8) {
      matrix.set(i + 1, 8, mod, true);
    } else {
      matrix.set(size - 15 + i, 8, mod, true);
    } // horizontal


    if (i < 8) {
      matrix.set(8, size - i - 1, mod, true);
    } else if (i < 9) {
      matrix.set(8, 15 - i - 1 + 1, mod, true);
    } else {
      matrix.set(8, 15 - i - 1, mod, true);
    }
  } // fixed module


  matrix.set(size - 8, 8, 1, true);
}
/**
 * Add encoded data bits to matrix
 *
 * @param  {BitMatrix}  matrix Modules matrix
 * @param  {Uint8Array} data   Data codewords
 */


function setupData(matrix, data) {
  var size = matrix.size;
  var inc = -1;
  var row = size - 1;
  var bitIndex = 7;
  var byteIndex = 0;

  for (var col = size - 1; col > 0; col -= 2) {
    if (col === 6) col--;

    while (true) {
      for (var c = 0; c < 2; c++) {
        if (!matrix.isReserved(row, col - c)) {
          var dark = false;

          if (byteIndex < data.length) {
            dark = (data[byteIndex] >>> bitIndex & 1) === 1;
          }

          matrix.set(row, col - c, dark);
          bitIndex--;

          if (bitIndex === -1) {
            byteIndex++;
            bitIndex = 7;
          }
        }
      }

      row += inc;

      if (row < 0 || size <= row) {
        row -= inc;
        inc = -inc;
        break;
      }
    }
  }
}
/**
 * Create encoded codewords from data input
 *
 * @param  {Number}   version              QR Code version
 * @param  {ErrorCorrectionLevel}   errorCorrectionLevel Error correction level
 * @param  {ByteData} data                 Data input
 * @return {Uint8Array}                    Buffer containing encoded codewords
 */


function createData(version, errorCorrectionLevel, segments) {
  // Prepare data buffer
  var buffer = new BitBuffer();
  segments.forEach(function (data) {
    // prefix data with mode indicator (4 bits)
    buffer.put(data.mode.bit, 4); // Prefix data with character count indicator.
    // The character count indicator is a string of bits that represents the
    // number of characters that are being encoded.
    // The character count indicator must be placed after the mode indicator
    // and must be a certain number of bits long, depending on the QR version
    // and data mode
    // @see {@link Mode.getCharCountIndicator}.

    buffer.put(data.getLength(), Mode.getCharCountIndicator(data.mode, version)); // add binary data sequence to buffer

    data.write(buffer);
  }); // Calculate required number of bits

  var totalCodewords = Utils.getSymbolTotalCodewords(version);
  var ecTotalCodewords = ECCode.getTotalCodewordsCount(version, errorCorrectionLevel);
  var dataTotalCodewordsBits = (totalCodewords - ecTotalCodewords) * 8; // Add a terminator.
  // If the bit string is shorter than the total number of required bits,
  // a terminator of up to four 0s must be added to the right side of the string.
  // If the bit string is more than four bits shorter than the required number of bits,
  // add four 0s to the end.

  if (buffer.getLengthInBits() + 4 <= dataTotalCodewordsBits) {
    buffer.put(0, 4);
  } // If the bit string is fewer than four bits shorter, add only the number of 0s that
  // are needed to reach the required number of bits.
  // After adding the terminator, if the number of bits in the string is not a multiple of 8,
  // pad the string on the right with 0s to make the string's length a multiple of 8.


  while (buffer.getLengthInBits() % 8 !== 0) {
    buffer.putBit(0);
  } // Add pad bytes if the string is still shorter than the total number of required bits.
  // Extend the buffer to fill the data capacity of the symbol corresponding to
  // the Version and Error Correction Level by adding the Pad Codewords 11101100 (0xEC)
  // and 00010001 (0x11) alternately.


  var remainingByte = (dataTotalCodewordsBits - buffer.getLengthInBits()) / 8;

  for (var i = 0; i < remainingByte; i++) {
    buffer.put(i % 2 ? 0x11 : 0xEC, 8);
  }

  return createCodewords(buffer, version, errorCorrectionLevel);
}
/**
 * Encode input data with Reed-Solomon and return codewords with
 * relative error correction bits
 *
 * @param  {BitBuffer} bitBuffer            Data to encode
 * @param  {Number}    version              QR Code version
 * @param  {ErrorCorrectionLevel} errorCorrectionLevel Error correction level
 * @return {Uint8Array}                     Buffer containing encoded codewords
 */


function createCodewords(bitBuffer, version, errorCorrectionLevel) {
  // Total codewords for this QR code version (Data + Error correction)
  var totalCodewords = Utils.getSymbolTotalCodewords(version); // Total number of error correction codewords

  var ecTotalCodewords = ECCode.getTotalCodewordsCount(version, errorCorrectionLevel); // Total number of data codewords

  var dataTotalCodewords = totalCodewords - ecTotalCodewords; // Total number of blocks

  var ecTotalBlocks = ECCode.getBlocksCount(version, errorCorrectionLevel); // Calculate how many blocks each group should contain

  var blocksInGroup2 = totalCodewords % ecTotalBlocks;
  var blocksInGroup1 = ecTotalBlocks - blocksInGroup2;
  var totalCodewordsInGroup1 = Math.floor(totalCodewords / ecTotalBlocks);
  var dataCodewordsInGroup1 = Math.floor(dataTotalCodewords / ecTotalBlocks);
  var dataCodewordsInGroup2 = dataCodewordsInGroup1 + 1; // Number of EC codewords is the same for both groups

  var ecCount = totalCodewordsInGroup1 - dataCodewordsInGroup1; // Initialize a Reed-Solomon encoder with a generator polynomial of degree ecCount

  var rs = new ReedSolomonEncoder(ecCount);
  var offset = 0;
  var dcData = new Array(ecTotalBlocks);
  var ecData = new Array(ecTotalBlocks);
  var maxDataSize = 0;
  var buffer = new Uint8Array(bitBuffer.buffer); // Divide the buffer into the required number of blocks

  for (var b = 0; b < ecTotalBlocks; b++) {
    var dataSize = b < blocksInGroup1 ? dataCodewordsInGroup1 : dataCodewordsInGroup2; // extract a block of data from buffer

    dcData[b] = buffer.slice(offset, offset + dataSize); // Calculate EC codewords for this data block

    ecData[b] = rs.encode(dcData[b]);
    offset += dataSize;
    maxDataSize = Math.max(maxDataSize, dataSize);
  } // Create final data
  // Interleave the data and error correction codewords from each block


  var data = new Uint8Array(totalCodewords);
  var index = 0;
  var i, r; // Add data codewords

  for (i = 0; i < maxDataSize; i++) {
    for (r = 0; r < ecTotalBlocks; r++) {
      if (i < dcData[r].length) {
        data[index++] = dcData[r][i];
      }
    }
  } // Apped EC codewords


  for (i = 0; i < ecCount; i++) {
    for (r = 0; r < ecTotalBlocks; r++) {
      data[index++] = ecData[r][i];
    }
  }

  return data;
}
/**
 * Build QR Code symbol
 *
 * @param  {String} data                 Input string
 * @param  {Number} version              QR Code version
 * @param  {ErrorCorretionLevel} errorCorrectionLevel Error level
 * @param  {MaskPattern} maskPattern     Mask pattern
 * @return {Object}                      Object containing symbol data
 */


function createSymbol(data, version, errorCorrectionLevel, maskPattern) {
  var segments;

  if (Array.isArray(data)) {
    segments = Segments.fromArray(data);
  } else if (typeof data === 'string') {
    var estimatedVersion = version;

    if (!estimatedVersion) {
      var rawSegments = Segments.rawSplit(data); // Estimate best version that can contain raw splitted segments

      estimatedVersion = Version.getBestVersionForData(rawSegments, errorCorrectionLevel);
    } // Build optimized segments
    // If estimated version is undefined, try with the highest version


    segments = Segments.fromString(data, estimatedVersion || 40);
  } else {
    throw new Error('Invalid data');
  } // Get the min version that can contain data


  var bestVersion = Version.getBestVersionForData(segments, errorCorrectionLevel); // If no version is found, data cannot be stored

  if (!bestVersion) {
    throw new Error('The amount of data is too big to be stored in a QR Code');
  } // If not specified, use min version as default


  if (!version) {
    version = bestVersion; // Check if the specified version can contain the data
  } else if (version < bestVersion) {
    throw new Error('\n' + 'The chosen QR Code version cannot contain this amount of data.\n' + 'Minimum version required to store current data is: ' + bestVersion + '.\n');
  }

  var dataBits = createData(version, errorCorrectionLevel, segments); // Allocate matrix buffer

  var moduleCount = Utils.getSymbolSize(version);
  var modules = new BitMatrix(moduleCount); // Add function modules

  setupFinderPattern(modules, version);
  setupTimingPattern(modules);
  setupAlignmentPattern(modules, version); // Add temporary dummy bits for format info just to set them as reserved.
  // This is needed to prevent these bits from being masked by {@link MaskPattern.applyMask}
  // since the masking operation must be performed only on the encoding region.
  // These blocks will be replaced with correct values later in code.

  setupFormatInfo(modules, errorCorrectionLevel, 0);

  if (version >= 7) {
    setupVersionInfo(modules, version);
  } // Add data codewords


  setupData(modules, dataBits);

  if (isNaN(maskPattern)) {
    // Find best mask pattern
    maskPattern = MaskPattern.getBestMask(modules, setupFormatInfo.bind(null, modules, errorCorrectionLevel));
  } // Apply mask pattern


  MaskPattern.applyMask(maskPattern, modules); // Replace format info bits with correct values

  setupFormatInfo(modules, errorCorrectionLevel, maskPattern);
  return {
    modules: modules,
    version: version,
    errorCorrectionLevel: errorCorrectionLevel,
    maskPattern: maskPattern,
    segments: segments
  };
}
/**
 * QR Code
 *
 * @param {String | Array} data                 Input data
 * @param {Object} options                      Optional configurations
 * @param {Number} options.version              QR Code version
 * @param {String} options.errorCorrectionLevel Error correction level
 * @param {Function} options.toSJISFunc         Helper func to convert utf8 to sjis
 */


exports.create = function create(data, options) {
  if (typeof data === 'undefined' || data === '') {
    throw new Error('No input text');
  }

  var errorCorrectionLevel = ECLevel.M;
  var version;
  var mask;

  if (typeof options !== 'undefined') {
    // Use higher error correction level as default
    errorCorrectionLevel = ECLevel.from(options.errorCorrectionLevel, ECLevel.M);
    version = Version.from(options.version);
    mask = MaskPattern.from(options.maskPattern);

    if (options.toSJISFunc) {
      Utils.setToSJISFunction(options.toSJISFunc);
    }
  }

  return createSymbol(data, version, errorCorrectionLevel, mask);
};
},{"./utils":"O0NP","./error-correction-level":"R7wW","./bit-buffer":"PLTI","./bit-matrix":"Z2lI","./alignment-pattern":"ece7","./finder-pattern":"NfUo","./mask-pattern":"NYIn","./error-correction-code":"lpve","./reed-solomon-encoder":"x3Bz","./version":"Sw2o","./format-info":"aL6p","./mode":"vyps","./segments":"VQc8"}],"ZHSL":[function(require,module,exports) {
function hex2rgba(hex) {
  if (typeof hex === 'number') {
    hex = hex.toString();
  }

  if (typeof hex !== 'string') {
    throw new Error('Color should be defined as hex string');
  }

  var hexCode = hex.slice().replace('#', '').split('');

  if (hexCode.length < 3 || hexCode.length === 5 || hexCode.length > 8) {
    throw new Error('Invalid hex color: ' + hex);
  } // Convert from short to long form (fff -> ffffff)


  if (hexCode.length === 3 || hexCode.length === 4) {
    hexCode = Array.prototype.concat.apply([], hexCode.map(function (c) {
      return [c, c];
    }));
  } // Add default alpha value


  if (hexCode.length === 6) hexCode.push('F', 'F');
  var hexValue = parseInt(hexCode.join(''), 16);
  return {
    r: hexValue >> 24 & 255,
    g: hexValue >> 16 & 255,
    b: hexValue >> 8 & 255,
    a: hexValue & 255,
    hex: '#' + hexCode.slice(0, 6).join('')
  };
}

exports.getOptions = function getOptions(options) {
  if (!options) options = {};
  if (!options.color) options.color = {};
  var margin = typeof options.margin === 'undefined' || options.margin === null || options.margin < 0 ? 4 : options.margin;
  var width = options.width && options.width >= 21 ? options.width : undefined;
  var scale = options.scale || 4;
  return {
    width: width,
    scale: width ? 4 : scale,
    margin: margin,
    color: {
      dark: hex2rgba(options.color.dark || '#000000ff'),
      light: hex2rgba(options.color.light || '#ffffffff')
    },
    type: options.type,
    rendererOpts: options.rendererOpts || {}
  };
};

exports.getScale = function getScale(qrSize, opts) {
  return opts.width && opts.width >= qrSize + opts.margin * 2 ? opts.width / (qrSize + opts.margin * 2) : opts.scale;
};

exports.getImageWidth = function getImageWidth(qrSize, opts) {
  var scale = exports.getScale(qrSize, opts);
  return Math.floor((qrSize + opts.margin * 2) * scale);
};

exports.qrToImageData = function qrToImageData(imgData, qr, opts) {
  var size = qr.modules.size;
  var data = qr.modules.data;
  var scale = exports.getScale(size, opts);
  var symbolSize = Math.floor((size + opts.margin * 2) * scale);
  var scaledMargin = opts.margin * scale;
  var palette = [opts.color.light, opts.color.dark];

  for (var i = 0; i < symbolSize; i++) {
    for (var j = 0; j < symbolSize; j++) {
      var posDst = (i * symbolSize + j) * 4;
      var pxColor = opts.color.light;

      if (i >= scaledMargin && j >= scaledMargin && i < symbolSize - scaledMargin && j < symbolSize - scaledMargin) {
        var iSrc = Math.floor((i - scaledMargin) / scale);
        var jSrc = Math.floor((j - scaledMargin) / scale);
        pxColor = palette[data[iSrc * size + jSrc] ? 1 : 0];
      }

      imgData[posDst++] = pxColor.r;
      imgData[posDst++] = pxColor.g;
      imgData[posDst++] = pxColor.b;
      imgData[posDst] = pxColor.a;
    }
  }
};
},{}],"So6O":[function(require,module,exports) {
var Utils = require('./utils');

function clearCanvas(ctx, canvas, size) {
  ctx.clearRect(0, 0, canvas.width, canvas.height);
  if (!canvas.style) canvas.style = {};
  canvas.height = size;
  canvas.width = size;
  canvas.style.height = size + 'px';
  canvas.style.width = size + 'px';
}

function getCanvasElement() {
  try {
    return document.createElement('canvas');
  } catch (e) {
    throw new Error('You need to specify a canvas element');
  }
}

exports.render = function render(qrData, canvas, options) {
  var opts = options;
  var canvasEl = canvas;

  if (typeof opts === 'undefined' && (!canvas || !canvas.getContext)) {
    opts = canvas;
    canvas = undefined;
  }

  if (!canvas) {
    canvasEl = getCanvasElement();
  }

  opts = Utils.getOptions(opts);
  var size = Utils.getImageWidth(qrData.modules.size, opts);
  var ctx = canvasEl.getContext('2d');
  var image = ctx.createImageData(size, size);
  Utils.qrToImageData(image.data, qrData, opts);
  clearCanvas(ctx, canvasEl, size);
  ctx.putImageData(image, 0, 0);
  return canvasEl;
};

exports.renderToDataURL = function renderToDataURL(qrData, canvas, options) {
  var opts = options;

  if (typeof opts === 'undefined' && (!canvas || !canvas.getContext)) {
    opts = canvas;
    canvas = undefined;
  }

  if (!opts) opts = {};
  var canvasEl = exports.render(qrData, canvas, opts);
  var type = opts.type || 'image/png';
  var rendererOpts = opts.rendererOpts || {};
  return canvasEl.toDataURL(type, rendererOpts.quality);
};
},{"./utils":"ZHSL"}],"ZNrT":[function(require,module,exports) {
var Utils = require('./utils');

function getColorAttrib(color, attrib) {
  var alpha = color.a / 255;
  var str = attrib + '="' + color.hex + '"';
  return alpha < 1 ? str + ' ' + attrib + '-opacity="' + alpha.toFixed(2).slice(1) + '"' : str;
}

function svgCmd(cmd, x, y) {
  var str = cmd + x;
  if (typeof y !== 'undefined') str += ' ' + y;
  return str;
}

function qrToPath(data, size, margin) {
  var path = '';
  var moveBy = 0;
  var newRow = false;
  var lineLength = 0;

  for (var i = 0; i < data.length; i++) {
    var col = Math.floor(i % size);
    var row = Math.floor(i / size);
    if (!col && !newRow) newRow = true;

    if (data[i]) {
      lineLength++;

      if (!(i > 0 && col > 0 && data[i - 1])) {
        path += newRow ? svgCmd('M', col + margin, 0.5 + row + margin) : svgCmd('m', moveBy, 0);
        moveBy = 0;
        newRow = false;
      }

      if (!(col + 1 < size && data[i + 1])) {
        path += svgCmd('h', lineLength);
        lineLength = 0;
      }
    } else {
      moveBy++;
    }
  }

  return path;
}

exports.render = function render(qrData, options, cb) {
  var opts = Utils.getOptions(options);
  var size = qrData.modules.size;
  var data = qrData.modules.data;
  var qrcodesize = size + opts.margin * 2;
  var bg = !opts.color.light.a ? '' : '<path ' + getColorAttrib(opts.color.light, 'fill') + ' d="M0 0h' + qrcodesize + 'v' + qrcodesize + 'H0z"/>';
  var path = '<path ' + getColorAttrib(opts.color.dark, 'stroke') + ' d="' + qrToPath(data, size, opts.margin) + '"/>';
  var viewBox = 'viewBox="' + '0 0 ' + qrcodesize + ' ' + qrcodesize + '"';
  var width = !opts.width ? '' : 'width="' + opts.width + '" height="' + opts.width + '" ';
  var svgTag = '<svg xmlns="http://www.w3.org/2000/svg" ' + width + viewBox + ' shape-rendering="crispEdges">' + bg + path + '</svg>\n';

  if (typeof cb === 'function') {
    cb(null, svgTag);
  }

  return svgTag;
};
},{"./utils":"ZHSL"}],"xCWZ":[function(require,module,exports) {
var canPromise = require('./can-promise');

var QRCode = require('./core/qrcode');

var CanvasRenderer = require('./renderer/canvas');

var SvgRenderer = require('./renderer/svg-tag.js');

function renderCanvas(renderFunc, canvas, text, opts, cb) {
  var args = [].slice.call(arguments, 1);
  var argsNum = args.length;
  var isLastArgCb = typeof args[argsNum - 1] === 'function';

  if (!isLastArgCb && !canPromise()) {
    throw new Error('Callback required as last argument');
  }

  if (isLastArgCb) {
    if (argsNum < 2) {
      throw new Error('Too few arguments provided');
    }

    if (argsNum === 2) {
      cb = text;
      text = canvas;
      canvas = opts = undefined;
    } else if (argsNum === 3) {
      if (canvas.getContext && typeof cb === 'undefined') {
        cb = opts;
        opts = undefined;
      } else {
        cb = opts;
        opts = text;
        text = canvas;
        canvas = undefined;
      }
    }
  } else {
    if (argsNum < 1) {
      throw new Error('Too few arguments provided');
    }

    if (argsNum === 1) {
      text = canvas;
      canvas = opts = undefined;
    } else if (argsNum === 2 && !canvas.getContext) {
      opts = text;
      text = canvas;
      canvas = undefined;
    }

    return new Promise(function (resolve, reject) {
      try {
        var data = QRCode.create(text, opts);
        resolve(renderFunc(data, canvas, opts));
      } catch (e) {
        reject(e);
      }
    });
  }

  try {
    var data = QRCode.create(text, opts);
    cb(null, renderFunc(data, canvas, opts));
  } catch (e) {
    cb(e);
  }
}

exports.create = QRCode.create;
exports.toCanvas = renderCanvas.bind(null, CanvasRenderer.render);
exports.toDataURL = renderCanvas.bind(null, CanvasRenderer.renderToDataURL); // only svg for now.

exports.toString = renderCanvas.bind(null, function (data, _, opts) {
  return SvgRenderer.render(data, opts);
});
},{"./can-promise":"Hnt6","./core/qrcode":"byiX","./renderer/canvas":"So6O","./renderer/svg-tag.js":"ZNrT"}],"juYr":[function(require,module,exports) {
var global = arguments[3];
var process = require("process");
var define;
/*!
 * jQuery JavaScript Library v3.6.1
 * https://jquery.com/
 *
 * Includes Sizzle.js
 * https://sizzlejs.com/
 *
 * Copyright OpenJS Foundation and other contributors
 * Released under the MIT license
 * https://jquery.org/license
 *
 * Date: 2022-08-26T17:52Z
 */
( function( global, factory ) {

	"use strict";

	if ( typeof module === "object" && typeof module.exports === "object" ) {

		// For CommonJS and CommonJS-like environments where a proper `window`
		// is present, execute the factory and get jQuery.
		// For environments that do not have a `window` with a `document`
		// (such as Node.js), expose a factory as module.exports.
		// This accentuates the need for the creation of a real `window`.
		// e.g. var jQuery = require("jquery")(window);
		// See ticket trac-14549 for more info.
		module.exports = global.document ?
			factory( global, true ) :
			function( w ) {
				if ( !w.document ) {
					throw new Error( "jQuery requires a window with a document" );
				}
				return factory( w );
			};
	} else {
		factory( global );
	}

// Pass this if window is not defined yet
} )( typeof window !== "undefined" ? window : this, function( window, noGlobal ) {

// Edge <= 12 - 13+, Firefox <=18 - 45+, IE 10 - 11, Safari 5.1 - 9+, iOS 6 - 9.1
// throw exceptions when non-strict code (e.g., ASP.NET 4.5) accesses strict mode
// arguments.callee.caller (trac-13335). But as of jQuery 3.0 (2016), strict mode should be common
// enough that all such attempts are guarded in a try block.
"use strict";

var arr = [];

var getProto = Object.getPrototypeOf;

var slice = arr.slice;

var flat = arr.flat ? function( array ) {
	return arr.flat.call( array );
} : function( array ) {
	return arr.concat.apply( [], array );
};


var push = arr.push;

var indexOf = arr.indexOf;

var class2type = {};

var toString = class2type.toString;

var hasOwn = class2type.hasOwnProperty;

var fnToString = hasOwn.toString;

var ObjectFunctionString = fnToString.call( Object );

var support = {};

var isFunction = function isFunction( obj ) {

		// Support: Chrome <=57, Firefox <=52
		// In some browsers, typeof returns "function" for HTML <object> elements
		// (i.e., `typeof document.createElement( "object" ) === "function"`).
		// We don't want to classify *any* DOM node as a function.
		// Support: QtWeb <=3.8.5, WebKit <=534.34, wkhtmltopdf tool <=0.12.5
		// Plus for old WebKit, typeof returns "function" for HTML collections
		// (e.g., `typeof document.getElementsByTagName("div") === "function"`). (gh-4756)
		return typeof obj === "function" && typeof obj.nodeType !== "number" &&
			typeof obj.item !== "function";
	};


var isWindow = function isWindow( obj ) {
		return obj != null && obj === obj.window;
	};


var document = window.document;



	var preservedScriptAttributes = {
		type: true,
		src: true,
		nonce: true,
		noModule: true
	};

	function DOMEval( code, node, doc ) {
		doc = doc || document;

		var i, val,
			script = doc.createElement( "script" );

		script.text = code;
		if ( node ) {
			for ( i in preservedScriptAttributes ) {

				// Support: Firefox 64+, Edge 18+
				// Some browsers don't support the "nonce" property on scripts.
				// On the other hand, just using `getAttribute` is not enough as
				// the `nonce` attribute is reset to an empty string whenever it
				// becomes browsing-context connected.
				// See https://github.com/whatwg/html/issues/2369
				// See https://html.spec.whatwg.org/#nonce-attributes
				// The `node.getAttribute` check was added for the sake of
				// `jQuery.globalEval` so that it can fake a nonce-containing node
				// via an object.
				val = node[ i ] || node.getAttribute && node.getAttribute( i );
				if ( val ) {
					script.setAttribute( i, val );
				}
			}
		}
		doc.head.appendChild( script ).parentNode.removeChild( script );
	}


function toType( obj ) {
	if ( obj == null ) {
		return obj + "";
	}

	// Support: Android <=2.3 only (functionish RegExp)
	return typeof obj === "object" || typeof obj === "function" ?
		class2type[ toString.call( obj ) ] || "object" :
		typeof obj;
}
/* global Symbol */
// Defining this global in .eslintrc.json would create a danger of using the global
// unguarded in another place, it seems safer to define global only for this module



var
	version = "3.6.1",

	// Define a local copy of jQuery
	jQuery = function( selector, context ) {

		// The jQuery object is actually just the init constructor 'enhanced'
		// Need init if jQuery is called (just allow error to be thrown if not included)
		return new jQuery.fn.init( selector, context );
	};

jQuery.fn = jQuery.prototype = {

	// The current version of jQuery being used
	jquery: version,

	constructor: jQuery,

	// The default length of a jQuery object is 0
	length: 0,

	toArray: function() {
		return slice.call( this );
	},

	// Get the Nth element in the matched element set OR
	// Get the whole matched element set as a clean array
	get: function( num ) {

		// Return all the elements in a clean array
		if ( num == null ) {
			return slice.call( this );
		}

		// Return just the one element from the set
		return num < 0 ? this[ num + this.length ] : this[ num ];
	},

	// Take an array of elements and push it onto the stack
	// (returning the new matched element set)
	pushStack: function( elems ) {

		// Build a new jQuery matched element set
		var ret = jQuery.merge( this.constructor(), elems );

		// Add the old object onto the stack (as a reference)
		ret.prevObject = this;

		// Return the newly-formed element set
		return ret;
	},

	// Execute a callback for every element in the matched set.
	each: function( callback ) {
		return jQuery.each( this, callback );
	},

	map: function( callback ) {
		return this.pushStack( jQuery.map( this, function( elem, i ) {
			return callback.call( elem, i, elem );
		} ) );
	},

	slice: function() {
		return this.pushStack( slice.apply( this, arguments ) );
	},

	first: function() {
		return this.eq( 0 );
	},

	last: function() {
		return this.eq( -1 );
	},

	even: function() {
		return this.pushStack( jQuery.grep( this, function( _elem, i ) {
			return ( i + 1 ) % 2;
		} ) );
	},

	odd: function() {
		return this.pushStack( jQuery.grep( this, function( _elem, i ) {
			return i % 2;
		} ) );
	},

	eq: function( i ) {
		var len = this.length,
			j = +i + ( i < 0 ? len : 0 );
		return this.pushStack( j >= 0 && j < len ? [ this[ j ] ] : [] );
	},

	end: function() {
		return this.prevObject || this.constructor();
	},

	// For internal use only.
	// Behaves like an Array's method, not like a jQuery method.
	push: push,
	sort: arr.sort,
	splice: arr.splice
};

jQuery.extend = jQuery.fn.extend = function() {
	var options, name, src, copy, copyIsArray, clone,
		target = arguments[ 0 ] || {},
		i = 1,
		length = arguments.length,
		deep = false;

	// Handle a deep copy situation
	if ( typeof target === "boolean" ) {
		deep = target;

		// Skip the boolean and the target
		target = arguments[ i ] || {};
		i++;
	}

	// Handle case when target is a string or something (possible in deep copy)
	if ( typeof target !== "object" && !isFunction( target ) ) {
		target = {};
	}

	// Extend jQuery itself if only one argument is passed
	if ( i === length ) {
		target = this;
		i--;
	}

	for ( ; i < length; i++ ) {

		// Only deal with non-null/undefined values
		if ( ( options = arguments[ i ] ) != null ) {

			// Extend the base object
			for ( name in options ) {
				copy = options[ name ];

				// Prevent Object.prototype pollution
				// Prevent never-ending loop
				if ( name === "__proto__" || target === copy ) {
					continue;
				}

				// Recurse if we're merging plain objects or arrays
				if ( deep && copy && ( jQuery.isPlainObject( copy ) ||
					( copyIsArray = Array.isArray( copy ) ) ) ) {
					src = target[ name ];

					// Ensure proper type for the source value
					if ( copyIsArray && !Array.isArray( src ) ) {
						clone = [];
					} else if ( !copyIsArray && !jQuery.isPlainObject( src ) ) {
						clone = {};
					} else {
						clone = src;
					}
					copyIsArray = false;

					// Never move original objects, clone them
					target[ name ] = jQuery.extend( deep, clone, copy );

				// Don't bring in undefined values
				} else if ( copy !== undefined ) {
					target[ name ] = copy;
				}
			}
		}
	}

	// Return the modified object
	return target;
};

jQuery.extend( {

	// Unique for each copy of jQuery on the page
	expando: "jQuery" + ( version + Math.random() ).replace( /\D/g, "" ),

	// Assume jQuery is ready without the ready module
	isReady: true,

	error: function( msg ) {
		throw new Error( msg );
	},

	noop: function() {},

	isPlainObject: function( obj ) {
		var proto, Ctor;

		// Detect obvious negatives
		// Use toString instead of jQuery.type to catch host objects
		if ( !obj || toString.call( obj ) !== "[object Object]" ) {
			return false;
		}

		proto = getProto( obj );

		// Objects with no prototype (e.g., `Object.create( null )`) are plain
		if ( !proto ) {
			return true;
		}

		// Objects with prototype are plain iff they were constructed by a global Object function
		Ctor = hasOwn.call( proto, "constructor" ) && proto.constructor;
		return typeof Ctor === "function" && fnToString.call( Ctor ) === ObjectFunctionString;
	},

	isEmptyObject: function( obj ) {
		var name;

		for ( name in obj ) {
			return false;
		}
		return true;
	},

	// Evaluates a script in a provided context; falls back to the global one
	// if not specified.
	globalEval: function( code, options, doc ) {
		DOMEval( code, { nonce: options && options.nonce }, doc );
	},

	each: function( obj, callback ) {
		var length, i = 0;

		if ( isArrayLike( obj ) ) {
			length = obj.length;
			for ( ; i < length; i++ ) {
				if ( callback.call( obj[ i ], i, obj[ i ] ) === false ) {
					break;
				}
			}
		} else {
			for ( i in obj ) {
				if ( callback.call( obj[ i ], i, obj[ i ] ) === false ) {
					break;
				}
			}
		}

		return obj;
	},

	// results is for internal usage only
	makeArray: function( arr, results ) {
		var ret = results || [];

		if ( arr != null ) {
			if ( isArrayLike( Object( arr ) ) ) {
				jQuery.merge( ret,
					typeof arr === "string" ?
						[ arr ] : arr
				);
			} else {
				push.call( ret, arr );
			}
		}

		return ret;
	},

	inArray: function( elem, arr, i ) {
		return arr == null ? -1 : indexOf.call( arr, elem, i );
	},

	// Support: Android <=4.0 only, PhantomJS 1 only
	// push.apply(_, arraylike) throws on ancient WebKit
	merge: function( first, second ) {
		var len = +second.length,
			j = 0,
			i = first.length;

		for ( ; j < len; j++ ) {
			first[ i++ ] = second[ j ];
		}

		first.length = i;

		return first;
	},

	grep: function( elems, callback, invert ) {
		var callbackInverse,
			matches = [],
			i = 0,
			length = elems.length,
			callbackExpect = !invert;

		// Go through the array, only saving the items
		// that pass the validator function
		for ( ; i < length; i++ ) {
			callbackInverse = !callback( elems[ i ], i );
			if ( callbackInverse !== callbackExpect ) {
				matches.push( elems[ i ] );
			}
		}

		return matches;
	},

	// arg is for internal usage only
	map: function( elems, callback, arg ) {
		var length, value,
			i = 0,
			ret = [];

		// Go through the array, translating each of the items to their new values
		if ( isArrayLike( elems ) ) {
			length = elems.length;
			for ( ; i < length; i++ ) {
				value = callback( elems[ i ], i, arg );

				if ( value != null ) {
					ret.push( value );
				}
			}

		// Go through every key on the object,
		} else {
			for ( i in elems ) {
				value = callback( elems[ i ], i, arg );

				if ( value != null ) {
					ret.push( value );
				}
			}
		}

		// Flatten any nested arrays
		return flat( ret );
	},

	// A global GUID counter for objects
	guid: 1,

	// jQuery.support is not used in Core but other projects attach their
	// properties to it so it needs to exist.
	support: support
} );

if ( typeof Symbol === "function" ) {
	jQuery.fn[ Symbol.iterator ] = arr[ Symbol.iterator ];
}

// Populate the class2type map
jQuery.each( "Boolean Number String Function Array Date RegExp Object Error Symbol".split( " " ),
	function( _i, name ) {
		class2type[ "[object " + name + "]" ] = name.toLowerCase();
	} );

function isArrayLike( obj ) {

	// Support: real iOS 8.2 only (not reproducible in simulator)
	// `in` check used to prevent JIT error (gh-2145)
	// hasOwn isn't used here due to false negatives
	// regarding Nodelist length in IE
	var length = !!obj && "length" in obj && obj.length,
		type = toType( obj );

	if ( isFunction( obj ) || isWindow( obj ) ) {
		return false;
	}

	return type === "array" || length === 0 ||
		typeof length === "number" && length > 0 && ( length - 1 ) in obj;
}
var Sizzle =
/*!
 * Sizzle CSS Selector Engine v2.3.6
 * https://sizzlejs.com/
 *
 * Copyright JS Foundation and other contributors
 * Released under the MIT license
 * https://js.foundation/
 *
 * Date: 2021-02-16
 */
( function( window ) {
var i,
	support,
	Expr,
	getText,
	isXML,
	tokenize,
	compile,
	select,
	outermostContext,
	sortInput,
	hasDuplicate,

	// Local document vars
	setDocument,
	document,
	docElem,
	documentIsHTML,
	rbuggyQSA,
	rbuggyMatches,
	matches,
	contains,

	// Instance-specific data
	expando = "sizzle" + 1 * new Date(),
	preferredDoc = window.document,
	dirruns = 0,
	done = 0,
	classCache = createCache(),
	tokenCache = createCache(),
	compilerCache = createCache(),
	nonnativeSelectorCache = createCache(),
	sortOrder = function( a, b ) {
		if ( a === b ) {
			hasDuplicate = true;
		}
		return 0;
	},

	// Instance methods
	hasOwn = ( {} ).hasOwnProperty,
	arr = [],
	pop = arr.pop,
	pushNative = arr.push,
	push = arr.push,
	slice = arr.slice,

	// Use a stripped-down indexOf as it's faster than native
	// https://jsperf.com/thor-indexof-vs-for/5
	indexOf = function( list, elem ) {
		var i = 0,
			len = list.length;
		for ( ; i < len; i++ ) {
			if ( list[ i ] === elem ) {
				return i;
			}
		}
		return -1;
	},

	booleans = "checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|" +
		"ismap|loop|multiple|open|readonly|required|scoped",

	// Regular expressions

	// http://www.w3.org/TR/css3-selectors/#whitespace
	whitespace = "[\\x20\\t\\r\\n\\f]",

	// https://www.w3.org/TR/css-syntax-3/#ident-token-diagram
	identifier = "(?:\\\\[\\da-fA-F]{1,6}" + whitespace +
		"?|\\\\[^\\r\\n\\f]|[\\w-]|[^\0-\\x7f])+",

	// Attribute selectors: http://www.w3.org/TR/selectors/#attribute-selectors
	attributes = "\\[" + whitespace + "*(" + identifier + ")(?:" + whitespace +

		// Operator (capture 2)
		"*([*^$|!~]?=)" + whitespace +

		// "Attribute values must be CSS identifiers [capture 5]
		// or strings [capture 3 or capture 4]"
		"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|(" + identifier + "))|)" +
		whitespace + "*\\]",

	pseudos = ":(" + identifier + ")(?:\\((" +

		// To reduce the number of selectors needing tokenize in the preFilter, prefer arguments:
		// 1. quoted (capture 3; capture 4 or capture 5)
		"('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|" +

		// 2. simple (capture 6)
		"((?:\\\\.|[^\\\\()[\\]]|" + attributes + ")*)|" +

		// 3. anything else (capture 2)
		".*" +
		")\\)|)",

	// Leading and non-escaped trailing whitespace, capturing some non-whitespace characters preceding the latter
	rwhitespace = new RegExp( whitespace + "+", "g" ),
	rtrim = new RegExp( "^" + whitespace + "+|((?:^|[^\\\\])(?:\\\\.)*)" +
		whitespace + "+$", "g" ),

	rcomma = new RegExp( "^" + whitespace + "*," + whitespace + "*" ),
	rcombinators = new RegExp( "^" + whitespace + "*([>+~]|" + whitespace + ")" + whitespace +
		"*" ),
	rdescend = new RegExp( whitespace + "|>" ),

	rpseudo = new RegExp( pseudos ),
	ridentifier = new RegExp( "^" + identifier + "$" ),

	matchExpr = {
		"ID": new RegExp( "^#(" + identifier + ")" ),
		"CLASS": new RegExp( "^\\.(" + identifier + ")" ),
		"TAG": new RegExp( "^(" + identifier + "|[*])" ),
		"ATTR": new RegExp( "^" + attributes ),
		"PSEUDO": new RegExp( "^" + pseudos ),
		"CHILD": new RegExp( "^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\(" +
			whitespace + "*(even|odd|(([+-]|)(\\d*)n|)" + whitespace + "*(?:([+-]|)" +
			whitespace + "*(\\d+)|))" + whitespace + "*\\)|)", "i" ),
		"bool": new RegExp( "^(?:" + booleans + ")$", "i" ),

		// For use in libraries implementing .is()
		// We use this for POS matching in `select`
		"needsContext": new RegExp( "^" + whitespace +
			"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\(" + whitespace +
			"*((?:-\\d)?\\d*)" + whitespace + "*\\)|)(?=[^-]|$)", "i" )
	},

	rhtml = /HTML$/i,
	rinputs = /^(?:input|select|textarea|button)$/i,
	rheader = /^h\d$/i,

	rnative = /^[^{]+\{\s*\[native \w/,

	// Easily-parseable/retrievable ID or TAG or CLASS selectors
	rquickExpr = /^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,

	rsibling = /[+~]/,

	// CSS escapes
	// http://www.w3.org/TR/CSS21/syndata.html#escaped-characters
	runescape = new RegExp( "\\\\[\\da-fA-F]{1,6}" + whitespace + "?|\\\\([^\\r\\n\\f])", "g" ),
	funescape = function( escape, nonHex ) {
		var high = "0x" + escape.slice( 1 ) - 0x10000;

		return nonHex ?

			// Strip the backslash prefix from a non-hex escape sequence
			nonHex :

			// Replace a hexadecimal escape sequence with the encoded Unicode code point
			// Support: IE <=11+
			// For values outside the Basic Multilingual Plane (BMP), manually construct a
			// surrogate pair
			high < 0 ?
				String.fromCharCode( high + 0x10000 ) :
				String.fromCharCode( high >> 10 | 0xD800, high & 0x3FF | 0xDC00 );
	},

	// CSS string/identifier serialization
	// https://drafts.csswg.org/cssom/#common-serializing-idioms
	rcssescape = /([\0-\x1f\x7f]|^-?\d)|^-$|[^\0-\x1f\x7f-\uFFFF\w-]/g,
	fcssescape = function( ch, asCodePoint ) {
		if ( asCodePoint ) {

			// U+0000 NULL becomes U+FFFD REPLACEMENT CHARACTER
			if ( ch === "\0" ) {
				return "\uFFFD";
			}

			// Control characters and (dependent upon position) numbers get escaped as code points
			return ch.slice( 0, -1 ) + "\\" +
				ch.charCodeAt( ch.length - 1 ).toString( 16 ) + " ";
		}

		// Other potentially-special ASCII characters get backslash-escaped
		return "\\" + ch;
	},

	// Used for iframes
	// See setDocument()
	// Removing the function wrapper causes a "Permission Denied"
	// error in IE
	unloadHandler = function() {
		setDocument();
	},

	inDisabledFieldset = addCombinator(
		function( elem ) {
			return elem.disabled === true && elem.nodeName.toLowerCase() === "fieldset";
		},
		{ dir: "parentNode", next: "legend" }
	);

// Optimize for push.apply( _, NodeList )
try {
	push.apply(
		( arr = slice.call( preferredDoc.childNodes ) ),
		preferredDoc.childNodes
	);

	// Support: Android<4.0
	// Detect silently failing push.apply
	// eslint-disable-next-line no-unused-expressions
	arr[ preferredDoc.childNodes.length ].nodeType;
} catch ( e ) {
	push = { apply: arr.length ?

		// Leverage slice if possible
		function( target, els ) {
			pushNative.apply( target, slice.call( els ) );
		} :

		// Support: IE<9
		// Otherwise append directly
		function( target, els ) {
			var j = target.length,
				i = 0;

			// Can't trust NodeList.length
			while ( ( target[ j++ ] = els[ i++ ] ) ) {}
			target.length = j - 1;
		}
	};
}

function Sizzle( selector, context, results, seed ) {
	var m, i, elem, nid, match, groups, newSelector,
		newContext = context && context.ownerDocument,

		// nodeType defaults to 9, since context defaults to document
		nodeType = context ? context.nodeType : 9;

	results = results || [];

	// Return early from calls with invalid selector or context
	if ( typeof selector !== "string" || !selector ||
		nodeType !== 1 && nodeType !== 9 && nodeType !== 11 ) {

		return results;
	}

	// Try to shortcut find operations (as opposed to filters) in HTML documents
	if ( !seed ) {
		setDocument( context );
		context = context || document;

		if ( documentIsHTML ) {

			// If the selector is sufficiently simple, try using a "get*By*" DOM method
			// (excepting DocumentFragment context, where the methods don't exist)
			if ( nodeType !== 11 && ( match = rquickExpr.exec( selector ) ) ) {

				// ID selector
				if ( ( m = match[ 1 ] ) ) {

					// Document context
					if ( nodeType === 9 ) {
						if ( ( elem = context.getElementById( m ) ) ) {

							// Support: IE, Opera, Webkit
							// TODO: identify versions
							// getElementById can match elements by name instead of ID
							if ( elem.id === m ) {
								results.push( elem );
								return results;
							}
						} else {
							return results;
						}

					// Element context
					} else {

						// Support: IE, Opera, Webkit
						// TODO: identify versions
						// getElementById can match elements by name instead of ID
						if ( newContext && ( elem = newContext.getElementById( m ) ) &&
							contains( context, elem ) &&
							elem.id === m ) {

							results.push( elem );
							return results;
						}
					}

				// Type selector
				} else if ( match[ 2 ] ) {
					push.apply( results, context.getElementsByTagName( selector ) );
					return results;

				// Class selector
				} else if ( ( m = match[ 3 ] ) && support.getElementsByClassName &&
					context.getElementsByClassName ) {

					push.apply( results, context.getElementsByClassName( m ) );
					return results;
				}
			}

			// Take advantage of querySelectorAll
			if ( support.qsa &&
				!nonnativeSelectorCache[ selector + " " ] &&
				( !rbuggyQSA || !rbuggyQSA.test( selector ) ) &&

				// Support: IE 8 only
				// Exclude object elements
				( nodeType !== 1 || context.nodeName.toLowerCase() !== "object" ) ) {

				newSelector = selector;
				newContext = context;

				// qSA considers elements outside a scoping root when evaluating child or
				// descendant combinators, which is not what we want.
				// In such cases, we work around the behavior by prefixing every selector in the
				// list with an ID selector referencing the scope context.
				// The technique has to be used as well when a leading combinator is used
				// as such selectors are not recognized by querySelectorAll.
				// Thanks to Andrew Dupont for this technique.
				if ( nodeType === 1 &&
					( rdescend.test( selector ) || rcombinators.test( selector ) ) ) {

					// Expand context for sibling selectors
					newContext = rsibling.test( selector ) && testContext( context.parentNode ) ||
						context;

					// We can use :scope instead of the ID hack if the browser
					// supports it & if we're not changing the context.
					if ( newContext !== context || !support.scope ) {

						// Capture the context ID, setting it first if necessary
						if ( ( nid = context.getAttribute( "id" ) ) ) {
							nid = nid.replace( rcssescape, fcssescape );
						} else {
							context.setAttribute( "id", ( nid = expando ) );
						}
					}

					// Prefix every selector in the list
					groups = tokenize( selector );
					i = groups.length;
					while ( i-- ) {
						groups[ i ] = ( nid ? "#" + nid : ":scope" ) + " " +
							toSelector( groups[ i ] );
					}
					newSelector = groups.join( "," );
				}

				try {
					push.apply( results,
						newContext.querySelectorAll( newSelector )
					);
					return results;
				} catch ( qsaError ) {
					nonnativeSelectorCache( selector, true );
				} finally {
					if ( nid === expando ) {
						context.removeAttribute( "id" );
					}
				}
			}
		}
	}

	// All others
	return select( selector.replace( rtrim, "$1" ), context, results, seed );
}

/**
 * Create key-value caches of limited size
 * @returns {function(string, object)} Returns the Object data after storing it on itself with
 *	property name the (space-suffixed) string and (if the cache is larger than Expr.cacheLength)
 *	deleting the oldest entry
 */
function createCache() {
	var keys = [];

	function cache( key, value ) {

		// Use (key + " ") to avoid collision with native prototype properties (see Issue #157)
		if ( keys.push( key + " " ) > Expr.cacheLength ) {

			// Only keep the most recent entries
			delete cache[ keys.shift() ];
		}
		return ( cache[ key + " " ] = value );
	}
	return cache;
}

/**
 * Mark a function for special use by Sizzle
 * @param {Function} fn The function to mark
 */
function markFunction( fn ) {
	fn[ expando ] = true;
	return fn;
}

/**
 * Support testing using an element
 * @param {Function} fn Passed the created element and returns a boolean result
 */
function assert( fn ) {
	var el = document.createElement( "fieldset" );

	try {
		return !!fn( el );
	} catch ( e ) {
		return false;
	} finally {

		// Remove from its parent by default
		if ( el.parentNode ) {
			el.parentNode.removeChild( el );
		}

		// release memory in IE
		el = null;
	}
}

/**
 * Adds the same handler for all of the specified attrs
 * @param {String} attrs Pipe-separated list of attributes
 * @param {Function} handler The method that will be applied
 */
function addHandle( attrs, handler ) {
	var arr = attrs.split( "|" ),
		i = arr.length;

	while ( i-- ) {
		Expr.attrHandle[ arr[ i ] ] = handler;
	}
}

/**
 * Checks document order of two siblings
 * @param {Element} a
 * @param {Element} b
 * @returns {Number} Returns less than 0 if a precedes b, greater than 0 if a follows b
 */
function siblingCheck( a, b ) {
	var cur = b && a,
		diff = cur && a.nodeType === 1 && b.nodeType === 1 &&
			a.sourceIndex - b.sourceIndex;

	// Use IE sourceIndex if available on both nodes
	if ( diff ) {
		return diff;
	}

	// Check if b follows a
	if ( cur ) {
		while ( ( cur = cur.nextSibling ) ) {
			if ( cur === b ) {
				return -1;
			}
		}
	}

	return a ? 1 : -1;
}

/**
 * Returns a function to use in pseudos for input types
 * @param {String} type
 */
function createInputPseudo( type ) {
	return function( elem ) {
		var name = elem.nodeName.toLowerCase();
		return name === "input" && elem.type === type;
	};
}

/**
 * Returns a function to use in pseudos for buttons
 * @param {String} type
 */
function createButtonPseudo( type ) {
	return function( elem ) {
		var name = elem.nodeName.toLowerCase();
		return ( name === "input" || name === "button" ) && elem.type === type;
	};
}

/**
 * Returns a function to use in pseudos for :enabled/:disabled
 * @param {Boolean} disabled true for :disabled; false for :enabled
 */
function createDisabledPseudo( disabled ) {

	// Known :disabled false positives: fieldset[disabled] > legend:nth-of-type(n+2) :can-disable
	return function( elem ) {

		// Only certain elements can match :enabled or :disabled
		// https://html.spec.whatwg.org/multipage/scripting.html#selector-enabled
		// https://html.spec.whatwg.org/multipage/scripting.html#selector-disabled
		if ( "form" in elem ) {

			// Check for inherited disabledness on relevant non-disabled elements:
			// * listed form-associated elements in a disabled fieldset
			//   https://html.spec.whatwg.org/multipage/forms.html#category-listed
			//   https://html.spec.whatwg.org/multipage/forms.html#concept-fe-disabled
			// * option elements in a disabled optgroup
			//   https://html.spec.whatwg.org/multipage/forms.html#concept-option-disabled
			// All such elements have a "form" property.
			if ( elem.parentNode && elem.disabled === false ) {

				// Option elements defer to a parent optgroup if present
				if ( "label" in elem ) {
					if ( "label" in elem.parentNode ) {
						return elem.parentNode.disabled === disabled;
					} else {
						return elem.disabled === disabled;
					}
				}

				// Support: IE 6 - 11
				// Use the isDisabled shortcut property to check for disabled fieldset ancestors
				return elem.isDisabled === disabled ||

					// Where there is no isDisabled, check manually
					/* jshint -W018 */
					elem.isDisabled !== !disabled &&
					inDisabledFieldset( elem ) === disabled;
			}

			return elem.disabled === disabled;

		// Try to winnow out elements that can't be disabled before trusting the disabled property.
		// Some victims get caught in our net (label, legend, menu, track), but it shouldn't
		// even exist on them, let alone have a boolean value.
		} else if ( "label" in elem ) {
			return elem.disabled === disabled;
		}

		// Remaining elements are neither :enabled nor :disabled
		return false;
	};
}

/**
 * Returns a function to use in pseudos for positionals
 * @param {Function} fn
 */
function createPositionalPseudo( fn ) {
	return markFunction( function( argument ) {
		argument = +argument;
		return markFunction( function( seed, matches ) {
			var j,
				matchIndexes = fn( [], seed.length, argument ),
				i = matchIndexes.length;

			// Match elements found at the specified indexes
			while ( i-- ) {
				if ( seed[ ( j = matchIndexes[ i ] ) ] ) {
					seed[ j ] = !( matches[ j ] = seed[ j ] );
				}
			}
		} );
	} );
}

/**
 * Checks a node for validity as a Sizzle context
 * @param {Element|Object=} context
 * @returns {Element|Object|Boolean} The input node if acceptable, otherwise a falsy value
 */
function testContext( context ) {
	return context && typeof context.getElementsByTagName !== "undefined" && context;
}

// Expose support vars for convenience
support = Sizzle.support = {};

/**
 * Detects XML nodes
 * @param {Element|Object} elem An element or a document
 * @returns {Boolean} True iff elem is a non-HTML XML node
 */
isXML = Sizzle.isXML = function( elem ) {
	var namespace = elem && elem.namespaceURI,
		docElem = elem && ( elem.ownerDocument || elem ).documentElement;

	// Support: IE <=8
	// Assume HTML when documentElement doesn't yet exist, such as inside loading iframes
	// https://bugs.jquery.com/ticket/4833
	return !rhtml.test( namespace || docElem && docElem.nodeName || "HTML" );
};

/**
 * Sets document-related variables once based on the current document
 * @param {Element|Object} [doc] An element or document object to use to set the document
 * @returns {Object} Returns the current document
 */
setDocument = Sizzle.setDocument = function( node ) {
	var hasCompare, subWindow,
		doc = node ? node.ownerDocument || node : preferredDoc;

	// Return early if doc is invalid or already selected
	// Support: IE 11+, Edge 17 - 18+
	// IE/Edge sometimes throw a "Permission denied" error when strict-comparing
	// two documents; shallow comparisons work.
	// eslint-disable-next-line eqeqeq
	if ( doc == document || doc.nodeType !== 9 || !doc.documentElement ) {
		return document;
	}

	// Update global variables
	document = doc;
	docElem = document.documentElement;
	documentIsHTML = !isXML( document );

	// Support: IE 9 - 11+, Edge 12 - 18+
	// Accessing iframe documents after unload throws "permission denied" errors (jQuery #13936)
	// Support: IE 11+, Edge 17 - 18+
	// IE/Edge sometimes throw a "Permission denied" error when strict-comparing
	// two documents; shallow comparisons work.
	// eslint-disable-next-line eqeqeq
	if ( preferredDoc != document &&
		( subWindow = document.defaultView ) && subWindow.top !== subWindow ) {

		// Support: IE 11, Edge
		if ( subWindow.addEventListener ) {
			subWindow.addEventListener( "unload", unloadHandler, false );

		// Support: IE 9 - 10 only
		} else if ( subWindow.attachEvent ) {
			subWindow.attachEvent( "onunload", unloadHandler );
		}
	}

	// Support: IE 8 - 11+, Edge 12 - 18+, Chrome <=16 - 25 only, Firefox <=3.6 - 31 only,
	// Safari 4 - 5 only, Opera <=11.6 - 12.x only
	// IE/Edge & older browsers don't support the :scope pseudo-class.
	// Support: Safari 6.0 only
	// Safari 6.0 supports :scope but it's an alias of :root there.
	support.scope = assert( function( el ) {
		docElem.appendChild( el ).appendChild( document.createElement( "div" ) );
		return typeof el.querySelectorAll !== "undefined" &&
			!el.querySelectorAll( ":scope fieldset div" ).length;
	} );

	/* Attributes
	---------------------------------------------------------------------- */

	// Support: IE<8
	// Verify that getAttribute really returns attributes and not properties
	// (excepting IE8 booleans)
	support.attributes = assert( function( el ) {
		el.className = "i";
		return !el.getAttribute( "className" );
	} );

	/* getElement(s)By*
	---------------------------------------------------------------------- */

	// Check if getElementsByTagName("*") returns only elements
	support.getElementsByTagName = assert( function( el ) {
		el.appendChild( document.createComment( "" ) );
		return !el.getElementsByTagName( "*" ).length;
	} );

	// Support: IE<9
	support.getElementsByClassName = rnative.test( document.getElementsByClassName );

	// Support: IE<10
	// Check if getElementById returns elements by name
	// The broken getElementById methods don't pick up programmatically-set names,
	// so use a roundabout getElementsByName test
	support.getById = assert( function( el ) {
		docElem.appendChild( el ).id = expando;
		return !document.getElementsByName || !document.getElementsByName( expando ).length;
	} );

	// ID filter and find
	if ( support.getById ) {
		Expr.filter[ "ID" ] = function( id ) {
			var attrId = id.replace( runescape, funescape );
			return function( elem ) {
				return elem.getAttribute( "id" ) === attrId;
			};
		};
		Expr.find[ "ID" ] = function( id, context ) {
			if ( typeof context.getElementById !== "undefined" && documentIsHTML ) {
				var elem = context.getElementById( id );
				return elem ? [ elem ] : [];
			}
		};
	} else {
		Expr.filter[ "ID" ] =  function( id ) {
			var attrId = id.replace( runescape, funescape );
			return function( elem ) {
				var node = typeof elem.getAttributeNode !== "undefined" &&
					elem.getAttributeNode( "id" );
				return node && node.value === attrId;
			};
		};

		// Support: IE 6 - 7 only
		// getElementById is not reliable as a find shortcut
		Expr.find[ "ID" ] = function( id, context ) {
			if ( typeof context.getElementById !== "undefined" && documentIsHTML ) {
				var node, i, elems,
					elem = context.getElementById( id );

				if ( elem ) {

					// Verify the id attribute
					node = elem.getAttributeNode( "id" );
					if ( node && node.value === id ) {
						return [ elem ];
					}

					// Fall back on getElementsByName
					elems = context.getElementsByName( id );
					i = 0;
					while ( ( elem = elems[ i++ ] ) ) {
						node = elem.getAttributeNode( "id" );
						if ( node && node.value === id ) {
							return [ elem ];
						}
					}
				}

				return [];
			}
		};
	}

	// Tag
	Expr.find[ "TAG" ] = support.getElementsByTagName ?
		function( tag, context ) {
			if ( typeof context.getElementsByTagName !== "undefined" ) {
				return context.getElementsByTagName( tag );

			// DocumentFragment nodes don't have gEBTN
			} else if ( support.qsa ) {
				return context.querySelectorAll( tag );
			}
		} :

		function( tag, context ) {
			var elem,
				tmp = [],
				i = 0,

				// By happy coincidence, a (broken) gEBTN appears on DocumentFragment nodes too
				results = context.getElementsByTagName( tag );

			// Filter out possible comments
			if ( tag === "*" ) {
				while ( ( elem = results[ i++ ] ) ) {
					if ( elem.nodeType === 1 ) {
						tmp.push( elem );
					}
				}

				return tmp;
			}
			return results;
		};

	// Class
	Expr.find[ "CLASS" ] = support.getElementsByClassName && function( className, context ) {
		if ( typeof context.getElementsByClassName !== "undefined" && documentIsHTML ) {
			return context.getElementsByClassName( className );
		}
	};

	/* QSA/matchesSelector
	---------------------------------------------------------------------- */

	// QSA and matchesSelector support

	// matchesSelector(:active) reports false when true (IE9/Opera 11.5)
	rbuggyMatches = [];

	// qSa(:focus) reports false when true (Chrome 21)
	// We allow this because of a bug in IE8/9 that throws an error
	// whenever `document.activeElement` is accessed on an iframe
	// So, we allow :focus to pass through QSA all the time to avoid the IE error
	// See https://bugs.jquery.com/ticket/13378
	rbuggyQSA = [];

	if ( ( support.qsa = rnative.test( document.querySelectorAll ) ) ) {

		// Build QSA regex
		// Regex strategy adopted from Diego Perini
		assert( function( el ) {

			var input;

			// Select is set to empty string on purpose
			// This is to test IE's treatment of not explicitly
			// setting a boolean content attribute,
			// since its presence should be enough
			// https://bugs.jquery.com/ticket/12359
			docElem.appendChild( el ).innerHTML = "<a id='" + expando + "'></a>" +
				"<select id='" + expando + "-\r\\' msallowcapture=''>" +
				"<option selected=''></option></select>";

			// Support: IE8, Opera 11-12.16
			// Nothing should be selected when empty strings follow ^= or $= or *=
			// The test attribute must be unknown in Opera but "safe" for WinRT
			// https://msdn.microsoft.com/en-us/library/ie/hh465388.aspx#attribute_section
			if ( el.querySelectorAll( "[msallowcapture^='']" ).length ) {
				rbuggyQSA.push( "[*^$]=" + whitespace + "*(?:''|\"\")" );
			}

			// Support: IE8
			// Boolean attributes and "value" are not treated correctly
			if ( !el.querySelectorAll( "[selected]" ).length ) {
				rbuggyQSA.push( "\\[" + whitespace + "*(?:value|" + booleans + ")" );
			}

			// Support: Chrome<29, Android<4.4, Safari<7.0+, iOS<7.0+, PhantomJS<1.9.8+
			if ( !el.querySelectorAll( "[id~=" + expando + "-]" ).length ) {
				rbuggyQSA.push( "~=" );
			}

			// Support: IE 11+, Edge 15 - 18+
			// IE 11/Edge don't find elements on a `[name='']` query in some cases.
			// Adding a temporary attribute to the document before the selection works
			// around the issue.
			// Interestingly, IE 10 & older don't seem to have the issue.
			input = document.createElement( "input" );
			input.setAttribute( "name", "" );
			el.appendChild( input );
			if ( !el.querySelectorAll( "[name='']" ).length ) {
				rbuggyQSA.push( "\\[" + whitespace + "*name" + whitespace + "*=" +
					whitespace + "*(?:''|\"\")" );
			}

			// Webkit/Opera - :checked should return selected option elements
			// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
			// IE8 throws error here and will not see later tests
			if ( !el.querySelectorAll( ":checked" ).length ) {
				rbuggyQSA.push( ":checked" );
			}

			// Support: Safari 8+, iOS 8+
			// https://bugs.webkit.org/show_bug.cgi?id=136851
			// In-page `selector#id sibling-combinator selector` fails
			if ( !el.querySelectorAll( "a#" + expando + "+*" ).length ) {
				rbuggyQSA.push( ".#.+[+~]" );
			}

			// Support: Firefox <=3.6 - 5 only
			// Old Firefox doesn't throw on a badly-escaped identifier.
			el.querySelectorAll( "\\\f" );
			rbuggyQSA.push( "[\\r\\n\\f]" );
		} );

		assert( function( el ) {
			el.innerHTML = "<a href='' disabled='disabled'></a>" +
				"<select disabled='disabled'><option/></select>";

			// Support: Windows 8 Native Apps
			// The type and name attributes are restricted during .innerHTML assignment
			var input = document.createElement( "input" );
			input.setAttribute( "type", "hidden" );
			el.appendChild( input ).setAttribute( "name", "D" );

			// Support: IE8
			// Enforce case-sensitivity of name attribute
			if ( el.querySelectorAll( "[name=d]" ).length ) {
				rbuggyQSA.push( "name" + whitespace + "*[*^$|!~]?=" );
			}

			// FF 3.5 - :enabled/:disabled and hidden elements (hidden elements are still enabled)
			// IE8 throws error here and will not see later tests
			if ( el.querySelectorAll( ":enabled" ).length !== 2 ) {
				rbuggyQSA.push( ":enabled", ":disabled" );
			}

			// Support: IE9-11+
			// IE's :disabled selector does not pick up the children of disabled fieldsets
			docElem.appendChild( el ).disabled = true;
			if ( el.querySelectorAll( ":disabled" ).length !== 2 ) {
				rbuggyQSA.push( ":enabled", ":disabled" );
			}

			// Support: Opera 10 - 11 only
			// Opera 10-11 does not throw on post-comma invalid pseudos
			el.querySelectorAll( "*,:x" );
			rbuggyQSA.push( ",.*:" );
		} );
	}

	if ( ( support.matchesSelector = rnative.test( ( matches = docElem.matches ||
		docElem.webkitMatchesSelector ||
		docElem.mozMatchesSelector ||
		docElem.oMatchesSelector ||
		docElem.msMatchesSelector ) ) ) ) {

		assert( function( el ) {

			// Check to see if it's possible to do matchesSelector
			// on a disconnected node (IE 9)
			support.disconnectedMatch = matches.call( el, "*" );

			// This should fail with an exception
			// Gecko does not error, returns false instead
			matches.call( el, "[s!='']:x" );
			rbuggyMatches.push( "!=", pseudos );
		} );
	}

	rbuggyQSA = rbuggyQSA.length && new RegExp( rbuggyQSA.join( "|" ) );
	rbuggyMatches = rbuggyMatches.length && new RegExp( rbuggyMatches.join( "|" ) );

	/* Contains
	---------------------------------------------------------------------- */
	hasCompare = rnative.test( docElem.compareDocumentPosition );

	// Element contains another
	// Purposefully self-exclusive
	// As in, an element does not contain itself
	contains = hasCompare || rnative.test( docElem.contains ) ?
		function( a, b ) {
			var adown = a.nodeType === 9 ? a.documentElement : a,
				bup = b && b.parentNode;
			return a === bup || !!( bup && bup.nodeType === 1 && (
				adown.contains ?
					adown.contains( bup ) :
					a.compareDocumentPosition && a.compareDocumentPosition( bup ) & 16
			) );
		} :
		function( a, b ) {
			if ( b ) {
				while ( ( b = b.parentNode ) ) {
					if ( b === a ) {
						return true;
					}
				}
			}
			return false;
		};

	/* Sorting
	---------------------------------------------------------------------- */

	// Document order sorting
	sortOrder = hasCompare ?
	function( a, b ) {

		// Flag for duplicate removal
		if ( a === b ) {
			hasDuplicate = true;
			return 0;
		}

		// Sort on method existence if only one input has compareDocumentPosition
		var compare = !a.compareDocumentPosition - !b.compareDocumentPosition;
		if ( compare ) {
			return compare;
		}

		// Calculate position if both inputs belong to the same document
		// Support: IE 11+, Edge 17 - 18+
		// IE/Edge sometimes throw a "Permission denied" error when strict-comparing
		// two documents; shallow comparisons work.
		// eslint-disable-next-line eqeqeq
		compare = ( a.ownerDocument || a ) == ( b.ownerDocument || b ) ?
			a.compareDocumentPosition( b ) :

			// Otherwise we know they are disconnected
			1;

		// Disconnected nodes
		if ( compare & 1 ||
			( !support.sortDetached && b.compareDocumentPosition( a ) === compare ) ) {

			// Choose the first element that is related to our preferred document
			// Support: IE 11+, Edge 17 - 18+
			// IE/Edge sometimes throw a "Permission denied" error when strict-comparing
			// two documents; shallow comparisons work.
			// eslint-disable-next-line eqeqeq
			if ( a == document || a.ownerDocument == preferredDoc &&
				contains( preferredDoc, a ) ) {
				return -1;
			}

			// Support: IE 11+, Edge 17 - 18+
			// IE/Edge sometimes throw a "Permission denied" error when strict-comparing
			// two documents; shallow comparisons work.
			// eslint-disable-next-line eqeqeq
			if ( b == document || b.ownerDocument == preferredDoc &&
				contains( preferredDoc, b ) ) {
				return 1;
			}

			// Maintain original order
			return sortInput ?
				( indexOf( sortInput, a ) - indexOf( sortInput, b ) ) :
				0;
		}

		return compare & 4 ? -1 : 1;
	} :
	function( a, b ) {

		// Exit early if the nodes are identical
		if ( a === b ) {
			hasDuplicate = true;
			return 0;
		}

		var cur,
			i = 0,
			aup = a.parentNode,
			bup = b.parentNode,
			ap = [ a ],
			bp = [ b ];

		// Parentless nodes are either documents or disconnected
		if ( !aup || !bup ) {

			// Support: IE 11+, Edge 17 - 18+
			// IE/Edge sometimes throw a "Permission denied" error when strict-comparing
			// two documents; shallow comparisons work.
			/* eslint-disable eqeqeq */
			return a == document ? -1 :
				b == document ? 1 :
				/* eslint-enable eqeqeq */
				aup ? -1 :
				bup ? 1 :
				sortInput ?
				( indexOf( sortInput, a ) - indexOf( sortInput, b ) ) :
				0;

		// If the nodes are siblings, we can do a quick check
		} else if ( aup === bup ) {
			return siblingCheck( a, b );
		}

		// Otherwise we need full lists of their ancestors for comparison
		cur = a;
		while ( ( cur = cur.parentNode ) ) {
			ap.unshift( cur );
		}
		cur = b;
		while ( ( cur = cur.parentNode ) ) {
			bp.unshift( cur );
		}

		// Walk down the tree looking for a discrepancy
		while ( ap[ i ] === bp[ i ] ) {
			i++;
		}

		return i ?

			// Do a sibling check if the nodes have a common ancestor
			siblingCheck( ap[ i ], bp[ i ] ) :

			// Otherwise nodes in our document sort first
			// Support: IE 11+, Edge 17 - 18+
			// IE/Edge sometimes throw a "Permission denied" error when strict-comparing
			// two documents; shallow comparisons work.
			/* eslint-disable eqeqeq */
			ap[ i ] == preferredDoc ? -1 :
			bp[ i ] == preferredDoc ? 1 :
			/* eslint-enable eqeqeq */
			0;
	};

	return document;
};

Sizzle.matches = function( expr, elements ) {
	return Sizzle( expr, null, null, elements );
};

Sizzle.matchesSelector = function( elem, expr ) {
	setDocument( elem );

	if ( support.matchesSelector && documentIsHTML &&
		!nonnativeSelectorCache[ expr + " " ] &&
		( !rbuggyMatches || !rbuggyMatches.test( expr ) ) &&
		( !rbuggyQSA     || !rbuggyQSA.test( expr ) ) ) {

		try {
			var ret = matches.call( elem, expr );

			// IE 9's matchesSelector returns false on disconnected nodes
			if ( ret || support.disconnectedMatch ||

				// As well, disconnected nodes are said to be in a document
				// fragment in IE 9
				elem.document && elem.document.nodeType !== 11 ) {
				return ret;
			}
		} catch ( e ) {
			nonnativeSelectorCache( expr, true );
		}
	}

	return Sizzle( expr, document, null, [ elem ] ).length > 0;
};

Sizzle.contains = function( context, elem ) {

	// Set document vars if needed
	// Support: IE 11+, Edge 17 - 18+
	// IE/Edge sometimes throw a "Permission denied" error when strict-comparing
	// two documents; shallow comparisons work.
	// eslint-disable-next-line eqeqeq
	if ( ( context.ownerDocument || context ) != document ) {
		setDocument( context );
	}
	return contains( context, elem );
};

Sizzle.attr = function( elem, name ) {

	// Set document vars if needed
	// Support: IE 11+, Edge 17 - 18+
	// IE/Edge sometimes throw a "Permission denied" error when strict-comparing
	// two documents; shallow comparisons work.
	// eslint-disable-next-line eqeqeq
	if ( ( elem.ownerDocument || elem ) != document ) {
		setDocument( elem );
	}

	var fn = Expr.attrHandle[ name.toLowerCase() ],

		// Don't get fooled by Object.prototype properties (jQuery #13807)
		val = fn && hasOwn.call( Expr.attrHandle, name.toLowerCase() ) ?
			fn( elem, name, !documentIsHTML ) :
			undefined;

	return val !== undefined ?
		val :
		support.attributes || !documentIsHTML ?
			elem.getAttribute( name ) :
			( val = elem.getAttributeNode( name ) ) && val.specified ?
				val.value :
				null;
};

Sizzle.escape = function( sel ) {
	return ( sel + "" ).replace( rcssescape, fcssescape );
};

Sizzle.error = function( msg ) {
	throw new Error( "Syntax error, unrecognized expression: " + msg );
};

/**
 * Document sorting and removing duplicates
 * @param {ArrayLike} results
 */
Sizzle.uniqueSort = function( results ) {
	var elem,
		duplicates = [],
		j = 0,
		i = 0;

	// Unless we *know* we can detect duplicates, assume their presence
	hasDuplicate = !support.detectDuplicates;
	sortInput = !support.sortStable && results.slice( 0 );
	results.sort( sortOrder );

	if ( hasDuplicate ) {
		while ( ( elem = results[ i++ ] ) ) {
			if ( elem === results[ i ] ) {
				j = duplicates.push( i );
			}
		}
		while ( j-- ) {
			results.splice( duplicates[ j ], 1 );
		}
	}

	// Clear input after sorting to release objects
	// See https://github.com/jquery/sizzle/pull/225
	sortInput = null;

	return results;
};

/**
 * Utility function for retrieving the text value of an array of DOM nodes
 * @param {Array|Element} elem
 */
getText = Sizzle.getText = function( elem ) {
	var node,
		ret = "",
		i = 0,
		nodeType = elem.nodeType;

	if ( !nodeType ) {

		// If no nodeType, this is expected to be an array
		while ( ( node = elem[ i++ ] ) ) {

			// Do not traverse comment nodes
			ret += getText( node );
		}
	} else if ( nodeType === 1 || nodeType === 9 || nodeType === 11 ) {

		// Use textContent for elements
		// innerText usage removed for consistency of new lines (jQuery #11153)
		if ( typeof elem.textContent === "string" ) {
			return elem.textContent;
		} else {

			// Traverse its children
			for ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {
				ret += getText( elem );
			}
		}
	} else if ( nodeType === 3 || nodeType === 4 ) {
		return elem.nodeValue;
	}

	// Do not include comment or processing instruction nodes

	return ret;
};

Expr = Sizzle.selectors = {

	// Can be adjusted by the user
	cacheLength: 50,

	createPseudo: markFunction,

	match: matchExpr,

	attrHandle: {},

	find: {},

	relative: {
		">": { dir: "parentNode", first: true },
		" ": { dir: "parentNode" },
		"+": { dir: "previousSibling", first: true },
		"~": { dir: "previousSibling" }
	},

	preFilter: {
		"ATTR": function( match ) {
			match[ 1 ] = match[ 1 ].replace( runescape, funescape );

			// Move the given value to match[3] whether quoted or unquoted
			match[ 3 ] = ( match[ 3 ] || match[ 4 ] ||
				match[ 5 ] || "" ).replace( runescape, funescape );

			if ( match[ 2 ] === "~=" ) {
				match[ 3 ] = " " + match[ 3 ] + " ";
			}

			return match.slice( 0, 4 );
		},

		"CHILD": function( match ) {

			/* matches from matchExpr["CHILD"]
				1 type (only|nth|...)
				2 what (child|of-type)
				3 argument (even|odd|\d*|\d*n([+-]\d+)?|...)
				4 xn-component of xn+y argument ([+-]?\d*n|)
				5 sign of xn-component
				6 x of xn-component
				7 sign of y-component
				8 y of y-component
			*/
			match[ 1 ] = match[ 1 ].toLowerCase();

			if ( match[ 1 ].slice( 0, 3 ) === "nth" ) {

				// nth-* requires argument
				if ( !match[ 3 ] ) {
					Sizzle.error( match[ 0 ] );
				}

				// numeric x and y parameters for Expr.filter.CHILD
				// remember that false/true cast respectively to 0/1
				match[ 4 ] = +( match[ 4 ] ?
					match[ 5 ] + ( match[ 6 ] || 1 ) :
					2 * ( match[ 3 ] === "even" || match[ 3 ] === "odd" ) );
				match[ 5 ] = +( ( match[ 7 ] + match[ 8 ] ) || match[ 3 ] === "odd" );

				// other types prohibit arguments
			} else if ( match[ 3 ] ) {
				Sizzle.error( match[ 0 ] );
			}

			return match;
		},

		"PSEUDO": function( match ) {
			var excess,
				unquoted = !match[ 6 ] && match[ 2 ];

			if ( matchExpr[ "CHILD" ].test( match[ 0 ] ) ) {
				return null;
			}

			// Accept quoted arguments as-is
			if ( match[ 3 ] ) {
				match[ 2 ] = match[ 4 ] || match[ 5 ] || "";

			// Strip excess characters from unquoted arguments
			} else if ( unquoted && rpseudo.test( unquoted ) &&

				// Get excess from tokenize (recursively)
				( excess = tokenize( unquoted, true ) ) &&

				// advance to the next closing parenthesis
				( excess = unquoted.indexOf( ")", unquoted.length - excess ) - unquoted.length ) ) {

				// excess is a negative index
				match[ 0 ] = match[ 0 ].slice( 0, excess );
				match[ 2 ] = unquoted.slice( 0, excess );
			}

			// Return only captures needed by the pseudo filter method (type and argument)
			return match.slice( 0, 3 );
		}
	},

	filter: {

		"TAG": function( nodeNameSelector ) {
			var nodeName = nodeNameSelector.replace( runescape, funescape ).toLowerCase();
			return nodeNameSelector === "*" ?
				function() {
					return true;
				} :
				function( elem ) {
					return elem.nodeName && elem.nodeName.toLowerCase() === nodeName;
				};
		},

		"CLASS": function( className ) {
			var pattern = classCache[ className + " " ];

			return pattern ||
				( pattern = new RegExp( "(^|" + whitespace +
					")" + className + "(" + whitespace + "|$)" ) ) && classCache(
						className, function( elem ) {
							return pattern.test(
								typeof elem.className === "string" && elem.className ||
								typeof elem.getAttribute !== "undefined" &&
									elem.getAttribute( "class" ) ||
								""
							);
				} );
		},

		"ATTR": function( name, operator, check ) {
			return function( elem ) {
				var result = Sizzle.attr( elem, name );

				if ( result == null ) {
					return operator === "!=";
				}
				if ( !operator ) {
					return true;
				}

				result += "";

				/* eslint-disable max-len */

				return operator === "=" ? result === check :
					operator === "!=" ? result !== check :
					operator === "^=" ? check && result.indexOf( check ) === 0 :
					operator === "*=" ? check && result.indexOf( check ) > -1 :
					operator === "$=" ? check && result.slice( -check.length ) === check :
					operator === "~=" ? ( " " + result.replace( rwhitespace, " " ) + " " ).indexOf( check ) > -1 :
					operator === "|=" ? result === check || result.slice( 0, check.length + 1 ) === check + "-" :
					false;
				/* eslint-enable max-len */

			};
		},

		"CHILD": function( type, what, _argument, first, last ) {
			var simple = type.slice( 0, 3 ) !== "nth",
				forward = type.slice( -4 ) !== "last",
				ofType = what === "of-type";

			return first === 1 && last === 0 ?

				// Shortcut for :nth-*(n)
				function( elem ) {
					return !!elem.parentNode;
				} :

				function( elem, _context, xml ) {
					var cache, uniqueCache, outerCache, node, nodeIndex, start,
						dir = simple !== forward ? "nextSibling" : "previousSibling",
						parent = elem.parentNode,
						name = ofType && elem.nodeName.toLowerCase(),
						useCache = !xml && !ofType,
						diff = false;

					if ( parent ) {

						// :(first|last|only)-(child|of-type)
						if ( simple ) {
							while ( dir ) {
								node = elem;
								while ( ( node = node[ dir ] ) ) {
									if ( ofType ?
										node.nodeName.toLowerCase() === name :
										node.nodeType === 1 ) {

										return false;
									}
								}

								// Reverse direction for :only-* (if we haven't yet done so)
								start = dir = type === "only" && !start && "nextSibling";
							}
							return true;
						}

						start = [ forward ? parent.firstChild : parent.lastChild ];

						// non-xml :nth-child(...) stores cache data on `parent`
						if ( forward && useCache ) {

							// Seek `elem` from a previously-cached index

							// ...in a gzip-friendly way
							node = parent;
							outerCache = node[ expando ] || ( node[ expando ] = {} );

							// Support: IE <9 only
							// Defend against cloned attroperties (jQuery gh-1709)
							uniqueCache = outerCache[ node.uniqueID ] ||
								( outerCache[ node.uniqueID ] = {} );

							cache = uniqueCache[ type ] || [];
							nodeIndex = cache[ 0 ] === dirruns && cache[ 1 ];
							diff = nodeIndex && cache[ 2 ];
							node = nodeIndex && parent.childNodes[ nodeIndex ];

							while ( ( node = ++nodeIndex && node && node[ dir ] ||

								// Fallback to seeking `elem` from the start
								( diff = nodeIndex = 0 ) || start.pop() ) ) {

								// When found, cache indexes on `parent` and break
								if ( node.nodeType === 1 && ++diff && node === elem ) {
									uniqueCache[ type ] = [ dirruns, nodeIndex, diff ];
									break;
								}
							}

						} else {

							// Use previously-cached element index if available
							if ( useCache ) {

								// ...in a gzip-friendly way
								node = elem;
								outerCache = node[ expando ] || ( node[ expando ] = {} );

								// Support: IE <9 only
								// Defend against cloned attroperties (jQuery gh-1709)
								uniqueCache = outerCache[ node.uniqueID ] ||
									( outerCache[ node.uniqueID ] = {} );

								cache = uniqueCache[ type ] || [];
								nodeIndex = cache[ 0 ] === dirruns && cache[ 1 ];
								diff = nodeIndex;
							}

							// xml :nth-child(...)
							// or :nth-last-child(...) or :nth(-last)?-of-type(...)
							if ( diff === false ) {

								// Use the same loop as above to seek `elem` from the start
								while ( ( node = ++nodeIndex && node && node[ dir ] ||
									( diff = nodeIndex = 0 ) || start.pop() ) ) {

									if ( ( ofType ?
										node.nodeName.toLowerCase() === name :
										node.nodeType === 1 ) &&
										++diff ) {

										// Cache the index of each encountered element
										if ( useCache ) {
											outerCache = node[ expando ] ||
												( node[ expando ] = {} );

											// Support: IE <9 only
											// Defend against cloned attroperties (jQuery gh-1709)
											uniqueCache = outerCache[ node.uniqueID ] ||
												( outerCache[ node.uniqueID ] = {} );

											uniqueCache[ type ] = [ dirruns, diff ];
										}

										if ( node === elem ) {
											break;
										}
									}
								}
							}
						}

						// Incorporate the offset, then check against cycle size
						diff -= last;
						return diff === first || ( diff % first === 0 && diff / first >= 0 );
					}
				};
		},

		"PSEUDO": function( pseudo, argument ) {

			// pseudo-class names are case-insensitive
			// http://www.w3.org/TR/selectors/#pseudo-classes
			// Prioritize by case sensitivity in case custom pseudos are added with uppercase letters
			// Remember that setFilters inherits from pseudos
			var args,
				fn = Expr.pseudos[ pseudo ] || Expr.setFilters[ pseudo.toLowerCase() ] ||
					Sizzle.error( "unsupported pseudo: " + pseudo );

			// The user may use createPseudo to indicate that
			// arguments are needed to create the filter function
			// just as Sizzle does
			if ( fn[ expando ] ) {
				return fn( argument );
			}

			// But maintain support for old signatures
			if ( fn.length > 1 ) {
				args = [ pseudo, pseudo, "", argument ];
				return Expr.setFilters.hasOwnProperty( pseudo.toLowerCase() ) ?
					markFunction( function( seed, matches ) {
						var idx,
							matched = fn( seed, argument ),
							i = matched.length;
						while ( i-- ) {
							idx = indexOf( seed, matched[ i ] );
							seed[ idx ] = !( matches[ idx ] = matched[ i ] );
						}
					} ) :
					function( elem ) {
						return fn( elem, 0, args );
					};
			}

			return fn;
		}
	},

	pseudos: {

		// Potentially complex pseudos
		"not": markFunction( function( selector ) {

			// Trim the selector passed to compile
			// to avoid treating leading and trailing
			// spaces as combinators
			var input = [],
				results = [],
				matcher = compile( selector.replace( rtrim, "$1" ) );

			return matcher[ expando ] ?
				markFunction( function( seed, matches, _context, xml ) {
					var elem,
						unmatched = matcher( seed, null, xml, [] ),
						i = seed.length;

					// Match elements unmatched by `matcher`
					while ( i-- ) {
						if ( ( elem = unmatched[ i ] ) ) {
							seed[ i ] = !( matches[ i ] = elem );
						}
					}
				} ) :
				function( elem, _context, xml ) {
					input[ 0 ] = elem;
					matcher( input, null, xml, results );

					// Don't keep the element (issue #299)
					input[ 0 ] = null;
					return !results.pop();
				};
		} ),

		"has": markFunction( function( selector ) {
			return function( elem ) {
				return Sizzle( selector, elem ).length > 0;
			};
		} ),

		"contains": markFunction( function( text ) {
			text = text.replace( runescape, funescape );
			return function( elem ) {
				return ( elem.textContent || getText( elem ) ).indexOf( text ) > -1;
			};
		} ),

		// "Whether an element is represented by a :lang() selector
		// is based solely on the element's language value
		// being equal to the identifier C,
		// or beginning with the identifier C immediately followed by "-".
		// The matching of C against the element's language value is performed case-insensitively.
		// The identifier C does not have to be a valid language name."
		// http://www.w3.org/TR/selectors/#lang-pseudo
		"lang": markFunction( function( lang ) {

			// lang value must be a valid identifier
			if ( !ridentifier.test( lang || "" ) ) {
				Sizzle.error( "unsupported lang: " + lang );
			}
			lang = lang.replace( runescape, funescape ).toLowerCase();
			return function( elem ) {
				var elemLang;
				do {
					if ( ( elemLang = documentIsHTML ?
						elem.lang :
						elem.getAttribute( "xml:lang" ) || elem.getAttribute( "lang" ) ) ) {

						elemLang = elemLang.toLowerCase();
						return elemLang === lang || elemLang.indexOf( lang + "-" ) === 0;
					}
				} while ( ( elem = elem.parentNode ) && elem.nodeType === 1 );
				return false;
			};
		} ),

		// Miscellaneous
		"target": function( elem ) {
			var hash = window.location && window.location.hash;
			return hash && hash.slice( 1 ) === elem.id;
		},

		"root": function( elem ) {
			return elem === docElem;
		},

		"focus": function( elem ) {
			return elem === document.activeElement &&
				( !document.hasFocus || document.hasFocus() ) &&
				!!( elem.type || elem.href || ~elem.tabIndex );
		},

		// Boolean properties
		"enabled": createDisabledPseudo( false ),
		"disabled": createDisabledPseudo( true ),

		"checked": function( elem ) {

			// In CSS3, :checked should return both checked and selected elements
			// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
			var nodeName = elem.nodeName.toLowerCase();
			return ( nodeName === "input" && !!elem.checked ) ||
				( nodeName === "option" && !!elem.selected );
		},

		"selected": function( elem ) {

			// Accessing this property makes selected-by-default
			// options in Safari work properly
			if ( elem.parentNode ) {
				// eslint-disable-next-line no-unused-expressions
				elem.parentNode.selectedIndex;
			}

			return elem.selected === true;
		},

		// Contents
		"empty": function( elem ) {

			// http://www.w3.org/TR/selectors/#empty-pseudo
			// :empty is negated by element (1) or content nodes (text: 3; cdata: 4; entity ref: 5),
			//   but not by others (comment: 8; processing instruction: 7; etc.)
			// nodeType < 6 works because attributes (2) do not appear as children
			for ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {
				if ( elem.nodeType < 6 ) {
					return false;
				}
			}
			return true;
		},

		"parent": function( elem ) {
			return !Expr.pseudos[ "empty" ]( elem );
		},

		// Element/input types
		"header": function( elem ) {
			return rheader.test( elem.nodeName );
		},

		"input": function( elem ) {
			return rinputs.test( elem.nodeName );
		},

		"button": function( elem ) {
			var name = elem.nodeName.toLowerCase();
			return name === "input" && elem.type === "button" || name === "button";
		},

		"text": function( elem ) {
			var attr;
			return elem.nodeName.toLowerCase() === "input" &&
				elem.type === "text" &&

				// Support: IE<8
				// New HTML5 attribute values (e.g., "search") appear with elem.type === "text"
				( ( attr = elem.getAttribute( "type" ) ) == null ||
					attr.toLowerCase() === "text" );
		},

		// Position-in-collection
		"first": createPositionalPseudo( function() {
			return [ 0 ];
		} ),

		"last": createPositionalPseudo( function( _matchIndexes, length ) {
			return [ length - 1 ];
		} ),

		"eq": createPositionalPseudo( function( _matchIndexes, length, argument ) {
			return [ argument < 0 ? argument + length : argument ];
		} ),

		"even": createPositionalPseudo( function( matchIndexes, length ) {
			var i = 0;
			for ( ; i < length; i += 2 ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		} ),

		"odd": createPositionalPseudo( function( matchIndexes, length ) {
			var i = 1;
			for ( ; i < length; i += 2 ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		} ),

		"lt": createPositionalPseudo( function( matchIndexes, length, argument ) {
			var i = argument < 0 ?
				argument + length :
				argument > length ?
					length :
					argument;
			for ( ; --i >= 0; ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		} ),

		"gt": createPositionalPseudo( function( matchIndexes, length, argument ) {
			var i = argument < 0 ? argument + length : argument;
			for ( ; ++i < length; ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		} )
	}
};

Expr.pseudos[ "nth" ] = Expr.pseudos[ "eq" ];

// Add button/input type pseudos
for ( i in { radio: true, checkbox: true, file: true, password: true, image: true } ) {
	Expr.pseudos[ i ] = createInputPseudo( i );
}
for ( i in { submit: true, reset: true } ) {
	Expr.pseudos[ i ] = createButtonPseudo( i );
}

// Easy API for creating new setFilters
function setFilters() {}
setFilters.prototype = Expr.filters = Expr.pseudos;
Expr.setFilters = new setFilters();

tokenize = Sizzle.tokenize = function( selector, parseOnly ) {
	var matched, match, tokens, type,
		soFar, groups, preFilters,
		cached = tokenCache[ selector + " " ];

	if ( cached ) {
		return parseOnly ? 0 : cached.slice( 0 );
	}

	soFar = selector;
	groups = [];
	preFilters = Expr.preFilter;

	while ( soFar ) {

		// Comma and first run
		if ( !matched || ( match = rcomma.exec( soFar ) ) ) {
			if ( match ) {

				// Don't consume trailing commas as valid
				soFar = soFar.slice( match[ 0 ].length ) || soFar;
			}
			groups.push( ( tokens = [] ) );
		}

		matched = false;

		// Combinators
		if ( ( match = rcombinators.exec( soFar ) ) ) {
			matched = match.shift();
			tokens.push( {
				value: matched,

				// Cast descendant combinators to space
				type: match[ 0 ].replace( rtrim, " " )
			} );
			soFar = soFar.slice( matched.length );
		}

		// Filters
		for ( type in Expr.filter ) {
			if ( ( match = matchExpr[ type ].exec( soFar ) ) && ( !preFilters[ type ] ||
				( match = preFilters[ type ]( match ) ) ) ) {
				matched = match.shift();
				tokens.push( {
					value: matched,
					type: type,
					matches: match
				} );
				soFar = soFar.slice( matched.length );
			}
		}

		if ( !matched ) {
			break;
		}
	}

	// Return the length of the invalid excess
	// if we're just parsing
	// Otherwise, throw an error or return tokens
	return parseOnly ?
		soFar.length :
		soFar ?
			Sizzle.error( selector ) :

			// Cache the tokens
			tokenCache( selector, groups ).slice( 0 );
};

function toSelector( tokens ) {
	var i = 0,
		len = tokens.length,
		selector = "";
	for ( ; i < len; i++ ) {
		selector += tokens[ i ].value;
	}
	return selector;
}

function addCombinator( matcher, combinator, base ) {
	var dir = combinator.dir,
		skip = combinator.next,
		key = skip || dir,
		checkNonElements = base && key === "parentNode",
		doneName = done++;

	return combinator.first ?

		// Check against closest ancestor/preceding element
		function( elem, context, xml ) {
			while ( ( elem = elem[ dir ] ) ) {
				if ( elem.nodeType === 1 || checkNonElements ) {
					return matcher( elem, context, xml );
				}
			}
			return false;
		} :

		// Check against all ancestor/preceding elements
		function( elem, context, xml ) {
			var oldCache, uniqueCache, outerCache,
				newCache = [ dirruns, doneName ];

			// We can't set arbitrary data on XML nodes, so they don't benefit from combinator caching
			if ( xml ) {
				while ( ( elem = elem[ dir ] ) ) {
					if ( elem.nodeType === 1 || checkNonElements ) {
						if ( matcher( elem, context, xml ) ) {
							return true;
						}
					}
				}
			} else {
				while ( ( elem = elem[ dir ] ) ) {
					if ( elem.nodeType === 1 || checkNonElements ) {
						outerCache = elem[ expando ] || ( elem[ expando ] = {} );

						// Support: IE <9 only
						// Defend against cloned attroperties (jQuery gh-1709)
						uniqueCache = outerCache[ elem.uniqueID ] ||
							( outerCache[ elem.uniqueID ] = {} );

						if ( skip && skip === elem.nodeName.toLowerCase() ) {
							elem = elem[ dir ] || elem;
						} else if ( ( oldCache = uniqueCache[ key ] ) &&
							oldCache[ 0 ] === dirruns && oldCache[ 1 ] === doneName ) {

							// Assign to newCache so results back-propagate to previous elements
							return ( newCache[ 2 ] = oldCache[ 2 ] );
						} else {

							// Reuse newcache so results back-propagate to previous elements
							uniqueCache[ key ] = newCache;

							// A match means we're done; a fail means we have to keep checking
							if ( ( newCache[ 2 ] = matcher( elem, context, xml ) ) ) {
								return true;
							}
						}
					}
				}
			}
			return false;
		};
}

function elementMatcher( matchers ) {
	return matchers.length > 1 ?
		function( elem, context, xml ) {
			var i = matchers.length;
			while ( i-- ) {
				if ( !matchers[ i ]( elem, context, xml ) ) {
					return false;
				}
			}
			return true;
		} :
		matchers[ 0 ];
}

function multipleContexts( selector, contexts, results ) {
	var i = 0,
		len = contexts.length;
	for ( ; i < len; i++ ) {
		Sizzle( selector, contexts[ i ], results );
	}
	return results;
}

function condense( unmatched, map, filter, context, xml ) {
	var elem,
		newUnmatched = [],
		i = 0,
		len = unmatched.length,
		mapped = map != null;

	for ( ; i < len; i++ ) {
		if ( ( elem = unmatched[ i ] ) ) {
			if ( !filter || filter( elem, context, xml ) ) {
				newUnmatched.push( elem );
				if ( mapped ) {
					map.push( i );
				}
			}
		}
	}

	return newUnmatched;
}

function setMatcher( preFilter, selector, matcher, postFilter, postFinder, postSelector ) {
	if ( postFilter && !postFilter[ expando ] ) {
		postFilter = setMatcher( postFilter );
	}
	if ( postFinder && !postFinder[ expando ] ) {
		postFinder = setMatcher( postFinder, postSelector );
	}
	return markFunction( function( seed, results, context, xml ) {
		var temp, i, elem,
			preMap = [],
			postMap = [],
			preexisting = results.length,

			// Get initial elements from seed or context
			elems = seed || multipleContexts(
				selector || "*",
				context.nodeType ? [ context ] : context,
				[]
			),

			// Prefilter to get matcher input, preserving a map for seed-results synchronization
			matcherIn = preFilter && ( seed || !selector ) ?
				condense( elems, preMap, preFilter, context, xml ) :
				elems,

			matcherOut = matcher ?

				// If we have a postFinder, or filtered seed, or non-seed postFilter or preexisting results,
				postFinder || ( seed ? preFilter : preexisting || postFilter ) ?

					// ...intermediate processing is necessary
					[] :

					// ...otherwise use results directly
					results :
				matcherIn;

		// Find primary matches
		if ( matcher ) {
			matcher( matcherIn, matcherOut, context, xml );
		}

		// Apply postFilter
		if ( postFilter ) {
			temp = condense( matcherOut, postMap );
			postFilter( temp, [], context, xml );

			// Un-match failing elements by moving them back to matcherIn
			i = temp.length;
			while ( i-- ) {
				if ( ( elem = temp[ i ] ) ) {
					matcherOut[ postMap[ i ] ] = !( matcherIn[ postMap[ i ] ] = elem );
				}
			}
		}

		if ( seed ) {
			if ( postFinder || preFilter ) {
				if ( postFinder ) {

					// Get the final matcherOut by condensing this intermediate into postFinder contexts
					temp = [];
					i = matcherOut.length;
					while ( i-- ) {
						if ( ( elem = matcherOut[ i ] ) ) {

							// Restore matcherIn since elem is not yet a final match
							temp.push( ( matcherIn[ i ] = elem ) );
						}
					}
					postFinder( null, ( matcherOut = [] ), temp, xml );
				}

				// Move matched elements from seed to results to keep them synchronized
				i = matcherOut.length;
				while ( i-- ) {
					if ( ( elem = matcherOut[ i ] ) &&
						( temp = postFinder ? indexOf( seed, elem ) : preMap[ i ] ) > -1 ) {

						seed[ temp ] = !( results[ temp ] = elem );
					}
				}
			}

		// Add elements to results, through postFinder if defined
		} else {
			matcherOut = condense(
				matcherOut === results ?
					matcherOut.splice( preexisting, matcherOut.length ) :
					matcherOut
			);
			if ( postFinder ) {
				postFinder( null, results, matcherOut, xml );
			} else {
				push.apply( results, matcherOut );
			}
		}
	} );
}

function matcherFromTokens( tokens ) {
	var checkContext, matcher, j,
		len = tokens.length,
		leadingRelative = Expr.relative[ tokens[ 0 ].type ],
		implicitRelative = leadingRelative || Expr.relative[ " " ],
		i = leadingRelative ? 1 : 0,

		// The foundational matcher ensures that elements are reachable from top-level context(s)
		matchContext = addCombinator( function( elem ) {
			return elem === checkContext;
		}, implicitRelative, true ),
		matchAnyContext = addCombinator( function( elem ) {
			return indexOf( checkContext, elem ) > -1;
		}, implicitRelative, true ),
		matchers = [ function( elem, context, xml ) {
			var ret = ( !leadingRelative && ( xml || context !== outermostContext ) ) || (
				( checkContext = context ).nodeType ?
					matchContext( elem, context, xml ) :
					matchAnyContext( elem, context, xml ) );

			// Avoid hanging onto element (issue #299)
			checkContext = null;
			return ret;
		} ];

	for ( ; i < len; i++ ) {
		if ( ( matcher = Expr.relative[ tokens[ i ].type ] ) ) {
			matchers = [ addCombinator( elementMatcher( matchers ), matcher ) ];
		} else {
			matcher = Expr.filter[ tokens[ i ].type ].apply( null, tokens[ i ].matches );

			// Return special upon seeing a positional matcher
			if ( matcher[ expando ] ) {

				// Find the next relative operator (if any) for proper handling
				j = ++i;
				for ( ; j < len; j++ ) {
					if ( Expr.relative[ tokens[ j ].type ] ) {
						break;
					}
				}
				return setMatcher(
					i > 1 && elementMatcher( matchers ),
					i > 1 && toSelector(

					// If the preceding token was a descendant combinator, insert an implicit any-element `*`
					tokens
						.slice( 0, i - 1 )
						.concat( { value: tokens[ i - 2 ].type === " " ? "*" : "" } )
					).replace( rtrim, "$1" ),
					matcher,
					i < j && matcherFromTokens( tokens.slice( i, j ) ),
					j < len && matcherFromTokens( ( tokens = tokens.slice( j ) ) ),
					j < len && toSelector( tokens )
				);
			}
			matchers.push( matcher );
		}
	}

	return elementMatcher( matchers );
}

function matcherFromGroupMatchers( elementMatchers, setMatchers ) {
	var bySet = setMatchers.length > 0,
		byElement = elementMatchers.length > 0,
		superMatcher = function( seed, context, xml, results, outermost ) {
			var elem, j, matcher,
				matchedCount = 0,
				i = "0",
				unmatched = seed && [],
				setMatched = [],
				contextBackup = outermostContext,

				// We must always have either seed elements or outermost context
				elems = seed || byElement && Expr.find[ "TAG" ]( "*", outermost ),

				// Use integer dirruns iff this is the outermost matcher
				dirrunsUnique = ( dirruns += contextBackup == null ? 1 : Math.random() || 0.1 ),
				len = elems.length;

			if ( outermost ) {

				// Support: IE 11+, Edge 17 - 18+
				// IE/Edge sometimes throw a "Permission denied" error when strict-comparing
				// two documents; shallow comparisons work.
				// eslint-disable-next-line eqeqeq
				outermostContext = context == document || context || outermost;
			}

			// Add elements passing elementMatchers directly to results
			// Support: IE<9, Safari
			// Tolerate NodeList properties (IE: "length"; Safari: <number>) matching elements by id
			for ( ; i !== len && ( elem = elems[ i ] ) != null; i++ ) {
				if ( byElement && elem ) {
					j = 0;

					// Support: IE 11+, Edge 17 - 18+
					// IE/Edge sometimes throw a "Permission denied" error when strict-comparing
					// two documents; shallow comparisons work.
					// eslint-disable-next-line eqeqeq
					if ( !context && elem.ownerDocument != document ) {
						setDocument( elem );
						xml = !documentIsHTML;
					}
					while ( ( matcher = elementMatchers[ j++ ] ) ) {
						if ( matcher( elem, context || document, xml ) ) {
							results.push( elem );
							break;
						}
					}
					if ( outermost ) {
						dirruns = dirrunsUnique;
					}
				}

				// Track unmatched elements for set filters
				if ( bySet ) {

					// They will have gone through all possible matchers
					if ( ( elem = !matcher && elem ) ) {
						matchedCount--;
					}

					// Lengthen the array for every element, matched or not
					if ( seed ) {
						unmatched.push( elem );
					}
				}
			}

			// `i` is now the count of elements visited above, and adding it to `matchedCount`
			// makes the latter nonnegative.
			matchedCount += i;

			// Apply set filters to unmatched elements
			// NOTE: This can be skipped if there are no unmatched elements (i.e., `matchedCount`
			// equals `i`), unless we didn't visit _any_ elements in the above loop because we have
			// no element matchers and no seed.
			// Incrementing an initially-string "0" `i` allows `i` to remain a string only in that
			// case, which will result in a "00" `matchedCount` that differs from `i` but is also
			// numerically zero.
			if ( bySet && i !== matchedCount ) {
				j = 0;
				while ( ( matcher = setMatchers[ j++ ] ) ) {
					matcher( unmatched, setMatched, context, xml );
				}

				if ( seed ) {

					// Reintegrate element matches to eliminate the need for sorting
					if ( matchedCount > 0 ) {
						while ( i-- ) {
							if ( !( unmatched[ i ] || setMatched[ i ] ) ) {
								setMatched[ i ] = pop.call( results );
							}
						}
					}

					// Discard index placeholder values to get only actual matches
					setMatched = condense( setMatched );
				}

				// Add matches to results
				push.apply( results, setMatched );

				// Seedless set matches succeeding multiple successful matchers stipulate sorting
				if ( outermost && !seed && setMatched.length > 0 &&
					( matchedCount + setMatchers.length ) > 1 ) {

					Sizzle.uniqueSort( results );
				}
			}

			// Override manipulation of globals by nested matchers
			if ( outermost ) {
				dirruns = dirrunsUnique;
				outermostContext = contextBackup;
			}

			return unmatched;
		};

	return bySet ?
		markFunction( superMatcher ) :
		superMatcher;
}

compile = Sizzle.compile = function( selector, match /* Internal Use Only */ ) {
	var i,
		setMatchers = [],
		elementMatchers = [],
		cached = compilerCache[ selector + " " ];

	if ( !cached ) {

		// Generate a function of recursive functions that can be used to check each element
		if ( !match ) {
			match = tokenize( selector );
		}
		i = match.length;
		while ( i-- ) {
			cached = matcherFromTokens( match[ i ] );
			if ( cached[ expando ] ) {
				setMatchers.push( cached );
			} else {
				elementMatchers.push( cached );
			}
		}

		// Cache the compiled function
		cached = compilerCache(
			selector,
			matcherFromGroupMatchers( elementMatchers, setMatchers )
		);

		// Save selector and tokenization
		cached.selector = selector;
	}
	return cached;
};

/**
 * A low-level selection function that works with Sizzle's compiled
 *  selector functions
 * @param {String|Function} selector A selector or a pre-compiled
 *  selector function built with Sizzle.compile
 * @param {Element} context
 * @param {Array} [results]
 * @param {Array} [seed] A set of elements to match against
 */
select = Sizzle.select = function( selector, context, results, seed ) {
	var i, tokens, token, type, find,
		compiled = typeof selector === "function" && selector,
		match = !seed && tokenize( ( selector = compiled.selector || selector ) );

	results = results || [];

	// Try to minimize operations if there is only one selector in the list and no seed
	// (the latter of which guarantees us context)
	if ( match.length === 1 ) {

		// Reduce context if the leading compound selector is an ID
		tokens = match[ 0 ] = match[ 0 ].slice( 0 );
		if ( tokens.length > 2 && ( token = tokens[ 0 ] ).type === "ID" &&
			context.nodeType === 9 && documentIsHTML && Expr.relative[ tokens[ 1 ].type ] ) {

			context = ( Expr.find[ "ID" ]( token.matches[ 0 ]
				.replace( runescape, funescape ), context ) || [] )[ 0 ];
			if ( !context ) {
				return results;

			// Precompiled matchers will still verify ancestry, so step up a level
			} else if ( compiled ) {
				context = context.parentNode;
			}

			selector = selector.slice( tokens.shift().value.length );
		}

		// Fetch a seed set for right-to-left matching
		i = matchExpr[ "needsContext" ].test( selector ) ? 0 : tokens.length;
		while ( i-- ) {
			token = tokens[ i ];

			// Abort if we hit a combinator
			if ( Expr.relative[ ( type = token.type ) ] ) {
				break;
			}
			if ( ( find = Expr.find[ type ] ) ) {

				// Search, expanding context for leading sibling combinators
				if ( ( seed = find(
					token.matches[ 0 ].replace( runescape, funescape ),
					rsibling.test( tokens[ 0 ].type ) && testContext( context.parentNode ) ||
						context
				) ) ) {

					// If seed is empty or no tokens remain, we can return early
					tokens.splice( i, 1 );
					selector = seed.length && toSelector( tokens );
					if ( !selector ) {
						push.apply( results, seed );
						return results;
					}

					break;
				}
			}
		}
	}

	// Compile and execute a filtering function if one is not provided
	// Provide `match` to avoid retokenization if we modified the selector above
	( compiled || compile( selector, match ) )(
		seed,
		context,
		!documentIsHTML,
		results,
		!context || rsibling.test( selector ) && testContext( context.parentNode ) || context
	);
	return results;
};

// One-time assignments

// Sort stability
support.sortStable = expando.split( "" ).sort( sortOrder ).join( "" ) === expando;

// Support: Chrome 14-35+
// Always assume duplicates if they aren't passed to the comparison function
support.detectDuplicates = !!hasDuplicate;

// Initialize against the default document
setDocument();

// Support: Webkit<537.32 - Safari 6.0.3/Chrome 25 (fixed in Chrome 27)
// Detached nodes confoundingly follow *each other*
support.sortDetached = assert( function( el ) {

	// Should return 1, but returns 4 (following)
	return el.compareDocumentPosition( document.createElement( "fieldset" ) ) & 1;
} );

// Support: IE<8
// Prevent attribute/property "interpolation"
// https://msdn.microsoft.com/en-us/library/ms536429%28VS.85%29.aspx
if ( !assert( function( el ) {
	el.innerHTML = "<a href='#'></a>";
	return el.firstChild.getAttribute( "href" ) === "#";
} ) ) {
	addHandle( "type|href|height|width", function( elem, name, isXML ) {
		if ( !isXML ) {
			return elem.getAttribute( name, name.toLowerCase() === "type" ? 1 : 2 );
		}
	} );
}

// Support: IE<9
// Use defaultValue in place of getAttribute("value")
if ( !support.attributes || !assert( function( el ) {
	el.innerHTML = "<input/>";
	el.firstChild.setAttribute( "value", "" );
	return el.firstChild.getAttribute( "value" ) === "";
} ) ) {
	addHandle( "value", function( elem, _name, isXML ) {
		if ( !isXML && elem.nodeName.toLowerCase() === "input" ) {
			return elem.defaultValue;
		}
	} );
}

// Support: IE<9
// Use getAttributeNode to fetch booleans when getAttribute lies
if ( !assert( function( el ) {
	return el.getAttribute( "disabled" ) == null;
} ) ) {
	addHandle( booleans, function( elem, name, isXML ) {
		var val;
		if ( !isXML ) {
			return elem[ name ] === true ? name.toLowerCase() :
				( val = elem.getAttributeNode( name ) ) && val.specified ?
					val.value :
					null;
		}
	} );
}

return Sizzle;

} )( window );



jQuery.find = Sizzle;
jQuery.expr = Sizzle.selectors;

// Deprecated
jQuery.expr[ ":" ] = jQuery.expr.pseudos;
jQuery.uniqueSort = jQuery.unique = Sizzle.uniqueSort;
jQuery.text = Sizzle.getText;
jQuery.isXMLDoc = Sizzle.isXML;
jQuery.contains = Sizzle.contains;
jQuery.escapeSelector = Sizzle.escape;




var dir = function( elem, dir, until ) {
	var matched = [],
		truncate = until !== undefined;

	while ( ( elem = elem[ dir ] ) && elem.nodeType !== 9 ) {
		if ( elem.nodeType === 1 ) {
			if ( truncate && jQuery( elem ).is( until ) ) {
				break;
			}
			matched.push( elem );
		}
	}
	return matched;
};


var siblings = function( n, elem ) {
	var matched = [];

	for ( ; n; n = n.nextSibling ) {
		if ( n.nodeType === 1 && n !== elem ) {
			matched.push( n );
		}
	}

	return matched;
};


var rneedsContext = jQuery.expr.match.needsContext;



function nodeName( elem, name ) {

	return elem.nodeName && elem.nodeName.toLowerCase() === name.toLowerCase();

}
var rsingleTag = ( /^<([a-z][^\/\0>:\x20\t\r\n\f]*)[\x20\t\r\n\f]*\/?>(?:<\/\1>|)$/i );



// Implement the identical functionality for filter and not
function winnow( elements, qualifier, not ) {
	if ( isFunction( qualifier ) ) {
		return jQuery.grep( elements, function( elem, i ) {
			return !!qualifier.call( elem, i, elem ) !== not;
		} );
	}

	// Single element
	if ( qualifier.nodeType ) {
		return jQuery.grep( elements, function( elem ) {
			return ( elem === qualifier ) !== not;
		} );
	}

	// Arraylike of elements (jQuery, arguments, Array)
	if ( typeof qualifier !== "string" ) {
		return jQuery.grep( elements, function( elem ) {
			return ( indexOf.call( qualifier, elem ) > -1 ) !== not;
		} );
	}

	// Filtered directly for both simple and complex selectors
	return jQuery.filter( qualifier, elements, not );
}

jQuery.filter = function( expr, elems, not ) {
	var elem = elems[ 0 ];

	if ( not ) {
		expr = ":not(" + expr + ")";
	}

	if ( elems.length === 1 && elem.nodeType === 1 ) {
		return jQuery.find.matchesSelector( elem, expr ) ? [ elem ] : [];
	}

	return jQuery.find.matches( expr, jQuery.grep( elems, function( elem ) {
		return elem.nodeType === 1;
	} ) );
};

jQuery.fn.extend( {
	find: function( selector ) {
		var i, ret,
			len = this.length,
			self = this;

		if ( typeof selector !== "string" ) {
			return this.pushStack( jQuery( selector ).filter( function() {
				for ( i = 0; i < len; i++ ) {
					if ( jQuery.contains( self[ i ], this ) ) {
						return true;
					}
				}
			} ) );
		}

		ret = this.pushStack( [] );

		for ( i = 0; i < len; i++ ) {
			jQuery.find( selector, self[ i ], ret );
		}

		return len > 1 ? jQuery.uniqueSort( ret ) : ret;
	},
	filter: function( selector ) {
		return this.pushStack( winnow( this, selector || [], false ) );
	},
	not: function( selector ) {
		return this.pushStack( winnow( this, selector || [], true ) );
	},
	is: function( selector ) {
		return !!winnow(
			this,

			// If this is a positional/relative selector, check membership in the returned set
			// so $("p:first").is("p:last") won't return true for a doc with two "p".
			typeof selector === "string" && rneedsContext.test( selector ) ?
				jQuery( selector ) :
				selector || [],
			false
		).length;
	}
} );


// Initialize a jQuery object


// A central reference to the root jQuery(document)
var rootjQuery,

	// A simple way to check for HTML strings
	// Prioritize #id over <tag> to avoid XSS via location.hash (trac-9521)
	// Strict HTML recognition (trac-11290: must start with <)
	// Shortcut simple #id case for speed
	rquickExpr = /^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]+))$/,

	init = jQuery.fn.init = function( selector, context, root ) {
		var match, elem;

		// HANDLE: $(""), $(null), $(undefined), $(false)
		if ( !selector ) {
			return this;
		}

		// Method init() accepts an alternate rootjQuery
		// so migrate can support jQuery.sub (gh-2101)
		root = root || rootjQuery;

		// Handle HTML strings
		if ( typeof selector === "string" ) {
			if ( selector[ 0 ] === "<" &&
				selector[ selector.length - 1 ] === ">" &&
				selector.length >= 3 ) {

				// Assume that strings that start and end with <> are HTML and skip the regex check
				match = [ null, selector, null ];

			} else {
				match = rquickExpr.exec( selector );
			}

			// Match html or make sure no context is specified for #id
			if ( match && ( match[ 1 ] || !context ) ) {

				// HANDLE: $(html) -> $(array)
				if ( match[ 1 ] ) {
					context = context instanceof jQuery ? context[ 0 ] : context;

					// Option to run scripts is true for back-compat
					// Intentionally let the error be thrown if parseHTML is not present
					jQuery.merge( this, jQuery.parseHTML(
						match[ 1 ],
						context && context.nodeType ? context.ownerDocument || context : document,
						true
					) );

					// HANDLE: $(html, props)
					if ( rsingleTag.test( match[ 1 ] ) && jQuery.isPlainObject( context ) ) {
						for ( match in context ) {

							// Properties of context are called as methods if possible
							if ( isFunction( this[ match ] ) ) {
								this[ match ]( context[ match ] );

							// ...and otherwise set as attributes
							} else {
								this.attr( match, context[ match ] );
							}
						}
					}

					return this;

				// HANDLE: $(#id)
				} else {
					elem = document.getElementById( match[ 2 ] );

					if ( elem ) {

						// Inject the element directly into the jQuery object
						this[ 0 ] = elem;
						this.length = 1;
					}
					return this;
				}

			// HANDLE: $(expr, $(...))
			} else if ( !context || context.jquery ) {
				return ( context || root ).find( selector );

			// HANDLE: $(expr, context)
			// (which is just equivalent to: $(context).find(expr)
			} else {
				return this.constructor( context ).find( selector );
			}

		// HANDLE: $(DOMElement)
		} else if ( selector.nodeType ) {
			this[ 0 ] = selector;
			this.length = 1;
			return this;

		// HANDLE: $(function)
		// Shortcut for document ready
		} else if ( isFunction( selector ) ) {
			return root.ready !== undefined ?
				root.ready( selector ) :

				// Execute immediately if ready is not present
				selector( jQuery );
		}

		return jQuery.makeArray( selector, this );
	};

// Give the init function the jQuery prototype for later instantiation
init.prototype = jQuery.fn;

// Initialize central reference
rootjQuery = jQuery( document );


var rparentsprev = /^(?:parents|prev(?:Until|All))/,

	// Methods guaranteed to produce a unique set when starting from a unique set
	guaranteedUnique = {
		children: true,
		contents: true,
		next: true,
		prev: true
	};

jQuery.fn.extend( {
	has: function( target ) {
		var targets = jQuery( target, this ),
			l = targets.length;

		return this.filter( function() {
			var i = 0;
			for ( ; i < l; i++ ) {
				if ( jQuery.contains( this, targets[ i ] ) ) {
					return true;
				}
			}
		} );
	},

	closest: function( selectors, context ) {
		var cur,
			i = 0,
			l = this.length,
			matched = [],
			targets = typeof selectors !== "string" && jQuery( selectors );

		// Positional selectors never match, since there's no _selection_ context
		if ( !rneedsContext.test( selectors ) ) {
			for ( ; i < l; i++ ) {
				for ( cur = this[ i ]; cur && cur !== context; cur = cur.parentNode ) {

					// Always skip document fragments
					if ( cur.nodeType < 11 && ( targets ?
						targets.index( cur ) > -1 :

						// Don't pass non-elements to Sizzle
						cur.nodeType === 1 &&
							jQuery.find.matchesSelector( cur, selectors ) ) ) {

						matched.push( cur );
						break;
					}
				}
			}
		}

		return this.pushStack( matched.length > 1 ? jQuery.uniqueSort( matched ) : matched );
	},

	// Determine the position of an element within the set
	index: function( elem ) {

		// No argument, return index in parent
		if ( !elem ) {
			return ( this[ 0 ] && this[ 0 ].parentNode ) ? this.first().prevAll().length : -1;
		}

		// Index in selector
		if ( typeof elem === "string" ) {
			return indexOf.call( jQuery( elem ), this[ 0 ] );
		}

		// Locate the position of the desired element
		return indexOf.call( this,

			// If it receives a jQuery object, the first element is used
			elem.jquery ? elem[ 0 ] : elem
		);
	},

	add: function( selector, context ) {
		return this.pushStack(
			jQuery.uniqueSort(
				jQuery.merge( this.get(), jQuery( selector, context ) )
			)
		);
	},

	addBack: function( selector ) {
		return this.add( selector == null ?
			this.prevObject : this.prevObject.filter( selector )
		);
	}
} );

function sibling( cur, dir ) {
	while ( ( cur = cur[ dir ] ) && cur.nodeType !== 1 ) {}
	return cur;
}

jQuery.each( {
	parent: function( elem ) {
		var parent = elem.parentNode;
		return parent && parent.nodeType !== 11 ? parent : null;
	},
	parents: function( elem ) {
		return dir( elem, "parentNode" );
	},
	parentsUntil: function( elem, _i, until ) {
		return dir( elem, "parentNode", until );
	},
	next: function( elem ) {
		return sibling( elem, "nextSibling" );
	},
	prev: function( elem ) {
		return sibling( elem, "previousSibling" );
	},
	nextAll: function( elem ) {
		return dir( elem, "nextSibling" );
	},
	prevAll: function( elem ) {
		return dir( elem, "previousSibling" );
	},
	nextUntil: function( elem, _i, until ) {
		return dir( elem, "nextSibling", until );
	},
	prevUntil: function( elem, _i, until ) {
		return dir( elem, "previousSibling", until );
	},
	siblings: function( elem ) {
		return siblings( ( elem.parentNode || {} ).firstChild, elem );
	},
	children: function( elem ) {
		return siblings( elem.firstChild );
	},
	contents: function( elem ) {
		if ( elem.contentDocument != null &&

			// Support: IE 11+
			// <object> elements with no `data` attribute has an object
			// `contentDocument` with a `null` prototype.
			getProto( elem.contentDocument ) ) {

			return elem.contentDocument;
		}

		// Support: IE 9 - 11 only, iOS 7 only, Android Browser <=4.3 only
		// Treat the template element as a regular one in browsers that
		// don't support it.
		if ( nodeName( elem, "template" ) ) {
			elem = elem.content || elem;
		}

		return jQuery.merge( [], elem.childNodes );
	}
}, function( name, fn ) {
	jQuery.fn[ name ] = function( until, selector ) {
		var matched = jQuery.map( this, fn, until );

		if ( name.slice( -5 ) !== "Until" ) {
			selector = until;
		}

		if ( selector && typeof selector === "string" ) {
			matched = jQuery.filter( selector, matched );
		}

		if ( this.length > 1 ) {

			// Remove duplicates
			if ( !guaranteedUnique[ name ] ) {
				jQuery.uniqueSort( matched );
			}

			// Reverse order for parents* and prev-derivatives
			if ( rparentsprev.test( name ) ) {
				matched.reverse();
			}
		}

		return this.pushStack( matched );
	};
} );
var rnothtmlwhite = ( /[^\x20\t\r\n\f]+/g );



// Convert String-formatted options into Object-formatted ones
function createOptions( options ) {
	var object = {};
	jQuery.each( options.match( rnothtmlwhite ) || [], function( _, flag ) {
		object[ flag ] = true;
	} );
	return object;
}

/*
 * Create a callback list using the following parameters:
 *
 *	options: an optional list of space-separated options that will change how
 *			the callback list behaves or a more traditional option object
 *
 * By default a callback list will act like an event callback list and can be
 * "fired" multiple times.
 *
 * Possible options:
 *
 *	once:			will ensure the callback list can only be fired once (like a Deferred)
 *
 *	memory:			will keep track of previous values and will call any callback added
 *					after the list has been fired right away with the latest "memorized"
 *					values (like a Deferred)
 *
 *	unique:			will ensure a callback can only be added once (no duplicate in the list)
 *
 *	stopOnFalse:	interrupt callings when a callback returns false
 *
 */
jQuery.Callbacks = function( options ) {

	// Convert options from String-formatted to Object-formatted if needed
	// (we check in cache first)
	options = typeof options === "string" ?
		createOptions( options ) :
		jQuery.extend( {}, options );

	var // Flag to know if list is currently firing
		firing,

		// Last fire value for non-forgettable lists
		memory,

		// Flag to know if list was already fired
		fired,

		// Flag to prevent firing
		locked,

		// Actual callback list
		list = [],

		// Queue of execution data for repeatable lists
		queue = [],

		// Index of currently firing callback (modified by add/remove as needed)
		firingIndex = -1,

		// Fire callbacks
		fire = function() {

			// Enforce single-firing
			locked = locked || options.once;

			// Execute callbacks for all pending executions,
			// respecting firingIndex overrides and runtime changes
			fired = firing = true;
			for ( ; queue.length; firingIndex = -1 ) {
				memory = queue.shift();
				while ( ++firingIndex < list.length ) {

					// Run callback and check for early termination
					if ( list[ firingIndex ].apply( memory[ 0 ], memory[ 1 ] ) === false &&
						options.stopOnFalse ) {

						// Jump to end and forget the data so .add doesn't re-fire
						firingIndex = list.length;
						memory = false;
					}
				}
			}

			// Forget the data if we're done with it
			if ( !options.memory ) {
				memory = false;
			}

			firing = false;

			// Clean up if we're done firing for good
			if ( locked ) {

				// Keep an empty list if we have data for future add calls
				if ( memory ) {
					list = [];

				// Otherwise, this object is spent
				} else {
					list = "";
				}
			}
		},

		// Actual Callbacks object
		self = {

			// Add a callback or a collection of callbacks to the list
			add: function() {
				if ( list ) {

					// If we have memory from a past run, we should fire after adding
					if ( memory && !firing ) {
						firingIndex = list.length - 1;
						queue.push( memory );
					}

					( function add( args ) {
						jQuery.each( args, function( _, arg ) {
							if ( isFunction( arg ) ) {
								if ( !options.unique || !self.has( arg ) ) {
									list.push( arg );
								}
							} else if ( arg && arg.length && toType( arg ) !== "string" ) {

								// Inspect recursively
								add( arg );
							}
						} );
					} )( arguments );

					if ( memory && !firing ) {
						fire();
					}
				}
				return this;
			},

			// Remove a callback from the list
			remove: function() {
				jQuery.each( arguments, function( _, arg ) {
					var index;
					while ( ( index = jQuery.inArray( arg, list, index ) ) > -1 ) {
						list.splice( index, 1 );

						// Handle firing indexes
						if ( index <= firingIndex ) {
							firingIndex--;
						}
					}
				} );
				return this;
			},

			// Check if a given callback is in the list.
			// If no argument is given, return whether or not list has callbacks attached.
			has: function( fn ) {
				return fn ?
					jQuery.inArray( fn, list ) > -1 :
					list.length > 0;
			},

			// Remove all callbacks from the list
			empty: function() {
				if ( list ) {
					list = [];
				}
				return this;
			},

			// Disable .fire and .add
			// Abort any current/pending executions
			// Clear all callbacks and values
			disable: function() {
				locked = queue = [];
				list = memory = "";
				return this;
			},
			disabled: function() {
				return !list;
			},

			// Disable .fire
			// Also disable .add unless we have memory (since it would have no effect)
			// Abort any pending executions
			lock: function() {
				locked = queue = [];
				if ( !memory && !firing ) {
					list = memory = "";
				}
				return this;
			},
			locked: function() {
				return !!locked;
			},

			// Call all callbacks with the given context and arguments
			fireWith: function( context, args ) {
				if ( !locked ) {
					args = args || [];
					args = [ context, args.slice ? args.slice() : args ];
					queue.push( args );
					if ( !firing ) {
						fire();
					}
				}
				return this;
			},

			// Call all the callbacks with the given arguments
			fire: function() {
				self.fireWith( this, arguments );
				return this;
			},

			// To know if the callbacks have already been called at least once
			fired: function() {
				return !!fired;
			}
		};

	return self;
};


function Identity( v ) {
	return v;
}
function Thrower( ex ) {
	throw ex;
}

function adoptValue( value, resolve, reject, noValue ) {
	var method;

	try {

		// Check for promise aspect first to privilege synchronous behavior
		if ( value && isFunction( ( method = value.promise ) ) ) {
			method.call( value ).done( resolve ).fail( reject );

		// Other thenables
		} else if ( value && isFunction( ( method = value.then ) ) ) {
			method.call( value, resolve, reject );

		// Other non-thenables
		} else {

			// Control `resolve` arguments by letting Array#slice cast boolean `noValue` to integer:
			// * false: [ value ].slice( 0 ) => resolve( value )
			// * true: [ value ].slice( 1 ) => resolve()
			resolve.apply( undefined, [ value ].slice( noValue ) );
		}

	// For Promises/A+, convert exceptions into rejections
	// Since jQuery.when doesn't unwrap thenables, we can skip the extra checks appearing in
	// Deferred#then to conditionally suppress rejection.
	} catch ( value ) {

		// Support: Android 4.0 only
		// Strict mode functions invoked without .call/.apply get global-object context
		reject.apply( undefined, [ value ] );
	}
}

jQuery.extend( {

	Deferred: function( func ) {
		var tuples = [

				// action, add listener, callbacks,
				// ... .then handlers, argument index, [final state]
				[ "notify", "progress", jQuery.Callbacks( "memory" ),
					jQuery.Callbacks( "memory" ), 2 ],
				[ "resolve", "done", jQuery.Callbacks( "once memory" ),
					jQuery.Callbacks( "once memory" ), 0, "resolved" ],
				[ "reject", "fail", jQuery.Callbacks( "once memory" ),
					jQuery.Callbacks( "once memory" ), 1, "rejected" ]
			],
			state = "pending",
			promise = {
				state: function() {
					return state;
				},
				always: function() {
					deferred.done( arguments ).fail( arguments );
					return this;
				},
				"catch": function( fn ) {
					return promise.then( null, fn );
				},

				// Keep pipe for back-compat
				pipe: function( /* fnDone, fnFail, fnProgress */ ) {
					var fns = arguments;

					return jQuery.Deferred( function( newDefer ) {
						jQuery.each( tuples, function( _i, tuple ) {

							// Map tuples (progress, done, fail) to arguments (done, fail, progress)
							var fn = isFunction( fns[ tuple[ 4 ] ] ) && fns[ tuple[ 4 ] ];

							// deferred.progress(function() { bind to newDefer or newDefer.notify })
							// deferred.done(function() { bind to newDefer or newDefer.resolve })
							// deferred.fail(function() { bind to newDefer or newDefer.reject })
							deferred[ tuple[ 1 ] ]( function() {
								var returned = fn && fn.apply( this, arguments );
								if ( returned && isFunction( returned.promise ) ) {
									returned.promise()
										.progress( newDefer.notify )
										.done( newDefer.resolve )
										.fail( newDefer.reject );
								} else {
									newDefer[ tuple[ 0 ] + "With" ](
										this,
										fn ? [ returned ] : arguments
									);
								}
							} );
						} );
						fns = null;
					} ).promise();
				},
				then: function( onFulfilled, onRejected, onProgress ) {
					var maxDepth = 0;
					function resolve( depth, deferred, handler, special ) {
						return function() {
							var that = this,
								args = arguments,
								mightThrow = function() {
									var returned, then;

									// Support: Promises/A+ section 2.3.3.3.3
									// https://promisesaplus.com/#point-59
									// Ignore double-resolution attempts
									if ( depth < maxDepth ) {
										return;
									}

									returned = handler.apply( that, args );

									// Support: Promises/A+ section 2.3.1
									// https://promisesaplus.com/#point-48
									if ( returned === deferred.promise() ) {
										throw new TypeError( "Thenable self-resolution" );
									}

									// Support: Promises/A+ sections 2.3.3.1, 3.5
									// https://promisesaplus.com/#point-54
									// https://promisesaplus.com/#point-75
									// Retrieve `then` only once
									then = returned &&

										// Support: Promises/A+ section 2.3.4
										// https://promisesaplus.com/#point-64
										// Only check objects and functions for thenability
										( typeof returned === "object" ||
											typeof returned === "function" ) &&
										returned.then;

									// Handle a returned thenable
									if ( isFunction( then ) ) {

										// Special processors (notify) just wait for resolution
										if ( special ) {
											then.call(
												returned,
												resolve( maxDepth, deferred, Identity, special ),
												resolve( maxDepth, deferred, Thrower, special )
											);

										// Normal processors (resolve) also hook into progress
										} else {

											// ...and disregard older resolution values
											maxDepth++;

											then.call(
												returned,
												resolve( maxDepth, deferred, Identity, special ),
												resolve( maxDepth, deferred, Thrower, special ),
												resolve( maxDepth, deferred, Identity,
													deferred.notifyWith )
											);
										}

									// Handle all other returned values
									} else {

										// Only substitute handlers pass on context
										// and multiple values (non-spec behavior)
										if ( handler !== Identity ) {
											that = undefined;
											args = [ returned ];
										}

										// Process the value(s)
										// Default process is resolve
										( special || deferred.resolveWith )( that, args );
									}
								},

								// Only normal processors (resolve) catch and reject exceptions
								process = special ?
									mightThrow :
									function() {
										try {
											mightThrow();
										} catch ( e ) {

											if ( jQuery.Deferred.exceptionHook ) {
												jQuery.Deferred.exceptionHook( e,
													process.stackTrace );
											}

											// Support: Promises/A+ section 2.3.3.3.4.1
											// https://promisesaplus.com/#point-61
											// Ignore post-resolution exceptions
											if ( depth + 1 >= maxDepth ) {

												// Only substitute handlers pass on context
												// and multiple values (non-spec behavior)
												if ( handler !== Thrower ) {
													that = undefined;
													args = [ e ];
												}

												deferred.rejectWith( that, args );
											}
										}
									};

							// Support: Promises/A+ section 2.3.3.3.1
							// https://promisesaplus.com/#point-57
							// Re-resolve promises immediately to dodge false rejection from
							// subsequent errors
							if ( depth ) {
								process();
							} else {

								// Call an optional hook to record the stack, in case of exception
								// since it's otherwise lost when execution goes async
								if ( jQuery.Deferred.getStackHook ) {
									process.stackTrace = jQuery.Deferred.getStackHook();
								}
								window.setTimeout( process );
							}
						};
					}

					return jQuery.Deferred( function( newDefer ) {

						// progress_handlers.add( ... )
						tuples[ 0 ][ 3 ].add(
							resolve(
								0,
								newDefer,
								isFunction( onProgress ) ?
									onProgress :
									Identity,
								newDefer.notifyWith
							)
						);

						// fulfilled_handlers.add( ... )
						tuples[ 1 ][ 3 ].add(
							resolve(
								0,
								newDefer,
								isFunction( onFulfilled ) ?
									onFulfilled :
									Identity
							)
						);

						// rejected_handlers.add( ... )
						tuples[ 2 ][ 3 ].add(
							resolve(
								0,
								newDefer,
								isFunction( onRejected ) ?
									onRejected :
									Thrower
							)
						);
					} ).promise();
				},

				// Get a promise for this deferred
				// If obj is provided, the promise aspect is added to the object
				promise: function( obj ) {
					return obj != null ? jQuery.extend( obj, promise ) : promise;
				}
			},
			deferred = {};

		// Add list-specific methods
		jQuery.each( tuples, function( i, tuple ) {
			var list = tuple[ 2 ],
				stateString = tuple[ 5 ];

			// promise.progress = list.add
			// promise.done = list.add
			// promise.fail = list.add
			promise[ tuple[ 1 ] ] = list.add;

			// Handle state
			if ( stateString ) {
				list.add(
					function() {

						// state = "resolved" (i.e., fulfilled)
						// state = "rejected"
						state = stateString;
					},

					// rejected_callbacks.disable
					// fulfilled_callbacks.disable
					tuples[ 3 - i ][ 2 ].disable,

					// rejected_handlers.disable
					// fulfilled_handlers.disable
					tuples[ 3 - i ][ 3 ].disable,

					// progress_callbacks.lock
					tuples[ 0 ][ 2 ].lock,

					// progress_handlers.lock
					tuples[ 0 ][ 3 ].lock
				);
			}

			// progress_handlers.fire
			// fulfilled_handlers.fire
			// rejected_handlers.fire
			list.add( tuple[ 3 ].fire );

			// deferred.notify = function() { deferred.notifyWith(...) }
			// deferred.resolve = function() { deferred.resolveWith(...) }
			// deferred.reject = function() { deferred.rejectWith(...) }
			deferred[ tuple[ 0 ] ] = function() {
				deferred[ tuple[ 0 ] + "With" ]( this === deferred ? undefined : this, arguments );
				return this;
			};

			// deferred.notifyWith = list.fireWith
			// deferred.resolveWith = list.fireWith
			// deferred.rejectWith = list.fireWith
			deferred[ tuple[ 0 ] + "With" ] = list.fireWith;
		} );

		// Make the deferred a promise
		promise.promise( deferred );

		// Call given func if any
		if ( func ) {
			func.call( deferred, deferred );
		}

		// All done!
		return deferred;
	},

	// Deferred helper
	when: function( singleValue ) {
		var

			// count of uncompleted subordinates
			remaining = arguments.length,

			// count of unprocessed arguments
			i = remaining,

			// subordinate fulfillment data
			resolveContexts = Array( i ),
			resolveValues = slice.call( arguments ),

			// the primary Deferred
			primary = jQuery.Deferred(),

			// subordinate callback factory
			updateFunc = function( i ) {
				return function( value ) {
					resolveContexts[ i ] = this;
					resolveValues[ i ] = arguments.length > 1 ? slice.call( arguments ) : value;
					if ( !( --remaining ) ) {
						primary.resolveWith( resolveContexts, resolveValues );
					}
				};
			};

		// Single- and empty arguments are adopted like Promise.resolve
		if ( remaining <= 1 ) {
			adoptValue( singleValue, primary.done( updateFunc( i ) ).resolve, primary.reject,
				!remaining );

			// Use .then() to unwrap secondary thenables (cf. gh-3000)
			if ( primary.state() === "pending" ||
				isFunction( resolveValues[ i ] && resolveValues[ i ].then ) ) {

				return primary.then();
			}
		}

		// Multiple arguments are aggregated like Promise.all array elements
		while ( i-- ) {
			adoptValue( resolveValues[ i ], updateFunc( i ), primary.reject );
		}

		return primary.promise();
	}
} );


// These usually indicate a programmer mistake during development,
// warn about them ASAP rather than swallowing them by default.
var rerrorNames = /^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;

jQuery.Deferred.exceptionHook = function( error, stack ) {

	// Support: IE 8 - 9 only
	// Console exists when dev tools are open, which can happen at any time
	if ( window.console && window.console.warn && error && rerrorNames.test( error.name ) ) {
		window.console.warn( "jQuery.Deferred exception: " + error.message, error.stack, stack );
	}
};




jQuery.readyException = function( error ) {
	window.setTimeout( function() {
		throw error;
	} );
};




// The deferred used on DOM ready
var readyList = jQuery.Deferred();

jQuery.fn.ready = function( fn ) {

	readyList
		.then( fn )

		// Wrap jQuery.readyException in a function so that the lookup
		// happens at the time of error handling instead of callback
		// registration.
		.catch( function( error ) {
			jQuery.readyException( error );
		} );

	return this;
};

jQuery.extend( {

	// Is the DOM ready to be used? Set to true once it occurs.
	isReady: false,

	// A counter to track how many items to wait for before
	// the ready event fires. See trac-6781
	readyWait: 1,

	// Handle when the DOM is ready
	ready: function( wait ) {

		// Abort if there are pending holds or we're already ready
		if ( wait === true ? --jQuery.readyWait : jQuery.isReady ) {
			return;
		}

		// Remember that the DOM is ready
		jQuery.isReady = true;

		// If a normal DOM Ready event fired, decrement, and wait if need be
		if ( wait !== true && --jQuery.readyWait > 0 ) {
			return;
		}

		// If there are functions bound, to execute
		readyList.resolveWith( document, [ jQuery ] );
	}
} );

jQuery.ready.then = readyList.then;

// The ready event handler and self cleanup method
function completed() {
	document.removeEventListener( "DOMContentLoaded", completed );
	window.removeEventListener( "load", completed );
	jQuery.ready();
}

// Catch cases where $(document).ready() is called
// after the browser event has already occurred.
// Support: IE <=9 - 10 only
// Older IE sometimes signals "interactive" too soon
if ( document.readyState === "complete" ||
	( document.readyState !== "loading" && !document.documentElement.doScroll ) ) {

	// Handle it asynchronously to allow scripts the opportunity to delay ready
	window.setTimeout( jQuery.ready );

} else {

	// Use the handy event callback
	document.addEventListener( "DOMContentLoaded", completed );

	// A fallback to window.onload, that will always work
	window.addEventListener( "load", completed );
}




// Multifunctional method to get and set values of a collection
// The value/s can optionally be executed if it's a function
var access = function( elems, fn, key, value, chainable, emptyGet, raw ) {
	var i = 0,
		len = elems.length,
		bulk = key == null;

	// Sets many values
	if ( toType( key ) === "object" ) {
		chainable = true;
		for ( i in key ) {
			access( elems, fn, i, key[ i ], true, emptyGet, raw );
		}

	// Sets one value
	} else if ( value !== undefined ) {
		chainable = true;

		if ( !isFunction( value ) ) {
			raw = true;
		}

		if ( bulk ) {

			// Bulk operations run against the entire set
			if ( raw ) {
				fn.call( elems, value );
				fn = null;

			// ...except when executing function values
			} else {
				bulk = fn;
				fn = function( elem, _key, value ) {
					return bulk.call( jQuery( elem ), value );
				};
			}
		}

		if ( fn ) {
			for ( ; i < len; i++ ) {
				fn(
					elems[ i ], key, raw ?
						value :
						value.call( elems[ i ], i, fn( elems[ i ], key ) )
				);
			}
		}
	}

	if ( chainable ) {
		return elems;
	}

	// Gets
	if ( bulk ) {
		return fn.call( elems );
	}

	return len ? fn( elems[ 0 ], key ) : emptyGet;
};


// Matches dashed string for camelizing
var rmsPrefix = /^-ms-/,
	rdashAlpha = /-([a-z])/g;

// Used by camelCase as callback to replace()
function fcamelCase( _all, letter ) {
	return letter.toUpperCase();
}

// Convert dashed to camelCase; used by the css and data modules
// Support: IE <=9 - 11, Edge 12 - 15
// Microsoft forgot to hump their vendor prefix (trac-9572)
function camelCase( string ) {
	return string.replace( rmsPrefix, "ms-" ).replace( rdashAlpha, fcamelCase );
}
var acceptData = function( owner ) {

	// Accepts only:
	//  - Node
	//    - Node.ELEMENT_NODE
	//    - Node.DOCUMENT_NODE
	//  - Object
	//    - Any
	return owner.nodeType === 1 || owner.nodeType === 9 || !( +owner.nodeType );
};




function Data() {
	this.expando = jQuery.expando + Data.uid++;
}

Data.uid = 1;

Data.prototype = {

	cache: function( owner ) {

		// Check if the owner object already has a cache
		var value = owner[ this.expando ];

		// If not, create one
		if ( !value ) {
			value = {};

			// We can accept data for non-element nodes in modern browsers,
			// but we should not, see trac-8335.
			// Always return an empty object.
			if ( acceptData( owner ) ) {

				// If it is a node unlikely to be stringify-ed or looped over
				// use plain assignment
				if ( owner.nodeType ) {
					owner[ this.expando ] = value;

				// Otherwise secure it in a non-enumerable property
				// configurable must be true to allow the property to be
				// deleted when data is removed
				} else {
					Object.defineProperty( owner, this.expando, {
						value: value,
						configurable: true
					} );
				}
			}
		}

		return value;
	},
	set: function( owner, data, value ) {
		var prop,
			cache = this.cache( owner );

		// Handle: [ owner, key, value ] args
		// Always use camelCase key (gh-2257)
		if ( typeof data === "string" ) {
			cache[ camelCase( data ) ] = value;

		// Handle: [ owner, { properties } ] args
		} else {

			// Copy the properties one-by-one to the cache object
			for ( prop in data ) {
				cache[ camelCase( prop ) ] = data[ prop ];
			}
		}
		return cache;
	},
	get: function( owner, key ) {
		return key === undefined ?
			this.cache( owner ) :

			// Always use camelCase key (gh-2257)
			owner[ this.expando ] && owner[ this.expando ][ camelCase( key ) ];
	},
	access: function( owner, key, value ) {

		// In cases where either:
		//
		//   1. No key was specified
		//   2. A string key was specified, but no value provided
		//
		// Take the "read" path and allow the get method to determine
		// which value to return, respectively either:
		//
		//   1. The entire cache object
		//   2. The data stored at the key
		//
		if ( key === undefined ||
				( ( key && typeof key === "string" ) && value === undefined ) ) {

			return this.get( owner, key );
		}

		// When the key is not a string, or both a key and value
		// are specified, set or extend (existing objects) with either:
		//
		//   1. An object of properties
		//   2. A key and value
		//
		this.set( owner, key, value );

		// Since the "set" path can have two possible entry points
		// return the expected data based on which path was taken[*]
		return value !== undefined ? value : key;
	},
	remove: function( owner, key ) {
		var i,
			cache = owner[ this.expando ];

		if ( cache === undefined ) {
			return;
		}

		if ( key !== undefined ) {

			// Support array or space separated string of keys
			if ( Array.isArray( key ) ) {

				// If key is an array of keys...
				// We always set camelCase keys, so remove that.
				key = key.map( camelCase );
			} else {
				key = camelCase( key );

				// If a key with the spaces exists, use it.
				// Otherwise, create an array by matching non-whitespace
				key = key in cache ?
					[ key ] :
					( key.match( rnothtmlwhite ) || [] );
			}

			i = key.length;

			while ( i-- ) {
				delete cache[ key[ i ] ];
			}
		}

		// Remove the expando if there's no more data
		if ( key === undefined || jQuery.isEmptyObject( cache ) ) {

			// Support: Chrome <=35 - 45
			// Webkit & Blink performance suffers when deleting properties
			// from DOM nodes, so set to undefined instead
			// https://bugs.chromium.org/p/chromium/issues/detail?id=378607 (bug restricted)
			if ( owner.nodeType ) {
				owner[ this.expando ] = undefined;
			} else {
				delete owner[ this.expando ];
			}
		}
	},
	hasData: function( owner ) {
		var cache = owner[ this.expando ];
		return cache !== undefined && !jQuery.isEmptyObject( cache );
	}
};
var dataPriv = new Data();

var dataUser = new Data();



//	Implementation Summary
//
//	1. Enforce API surface and semantic compatibility with 1.9.x branch
//	2. Improve the module's maintainability by reducing the storage
//		paths to a single mechanism.
//	3. Use the same single mechanism to support "private" and "user" data.
//	4. _Never_ expose "private" data to user code (TODO: Drop _data, _removeData)
//	5. Avoid exposing implementation details on user objects (eg. expando properties)
//	6. Provide a clear path for implementation upgrade to WeakMap in 2014

var rbrace = /^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,
	rmultiDash = /[A-Z]/g;

function getData( data ) {
	if ( data === "true" ) {
		return true;
	}

	if ( data === "false" ) {
		return false;
	}

	if ( data === "null" ) {
		return null;
	}

	// Only convert to a number if it doesn't change the string
	if ( data === +data + "" ) {
		return +data;
	}

	if ( rbrace.test( data ) ) {
		return JSON.parse( data );
	}

	return data;
}

function dataAttr( elem, key, data ) {
	var name;

	// If nothing was found internally, try to fetch any
	// data from the HTML5 data-* attribute
	if ( data === undefined && elem.nodeType === 1 ) {
		name = "data-" + key.replace( rmultiDash, "-$&" ).toLowerCase();
		data = elem.getAttribute( name );

		if ( typeof data === "string" ) {
			try {
				data = getData( data );
			} catch ( e ) {}

			// Make sure we set the data so it isn't changed later
			dataUser.set( elem, key, data );
		} else {
			data = undefined;
		}
	}
	return data;
}

jQuery.extend( {
	hasData: function( elem ) {
		return dataUser.hasData( elem ) || dataPriv.hasData( elem );
	},

	data: function( elem, name, data ) {
		return dataUser.access( elem, name, data );
	},

	removeData: function( elem, name ) {
		dataUser.remove( elem, name );
	},

	// TODO: Now that all calls to _data and _removeData have been replaced
	// with direct calls to dataPriv methods, these can be deprecated.
	_data: function( elem, name, data ) {
		return dataPriv.access( elem, name, data );
	},

	_removeData: function( elem, name ) {
		dataPriv.remove( elem, name );
	}
} );

jQuery.fn.extend( {
	data: function( key, value ) {
		var i, name, data,
			elem = this[ 0 ],
			attrs = elem && elem.attributes;

		// Gets all values
		if ( key === undefined ) {
			if ( this.length ) {
				data = dataUser.get( elem );

				if ( elem.nodeType === 1 && !dataPriv.get( elem, "hasDataAttrs" ) ) {
					i = attrs.length;
					while ( i-- ) {

						// Support: IE 11 only
						// The attrs elements can be null (trac-14894)
						if ( attrs[ i ] ) {
							name = attrs[ i ].name;
							if ( name.indexOf( "data-" ) === 0 ) {
								name = camelCase( name.slice( 5 ) );
								dataAttr( elem, name, data[ name ] );
							}
						}
					}
					dataPriv.set( elem, "hasDataAttrs", true );
				}
			}

			return data;
		}

		// Sets multiple values
		if ( typeof key === "object" ) {
			return this.each( function() {
				dataUser.set( this, key );
			} );
		}

		return access( this, function( value ) {
			var data;

			// The calling jQuery object (element matches) is not empty
			// (and therefore has an element appears at this[ 0 ]) and the
			// `value` parameter was not undefined. An empty jQuery object
			// will result in `undefined` for elem = this[ 0 ] which will
			// throw an exception if an attempt to read a data cache is made.
			if ( elem && value === undefined ) {

				// Attempt to get data from the cache
				// The key will always be camelCased in Data
				data = dataUser.get( elem, key );
				if ( data !== undefined ) {
					return data;
				}

				// Attempt to "discover" the data in
				// HTML5 custom data-* attrs
				data = dataAttr( elem, key );
				if ( data !== undefined ) {
					return data;
				}

				// We tried really hard, but the data doesn't exist.
				return;
			}

			// Set the data...
			this.each( function() {

				// We always store the camelCased key
				dataUser.set( this, key, value );
			} );
		}, null, value, arguments.length > 1, null, true );
	},

	removeData: function( key ) {
		return this.each( function() {
			dataUser.remove( this, key );
		} );
	}
} );


jQuery.extend( {
	queue: function( elem, type, data ) {
		var queue;

		if ( elem ) {
			type = ( type || "fx" ) + "queue";
			queue = dataPriv.get( elem, type );

			// Speed up dequeue by getting out quickly if this is just a lookup
			if ( data ) {
				if ( !queue || Array.isArray( data ) ) {
					queue = dataPriv.access( elem, type, jQuery.makeArray( data ) );
				} else {
					queue.push( data );
				}
			}
			return queue || [];
		}
	},

	dequeue: function( elem, type ) {
		type = type || "fx";

		var queue = jQuery.queue( elem, type ),
			startLength = queue.length,
			fn = queue.shift(),
			hooks = jQuery._queueHooks( elem, type ),
			next = function() {
				jQuery.dequeue( elem, type );
			};

		// If the fx queue is dequeued, always remove the progress sentinel
		if ( fn === "inprogress" ) {
			fn = queue.shift();
			startLength--;
		}

		if ( fn ) {

			// Add a progress sentinel to prevent the fx queue from being
			// automatically dequeued
			if ( type === "fx" ) {
				queue.unshift( "inprogress" );
			}

			// Clear up the last queue stop function
			delete hooks.stop;
			fn.call( elem, next, hooks );
		}

		if ( !startLength && hooks ) {
			hooks.empty.fire();
		}
	},

	// Not public - generate a queueHooks object, or return the current one
	_queueHooks: function( elem, type ) {
		var key = type + "queueHooks";
		return dataPriv.get( elem, key ) || dataPriv.access( elem, key, {
			empty: jQuery.Callbacks( "once memory" ).add( function() {
				dataPriv.remove( elem, [ type + "queue", key ] );
			} )
		} );
	}
} );

jQuery.fn.extend( {
	queue: function( type, data ) {
		var setter = 2;

		if ( typeof type !== "string" ) {
			data = type;
			type = "fx";
			setter--;
		}

		if ( arguments.length < setter ) {
			return jQuery.queue( this[ 0 ], type );
		}

		return data === undefined ?
			this :
			this.each( function() {
				var queue = jQuery.queue( this, type, data );

				// Ensure a hooks for this queue
				jQuery._queueHooks( this, type );

				if ( type === "fx" && queue[ 0 ] !== "inprogress" ) {
					jQuery.dequeue( this, type );
				}
			} );
	},
	dequeue: function( type ) {
		return this.each( function() {
			jQuery.dequeue( this, type );
		} );
	},
	clearQueue: function( type ) {
		return this.queue( type || "fx", [] );
	},

	// Get a promise resolved when queues of a certain type
	// are emptied (fx is the type by default)
	promise: function( type, obj ) {
		var tmp,
			count = 1,
			defer = jQuery.Deferred(),
			elements = this,
			i = this.length,
			resolve = function() {
				if ( !( --count ) ) {
					defer.resolveWith( elements, [ elements ] );
				}
			};

		if ( typeof type !== "string" ) {
			obj = type;
			type = undefined;
		}
		type = type || "fx";

		while ( i-- ) {
			tmp = dataPriv.get( elements[ i ], type + "queueHooks" );
			if ( tmp && tmp.empty ) {
				count++;
				tmp.empty.add( resolve );
			}
		}
		resolve();
		return defer.promise( obj );
	}
} );
var pnum = ( /[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/ ).source;

var rcssNum = new RegExp( "^(?:([+-])=|)(" + pnum + ")([a-z%]*)$", "i" );


var cssExpand = [ "Top", "Right", "Bottom", "Left" ];

var documentElement = document.documentElement;



	var isAttached = function( elem ) {
			return jQuery.contains( elem.ownerDocument, elem );
		},
		composed = { composed: true };

	// Support: IE 9 - 11+, Edge 12 - 18+, iOS 10.0 - 10.2 only
	// Check attachment across shadow DOM boundaries when possible (gh-3504)
	// Support: iOS 10.0-10.2 only
	// Early iOS 10 versions support `attachShadow` but not `getRootNode`,
	// leading to errors. We need to check for `getRootNode`.
	if ( documentElement.getRootNode ) {
		isAttached = function( elem ) {
			return jQuery.contains( elem.ownerDocument, elem ) ||
				elem.getRootNode( composed ) === elem.ownerDocument;
		};
	}
var isHiddenWithinTree = function( elem, el ) {

		// isHiddenWithinTree might be called from jQuery#filter function;
		// in that case, element will be second argument
		elem = el || elem;

		// Inline style trumps all
		return elem.style.display === "none" ||
			elem.style.display === "" &&

			// Otherwise, check computed style
			// Support: Firefox <=43 - 45
			// Disconnected elements can have computed display: none, so first confirm that elem is
			// in the document.
			isAttached( elem ) &&

			jQuery.css( elem, "display" ) === "none";
	};



function adjustCSS( elem, prop, valueParts, tween ) {
	var adjusted, scale,
		maxIterations = 20,
		currentValue = tween ?
			function() {
				return tween.cur();
			} :
			function() {
				return jQuery.css( elem, prop, "" );
			},
		initial = currentValue(),
		unit = valueParts && valueParts[ 3 ] || ( jQuery.cssNumber[ prop ] ? "" : "px" ),

		// Starting value computation is required for potential unit mismatches
		initialInUnit = elem.nodeType &&
			( jQuery.cssNumber[ prop ] || unit !== "px" && +initial ) &&
			rcssNum.exec( jQuery.css( elem, prop ) );

	if ( initialInUnit && initialInUnit[ 3 ] !== unit ) {

		// Support: Firefox <=54
		// Halve the iteration target value to prevent interference from CSS upper bounds (gh-2144)
		initial = initial / 2;

		// Trust units reported by jQuery.css
		unit = unit || initialInUnit[ 3 ];

		// Iteratively approximate from a nonzero starting point
		initialInUnit = +initial || 1;

		while ( maxIterations-- ) {

			// Evaluate and update our best guess (doubling guesses that zero out).
			// Finish if the scale equals or crosses 1 (making the old*new product non-positive).
			jQuery.style( elem, prop, initialInUnit + unit );
			if ( ( 1 - scale ) * ( 1 - ( scale = currentValue() / initial || 0.5 ) ) <= 0 ) {
				maxIterations = 0;
			}
			initialInUnit = initialInUnit / scale;

		}

		initialInUnit = initialInUnit * 2;
		jQuery.style( elem, prop, initialInUnit + unit );

		// Make sure we update the tween properties later on
		valueParts = valueParts || [];
	}

	if ( valueParts ) {
		initialInUnit = +initialInUnit || +initial || 0;

		// Apply relative offset (+=/-=) if specified
		adjusted = valueParts[ 1 ] ?
			initialInUnit + ( valueParts[ 1 ] + 1 ) * valueParts[ 2 ] :
			+valueParts[ 2 ];
		if ( tween ) {
			tween.unit = unit;
			tween.start = initialInUnit;
			tween.end = adjusted;
		}
	}
	return adjusted;
}


var defaultDisplayMap = {};

function getDefaultDisplay( elem ) {
	var temp,
		doc = elem.ownerDocument,
		nodeName = elem.nodeName,
		display = defaultDisplayMap[ nodeName ];

	if ( display ) {
		return display;
	}

	temp = doc.body.appendChild( doc.createElement( nodeName ) );
	display = jQuery.css( temp, "display" );

	temp.parentNode.removeChild( temp );

	if ( display === "none" ) {
		display = "block";
	}
	defaultDisplayMap[ nodeName ] = display;

	return display;
}

function showHide( elements, show ) {
	var display, elem,
		values = [],
		index = 0,
		length = elements.length;

	// Determine new display value for elements that need to change
	for ( ; index < length; index++ ) {
		elem = elements[ index ];
		if ( !elem.style ) {
			continue;
		}

		display = elem.style.display;
		if ( show ) {

			// Since we force visibility upon cascade-hidden elements, an immediate (and slow)
			// check is required in this first loop unless we have a nonempty display value (either
			// inline or about-to-be-restored)
			if ( display === "none" ) {
				values[ index ] = dataPriv.get( elem, "display" ) || null;
				if ( !values[ index ] ) {
					elem.style.display = "";
				}
			}
			if ( elem.style.display === "" && isHiddenWithinTree( elem ) ) {
				values[ index ] = getDefaultDisplay( elem );
			}
		} else {
			if ( display !== "none" ) {
				values[ index ] = "none";

				// Remember what we're overwriting
				dataPriv.set( elem, "display", display );
			}
		}
	}

	// Set the display of the elements in a second loop to avoid constant reflow
	for ( index = 0; index < length; index++ ) {
		if ( values[ index ] != null ) {
			elements[ index ].style.display = values[ index ];
		}
	}

	return elements;
}

jQuery.fn.extend( {
	show: function() {
		return showHide( this, true );
	},
	hide: function() {
		return showHide( this );
	},
	toggle: function( state ) {
		if ( typeof state === "boolean" ) {
			return state ? this.show() : this.hide();
		}

		return this.each( function() {
			if ( isHiddenWithinTree( this ) ) {
				jQuery( this ).show();
			} else {
				jQuery( this ).hide();
			}
		} );
	}
} );
var rcheckableType = ( /^(?:checkbox|radio)$/i );

var rtagName = ( /<([a-z][^\/\0>\x20\t\r\n\f]*)/i );

var rscriptType = ( /^$|^module$|\/(?:java|ecma)script/i );



( function() {
	var fragment = document.createDocumentFragment(),
		div = fragment.appendChild( document.createElement( "div" ) ),
		input = document.createElement( "input" );

	// Support: Android 4.0 - 4.3 only
	// Check state lost if the name is set (trac-11217)
	// Support: Windows Web Apps (WWA)
	// `name` and `type` must use .setAttribute for WWA (trac-14901)
	input.setAttribute( "type", "radio" );
	input.setAttribute( "checked", "checked" );
	input.setAttribute( "name", "t" );

	div.appendChild( input );

	// Support: Android <=4.1 only
	// Older WebKit doesn't clone checked state correctly in fragments
	support.checkClone = div.cloneNode( true ).cloneNode( true ).lastChild.checked;

	// Support: IE <=11 only
	// Make sure textarea (and checkbox) defaultValue is properly cloned
	div.innerHTML = "<textarea>x</textarea>";
	support.noCloneChecked = !!div.cloneNode( true ).lastChild.defaultValue;

	// Support: IE <=9 only
	// IE <=9 replaces <option> tags with their contents when inserted outside of
	// the select element.
	div.innerHTML = "<option></option>";
	support.option = !!div.lastChild;
} )();


// We have to close these tags to support XHTML (trac-13200)
var wrapMap = {

	// XHTML parsers do not magically insert elements in the
	// same way that tag soup parsers do. So we cannot shorten
	// this by omitting <tbody> or other required elements.
	thead: [ 1, "<table>", "</table>" ],
	col: [ 2, "<table><colgroup>", "</colgroup></table>" ],
	tr: [ 2, "<table><tbody>", "</tbody></table>" ],
	td: [ 3, "<table><tbody><tr>", "</tr></tbody></table>" ],

	_default: [ 0, "", "" ]
};

wrapMap.tbody = wrapMap.tfoot = wrapMap.colgroup = wrapMap.caption = wrapMap.thead;
wrapMap.th = wrapMap.td;

// Support: IE <=9 only
if ( !support.option ) {
	wrapMap.optgroup = wrapMap.option = [ 1, "<select multiple='multiple'>", "</select>" ];
}


function getAll( context, tag ) {

	// Support: IE <=9 - 11 only
	// Use typeof to avoid zero-argument method invocation on host objects (trac-15151)
	var ret;

	if ( typeof context.getElementsByTagName !== "undefined" ) {
		ret = context.getElementsByTagName( tag || "*" );

	} else if ( typeof context.querySelectorAll !== "undefined" ) {
		ret = context.querySelectorAll( tag || "*" );

	} else {
		ret = [];
	}

	if ( tag === undefined || tag && nodeName( context, tag ) ) {
		return jQuery.merge( [ context ], ret );
	}

	return ret;
}


// Mark scripts as having already been evaluated
function setGlobalEval( elems, refElements ) {
	var i = 0,
		l = elems.length;

	for ( ; i < l; i++ ) {
		dataPriv.set(
			elems[ i ],
			"globalEval",
			!refElements || dataPriv.get( refElements[ i ], "globalEval" )
		);
	}
}


var rhtml = /<|&#?\w+;/;

function buildFragment( elems, context, scripts, selection, ignored ) {
	var elem, tmp, tag, wrap, attached, j,
		fragment = context.createDocumentFragment(),
		nodes = [],
		i = 0,
		l = elems.length;

	for ( ; i < l; i++ ) {
		elem = elems[ i ];

		if ( elem || elem === 0 ) {

			// Add nodes directly
			if ( toType( elem ) === "object" ) {

				// Support: Android <=4.0 only, PhantomJS 1 only
				// push.apply(_, arraylike) throws on ancient WebKit
				jQuery.merge( nodes, elem.nodeType ? [ elem ] : elem );

			// Convert non-html into a text node
			} else if ( !rhtml.test( elem ) ) {
				nodes.push( context.createTextNode( elem ) );

			// Convert html into DOM nodes
			} else {
				tmp = tmp || fragment.appendChild( context.createElement( "div" ) );

				// Deserialize a standard representation
				tag = ( rtagName.exec( elem ) || [ "", "" ] )[ 1 ].toLowerCase();
				wrap = wrapMap[ tag ] || wrapMap._default;
				tmp.innerHTML = wrap[ 1 ] + jQuery.htmlPrefilter( elem ) + wrap[ 2 ];

				// Descend through wrappers to the right content
				j = wrap[ 0 ];
				while ( j-- ) {
					tmp = tmp.lastChild;
				}

				// Support: Android <=4.0 only, PhantomJS 1 only
				// push.apply(_, arraylike) throws on ancient WebKit
				jQuery.merge( nodes, tmp.childNodes );

				// Remember the top-level container
				tmp = fragment.firstChild;

				// Ensure the created nodes are orphaned (trac-12392)
				tmp.textContent = "";
			}
		}
	}

	// Remove wrapper from fragment
	fragment.textContent = "";

	i = 0;
	while ( ( elem = nodes[ i++ ] ) ) {

		// Skip elements already in the context collection (trac-4087)
		if ( selection && jQuery.inArray( elem, selection ) > -1 ) {
			if ( ignored ) {
				ignored.push( elem );
			}
			continue;
		}

		attached = isAttached( elem );

		// Append to fragment
		tmp = getAll( fragment.appendChild( elem ), "script" );

		// Preserve script evaluation history
		if ( attached ) {
			setGlobalEval( tmp );
		}

		// Capture executables
		if ( scripts ) {
			j = 0;
			while ( ( elem = tmp[ j++ ] ) ) {
				if ( rscriptType.test( elem.type || "" ) ) {
					scripts.push( elem );
				}
			}
		}
	}

	return fragment;
}


var rtypenamespace = /^([^.]*)(?:\.(.+)|)/;

function returnTrue() {
	return true;
}

function returnFalse() {
	return false;
}

// Support: IE <=9 - 11+
// focus() and blur() are asynchronous, except when they are no-op.
// So expect focus to be synchronous when the element is already active,
// and blur to be synchronous when the element is not already active.
// (focus and blur are always synchronous in other supported browsers,
// this just defines when we can count on it).
function expectSync( elem, type ) {
	return ( elem === safeActiveElement() ) === ( type === "focus" );
}

// Support: IE <=9 only
// Accessing document.activeElement can throw unexpectedly
// https://bugs.jquery.com/ticket/13393
function safeActiveElement() {
	try {
		return document.activeElement;
	} catch ( err ) { }
}

function on( elem, types, selector, data, fn, one ) {
	var origFn, type;

	// Types can be a map of types/handlers
	if ( typeof types === "object" ) {

		// ( types-Object, selector, data )
		if ( typeof selector !== "string" ) {

			// ( types-Object, data )
			data = data || selector;
			selector = undefined;
		}
		for ( type in types ) {
			on( elem, type, selector, data, types[ type ], one );
		}
		return elem;
	}

	if ( data == null && fn == null ) {

		// ( types, fn )
		fn = selector;
		data = selector = undefined;
	} else if ( fn == null ) {
		if ( typeof selector === "string" ) {

			// ( types, selector, fn )
			fn = data;
			data = undefined;
		} else {

			// ( types, data, fn )
			fn = data;
			data = selector;
			selector = undefined;
		}
	}
	if ( fn === false ) {
		fn = returnFalse;
	} else if ( !fn ) {
		return elem;
	}

	if ( one === 1 ) {
		origFn = fn;
		fn = function( event ) {

			// Can use an empty set, since event contains the info
			jQuery().off( event );
			return origFn.apply( this, arguments );
		};

		// Use same guid so caller can remove using origFn
		fn.guid = origFn.guid || ( origFn.guid = jQuery.guid++ );
	}
	return elem.each( function() {
		jQuery.event.add( this, types, fn, data, selector );
	} );
}

/*
 * Helper functions for managing events -- not part of the public interface.
 * Props to Dean Edwards' addEvent library for many of the ideas.
 */
jQuery.event = {

	global: {},

	add: function( elem, types, handler, data, selector ) {

		var handleObjIn, eventHandle, tmp,
			events, t, handleObj,
			special, handlers, type, namespaces, origType,
			elemData = dataPriv.get( elem );

		// Only attach events to objects that accept data
		if ( !acceptData( elem ) ) {
			return;
		}

		// Caller can pass in an object of custom data in lieu of the handler
		if ( handler.handler ) {
			handleObjIn = handler;
			handler = handleObjIn.handler;
			selector = handleObjIn.selector;
		}

		// Ensure that invalid selectors throw exceptions at attach time
		// Evaluate against documentElement in case elem is a non-element node (e.g., document)
		if ( selector ) {
			jQuery.find.matchesSelector( documentElement, selector );
		}

		// Make sure that the handler has a unique ID, used to find/remove it later
		if ( !handler.guid ) {
			handler.guid = jQuery.guid++;
		}

		// Init the element's event structure and main handler, if this is the first
		if ( !( events = elemData.events ) ) {
			events = elemData.events = Object.create( null );
		}
		if ( !( eventHandle = elemData.handle ) ) {
			eventHandle = elemData.handle = function( e ) {

				// Discard the second event of a jQuery.event.trigger() and
				// when an event is called after a page has unloaded
				return typeof jQuery !== "undefined" && jQuery.event.triggered !== e.type ?
					jQuery.event.dispatch.apply( elem, arguments ) : undefined;
			};
		}

		// Handle multiple events separated by a space
		types = ( types || "" ).match( rnothtmlwhite ) || [ "" ];
		t = types.length;
		while ( t-- ) {
			tmp = rtypenamespace.exec( types[ t ] ) || [];
			type = origType = tmp[ 1 ];
			namespaces = ( tmp[ 2 ] || "" ).split( "." ).sort();

			// There *must* be a type, no attaching namespace-only handlers
			if ( !type ) {
				continue;
			}

			// If event changes its type, use the special event handlers for the changed type
			special = jQuery.event.special[ type ] || {};

			// If selector defined, determine special event api type, otherwise given type
			type = ( selector ? special.delegateType : special.bindType ) || type;

			// Update special based on newly reset type
			special = jQuery.event.special[ type ] || {};

			// handleObj is passed to all event handlers
			handleObj = jQuery.extend( {
				type: type,
				origType: origType,
				data: data,
				handler: handler,
				guid: handler.guid,
				selector: selector,
				needsContext: selector && jQuery.expr.match.needsContext.test( selector ),
				namespace: namespaces.join( "." )
			}, handleObjIn );

			// Init the event handler queue if we're the first
			if ( !( handlers = events[ type ] ) ) {
				handlers = events[ type ] = [];
				handlers.delegateCount = 0;

				// Only use addEventListener if the special events handler returns false
				if ( !special.setup ||
					special.setup.call( elem, data, namespaces, eventHandle ) === false ) {

					if ( elem.addEventListener ) {
						elem.addEventListener( type, eventHandle );
					}
				}
			}

			if ( special.add ) {
				special.add.call( elem, handleObj );

				if ( !handleObj.handler.guid ) {
					handleObj.handler.guid = handler.guid;
				}
			}

			// Add to the element's handler list, delegates in front
			if ( selector ) {
				handlers.splice( handlers.delegateCount++, 0, handleObj );
			} else {
				handlers.push( handleObj );
			}

			// Keep track of which events have ever been used, for event optimization
			jQuery.event.global[ type ] = true;
		}

	},

	// Detach an event or set of events from an element
	remove: function( elem, types, handler, selector, mappedTypes ) {

		var j, origCount, tmp,
			events, t, handleObj,
			special, handlers, type, namespaces, origType,
			elemData = dataPriv.hasData( elem ) && dataPriv.get( elem );

		if ( !elemData || !( events = elemData.events ) ) {
			return;
		}

		// Once for each type.namespace in types; type may be omitted
		types = ( types || "" ).match( rnothtmlwhite ) || [ "" ];
		t = types.length;
		while ( t-- ) {
			tmp = rtypenamespace.exec( types[ t ] ) || [];
			type = origType = tmp[ 1 ];
			namespaces = ( tmp[ 2 ] || "" ).split( "." ).sort();

			// Unbind all events (on this namespace, if provided) for the element
			if ( !type ) {
				for ( type in events ) {
					jQuery.event.remove( elem, type + types[ t ], handler, selector, true );
				}
				continue;
			}

			special = jQuery.event.special[ type ] || {};
			type = ( selector ? special.delegateType : special.bindType ) || type;
			handlers = events[ type ] || [];
			tmp = tmp[ 2 ] &&
				new RegExp( "(^|\\.)" + namespaces.join( "\\.(?:.*\\.|)" ) + "(\\.|$)" );

			// Remove matching events
			origCount = j = handlers.length;
			while ( j-- ) {
				handleObj = handlers[ j ];

				if ( ( mappedTypes || origType === handleObj.origType ) &&
					( !handler || handler.guid === handleObj.guid ) &&
					( !tmp || tmp.test( handleObj.namespace ) ) &&
					( !selector || selector === handleObj.selector ||
						selector === "**" && handleObj.selector ) ) {
					handlers.splice( j, 1 );

					if ( handleObj.selector ) {
						handlers.delegateCount--;
					}
					if ( special.remove ) {
						special.remove.call( elem, handleObj );
					}
				}
			}

			// Remove generic event handler if we removed something and no more handlers exist
			// (avoids potential for endless recursion during removal of special event handlers)
			if ( origCount && !handlers.length ) {
				if ( !special.teardown ||
					special.teardown.call( elem, namespaces, elemData.handle ) === false ) {

					jQuery.removeEvent( elem, type, elemData.handle );
				}

				delete events[ type ];
			}
		}

		// Remove data and the expando if it's no longer used
		if ( jQuery.isEmptyObject( events ) ) {
			dataPriv.remove( elem, "handle events" );
		}
	},

	dispatch: function( nativeEvent ) {

		var i, j, ret, matched, handleObj, handlerQueue,
			args = new Array( arguments.length ),

			// Make a writable jQuery.Event from the native event object
			event = jQuery.event.fix( nativeEvent ),

			handlers = (
				dataPriv.get( this, "events" ) || Object.create( null )
			)[ event.type ] || [],
			special = jQuery.event.special[ event.type ] || {};

		// Use the fix-ed jQuery.Event rather than the (read-only) native event
		args[ 0 ] = event;

		for ( i = 1; i < arguments.length; i++ ) {
			args[ i ] = arguments[ i ];
		}

		event.delegateTarget = this;

		// Call the preDispatch hook for the mapped type, and let it bail if desired
		if ( special.preDispatch && special.preDispatch.call( this, event ) === false ) {
			return;
		}

		// Determine handlers
		handlerQueue = jQuery.event.handlers.call( this, event, handlers );

		// Run delegates first; they may want to stop propagation beneath us
		i = 0;
		while ( ( matched = handlerQueue[ i++ ] ) && !event.isPropagationStopped() ) {
			event.currentTarget = matched.elem;

			j = 0;
			while ( ( handleObj = matched.handlers[ j++ ] ) &&
				!event.isImmediatePropagationStopped() ) {

				// If the event is namespaced, then each handler is only invoked if it is
				// specially universal or its namespaces are a superset of the event's.
				if ( !event.rnamespace || handleObj.namespace === false ||
					event.rnamespace.test( handleObj.namespace ) ) {

					event.handleObj = handleObj;
					event.data = handleObj.data;

					ret = ( ( jQuery.event.special[ handleObj.origType ] || {} ).handle ||
						handleObj.handler ).apply( matched.elem, args );

					if ( ret !== undefined ) {
						if ( ( event.result = ret ) === false ) {
							event.preventDefault();
							event.stopPropagation();
						}
					}
				}
			}
		}

		// Call the postDispatch hook for the mapped type
		if ( special.postDispatch ) {
			special.postDispatch.call( this, event );
		}

		return event.result;
	},

	handlers: function( event, handlers ) {
		var i, handleObj, sel, matchedHandlers, matchedSelectors,
			handlerQueue = [],
			delegateCount = handlers.delegateCount,
			cur = event.target;

		// Find delegate handlers
		if ( delegateCount &&

			// Support: IE <=9
			// Black-hole SVG <use> instance trees (trac-13180)
			cur.nodeType &&

			// Support: Firefox <=42
			// Suppress spec-violating clicks indicating a non-primary pointer button (trac-3861)
			// https://www.w3.org/TR/DOM-Level-3-Events/#event-type-click
			// Support: IE 11 only
			// ...but not arrow key "clicks" of radio inputs, which can have `button` -1 (gh-2343)
			!( event.type === "click" && event.button >= 1 ) ) {

			for ( ; cur !== this; cur = cur.parentNode || this ) {

				// Don't check non-elements (trac-13208)
				// Don't process clicks on disabled elements (trac-6911, trac-8165, trac-11382, trac-11764)
				if ( cur.nodeType === 1 && !( event.type === "click" && cur.disabled === true ) ) {
					matchedHandlers = [];
					matchedSelectors = {};
					for ( i = 0; i < delegateCount; i++ ) {
						handleObj = handlers[ i ];

						// Don't conflict with Object.prototype properties (trac-13203)
						sel = handleObj.selector + " ";

						if ( matchedSelectors[ sel ] === undefined ) {
							matchedSelectors[ sel ] = handleObj.needsContext ?
								jQuery( sel, this ).index( cur ) > -1 :
								jQuery.find( sel, this, null, [ cur ] ).length;
						}
						if ( matchedSelectors[ sel ] ) {
							matchedHandlers.push( handleObj );
						}
					}
					if ( matchedHandlers.length ) {
						handlerQueue.push( { elem: cur, handlers: matchedHandlers } );
					}
				}
			}
		}

		// Add the remaining (directly-bound) handlers
		cur = this;
		if ( delegateCount < handlers.length ) {
			handlerQueue.push( { elem: cur, handlers: handlers.slice( delegateCount ) } );
		}

		return handlerQueue;
	},

	addProp: function( name, hook ) {
		Object.defineProperty( jQuery.Event.prototype, name, {
			enumerable: true,
			configurable: true,

			get: isFunction( hook ) ?
				function() {
					if ( this.originalEvent ) {
						return hook( this.originalEvent );
					}
				} :
				function() {
					if ( this.originalEvent ) {
						return this.originalEvent[ name ];
					}
				},

			set: function( value ) {
				Object.defineProperty( this, name, {
					enumerable: true,
					configurable: true,
					writable: true,
					value: value
				} );
			}
		} );
	},

	fix: function( originalEvent ) {
		return originalEvent[ jQuery.expando ] ?
			originalEvent :
			new jQuery.Event( originalEvent );
	},

	special: {
		load: {

			// Prevent triggered image.load events from bubbling to window.load
			noBubble: true
		},
		click: {

			// Utilize native event to ensure correct state for checkable inputs
			setup: function( data ) {

				// For mutual compressibility with _default, replace `this` access with a local var.
				// `|| data` is dead code meant only to preserve the variable through minification.
				var el = this || data;

				// Claim the first handler
				if ( rcheckableType.test( el.type ) &&
					el.click && nodeName( el, "input" ) ) {

					// dataPriv.set( el, "click", ... )
					leverageNative( el, "click", returnTrue );
				}

				// Return false to allow normal processing in the caller
				return false;
			},
			trigger: function( data ) {

				// For mutual compressibility with _default, replace `this` access with a local var.
				// `|| data` is dead code meant only to preserve the variable through minification.
				var el = this || data;

				// Force setup before triggering a click
				if ( rcheckableType.test( el.type ) &&
					el.click && nodeName( el, "input" ) ) {

					leverageNative( el, "click" );
				}

				// Return non-false to allow normal event-path propagation
				return true;
			},

			// For cross-browser consistency, suppress native .click() on links
			// Also prevent it if we're currently inside a leveraged native-event stack
			_default: function( event ) {
				var target = event.target;
				return rcheckableType.test( target.type ) &&
					target.click && nodeName( target, "input" ) &&
					dataPriv.get( target, "click" ) ||
					nodeName( target, "a" );
			}
		},

		beforeunload: {
			postDispatch: function( event ) {

				// Support: Firefox 20+
				// Firefox doesn't alert if the returnValue field is not set.
				if ( event.result !== undefined && event.originalEvent ) {
					event.originalEvent.returnValue = event.result;
				}
			}
		}
	}
};

// Ensure the presence of an event listener that handles manually-triggered
// synthetic events by interrupting progress until reinvoked in response to
// *native* events that it fires directly, ensuring that state changes have
// already occurred before other listeners are invoked.
function leverageNative( el, type, expectSync ) {

	// Missing expectSync indicates a trigger call, which must force setup through jQuery.event.add
	if ( !expectSync ) {
		if ( dataPriv.get( el, type ) === undefined ) {
			jQuery.event.add( el, type, returnTrue );
		}
		return;
	}

	// Register the controller as a special universal handler for all event namespaces
	dataPriv.set( el, type, false );
	jQuery.event.add( el, type, {
		namespace: false,
		handler: function( event ) {
			var notAsync, result,
				saved = dataPriv.get( this, type );

			if ( ( event.isTrigger & 1 ) && this[ type ] ) {

				// Interrupt processing of the outer synthetic .trigger()ed event
				// Saved data should be false in such cases, but might be a leftover capture object
				// from an async native handler (gh-4350)
				if ( !saved.length ) {

					// Store arguments for use when handling the inner native event
					// There will always be at least one argument (an event object), so this array
					// will not be confused with a leftover capture object.
					saved = slice.call( arguments );
					dataPriv.set( this, type, saved );

					// Trigger the native event and capture its result
					// Support: IE <=9 - 11+
					// focus() and blur() are asynchronous
					notAsync = expectSync( this, type );
					this[ type ]();
					result = dataPriv.get( this, type );
					if ( saved !== result || notAsync ) {
						dataPriv.set( this, type, false );
					} else {
						result = {};
					}
					if ( saved !== result ) {

						// Cancel the outer synthetic event
						event.stopImmediatePropagation();
						event.preventDefault();

						// Support: Chrome 86+
						// In Chrome, if an element having a focusout handler is blurred by
						// clicking outside of it, it invokes the handler synchronously. If
						// that handler calls `.remove()` on the element, the data is cleared,
						// leaving `result` undefined. We need to guard against this.
						return result && result.value;
					}

				// If this is an inner synthetic event for an event with a bubbling surrogate
				// (focus or blur), assume that the surrogate already propagated from triggering the
				// native event and prevent that from happening again here.
				// This technically gets the ordering wrong w.r.t. to `.trigger()` (in which the
				// bubbling surrogate propagates *after* the non-bubbling base), but that seems
				// less bad than duplication.
				} else if ( ( jQuery.event.special[ type ] || {} ).delegateType ) {
					event.stopPropagation();
				}

			// If this is a native event triggered above, everything is now in order
			// Fire an inner synthetic event with the original arguments
			} else if ( saved.length ) {

				// ...and capture the result
				dataPriv.set( this, type, {
					value: jQuery.event.trigger(

						// Support: IE <=9 - 11+
						// Extend with the prototype to reset the above stopImmediatePropagation()
						jQuery.extend( saved[ 0 ], jQuery.Event.prototype ),
						saved.slice( 1 ),
						this
					)
				} );

				// Abort handling of the native event
				event.stopImmediatePropagation();
			}
		}
	} );
}

jQuery.removeEvent = function( elem, type, handle ) {

	// This "if" is needed for plain objects
	if ( elem.removeEventListener ) {
		elem.removeEventListener( type, handle );
	}
};

jQuery.Event = function( src, props ) {

	// Allow instantiation without the 'new' keyword
	if ( !( this instanceof jQuery.Event ) ) {
		return new jQuery.Event( src, props );
	}

	// Event object
	if ( src && src.type ) {
		this.originalEvent = src;
		this.type = src.type;

		// Events bubbling up the document may have been marked as prevented
		// by a handler lower down the tree; reflect the correct value.
		this.isDefaultPrevented = src.defaultPrevented ||
				src.defaultPrevented === undefined &&

				// Support: Android <=2.3 only
				src.returnValue === false ?
			returnTrue :
			returnFalse;

		// Create target properties
		// Support: Safari <=6 - 7 only
		// Target should not be a text node (trac-504, trac-13143)
		this.target = ( src.target && src.target.nodeType === 3 ) ?
			src.target.parentNode :
			src.target;

		this.currentTarget = src.currentTarget;
		this.relatedTarget = src.relatedTarget;

	// Event type
	} else {
		this.type = src;
	}

	// Put explicitly provided properties onto the event object
	if ( props ) {
		jQuery.extend( this, props );
	}

	// Create a timestamp if incoming event doesn't have one
	this.timeStamp = src && src.timeStamp || Date.now();

	// Mark it as fixed
	this[ jQuery.expando ] = true;
};

// jQuery.Event is based on DOM3 Events as specified by the ECMAScript Language Binding
// https://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/ecma-script-binding.html
jQuery.Event.prototype = {
	constructor: jQuery.Event,
	isDefaultPrevented: returnFalse,
	isPropagationStopped: returnFalse,
	isImmediatePropagationStopped: returnFalse,
	isSimulated: false,

	preventDefault: function() {
		var e = this.originalEvent;

		this.isDefaultPrevented = returnTrue;

		if ( e && !this.isSimulated ) {
			e.preventDefault();
		}
	},
	stopPropagation: function() {
		var e = this.originalEvent;

		this.isPropagationStopped = returnTrue;

		if ( e && !this.isSimulated ) {
			e.stopPropagation();
		}
	},
	stopImmediatePropagation: function() {
		var e = this.originalEvent;

		this.isImmediatePropagationStopped = returnTrue;

		if ( e && !this.isSimulated ) {
			e.stopImmediatePropagation();
		}

		this.stopPropagation();
	}
};

// Includes all common event props including KeyEvent and MouseEvent specific props
jQuery.each( {
	altKey: true,
	bubbles: true,
	cancelable: true,
	changedTouches: true,
	ctrlKey: true,
	detail: true,
	eventPhase: true,
	metaKey: true,
	pageX: true,
	pageY: true,
	shiftKey: true,
	view: true,
	"char": true,
	code: true,
	charCode: true,
	key: true,
	keyCode: true,
	button: true,
	buttons: true,
	clientX: true,
	clientY: true,
	offsetX: true,
	offsetY: true,
	pointerId: true,
	pointerType: true,
	screenX: true,
	screenY: true,
	targetTouches: true,
	toElement: true,
	touches: true,
	which: true
}, jQuery.event.addProp );

jQuery.each( { focus: "focusin", blur: "focusout" }, function( type, delegateType ) {
	jQuery.event.special[ type ] = {

		// Utilize native event if possible so blur/focus sequence is correct
		setup: function() {

			// Claim the first handler
			// dataPriv.set( this, "focus", ... )
			// dataPriv.set( this, "blur", ... )
			leverageNative( this, type, expectSync );

			// Return false to allow normal processing in the caller
			return false;
		},
		trigger: function() {

			// Force setup before trigger
			leverageNative( this, type );

			// Return non-false to allow normal event-path propagation
			return true;
		},

		// Suppress native focus or blur if we're currently inside
		// a leveraged native-event stack
		_default: function( event ) {
			return dataPriv.get( event.target, type );
		},

		delegateType: delegateType
	};
} );

// Create mouseenter/leave events using mouseover/out and event-time checks
// so that event delegation works in jQuery.
// Do the same for pointerenter/pointerleave and pointerover/pointerout
//
// Support: Safari 7 only
// Safari sends mouseenter too often; see:
// https://bugs.chromium.org/p/chromium/issues/detail?id=470258
// for the description of the bug (it existed in older Chrome versions as well).
jQuery.each( {
	mouseenter: "mouseover",
	mouseleave: "mouseout",
	pointerenter: "pointerover",
	pointerleave: "pointerout"
}, function( orig, fix ) {
	jQuery.event.special[ orig ] = {
		delegateType: fix,
		bindType: fix,

		handle: function( event ) {
			var ret,
				target = this,
				related = event.relatedTarget,
				handleObj = event.handleObj;

			// For mouseenter/leave call the handler if related is outside the target.
			// NB: No relatedTarget if the mouse left/entered the browser window
			if ( !related || ( related !== target && !jQuery.contains( target, related ) ) ) {
				event.type = handleObj.origType;
				ret = handleObj.handler.apply( this, arguments );
				event.type = fix;
			}
			return ret;
		}
	};
} );

jQuery.fn.extend( {

	on: function( types, selector, data, fn ) {
		return on( this, types, selector, data, fn );
	},
	one: function( types, selector, data, fn ) {
		return on( this, types, selector, data, fn, 1 );
	},
	off: function( types, selector, fn ) {
		var handleObj, type;
		if ( types && types.preventDefault && types.handleObj ) {

			// ( event )  dispatched jQuery.Event
			handleObj = types.handleObj;
			jQuery( types.delegateTarget ).off(
				handleObj.namespace ?
					handleObj.origType + "." + handleObj.namespace :
					handleObj.origType,
				handleObj.selector,
				handleObj.handler
			);
			return this;
		}
		if ( typeof types === "object" ) {

			// ( types-object [, selector] )
			for ( type in types ) {
				this.off( type, selector, types[ type ] );
			}
			return this;
		}
		if ( selector === false || typeof selector === "function" ) {

			// ( types [, fn] )
			fn = selector;
			selector = undefined;
		}
		if ( fn === false ) {
			fn = returnFalse;
		}
		return this.each( function() {
			jQuery.event.remove( this, types, fn, selector );
		} );
	}
} );


var

	// Support: IE <=10 - 11, Edge 12 - 13 only
	// In IE/Edge using regex groups here causes severe slowdowns.
	// See https://connect.microsoft.com/IE/feedback/details/1736512/
	rnoInnerhtml = /<script|<style|<link/i,

	// checked="checked" or checked
	rchecked = /checked\s*(?:[^=]|=\s*.checked.)/i,

	rcleanScript = /^\s*<!\[CDATA\[|\]\]>\s*$/g;

// Prefer a tbody over its parent table for containing new rows
function manipulationTarget( elem, content ) {
	if ( nodeName( elem, "table" ) &&
		nodeName( content.nodeType !== 11 ? content : content.firstChild, "tr" ) ) {

		return jQuery( elem ).children( "tbody" )[ 0 ] || elem;
	}

	return elem;
}

// Replace/restore the type attribute of script elements for safe DOM manipulation
function disableScript( elem ) {
	elem.type = ( elem.getAttribute( "type" ) !== null ) + "/" + elem.type;
	return elem;
}
function restoreScript( elem ) {
	if ( ( elem.type || "" ).slice( 0, 5 ) === "true/" ) {
		elem.type = elem.type.slice( 5 );
	} else {
		elem.removeAttribute( "type" );
	}

	return elem;
}

function cloneCopyEvent( src, dest ) {
	var i, l, type, pdataOld, udataOld, udataCur, events;

	if ( dest.nodeType !== 1 ) {
		return;
	}

	// 1. Copy private data: events, handlers, etc.
	if ( dataPriv.hasData( src ) ) {
		pdataOld = dataPriv.get( src );
		events = pdataOld.events;

		if ( events ) {
			dataPriv.remove( dest, "handle events" );

			for ( type in events ) {
				for ( i = 0, l = events[ type ].length; i < l; i++ ) {
					jQuery.event.add( dest, type, events[ type ][ i ] );
				}
			}
		}
	}

	// 2. Copy user data
	if ( dataUser.hasData( src ) ) {
		udataOld = dataUser.access( src );
		udataCur = jQuery.extend( {}, udataOld );

		dataUser.set( dest, udataCur );
	}
}

// Fix IE bugs, see support tests
function fixInput( src, dest ) {
	var nodeName = dest.nodeName.toLowerCase();

	// Fails to persist the checked state of a cloned checkbox or radio button.
	if ( nodeName === "input" && rcheckableType.test( src.type ) ) {
		dest.checked = src.checked;

	// Fails to return the selected option to the default selected state when cloning options
	} else if ( nodeName === "input" || nodeName === "textarea" ) {
		dest.defaultValue = src.defaultValue;
	}
}

function domManip( collection, args, callback, ignored ) {

	// Flatten any nested arrays
	args = flat( args );

	var fragment, first, scripts, hasScripts, node, doc,
		i = 0,
		l = collection.length,
		iNoClone = l - 1,
		value = args[ 0 ],
		valueIsFunction = isFunction( value );

	// We can't cloneNode fragments that contain checked, in WebKit
	if ( valueIsFunction ||
			( l > 1 && typeof value === "string" &&
				!support.checkClone && rchecked.test( value ) ) ) {
		return collection.each( function( index ) {
			var self = collection.eq( index );
			if ( valueIsFunction ) {
				args[ 0 ] = value.call( this, index, self.html() );
			}
			domManip( self, args, callback, ignored );
		} );
	}

	if ( l ) {
		fragment = buildFragment( args, collection[ 0 ].ownerDocument, false, collection, ignored );
		first = fragment.firstChild;

		if ( fragment.childNodes.length === 1 ) {
			fragment = first;
		}

		// Require either new content or an interest in ignored elements to invoke the callback
		if ( first || ignored ) {
			scripts = jQuery.map( getAll( fragment, "script" ), disableScript );
			hasScripts = scripts.length;

			// Use the original fragment for the last item
			// instead of the first because it can end up
			// being emptied incorrectly in certain situations (trac-8070).
			for ( ; i < l; i++ ) {
				node = fragment;

				if ( i !== iNoClone ) {
					node = jQuery.clone( node, true, true );

					// Keep references to cloned scripts for later restoration
					if ( hasScripts ) {

						// Support: Android <=4.0 only, PhantomJS 1 only
						// push.apply(_, arraylike) throws on ancient WebKit
						jQuery.merge( scripts, getAll( node, "script" ) );
					}
				}

				callback.call( collection[ i ], node, i );
			}

			if ( hasScripts ) {
				doc = scripts[ scripts.length - 1 ].ownerDocument;

				// Reenable scripts
				jQuery.map( scripts, restoreScript );

				// Evaluate executable scripts on first document insertion
				for ( i = 0; i < hasScripts; i++ ) {
					node = scripts[ i ];
					if ( rscriptType.test( node.type || "" ) &&
						!dataPriv.access( node, "globalEval" ) &&
						jQuery.contains( doc, node ) ) {

						if ( node.src && ( node.type || "" ).toLowerCase()  !== "module" ) {

							// Optional AJAX dependency, but won't run scripts if not present
							if ( jQuery._evalUrl && !node.noModule ) {
								jQuery._evalUrl( node.src, {
									nonce: node.nonce || node.getAttribute( "nonce" )
								}, doc );
							}
						} else {

							// Unwrap a CDATA section containing script contents. This shouldn't be
							// needed as in XML documents they're already not visible when
							// inspecting element contents and in HTML documents they have no
							// meaning but we're preserving that logic for backwards compatibility.
							// This will be removed completely in 4.0. See gh-4904.
							DOMEval( node.textContent.replace( rcleanScript, "" ), node, doc );
						}
					}
				}
			}
		}
	}

	return collection;
}

function remove( elem, selector, keepData ) {
	var node,
		nodes = selector ? jQuery.filter( selector, elem ) : elem,
		i = 0;

	for ( ; ( node = nodes[ i ] ) != null; i++ ) {
		if ( !keepData && node.nodeType === 1 ) {
			jQuery.cleanData( getAll( node ) );
		}

		if ( node.parentNode ) {
			if ( keepData && isAttached( node ) ) {
				setGlobalEval( getAll( node, "script" ) );
			}
			node.parentNode.removeChild( node );
		}
	}

	return elem;
}

jQuery.extend( {
	htmlPrefilter: function( html ) {
		return html;
	},

	clone: function( elem, dataAndEvents, deepDataAndEvents ) {
		var i, l, srcElements, destElements,
			clone = elem.cloneNode( true ),
			inPage = isAttached( elem );

		// Fix IE cloning issues
		if ( !support.noCloneChecked && ( elem.nodeType === 1 || elem.nodeType === 11 ) &&
				!jQuery.isXMLDoc( elem ) ) {

			// We eschew Sizzle here for performance reasons: https://jsperf.com/getall-vs-sizzle/2
			destElements = getAll( clone );
			srcElements = getAll( elem );

			for ( i = 0, l = srcElements.length; i < l; i++ ) {
				fixInput( srcElements[ i ], destElements[ i ] );
			}
		}

		// Copy the events from the original to the clone
		if ( dataAndEvents ) {
			if ( deepDataAndEvents ) {
				srcElements = srcElements || getAll( elem );
				destElements = destElements || getAll( clone );

				for ( i = 0, l = srcElements.length; i < l; i++ ) {
					cloneCopyEvent( srcElements[ i ], destElements[ i ] );
				}
			} else {
				cloneCopyEvent( elem, clone );
			}
		}

		// Preserve script evaluation history
		destElements = getAll( clone, "script" );
		if ( destElements.length > 0 ) {
			setGlobalEval( destElements, !inPage && getAll( elem, "script" ) );
		}

		// Return the cloned set
		return clone;
	},

	cleanData: function( elems ) {
		var data, elem, type,
			special = jQuery.event.special,
			i = 0;

		for ( ; ( elem = elems[ i ] ) !== undefined; i++ ) {
			if ( acceptData( elem ) ) {
				if ( ( data = elem[ dataPriv.expando ] ) ) {
					if ( data.events ) {
						for ( type in data.events ) {
							if ( special[ type ] ) {
								jQuery.event.remove( elem, type );

							// This is a shortcut to avoid jQuery.event.remove's overhead
							} else {
								jQuery.removeEvent( elem, type, data.handle );
							}
						}
					}

					// Support: Chrome <=35 - 45+
					// Assign undefined instead of using delete, see Data#remove
					elem[ dataPriv.expando ] = undefined;
				}
				if ( elem[ dataUser.expando ] ) {

					// Support: Chrome <=35 - 45+
					// Assign undefined instead of using delete, see Data#remove
					elem[ dataUser.expando ] = undefined;
				}
			}
		}
	}
} );

jQuery.fn.extend( {
	detach: function( selector ) {
		return remove( this, selector, true );
	},

	remove: function( selector ) {
		return remove( this, selector );
	},

	text: function( value ) {
		return access( this, function( value ) {
			return value === undefined ?
				jQuery.text( this ) :
				this.empty().each( function() {
					if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
						this.textContent = value;
					}
				} );
		}, null, value, arguments.length );
	},

	append: function() {
		return domManip( this, arguments, function( elem ) {
			if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
				var target = manipulationTarget( this, elem );
				target.appendChild( elem );
			}
		} );
	},

	prepend: function() {
		return domManip( this, arguments, function( elem ) {
			if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
				var target = manipulationTarget( this, elem );
				target.insertBefore( elem, target.firstChild );
			}
		} );
	},

	before: function() {
		return domManip( this, arguments, function( elem ) {
			if ( this.parentNode ) {
				this.parentNode.insertBefore( elem, this );
			}
		} );
	},

	after: function() {
		return domManip( this, arguments, function( elem ) {
			if ( this.parentNode ) {
				this.parentNode.insertBefore( elem, this.nextSibling );
			}
		} );
	},

	empty: function() {
		var elem,
			i = 0;

		for ( ; ( elem = this[ i ] ) != null; i++ ) {
			if ( elem.nodeType === 1 ) {

				// Prevent memory leaks
				jQuery.cleanData( getAll( elem, false ) );

				// Remove any remaining nodes
				elem.textContent = "";
			}
		}

		return this;
	},

	clone: function( dataAndEvents, deepDataAndEvents ) {
		dataAndEvents = dataAndEvents == null ? false : dataAndEvents;
		deepDataAndEvents = deepDataAndEvents == null ? dataAndEvents : deepDataAndEvents;

		return this.map( function() {
			return jQuery.clone( this, dataAndEvents, deepDataAndEvents );
		} );
	},

	html: function( value ) {
		return access( this, function( value ) {
			var elem = this[ 0 ] || {},
				i = 0,
				l = this.length;

			if ( value === undefined && elem.nodeType === 1 ) {
				return elem.innerHTML;
			}

			// See if we can take a shortcut and just use innerHTML
			if ( typeof value === "string" && !rnoInnerhtml.test( value ) &&
				!wrapMap[ ( rtagName.exec( value ) || [ "", "" ] )[ 1 ].toLowerCase() ] ) {

				value = jQuery.htmlPrefilter( value );

				try {
					for ( ; i < l; i++ ) {
						elem = this[ i ] || {};

						// Remove element nodes and prevent memory leaks
						if ( elem.nodeType === 1 ) {
							jQuery.cleanData( getAll( elem, false ) );
							elem.innerHTML = value;
						}
					}

					elem = 0;

				// If using innerHTML throws an exception, use the fallback method
				} catch ( e ) {}
			}

			if ( elem ) {
				this.empty().append( value );
			}
		}, null, value, arguments.length );
	},

	replaceWith: function() {
		var ignored = [];

		// Make the changes, replacing each non-ignored context element with the new content
		return domManip( this, arguments, function( elem ) {
			var parent = this.parentNode;

			if ( jQuery.inArray( this, ignored ) < 0 ) {
				jQuery.cleanData( getAll( this ) );
				if ( parent ) {
					parent.replaceChild( elem, this );
				}
			}

		// Force callback invocation
		}, ignored );
	}
} );

jQuery.each( {
	appendTo: "append",
	prependTo: "prepend",
	insertBefore: "before",
	insertAfter: "after",
	replaceAll: "replaceWith"
}, function( name, original ) {
	jQuery.fn[ name ] = function( selector ) {
		var elems,
			ret = [],
			insert = jQuery( selector ),
			last = insert.length - 1,
			i = 0;

		for ( ; i <= last; i++ ) {
			elems = i === last ? this : this.clone( true );
			jQuery( insert[ i ] )[ original ]( elems );

			// Support: Android <=4.0 only, PhantomJS 1 only
			// .get() because push.apply(_, arraylike) throws on ancient WebKit
			push.apply( ret, elems.get() );
		}

		return this.pushStack( ret );
	};
} );
var rnumnonpx = new RegExp( "^(" + pnum + ")(?!px)[a-z%]+$", "i" );

var rcustomProp = /^--/;


var getStyles = function( elem ) {

		// Support: IE <=11 only, Firefox <=30 (trac-15098, trac-14150)
		// IE throws on elements created in popups
		// FF meanwhile throws on frame elements through "defaultView.getComputedStyle"
		var view = elem.ownerDocument.defaultView;

		if ( !view || !view.opener ) {
			view = window;
		}

		return view.getComputedStyle( elem );
	};

var swap = function( elem, options, callback ) {
	var ret, name,
		old = {};

	// Remember the old values, and insert the new ones
	for ( name in options ) {
		old[ name ] = elem.style[ name ];
		elem.style[ name ] = options[ name ];
	}

	ret = callback.call( elem );

	// Revert the old values
	for ( name in options ) {
		elem.style[ name ] = old[ name ];
	}

	return ret;
};


var rboxStyle = new RegExp( cssExpand.join( "|" ), "i" );

var whitespace = "[\\x20\\t\\r\\n\\f]";


var rtrimCSS = new RegExp(
	"^" + whitespace + "+|((?:^|[^\\\\])(?:\\\\.)*)" + whitespace + "+$",
	"g"
);




( function() {

	// Executing both pixelPosition & boxSizingReliable tests require only one layout
	// so they're executed at the same time to save the second computation.
	function computeStyleTests() {

		// This is a singleton, we need to execute it only once
		if ( !div ) {
			return;
		}

		container.style.cssText = "position:absolute;left:-11111px;width:60px;" +
			"margin-top:1px;padding:0;border:0";
		div.style.cssText =
			"position:relative;display:block;box-sizing:border-box;overflow:scroll;" +
			"margin:auto;border:1px;padding:1px;" +
			"width:60%;top:1%";
		documentElement.appendChild( container ).appendChild( div );

		var divStyle = window.getComputedStyle( div );
		pixelPositionVal = divStyle.top !== "1%";

		// Support: Android 4.0 - 4.3 only, Firefox <=3 - 44
		reliableMarginLeftVal = roundPixelMeasures( divStyle.marginLeft ) === 12;

		// Support: Android 4.0 - 4.3 only, Safari <=9.1 - 10.1, iOS <=7.0 - 9.3
		// Some styles come back with percentage values, even though they shouldn't
		div.style.right = "60%";
		pixelBoxStylesVal = roundPixelMeasures( divStyle.right ) === 36;

		// Support: IE 9 - 11 only
		// Detect misreporting of content dimensions for box-sizing:border-box elements
		boxSizingReliableVal = roundPixelMeasures( divStyle.width ) === 36;

		// Support: IE 9 only
		// Detect overflow:scroll screwiness (gh-3699)
		// Support: Chrome <=64
		// Don't get tricked when zoom affects offsetWidth (gh-4029)
		div.style.position = "absolute";
		scrollboxSizeVal = roundPixelMeasures( div.offsetWidth / 3 ) === 12;

		documentElement.removeChild( container );

		// Nullify the div so it wouldn't be stored in the memory and
		// it will also be a sign that checks already performed
		div = null;
	}

	function roundPixelMeasures( measure ) {
		return Math.round( parseFloat( measure ) );
	}

	var pixelPositionVal, boxSizingReliableVal, scrollboxSizeVal, pixelBoxStylesVal,
		reliableTrDimensionsVal, reliableMarginLeftVal,
		container = document.createElement( "div" ),
		div = document.createElement( "div" );

	// Finish early in limited (non-browser) environments
	if ( !div.style ) {
		return;
	}

	// Support: IE <=9 - 11 only
	// Style of cloned element affects source element cloned (trac-8908)
	div.style.backgroundClip = "content-box";
	div.cloneNode( true ).style.backgroundClip = "";
	support.clearCloneStyle = div.style.backgroundClip === "content-box";

	jQuery.extend( support, {
		boxSizingReliable: function() {
			computeStyleTests();
			return boxSizingReliableVal;
		},
		pixelBoxStyles: function() {
			computeStyleTests();
			return pixelBoxStylesVal;
		},
		pixelPosition: function() {
			computeStyleTests();
			return pixelPositionVal;
		},
		reliableMarginLeft: function() {
			computeStyleTests();
			return reliableMarginLeftVal;
		},
		scrollboxSize: function() {
			computeStyleTests();
			return scrollboxSizeVal;
		},

		// Support: IE 9 - 11+, Edge 15 - 18+
		// IE/Edge misreport `getComputedStyle` of table rows with width/height
		// set in CSS while `offset*` properties report correct values.
		// Behavior in IE 9 is more subtle than in newer versions & it passes
		// some versions of this test; make sure not to make it pass there!
		//
		// Support: Firefox 70+
		// Only Firefox includes border widths
		// in computed dimensions. (gh-4529)
		reliableTrDimensions: function() {
			var table, tr, trChild, trStyle;
			if ( reliableTrDimensionsVal == null ) {
				table = document.createElement( "table" );
				tr = document.createElement( "tr" );
				trChild = document.createElement( "div" );

				table.style.cssText = "position:absolute;left:-11111px;border-collapse:separate";
				tr.style.cssText = "border:1px solid";

				// Support: Chrome 86+
				// Height set through cssText does not get applied.
				// Computed height then comes back as 0.
				tr.style.height = "1px";
				trChild.style.height = "9px";

				// Support: Android 8 Chrome 86+
				// In our bodyBackground.html iframe,
				// display for all div elements is set to "inline",
				// which causes a problem only in Android 8 Chrome 86.
				// Ensuring the div is display: block
				// gets around this issue.
				trChild.style.display = "block";

				documentElement
					.appendChild( table )
					.appendChild( tr )
					.appendChild( trChild );

				trStyle = window.getComputedStyle( tr );
				reliableTrDimensionsVal = ( parseInt( trStyle.height, 10 ) +
					parseInt( trStyle.borderTopWidth, 10 ) +
					parseInt( trStyle.borderBottomWidth, 10 ) ) === tr.offsetHeight;

				documentElement.removeChild( table );
			}
			return reliableTrDimensionsVal;
		}
	} );
} )();


function curCSS( elem, name, computed ) {
	var width, minWidth, maxWidth, ret,
		isCustomProp = rcustomProp.test( name ),

		// Support: Firefox 51+
		// Retrieving style before computed somehow
		// fixes an issue with getting wrong values
		// on detached elements
		style = elem.style;

	computed = computed || getStyles( elem );

	// getPropertyValue is needed for:
	//   .css('filter') (IE 9 only, trac-12537)
	//   .css('--customProperty) (gh-3144)
	if ( computed ) {
		ret = computed.getPropertyValue( name ) || computed[ name ];

		// trim whitespace for custom property (issue gh-4926)
		if ( isCustomProp ) {

			// rtrim treats U+000D CARRIAGE RETURN and U+000C FORM FEED
			// as whitespace while CSS does not, but this is not a problem
			// because CSS preprocessing replaces them with U+000A LINE FEED
			// (which *is* CSS whitespace)
			// https://www.w3.org/TR/css-syntax-3/#input-preprocessing
			ret = ret.replace( rtrimCSS, "$1" );
		}

		if ( ret === "" && !isAttached( elem ) ) {
			ret = jQuery.style( elem, name );
		}

		// A tribute to the "awesome hack by Dean Edwards"
		// Android Browser returns percentage for some values,
		// but width seems to be reliably pixels.
		// This is against the CSSOM draft spec:
		// https://drafts.csswg.org/cssom/#resolved-values
		if ( !support.pixelBoxStyles() && rnumnonpx.test( ret ) && rboxStyle.test( name ) ) {

			// Remember the original values
			width = style.width;
			minWidth = style.minWidth;
			maxWidth = style.maxWidth;

			// Put in the new values to get a computed value out
			style.minWidth = style.maxWidth = style.width = ret;
			ret = computed.width;

			// Revert the changed values
			style.width = width;
			style.minWidth = minWidth;
			style.maxWidth = maxWidth;
		}
	}

	return ret !== undefined ?

		// Support: IE <=9 - 11 only
		// IE returns zIndex value as an integer.
		ret + "" :
		ret;
}


function addGetHookIf( conditionFn, hookFn ) {

	// Define the hook, we'll check on the first run if it's really needed.
	return {
		get: function() {
			if ( conditionFn() ) {

				// Hook not needed (or it's not possible to use it due
				// to missing dependency), remove it.
				delete this.get;
				return;
			}

			// Hook needed; redefine it so that the support test is not executed again.
			return ( this.get = hookFn ).apply( this, arguments );
		}
	};
}


var cssPrefixes = [ "Webkit", "Moz", "ms" ],
	emptyStyle = document.createElement( "div" ).style,
	vendorProps = {};

// Return a vendor-prefixed property or undefined
function vendorPropName( name ) {

	// Check for vendor prefixed names
	var capName = name[ 0 ].toUpperCase() + name.slice( 1 ),
		i = cssPrefixes.length;

	while ( i-- ) {
		name = cssPrefixes[ i ] + capName;
		if ( name in emptyStyle ) {
			return name;
		}
	}
}

// Return a potentially-mapped jQuery.cssProps or vendor prefixed property
function finalPropName( name ) {
	var final = jQuery.cssProps[ name ] || vendorProps[ name ];

	if ( final ) {
		return final;
	}
	if ( name in emptyStyle ) {
		return name;
	}
	return vendorProps[ name ] = vendorPropName( name ) || name;
}


var

	// Swappable if display is none or starts with table
	// except "table", "table-cell", or "table-caption"
	// See here for display values: https://developer.mozilla.org/en-US/docs/CSS/display
	rdisplayswap = /^(none|table(?!-c[ea]).+)/,
	cssShow = { position: "absolute", visibility: "hidden", display: "block" },
	cssNormalTransform = {
		letterSpacing: "0",
		fontWeight: "400"
	};

function setPositiveNumber( _elem, value, subtract ) {

	// Any relative (+/-) values have already been
	// normalized at this point
	var matches = rcssNum.exec( value );
	return matches ?

		// Guard against undefined "subtract", e.g., when used as in cssHooks
		Math.max( 0, matches[ 2 ] - ( subtract || 0 ) ) + ( matches[ 3 ] || "px" ) :
		value;
}

function boxModelAdjustment( elem, dimension, box, isBorderBox, styles, computedVal ) {
	var i = dimension === "width" ? 1 : 0,
		extra = 0,
		delta = 0;

	// Adjustment may not be necessary
	if ( box === ( isBorderBox ? "border" : "content" ) ) {
		return 0;
	}

	for ( ; i < 4; i += 2 ) {

		// Both box models exclude margin
		if ( box === "margin" ) {
			delta += jQuery.css( elem, box + cssExpand[ i ], true, styles );
		}

		// If we get here with a content-box, we're seeking "padding" or "border" or "margin"
		if ( !isBorderBox ) {

			// Add padding
			delta += jQuery.css( elem, "padding" + cssExpand[ i ], true, styles );

			// For "border" or "margin", add border
			if ( box !== "padding" ) {
				delta += jQuery.css( elem, "border" + cssExpand[ i ] + "Width", true, styles );

			// But still keep track of it otherwise
			} else {
				extra += jQuery.css( elem, "border" + cssExpand[ i ] + "Width", true, styles );
			}

		// If we get here with a border-box (content + padding + border), we're seeking "content" or
		// "padding" or "margin"
		} else {

			// For "content", subtract padding
			if ( box === "content" ) {
				delta -= jQuery.css( elem, "padding" + cssExpand[ i ], true, styles );
			}

			// For "content" or "padding", subtract border
			if ( box !== "margin" ) {
				delta -= jQuery.css( elem, "border" + cssExpand[ i ] + "Width", true, styles );
			}
		}
	}

	// Account for positive content-box scroll gutter when requested by providing computedVal
	if ( !isBorderBox && computedVal >= 0 ) {

		// offsetWidth/offsetHeight is a rounded sum of content, padding, scroll gutter, and border
		// Assuming integer scroll gutter, subtract the rest and round down
		delta += Math.max( 0, Math.ceil(
			elem[ "offset" + dimension[ 0 ].toUpperCase() + dimension.slice( 1 ) ] -
			computedVal -
			delta -
			extra -
			0.5

		// If offsetWidth/offsetHeight is unknown, then we can't determine content-box scroll gutter
		// Use an explicit zero to avoid NaN (gh-3964)
		) ) || 0;
	}

	return delta;
}

function getWidthOrHeight( elem, dimension, extra ) {

	// Start with computed style
	var styles = getStyles( elem ),

		// To avoid forcing a reflow, only fetch boxSizing if we need it (gh-4322).
		// Fake content-box until we know it's needed to know the true value.
		boxSizingNeeded = !support.boxSizingReliable() || extra,
		isBorderBox = boxSizingNeeded &&
			jQuery.css( elem, "boxSizing", false, styles ) === "border-box",
		valueIsBorderBox = isBorderBox,

		val = curCSS( elem, dimension, styles ),
		offsetProp = "offset" + dimension[ 0 ].toUpperCase() + dimension.slice( 1 );

	// Support: Firefox <=54
	// Return a confounding non-pixel value or feign ignorance, as appropriate.
	if ( rnumnonpx.test( val ) ) {
		if ( !extra ) {
			return val;
		}
		val = "auto";
	}


	// Support: IE 9 - 11 only
	// Use offsetWidth/offsetHeight for when box sizing is unreliable.
	// In those cases, the computed value can be trusted to be border-box.
	if ( ( !support.boxSizingReliable() && isBorderBox ||

		// Support: IE 10 - 11+, Edge 15 - 18+
		// IE/Edge misreport `getComputedStyle` of table rows with width/height
		// set in CSS while `offset*` properties report correct values.
		// Interestingly, in some cases IE 9 doesn't suffer from this issue.
		!support.reliableTrDimensions() && nodeName( elem, "tr" ) ||

		// Fall back to offsetWidth/offsetHeight when value is "auto"
		// This happens for inline elements with no explicit setting (gh-3571)
		val === "auto" ||

		// Support: Android <=4.1 - 4.3 only
		// Also use offsetWidth/offsetHeight for misreported inline dimensions (gh-3602)
		!parseFloat( val ) && jQuery.css( elem, "display", false, styles ) === "inline" ) &&

		// Make sure the element is visible & connected
		elem.getClientRects().length ) {

		isBorderBox = jQuery.css( elem, "boxSizing", false, styles ) === "border-box";

		// Where available, offsetWidth/offsetHeight approximate border box dimensions.
		// Where not available (e.g., SVG), assume unreliable box-sizing and interpret the
		// retrieved value as a content box dimension.
		valueIsBorderBox = offsetProp in elem;
		if ( valueIsBorderBox ) {
			val = elem[ offsetProp ];
		}
	}

	// Normalize "" and auto
	val = parseFloat( val ) || 0;

	// Adjust for the element's box model
	return ( val +
		boxModelAdjustment(
			elem,
			dimension,
			extra || ( isBorderBox ? "border" : "content" ),
			valueIsBorderBox,
			styles,

			// Provide the current computed size to request scroll gutter calculation (gh-3589)
			val
		)
	) + "px";
}

jQuery.extend( {

	// Add in style property hooks for overriding the default
	// behavior of getting and setting a style property
	cssHooks: {
		opacity: {
			get: function( elem, computed ) {
				if ( computed ) {

					// We should always get a number back from opacity
					var ret = curCSS( elem, "opacity" );
					return ret === "" ? "1" : ret;
				}
			}
		}
	},

	// Don't automatically add "px" to these possibly-unitless properties
	cssNumber: {
		"animationIterationCount": true,
		"columnCount": true,
		"fillOpacity": true,
		"flexGrow": true,
		"flexShrink": true,
		"fontWeight": true,
		"gridArea": true,
		"gridColumn": true,
		"gridColumnEnd": true,
		"gridColumnStart": true,
		"gridRow": true,
		"gridRowEnd": true,
		"gridRowStart": true,
		"lineHeight": true,
		"opacity": true,
		"order": true,
		"orphans": true,
		"widows": true,
		"zIndex": true,
		"zoom": true
	},

	// Add in properties whose names you wish to fix before
	// setting or getting the value
	cssProps: {},

	// Get and set the style property on a DOM Node
	style: function( elem, name, value, extra ) {

		// Don't set styles on text and comment nodes
		if ( !elem || elem.nodeType === 3 || elem.nodeType === 8 || !elem.style ) {
			return;
		}

		// Make sure that we're working with the right name
		var ret, type, hooks,
			origName = camelCase( name ),
			isCustomProp = rcustomProp.test( name ),
			style = elem.style;

		// Make sure that we're working with the right name. We don't
		// want to query the value if it is a CSS custom property
		// since they are user-defined.
		if ( !isCustomProp ) {
			name = finalPropName( origName );
		}

		// Gets hook for the prefixed version, then unprefixed version
		hooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];

		// Check if we're setting a value
		if ( value !== undefined ) {
			type = typeof value;

			// Convert "+=" or "-=" to relative numbers (trac-7345)
			if ( type === "string" && ( ret = rcssNum.exec( value ) ) && ret[ 1 ] ) {
				value = adjustCSS( elem, name, ret );

				// Fixes bug trac-9237
				type = "number";
			}

			// Make sure that null and NaN values aren't set (trac-7116)
			if ( value == null || value !== value ) {
				return;
			}

			// If a number was passed in, add the unit (except for certain CSS properties)
			// The isCustomProp check can be removed in jQuery 4.0 when we only auto-append
			// "px" to a few hardcoded values.
			if ( type === "number" && !isCustomProp ) {
				value += ret && ret[ 3 ] || ( jQuery.cssNumber[ origName ] ? "" : "px" );
			}

			// background-* props affect original clone's values
			if ( !support.clearCloneStyle && value === "" && name.indexOf( "background" ) === 0 ) {
				style[ name ] = "inherit";
			}

			// If a hook was provided, use that value, otherwise just set the specified value
			if ( !hooks || !( "set" in hooks ) ||
				( value = hooks.set( elem, value, extra ) ) !== undefined ) {

				if ( isCustomProp ) {
					style.setProperty( name, value );
				} else {
					style[ name ] = value;
				}
			}

		} else {

			// If a hook was provided get the non-computed value from there
			if ( hooks && "get" in hooks &&
				( ret = hooks.get( elem, false, extra ) ) !== undefined ) {

				return ret;
			}

			// Otherwise just get the value from the style object
			return style[ name ];
		}
	},

	css: function( elem, name, extra, styles ) {
		var val, num, hooks,
			origName = camelCase( name ),
			isCustomProp = rcustomProp.test( name );

		// Make sure that we're working with the right name. We don't
		// want to modify the value if it is a CSS custom property
		// since they are user-defined.
		if ( !isCustomProp ) {
			name = finalPropName( origName );
		}

		// Try prefixed name followed by the unprefixed name
		hooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];

		// If a hook was provided get the computed value from there
		if ( hooks && "get" in hooks ) {
			val = hooks.get( elem, true, extra );
		}

		// Otherwise, if a way to get the computed value exists, use that
		if ( val === undefined ) {
			val = curCSS( elem, name, styles );
		}

		// Convert "normal" to computed value
		if ( val === "normal" && name in cssNormalTransform ) {
			val = cssNormalTransform[ name ];
		}

		// Make numeric if forced or a qualifier was provided and val looks numeric
		if ( extra === "" || extra ) {
			num = parseFloat( val );
			return extra === true || isFinite( num ) ? num || 0 : val;
		}

		return val;
	}
} );

jQuery.each( [ "height", "width" ], function( _i, dimension ) {
	jQuery.cssHooks[ dimension ] = {
		get: function( elem, computed, extra ) {
			if ( computed ) {

				// Certain elements can have dimension info if we invisibly show them
				// but it must have a current display style that would benefit
				return rdisplayswap.test( jQuery.css( elem, "display" ) ) &&

					// Support: Safari 8+
					// Table columns in Safari have non-zero offsetWidth & zero
					// getBoundingClientRect().width unless display is changed.
					// Support: IE <=11 only
					// Running getBoundingClientRect on a disconnected node
					// in IE throws an error.
					( !elem.getClientRects().length || !elem.getBoundingClientRect().width ) ?
					swap( elem, cssShow, function() {
						return getWidthOrHeight( elem, dimension, extra );
					} ) :
					getWidthOrHeight( elem, dimension, extra );
			}
		},

		set: function( elem, value, extra ) {
			var matches,
				styles = getStyles( elem ),

				// Only read styles.position if the test has a chance to fail
				// to avoid forcing a reflow.
				scrollboxSizeBuggy = !support.scrollboxSize() &&
					styles.position === "absolute",

				// To avoid forcing a reflow, only fetch boxSizing if we need it (gh-3991)
				boxSizingNeeded = scrollboxSizeBuggy || extra,
				isBorderBox = boxSizingNeeded &&
					jQuery.css( elem, "boxSizing", false, styles ) === "border-box",
				subtract = extra ?
					boxModelAdjustment(
						elem,
						dimension,
						extra,
						isBorderBox,
						styles
					) :
					0;

			// Account for unreliable border-box dimensions by comparing offset* to computed and
			// faking a content-box to get border and padding (gh-3699)
			if ( isBorderBox && scrollboxSizeBuggy ) {
				subtract -= Math.ceil(
					elem[ "offset" + dimension[ 0 ].toUpperCase() + dimension.slice( 1 ) ] -
					parseFloat( styles[ dimension ] ) -
					boxModelAdjustment( elem, dimension, "border", false, styles ) -
					0.5
				);
			}

			// Convert to pixels if value adjustment is needed
			if ( subtract && ( matches = rcssNum.exec( value ) ) &&
				( matches[ 3 ] || "px" ) !== "px" ) {

				elem.style[ dimension ] = value;
				value = jQuery.css( elem, dimension );
			}

			return setPositiveNumber( elem, value, subtract );
		}
	};
} );

jQuery.cssHooks.marginLeft = addGetHookIf( support.reliableMarginLeft,
	function( elem, computed ) {
		if ( computed ) {
			return ( parseFloat( curCSS( elem, "marginLeft" ) ) ||
				elem.getBoundingClientRect().left -
					swap( elem, { marginLeft: 0 }, function() {
						return elem.getBoundingClientRect().left;
					} )
			) + "px";
		}
	}
);

// These hooks are used by animate to expand properties
jQuery.each( {
	margin: "",
	padding: "",
	border: "Width"
}, function( prefix, suffix ) {
	jQuery.cssHooks[ prefix + suffix ] = {
		expand: function( value ) {
			var i = 0,
				expanded = {},

				// Assumes a single number if not a string
				parts = typeof value === "string" ? value.split( " " ) : [ value ];

			for ( ; i < 4; i++ ) {
				expanded[ prefix + cssExpand[ i ] + suffix ] =
					parts[ i ] || parts[ i - 2 ] || parts[ 0 ];
			}

			return expanded;
		}
	};

	if ( prefix !== "margin" ) {
		jQuery.cssHooks[ prefix + suffix ].set = setPositiveNumber;
	}
} );

jQuery.fn.extend( {
	css: function( name, value ) {
		return access( this, function( elem, name, value ) {
			var styles, len,
				map = {},
				i = 0;

			if ( Array.isArray( name ) ) {
				styles = getStyles( elem );
				len = name.length;

				for ( ; i < len; i++ ) {
					map[ name[ i ] ] = jQuery.css( elem, name[ i ], false, styles );
				}

				return map;
			}

			return value !== undefined ?
				jQuery.style( elem, name, value ) :
				jQuery.css( elem, name );
		}, name, value, arguments.length > 1 );
	}
} );


function Tween( elem, options, prop, end, easing ) {
	return new Tween.prototype.init( elem, options, prop, end, easing );
}
jQuery.Tween = Tween;

Tween.prototype = {
	constructor: Tween,
	init: function( elem, options, prop, end, easing, unit ) {
		this.elem = elem;
		this.prop = prop;
		this.easing = easing || jQuery.easing._default;
		this.options = options;
		this.start = this.now = this.cur();
		this.end = end;
		this.unit = unit || ( jQuery.cssNumber[ prop ] ? "" : "px" );
	},
	cur: function() {
		var hooks = Tween.propHooks[ this.prop ];

		return hooks && hooks.get ?
			hooks.get( this ) :
			Tween.propHooks._default.get( this );
	},
	run: function( percent ) {
		var eased,
			hooks = Tween.propHooks[ this.prop ];

		if ( this.options.duration ) {
			this.pos = eased = jQuery.easing[ this.easing ](
				percent, this.options.duration * percent, 0, 1, this.options.duration
			);
		} else {
			this.pos = eased = percent;
		}
		this.now = ( this.end - this.start ) * eased + this.start;

		if ( this.options.step ) {
			this.options.step.call( this.elem, this.now, this );
		}

		if ( hooks && hooks.set ) {
			hooks.set( this );
		} else {
			Tween.propHooks._default.set( this );
		}
		return this;
	}
};

Tween.prototype.init.prototype = Tween.prototype;

Tween.propHooks = {
	_default: {
		get: function( tween ) {
			var result;

			// Use a property on the element directly when it is not a DOM element,
			// or when there is no matching style property that exists.
			if ( tween.elem.nodeType !== 1 ||
				tween.elem[ tween.prop ] != null && tween.elem.style[ tween.prop ] == null ) {
				return tween.elem[ tween.prop ];
			}

			// Passing an empty string as a 3rd parameter to .css will automatically
			// attempt a parseFloat and fallback to a string if the parse fails.
			// Simple values such as "10px" are parsed to Float;
			// complex values such as "rotate(1rad)" are returned as-is.
			result = jQuery.css( tween.elem, tween.prop, "" );

			// Empty strings, null, undefined and "auto" are converted to 0.
			return !result || result === "auto" ? 0 : result;
		},
		set: function( tween ) {

			// Use step hook for back compat.
			// Use cssHook if its there.
			// Use .style if available and use plain properties where available.
			if ( jQuery.fx.step[ tween.prop ] ) {
				jQuery.fx.step[ tween.prop ]( tween );
			} else if ( tween.elem.nodeType === 1 && (
				jQuery.cssHooks[ tween.prop ] ||
					tween.elem.style[ finalPropName( tween.prop ) ] != null ) ) {
				jQuery.style( tween.elem, tween.prop, tween.now + tween.unit );
			} else {
				tween.elem[ tween.prop ] = tween.now;
			}
		}
	}
};

// Support: IE <=9 only
// Panic based approach to setting things on disconnected nodes
Tween.propHooks.scrollTop = Tween.propHooks.scrollLeft = {
	set: function( tween ) {
		if ( tween.elem.nodeType && tween.elem.parentNode ) {
			tween.elem[ tween.prop ] = tween.now;
		}
	}
};

jQuery.easing = {
	linear: function( p ) {
		return p;
	},
	swing: function( p ) {
		return 0.5 - Math.cos( p * Math.PI ) / 2;
	},
	_default: "swing"
};

jQuery.fx = Tween.prototype.init;

// Back compat <1.8 extension point
jQuery.fx.step = {};




var
	fxNow, inProgress,
	rfxtypes = /^(?:toggle|show|hide)$/,
	rrun = /queueHooks$/;

function schedule() {
	if ( inProgress ) {
		if ( document.hidden === false && window.requestAnimationFrame ) {
			window.requestAnimationFrame( schedule );
		} else {
			window.setTimeout( schedule, jQuery.fx.interval );
		}

		jQuery.fx.tick();
	}
}

// Animations created synchronously will run synchronously
function createFxNow() {
	window.setTimeout( function() {
		fxNow = undefined;
	} );
	return ( fxNow = Date.now() );
}

// Generate parameters to create a standard animation
function genFx( type, includeWidth ) {
	var which,
		i = 0,
		attrs = { height: type };

	// If we include width, step value is 1 to do all cssExpand values,
	// otherwise step value is 2 to skip over Left and Right
	includeWidth = includeWidth ? 1 : 0;
	for ( ; i < 4; i += 2 - includeWidth ) {
		which = cssExpand[ i ];
		attrs[ "margin" + which ] = attrs[ "padding" + which ] = type;
	}

	if ( includeWidth ) {
		attrs.opacity = attrs.width = type;
	}

	return attrs;
}

function createTween( value, prop, animation ) {
	var tween,
		collection = ( Animation.tweeners[ prop ] || [] ).concat( Animation.tweeners[ "*" ] ),
		index = 0,
		length = collection.length;
	for ( ; index < length; index++ ) {
		if ( ( tween = collection[ index ].call( animation, prop, value ) ) ) {

			// We're done with this property
			return tween;
		}
	}
}

function defaultPrefilter( elem, props, opts ) {
	var prop, value, toggle, hooks, oldfire, propTween, restoreDisplay, display,
		isBox = "width" in props || "height" in props,
		anim = this,
		orig = {},
		style = elem.style,
		hidden = elem.nodeType && isHiddenWithinTree( elem ),
		dataShow = dataPriv.get( elem, "fxshow" );

	// Queue-skipping animations hijack the fx hooks
	if ( !opts.queue ) {
		hooks = jQuery._queueHooks( elem, "fx" );
		if ( hooks.unqueued == null ) {
			hooks.unqueued = 0;
			oldfire = hooks.empty.fire;
			hooks.empty.fire = function() {
				if ( !hooks.unqueued ) {
					oldfire();
				}
			};
		}
		hooks.unqueued++;

		anim.always( function() {

			// Ensure the complete handler is called before this completes
			anim.always( function() {
				hooks.unqueued--;
				if ( !jQuery.queue( elem, "fx" ).length ) {
					hooks.empty.fire();
				}
			} );
		} );
	}

	// Detect show/hide animations
	for ( prop in props ) {
		value = props[ prop ];
		if ( rfxtypes.test( value ) ) {
			delete props[ prop ];
			toggle = toggle || value === "toggle";
			if ( value === ( hidden ? "hide" : "show" ) ) {

				// Pretend to be hidden if this is a "show" and
				// there is still data from a stopped show/hide
				if ( value === "show" && dataShow && dataShow[ prop ] !== undefined ) {
					hidden = true;

				// Ignore all other no-op show/hide data
				} else {
					continue;
				}
			}
			orig[ prop ] = dataShow && dataShow[ prop ] || jQuery.style( elem, prop );
		}
	}

	// Bail out if this is a no-op like .hide().hide()
	propTween = !jQuery.isEmptyObject( props );
	if ( !propTween && jQuery.isEmptyObject( orig ) ) {
		return;
	}

	// Restrict "overflow" and "display" styles during box animations
	if ( isBox && elem.nodeType === 1 ) {

		// Support: IE <=9 - 11, Edge 12 - 15
		// Record all 3 overflow attributes because IE does not infer the shorthand
		// from identically-valued overflowX and overflowY and Edge just mirrors
		// the overflowX value there.
		opts.overflow = [ style.overflow, style.overflowX, style.overflowY ];

		// Identify a display type, preferring old show/hide data over the CSS cascade
		restoreDisplay = dataShow && dataShow.display;
		if ( restoreDisplay == null ) {
			restoreDisplay = dataPriv.get( elem, "display" );
		}
		display = jQuery.css( elem, "display" );
		if ( display === "none" ) {
			if ( restoreDisplay ) {
				display = restoreDisplay;
			} else {

				// Get nonempty value(s) by temporarily forcing visibility
				showHide( [ elem ], true );
				restoreDisplay = elem.style.display || restoreDisplay;
				display = jQuery.css( elem, "display" );
				showHide( [ elem ] );
			}
		}

		// Animate inline elements as inline-block
		if ( display === "inline" || display === "inline-block" && restoreDisplay != null ) {
			if ( jQuery.css( elem, "float" ) === "none" ) {

				// Restore the original display value at the end of pure show/hide animations
				if ( !propTween ) {
					anim.done( function() {
						style.display = restoreDisplay;
					} );
					if ( restoreDisplay == null ) {
						display = style.display;
						restoreDisplay = display === "none" ? "" : display;
					}
				}
				style.display = "inline-block";
			}
		}
	}

	if ( opts.overflow ) {
		style.overflow = "hidden";
		anim.always( function() {
			style.overflow = opts.overflow[ 0 ];
			style.overflowX = opts.overflow[ 1 ];
			style.overflowY = opts.overflow[ 2 ];
		} );
	}

	// Implement show/hide animations
	propTween = false;
	for ( prop in orig ) {

		// General show/hide setup for this element animation
		if ( !propTween ) {
			if ( dataShow ) {
				if ( "hidden" in dataShow ) {
					hidden = dataShow.hidden;
				}
			} else {
				dataShow = dataPriv.access( elem, "fxshow", { display: restoreDisplay } );
			}

			// Store hidden/visible for toggle so `.stop().toggle()` "reverses"
			if ( toggle ) {
				dataShow.hidden = !hidden;
			}

			// Show elements before animating them
			if ( hidden ) {
				showHide( [ elem ], true );
			}

			/* eslint-disable no-loop-func */

			anim.done( function() {

				/* eslint-enable no-loop-func */

				// The final step of a "hide" animation is actually hiding the element
				if ( !hidden ) {
					showHide( [ elem ] );
				}
				dataPriv.remove( elem, "fxshow" );
				for ( prop in orig ) {
					jQuery.style( elem, prop, orig[ prop ] );
				}
			} );
		}

		// Per-property setup
		propTween = createTween( hidden ? dataShow[ prop ] : 0, prop, anim );
		if ( !( prop in dataShow ) ) {
			dataShow[ prop ] = propTween.start;
			if ( hidden ) {
				propTween.end = propTween.start;
				propTween.start = 0;
			}
		}
	}
}

function propFilter( props, specialEasing ) {
	var index, name, easing, value, hooks;

	// camelCase, specialEasing and expand cssHook pass
	for ( index in props ) {
		name = camelCase( index );
		easing = specialEasing[ name ];
		value = props[ index ];
		if ( Array.isArray( value ) ) {
			easing = value[ 1 ];
			value = props[ index ] = value[ 0 ];
		}

		if ( index !== name ) {
			props[ name ] = value;
			delete props[ index ];
		}

		hooks = jQuery.cssHooks[ name ];
		if ( hooks && "expand" in hooks ) {
			value = hooks.expand( value );
			delete props[ name ];

			// Not quite $.extend, this won't overwrite existing keys.
			// Reusing 'index' because we have the correct "name"
			for ( index in value ) {
				if ( !( index in props ) ) {
					props[ index ] = value[ index ];
					specialEasing[ index ] = easing;
				}
			}
		} else {
			specialEasing[ name ] = easing;
		}
	}
}

function Animation( elem, properties, options ) {
	var result,
		stopped,
		index = 0,
		length = Animation.prefilters.length,
		deferred = jQuery.Deferred().always( function() {

			// Don't match elem in the :animated selector
			delete tick.elem;
		} ),
		tick = function() {
			if ( stopped ) {
				return false;
			}
			var currentTime = fxNow || createFxNow(),
				remaining = Math.max( 0, animation.startTime + animation.duration - currentTime ),

				// Support: Android 2.3 only
				// Archaic crash bug won't allow us to use `1 - ( 0.5 || 0 )` (trac-12497)
				temp = remaining / animation.duration || 0,
				percent = 1 - temp,
				index = 0,
				length = animation.tweens.length;

			for ( ; index < length; index++ ) {
				animation.tweens[ index ].run( percent );
			}

			deferred.notifyWith( elem, [ animation, percent, remaining ] );

			// If there's more to do, yield
			if ( percent < 1 && length ) {
				return remaining;
			}

			// If this was an empty animation, synthesize a final progress notification
			if ( !length ) {
				deferred.notifyWith( elem, [ animation, 1, 0 ] );
			}

			// Resolve the animation and report its conclusion
			deferred.resolveWith( elem, [ animation ] );
			return false;
		},
		animation = deferred.promise( {
			elem: elem,
			props: jQuery.extend( {}, properties ),
			opts: jQuery.extend( true, {
				specialEasing: {},
				easing: jQuery.easing._default
			}, options ),
			originalProperties: properties,
			originalOptions: options,
			startTime: fxNow || createFxNow(),
			duration: options.duration,
			tweens: [],
			createTween: function( prop, end ) {
				var tween = jQuery.Tween( elem, animation.opts, prop, end,
					animation.opts.specialEasing[ prop ] || animation.opts.easing );
				animation.tweens.push( tween );
				return tween;
			},
			stop: function( gotoEnd ) {
				var index = 0,

					// If we are going to the end, we want to run all the tweens
					// otherwise we skip this part
					length = gotoEnd ? animation.tweens.length : 0;
				if ( stopped ) {
					return this;
				}
				stopped = true;
				for ( ; index < length; index++ ) {
					animation.tweens[ index ].run( 1 );
				}

				// Resolve when we played the last frame; otherwise, reject
				if ( gotoEnd ) {
					deferred.notifyWith( elem, [ animation, 1, 0 ] );
					deferred.resolveWith( elem, [ animation, gotoEnd ] );
				} else {
					deferred.rejectWith( elem, [ animation, gotoEnd ] );
				}
				return this;
			}
		} ),
		props = animation.props;

	propFilter( props, animation.opts.specialEasing );

	for ( ; index < length; index++ ) {
		result = Animation.prefilters[ index ].call( animation, elem, props, animation.opts );
		if ( result ) {
			if ( isFunction( result.stop ) ) {
				jQuery._queueHooks( animation.elem, animation.opts.queue ).stop =
					result.stop.bind( result );
			}
			return result;
		}
	}

	jQuery.map( props, createTween, animation );

	if ( isFunction( animation.opts.start ) ) {
		animation.opts.start.call( elem, animation );
	}

	// Attach callbacks from options
	animation
		.progress( animation.opts.progress )
		.done( animation.opts.done, animation.opts.complete )
		.fail( animation.opts.fail )
		.always( animation.opts.always );

	jQuery.fx.timer(
		jQuery.extend( tick, {
			elem: elem,
			anim: animation,
			queue: animation.opts.queue
		} )
	);

	return animation;
}

jQuery.Animation = jQuery.extend( Animation, {

	tweeners: {
		"*": [ function( prop, value ) {
			var tween = this.createTween( prop, value );
			adjustCSS( tween.elem, prop, rcssNum.exec( value ), tween );
			return tween;
		} ]
	},

	tweener: function( props, callback ) {
		if ( isFunction( props ) ) {
			callback = props;
			props = [ "*" ];
		} else {
			props = props.match( rnothtmlwhite );
		}

		var prop,
			index = 0,
			length = props.length;

		for ( ; index < length; index++ ) {
			prop = props[ index ];
			Animation.tweeners[ prop ] = Animation.tweeners[ prop ] || [];
			Animation.tweeners[ prop ].unshift( callback );
		}
	},

	prefilters: [ defaultPrefilter ],

	prefilter: function( callback, prepend ) {
		if ( prepend ) {
			Animation.prefilters.unshift( callback );
		} else {
			Animation.prefilters.push( callback );
		}
	}
} );

jQuery.speed = function( speed, easing, fn ) {
	var opt = speed && typeof speed === "object" ? jQuery.extend( {}, speed ) : {
		complete: fn || !fn && easing ||
			isFunction( speed ) && speed,
		duration: speed,
		easing: fn && easing || easing && !isFunction( easing ) && easing
	};

	// Go to the end state if fx are off
	if ( jQuery.fx.off ) {
		opt.duration = 0;

	} else {
		if ( typeof opt.duration !== "number" ) {
			if ( opt.duration in jQuery.fx.speeds ) {
				opt.duration = jQuery.fx.speeds[ opt.duration ];

			} else {
				opt.duration = jQuery.fx.speeds._default;
			}
		}
	}

	// Normalize opt.queue - true/undefined/null -> "fx"
	if ( opt.queue == null || opt.queue === true ) {
		opt.queue = "fx";
	}

	// Queueing
	opt.old = opt.complete;

	opt.complete = function() {
		if ( isFunction( opt.old ) ) {
			opt.old.call( this );
		}

		if ( opt.queue ) {
			jQuery.dequeue( this, opt.queue );
		}
	};

	return opt;
};

jQuery.fn.extend( {
	fadeTo: function( speed, to, easing, callback ) {

		// Show any hidden elements after setting opacity to 0
		return this.filter( isHiddenWithinTree ).css( "opacity", 0 ).show()

			// Animate to the value specified
			.end().animate( { opacity: to }, speed, easing, callback );
	},
	animate: function( prop, speed, easing, callback ) {
		var empty = jQuery.isEmptyObject( prop ),
			optall = jQuery.speed( speed, easing, callback ),
			doAnimation = function() {

				// Operate on a copy of prop so per-property easing won't be lost
				var anim = Animation( this, jQuery.extend( {}, prop ), optall );

				// Empty animations, or finishing resolves immediately
				if ( empty || dataPriv.get( this, "finish" ) ) {
					anim.stop( true );
				}
			};

		doAnimation.finish = doAnimation;

		return empty || optall.queue === false ?
			this.each( doAnimation ) :
			this.queue( optall.queue, doAnimation );
	},
	stop: function( type, clearQueue, gotoEnd ) {
		var stopQueue = function( hooks ) {
			var stop = hooks.stop;
			delete hooks.stop;
			stop( gotoEnd );
		};

		if ( typeof type !== "string" ) {
			gotoEnd = clearQueue;
			clearQueue = type;
			type = undefined;
		}
		if ( clearQueue ) {
			this.queue( type || "fx", [] );
		}

		return this.each( function() {
			var dequeue = true,
				index = type != null && type + "queueHooks",
				timers = jQuery.timers,
				data = dataPriv.get( this );

			if ( index ) {
				if ( data[ index ] && data[ index ].stop ) {
					stopQueue( data[ index ] );
				}
			} else {
				for ( index in data ) {
					if ( data[ index ] && data[ index ].stop && rrun.test( index ) ) {
						stopQueue( data[ index ] );
					}
				}
			}

			for ( index = timers.length; index--; ) {
				if ( timers[ index ].elem === this &&
					( type == null || timers[ index ].queue === type ) ) {

					timers[ index ].anim.stop( gotoEnd );
					dequeue = false;
					timers.splice( index, 1 );
				}
			}

			// Start the next in the queue if the last step wasn't forced.
			// Timers currently will call their complete callbacks, which
			// will dequeue but only if they were gotoEnd.
			if ( dequeue || !gotoEnd ) {
				jQuery.dequeue( this, type );
			}
		} );
	},
	finish: function( type ) {
		if ( type !== false ) {
			type = type || "fx";
		}
		return this.each( function() {
			var index,
				data = dataPriv.get( this ),
				queue = data[ type + "queue" ],
				hooks = data[ type + "queueHooks" ],
				timers = jQuery.timers,
				length = queue ? queue.length : 0;

			// Enable finishing flag on private data
			data.finish = true;

			// Empty the queue first
			jQuery.queue( this, type, [] );

			if ( hooks && hooks.stop ) {
				hooks.stop.call( this, true );
			}

			// Look for any active animations, and finish them
			for ( index = timers.length; index--; ) {
				if ( timers[ index ].elem === this && timers[ index ].queue === type ) {
					timers[ index ].anim.stop( true );
					timers.splice( index, 1 );
				}
			}

			// Look for any animations in the old queue and finish them
			for ( index = 0; index < length; index++ ) {
				if ( queue[ index ] && queue[ index ].finish ) {
					queue[ index ].finish.call( this );
				}
			}

			// Turn off finishing flag
			delete data.finish;
		} );
	}
} );

jQuery.each( [ "toggle", "show", "hide" ], function( _i, name ) {
	var cssFn = jQuery.fn[ name ];
	jQuery.fn[ name ] = function( speed, easing, callback ) {
		return speed == null || typeof speed === "boolean" ?
			cssFn.apply( this, arguments ) :
			this.animate( genFx( name, true ), speed, easing, callback );
	};
} );

// Generate shortcuts for custom animations
jQuery.each( {
	slideDown: genFx( "show" ),
	slideUp: genFx( "hide" ),
	slideToggle: genFx( "toggle" ),
	fadeIn: { opacity: "show" },
	fadeOut: { opacity: "hide" },
	fadeToggle: { opacity: "toggle" }
}, function( name, props ) {
	jQuery.fn[ name ] = function( speed, easing, callback ) {
		return this.animate( props, speed, easing, callback );
	};
} );

jQuery.timers = [];
jQuery.fx.tick = function() {
	var timer,
		i = 0,
		timers = jQuery.timers;

	fxNow = Date.now();

	for ( ; i < timers.length; i++ ) {
		timer = timers[ i ];

		// Run the timer and safely remove it when done (allowing for external removal)
		if ( !timer() && timers[ i ] === timer ) {
			timers.splice( i--, 1 );
		}
	}

	if ( !timers.length ) {
		jQuery.fx.stop();
	}
	fxNow = undefined;
};

jQuery.fx.timer = function( timer ) {
	jQuery.timers.push( timer );
	jQuery.fx.start();
};

jQuery.fx.interval = 13;
jQuery.fx.start = function() {
	if ( inProgress ) {
		return;
	}

	inProgress = true;
	schedule();
};

jQuery.fx.stop = function() {
	inProgress = null;
};

jQuery.fx.speeds = {
	slow: 600,
	fast: 200,

	// Default speed
	_default: 400
};


// Based off of the plugin by Clint Helfers, with permission.
jQuery.fn.delay = function( time, type ) {
	time = jQuery.fx ? jQuery.fx.speeds[ time ] || time : time;
	type = type || "fx";

	return this.queue( type, function( next, hooks ) {
		var timeout = window.setTimeout( next, time );
		hooks.stop = function() {
			window.clearTimeout( timeout );
		};
	} );
};


( function() {
	var input = document.createElement( "input" ),
		select = document.createElement( "select" ),
		opt = select.appendChild( document.createElement( "option" ) );

	input.type = "checkbox";

	// Support: Android <=4.3 only
	// Default value for a checkbox should be "on"
	support.checkOn = input.value !== "";

	// Support: IE <=11 only
	// Must access selectedIndex to make default options select
	support.optSelected = opt.selected;

	// Support: IE <=11 only
	// An input loses its value after becoming a radio
	input = document.createElement( "input" );
	input.value = "t";
	input.type = "radio";
	support.radioValue = input.value === "t";
} )();


var boolHook,
	attrHandle = jQuery.expr.attrHandle;

jQuery.fn.extend( {
	attr: function( name, value ) {
		return access( this, jQuery.attr, name, value, arguments.length > 1 );
	},

	removeAttr: function( name ) {
		return this.each( function() {
			jQuery.removeAttr( this, name );
		} );
	}
} );

jQuery.extend( {
	attr: function( elem, name, value ) {
		var ret, hooks,
			nType = elem.nodeType;

		// Don't get/set attributes on text, comment and attribute nodes
		if ( nType === 3 || nType === 8 || nType === 2 ) {
			return;
		}

		// Fallback to prop when attributes are not supported
		if ( typeof elem.getAttribute === "undefined" ) {
			return jQuery.prop( elem, name, value );
		}

		// Attribute hooks are determined by the lowercase version
		// Grab necessary hook if one is defined
		if ( nType !== 1 || !jQuery.isXMLDoc( elem ) ) {
			hooks = jQuery.attrHooks[ name.toLowerCase() ] ||
				( jQuery.expr.match.bool.test( name ) ? boolHook : undefined );
		}

		if ( value !== undefined ) {
			if ( value === null ) {
				jQuery.removeAttr( elem, name );
				return;
			}

			if ( hooks && "set" in hooks &&
				( ret = hooks.set( elem, value, name ) ) !== undefined ) {
				return ret;
			}

			elem.setAttribute( name, value + "" );
			return value;
		}

		if ( hooks && "get" in hooks && ( ret = hooks.get( elem, name ) ) !== null ) {
			return ret;
		}

		ret = jQuery.find.attr( elem, name );

		// Non-existent attributes return null, we normalize to undefined
		return ret == null ? undefined : ret;
	},

	attrHooks: {
		type: {
			set: function( elem, value ) {
				if ( !support.radioValue && value === "radio" &&
					nodeName( elem, "input" ) ) {
					var val = elem.value;
					elem.setAttribute( "type", value );
					if ( val ) {
						elem.value = val;
					}
					return value;
				}
			}
		}
	},

	removeAttr: function( elem, value ) {
		var name,
			i = 0,

			// Attribute names can contain non-HTML whitespace characters
			// https://html.spec.whatwg.org/multipage/syntax.html#attributes-2
			attrNames = value && value.match( rnothtmlwhite );

		if ( attrNames && elem.nodeType === 1 ) {
			while ( ( name = attrNames[ i++ ] ) ) {
				elem.removeAttribute( name );
			}
		}
	}
} );

// Hooks for boolean attributes
boolHook = {
	set: function( elem, value, name ) {
		if ( value === false ) {

			// Remove boolean attributes when set to false
			jQuery.removeAttr( elem, name );
		} else {
			elem.setAttribute( name, name );
		}
		return name;
	}
};

jQuery.each( jQuery.expr.match.bool.source.match( /\w+/g ), function( _i, name ) {
	var getter = attrHandle[ name ] || jQuery.find.attr;

	attrHandle[ name ] = function( elem, name, isXML ) {
		var ret, handle,
			lowercaseName = name.toLowerCase();

		if ( !isXML ) {

			// Avoid an infinite loop by temporarily removing this function from the getter
			handle = attrHandle[ lowercaseName ];
			attrHandle[ lowercaseName ] = ret;
			ret = getter( elem, name, isXML ) != null ?
				lowercaseName :
				null;
			attrHandle[ lowercaseName ] = handle;
		}
		return ret;
	};
} );




var rfocusable = /^(?:input|select|textarea|button)$/i,
	rclickable = /^(?:a|area)$/i;

jQuery.fn.extend( {
	prop: function( name, value ) {
		return access( this, jQuery.prop, name, value, arguments.length > 1 );
	},

	removeProp: function( name ) {
		return this.each( function() {
			delete this[ jQuery.propFix[ name ] || name ];
		} );
	}
} );

jQuery.extend( {
	prop: function( elem, name, value ) {
		var ret, hooks,
			nType = elem.nodeType;

		// Don't get/set properties on text, comment and attribute nodes
		if ( nType === 3 || nType === 8 || nType === 2 ) {
			return;
		}

		if ( nType !== 1 || !jQuery.isXMLDoc( elem ) ) {

			// Fix name and attach hooks
			name = jQuery.propFix[ name ] || name;
			hooks = jQuery.propHooks[ name ];
		}

		if ( value !== undefined ) {
			if ( hooks && "set" in hooks &&
				( ret = hooks.set( elem, value, name ) ) !== undefined ) {
				return ret;
			}

			return ( elem[ name ] = value );
		}

		if ( hooks && "get" in hooks && ( ret = hooks.get( elem, name ) ) !== null ) {
			return ret;
		}

		return elem[ name ];
	},

	propHooks: {
		tabIndex: {
			get: function( elem ) {

				// Support: IE <=9 - 11 only
				// elem.tabIndex doesn't always return the
				// correct value when it hasn't been explicitly set
				// Use proper attribute retrieval (trac-12072)
				var tabindex = jQuery.find.attr( elem, "tabindex" );

				if ( tabindex ) {
					return parseInt( tabindex, 10 );
				}

				if (
					rfocusable.test( elem.nodeName ) ||
					rclickable.test( elem.nodeName ) &&
					elem.href
				) {
					return 0;
				}

				return -1;
			}
		}
	},

	propFix: {
		"for": "htmlFor",
		"class": "className"
	}
} );

// Support: IE <=11 only
// Accessing the selectedIndex property
// forces the browser to respect setting selected
// on the option
// The getter ensures a default option is selected
// when in an optgroup
// eslint rule "no-unused-expressions" is disabled for this code
// since it considers such accessions noop
if ( !support.optSelected ) {
	jQuery.propHooks.selected = {
		get: function( elem ) {

			/* eslint no-unused-expressions: "off" */

			var parent = elem.parentNode;
			if ( parent && parent.parentNode ) {
				parent.parentNode.selectedIndex;
			}
			return null;
		},
		set: function( elem ) {

			/* eslint no-unused-expressions: "off" */

			var parent = elem.parentNode;
			if ( parent ) {
				parent.selectedIndex;

				if ( parent.parentNode ) {
					parent.parentNode.selectedIndex;
				}
			}
		}
	};
}

jQuery.each( [
	"tabIndex",
	"readOnly",
	"maxLength",
	"cellSpacing",
	"cellPadding",
	"rowSpan",
	"colSpan",
	"useMap",
	"frameBorder",
	"contentEditable"
], function() {
	jQuery.propFix[ this.toLowerCase() ] = this;
} );




	// Strip and collapse whitespace according to HTML spec
	// https://infra.spec.whatwg.org/#strip-and-collapse-ascii-whitespace
	function stripAndCollapse( value ) {
		var tokens = value.match( rnothtmlwhite ) || [];
		return tokens.join( " " );
	}


function getClass( elem ) {
	return elem.getAttribute && elem.getAttribute( "class" ) || "";
}

function classesToArray( value ) {
	if ( Array.isArray( value ) ) {
		return value;
	}
	if ( typeof value === "string" ) {
		return value.match( rnothtmlwhite ) || [];
	}
	return [];
}

jQuery.fn.extend( {
	addClass: function( value ) {
		var classNames, cur, curValue, className, i, finalValue;

		if ( isFunction( value ) ) {
			return this.each( function( j ) {
				jQuery( this ).addClass( value.call( this, j, getClass( this ) ) );
			} );
		}

		classNames = classesToArray( value );

		if ( classNames.length ) {
			return this.each( function() {
				curValue = getClass( this );
				cur = this.nodeType === 1 && ( " " + stripAndCollapse( curValue ) + " " );

				if ( cur ) {
					for ( i = 0; i < classNames.length; i++ ) {
						className = classNames[ i ];
						if ( cur.indexOf( " " + className + " " ) < 0 ) {
							cur += className + " ";
						}
					}

					// Only assign if different to avoid unneeded rendering.
					finalValue = stripAndCollapse( cur );
					if ( curValue !== finalValue ) {
						this.setAttribute( "class", finalValue );
					}
				}
			} );
		}

		return this;
	},

	removeClass: function( value ) {
		var classNames, cur, curValue, className, i, finalValue;

		if ( isFunction( value ) ) {
			return this.each( function( j ) {
				jQuery( this ).removeClass( value.call( this, j, getClass( this ) ) );
			} );
		}

		if ( !arguments.length ) {
			return this.attr( "class", "" );
		}

		classNames = classesToArray( value );

		if ( classNames.length ) {
			return this.each( function() {
				curValue = getClass( this );

				// This expression is here for better compressibility (see addClass)
				cur = this.nodeType === 1 && ( " " + stripAndCollapse( curValue ) + " " );

				if ( cur ) {
					for ( i = 0; i < classNames.length; i++ ) {
						className = classNames[ i ];

						// Remove *all* instances
						while ( cur.indexOf( " " + className + " " ) > -1 ) {
							cur = cur.replace( " " + className + " ", " " );
						}
					}

					// Only assign if different to avoid unneeded rendering.
					finalValue = stripAndCollapse( cur );
					if ( curValue !== finalValue ) {
						this.setAttribute( "class", finalValue );
					}
				}
			} );
		}

		return this;
	},

	toggleClass: function( value, stateVal ) {
		var classNames, className, i, self,
			type = typeof value,
			isValidValue = type === "string" || Array.isArray( value );

		if ( isFunction( value ) ) {
			return this.each( function( i ) {
				jQuery( this ).toggleClass(
					value.call( this, i, getClass( this ), stateVal ),
					stateVal
				);
			} );
		}

		if ( typeof stateVal === "boolean" && isValidValue ) {
			return stateVal ? this.addClass( value ) : this.removeClass( value );
		}

		classNames = classesToArray( value );

		return this.each( function() {
			if ( isValidValue ) {

				// Toggle individual class names
				self = jQuery( this );

				for ( i = 0; i < classNames.length; i++ ) {
					className = classNames[ i ];

					// Check each className given, space separated list
					if ( self.hasClass( className ) ) {
						self.removeClass( className );
					} else {
						self.addClass( className );
					}
				}

			// Toggle whole class name
			} else if ( value === undefined || type === "boolean" ) {
				className = getClass( this );
				if ( className ) {

					// Store className if set
					dataPriv.set( this, "__className__", className );
				}

				// If the element has a class name or if we're passed `false`,
				// then remove the whole classname (if there was one, the above saved it).
				// Otherwise bring back whatever was previously saved (if anything),
				// falling back to the empty string if nothing was stored.
				if ( this.setAttribute ) {
					this.setAttribute( "class",
						className || value === false ?
							"" :
							dataPriv.get( this, "__className__" ) || ""
					);
				}
			}
		} );
	},

	hasClass: function( selector ) {
		var className, elem,
			i = 0;

		className = " " + selector + " ";
		while ( ( elem = this[ i++ ] ) ) {
			if ( elem.nodeType === 1 &&
				( " " + stripAndCollapse( getClass( elem ) ) + " " ).indexOf( className ) > -1 ) {
				return true;
			}
		}

		return false;
	}
} );




var rreturn = /\r/g;

jQuery.fn.extend( {
	val: function( value ) {
		var hooks, ret, valueIsFunction,
			elem = this[ 0 ];

		if ( !arguments.length ) {
			if ( elem ) {
				hooks = jQuery.valHooks[ elem.type ] ||
					jQuery.valHooks[ elem.nodeName.toLowerCase() ];

				if ( hooks &&
					"get" in hooks &&
					( ret = hooks.get( elem, "value" ) ) !== undefined
				) {
					return ret;
				}

				ret = elem.value;

				// Handle most common string cases
				if ( typeof ret === "string" ) {
					return ret.replace( rreturn, "" );
				}

				// Handle cases where value is null/undef or number
				return ret == null ? "" : ret;
			}

			return;
		}

		valueIsFunction = isFunction( value );

		return this.each( function( i ) {
			var val;

			if ( this.nodeType !== 1 ) {
				return;
			}

			if ( valueIsFunction ) {
				val = value.call( this, i, jQuery( this ).val() );
			} else {
				val = value;
			}

			// Treat null/undefined as ""; convert numbers to string
			if ( val == null ) {
				val = "";

			} else if ( typeof val === "number" ) {
				val += "";

			} else if ( Array.isArray( val ) ) {
				val = jQuery.map( val, function( value ) {
					return value == null ? "" : value + "";
				} );
			}

			hooks = jQuery.valHooks[ this.type ] || jQuery.valHooks[ this.nodeName.toLowerCase() ];

			// If set returns undefined, fall back to normal setting
			if ( !hooks || !( "set" in hooks ) || hooks.set( this, val, "value" ) === undefined ) {
				this.value = val;
			}
		} );
	}
} );

jQuery.extend( {
	valHooks: {
		option: {
			get: function( elem ) {

				var val = jQuery.find.attr( elem, "value" );
				return val != null ?
					val :

					// Support: IE <=10 - 11 only
					// option.text throws exceptions (trac-14686, trac-14858)
					// Strip and collapse whitespace
					// https://html.spec.whatwg.org/#strip-and-collapse-whitespace
					stripAndCollapse( jQuery.text( elem ) );
			}
		},
		select: {
			get: function( elem ) {
				var value, option, i,
					options = elem.options,
					index = elem.selectedIndex,
					one = elem.type === "select-one",
					values = one ? null : [],
					max = one ? index + 1 : options.length;

				if ( index < 0 ) {
					i = max;

				} else {
					i = one ? index : 0;
				}

				// Loop through all the selected options
				for ( ; i < max; i++ ) {
					option = options[ i ];

					// Support: IE <=9 only
					// IE8-9 doesn't update selected after form reset (trac-2551)
					if ( ( option.selected || i === index ) &&

							// Don't return options that are disabled or in a disabled optgroup
							!option.disabled &&
							( !option.parentNode.disabled ||
								!nodeName( option.parentNode, "optgroup" ) ) ) {

						// Get the specific value for the option
						value = jQuery( option ).val();

						// We don't need an array for one selects
						if ( one ) {
							return value;
						}

						// Multi-Selects return an array
						values.push( value );
					}
				}

				return values;
			},

			set: function( elem, value ) {
				var optionSet, option,
					options = elem.options,
					values = jQuery.makeArray( value ),
					i = options.length;

				while ( i-- ) {
					option = options[ i ];

					/* eslint-disable no-cond-assign */

					if ( option.selected =
						jQuery.inArray( jQuery.valHooks.option.get( option ), values ) > -1
					) {
						optionSet = true;
					}

					/* eslint-enable no-cond-assign */
				}

				// Force browsers to behave consistently when non-matching value is set
				if ( !optionSet ) {
					elem.selectedIndex = -1;
				}
				return values;
			}
		}
	}
} );

// Radios and checkboxes getter/setter
jQuery.each( [ "radio", "checkbox" ], function() {
	jQuery.valHooks[ this ] = {
		set: function( elem, value ) {
			if ( Array.isArray( value ) ) {
				return ( elem.checked = jQuery.inArray( jQuery( elem ).val(), value ) > -1 );
			}
		}
	};
	if ( !support.checkOn ) {
		jQuery.valHooks[ this ].get = function( elem ) {
			return elem.getAttribute( "value" ) === null ? "on" : elem.value;
		};
	}
} );




// Return jQuery for attributes-only inclusion


support.focusin = "onfocusin" in window;


var rfocusMorph = /^(?:focusinfocus|focusoutblur)$/,
	stopPropagationCallback = function( e ) {
		e.stopPropagation();
	};

jQuery.extend( jQuery.event, {

	trigger: function( event, data, elem, onlyHandlers ) {

		var i, cur, tmp, bubbleType, ontype, handle, special, lastElement,
			eventPath = [ elem || document ],
			type = hasOwn.call( event, "type" ) ? event.type : event,
			namespaces = hasOwn.call( event, "namespace" ) ? event.namespace.split( "." ) : [];

		cur = lastElement = tmp = elem = elem || document;

		// Don't do events on text and comment nodes
		if ( elem.nodeType === 3 || elem.nodeType === 8 ) {
			return;
		}

		// focus/blur morphs to focusin/out; ensure we're not firing them right now
		if ( rfocusMorph.test( type + jQuery.event.triggered ) ) {
			return;
		}

		if ( type.indexOf( "." ) > -1 ) {

			// Namespaced trigger; create a regexp to match event type in handle()
			namespaces = type.split( "." );
			type = namespaces.shift();
			namespaces.sort();
		}
		ontype = type.indexOf( ":" ) < 0 && "on" + type;

		// Caller can pass in a jQuery.Event object, Object, or just an event type string
		event = event[ jQuery.expando ] ?
			event :
			new jQuery.Event( type, typeof event === "object" && event );

		// Trigger bitmask: & 1 for native handlers; & 2 for jQuery (always true)
		event.isTrigger = onlyHandlers ? 2 : 3;
		event.namespace = namespaces.join( "." );
		event.rnamespace = event.namespace ?
			new RegExp( "(^|\\.)" + namespaces.join( "\\.(?:.*\\.|)" ) + "(\\.|$)" ) :
			null;

		// Clean up the event in case it is being reused
		event.result = undefined;
		if ( !event.target ) {
			event.target = elem;
		}

		// Clone any incoming data and prepend the event, creating the handler arg list
		data = data == null ?
			[ event ] :
			jQuery.makeArray( data, [ event ] );

		// Allow special events to draw outside the lines
		special = jQuery.event.special[ type ] || {};
		if ( !onlyHandlers && special.trigger && special.trigger.apply( elem, data ) === false ) {
			return;
		}

		// Determine event propagation path in advance, per W3C events spec (trac-9951)
		// Bubble up to document, then to window; watch for a global ownerDocument var (trac-9724)
		if ( !onlyHandlers && !special.noBubble && !isWindow( elem ) ) {

			bubbleType = special.delegateType || type;
			if ( !rfocusMorph.test( bubbleType + type ) ) {
				cur = cur.parentNode;
			}
			for ( ; cur; cur = cur.parentNode ) {
				eventPath.push( cur );
				tmp = cur;
			}

			// Only add window if we got to document (e.g., not plain obj or detached DOM)
			if ( tmp === ( elem.ownerDocument || document ) ) {
				eventPath.push( tmp.defaultView || tmp.parentWindow || window );
			}
		}

		// Fire handlers on the event path
		i = 0;
		while ( ( cur = eventPath[ i++ ] ) && !event.isPropagationStopped() ) {
			lastElement = cur;
			event.type = i > 1 ?
				bubbleType :
				special.bindType || type;

			// jQuery handler
			handle = ( dataPriv.get( cur, "events" ) || Object.create( null ) )[ event.type ] &&
				dataPriv.get( cur, "handle" );
			if ( handle ) {
				handle.apply( cur, data );
			}

			// Native handler
			handle = ontype && cur[ ontype ];
			if ( handle && handle.apply && acceptData( cur ) ) {
				event.result = handle.apply( cur, data );
				if ( event.result === false ) {
					event.preventDefault();
				}
			}
		}
		event.type = type;

		// If nobody prevented the default action, do it now
		if ( !onlyHandlers && !event.isDefaultPrevented() ) {

			if ( ( !special._default ||
				special._default.apply( eventPath.pop(), data ) === false ) &&
				acceptData( elem ) ) {

				// Call a native DOM method on the target with the same name as the event.
				// Don't do default actions on window, that's where global variables be (trac-6170)
				if ( ontype && isFunction( elem[ type ] ) && !isWindow( elem ) ) {

					// Don't re-trigger an onFOO event when we call its FOO() method
					tmp = elem[ ontype ];

					if ( tmp ) {
						elem[ ontype ] = null;
					}

					// Prevent re-triggering of the same event, since we already bubbled it above
					jQuery.event.triggered = type;

					if ( event.isPropagationStopped() ) {
						lastElement.addEventListener( type, stopPropagationCallback );
					}

					elem[ type ]();

					if ( event.isPropagationStopped() ) {
						lastElement.removeEventListener( type, stopPropagationCallback );
					}

					jQuery.event.triggered = undefined;

					if ( tmp ) {
						elem[ ontype ] = tmp;
					}
				}
			}
		}

		return event.result;
	},

	// Piggyback on a donor event to simulate a different one
	// Used only for `focus(in | out)` events
	simulate: function( type, elem, event ) {
		var e = jQuery.extend(
			new jQuery.Event(),
			event,
			{
				type: type,
				isSimulated: true
			}
		);

		jQuery.event.trigger( e, null, elem );
	}

} );

jQuery.fn.extend( {

	trigger: function( type, data ) {
		return this.each( function() {
			jQuery.event.trigger( type, data, this );
		} );
	},
	triggerHandler: function( type, data ) {
		var elem = this[ 0 ];
		if ( elem ) {
			return jQuery.event.trigger( type, data, elem, true );
		}
	}
} );


// Support: Firefox <=44
// Firefox doesn't have focus(in | out) events
// Related ticket - https://bugzilla.mozilla.org/show_bug.cgi?id=687787
//
// Support: Chrome <=48 - 49, Safari <=9.0 - 9.1
// focus(in | out) events fire after focus & blur events,
// which is spec violation - http://www.w3.org/TR/DOM-Level-3-Events/#events-focusevent-event-order
// Related ticket - https://bugs.chromium.org/p/chromium/issues/detail?id=449857
if ( !support.focusin ) {
	jQuery.each( { focus: "focusin", blur: "focusout" }, function( orig, fix ) {

		// Attach a single capturing handler on the document while someone wants focusin/focusout
		var handler = function( event ) {
			jQuery.event.simulate( fix, event.target, jQuery.event.fix( event ) );
		};

		jQuery.event.special[ fix ] = {
			setup: function() {

				// Handle: regular nodes (via `this.ownerDocument`), window
				// (via `this.document`) & document (via `this`).
				var doc = this.ownerDocument || this.document || this,
					attaches = dataPriv.access( doc, fix );

				if ( !attaches ) {
					doc.addEventListener( orig, handler, true );
				}
				dataPriv.access( doc, fix, ( attaches || 0 ) + 1 );
			},
			teardown: function() {
				var doc = this.ownerDocument || this.document || this,
					attaches = dataPriv.access( doc, fix ) - 1;

				if ( !attaches ) {
					doc.removeEventListener( orig, handler, true );
					dataPriv.remove( doc, fix );

				} else {
					dataPriv.access( doc, fix, attaches );
				}
			}
		};
	} );
}
var location = window.location;

var nonce = { guid: Date.now() };

var rquery = ( /\?/ );



// Cross-browser xml parsing
jQuery.parseXML = function( data ) {
	var xml, parserErrorElem;
	if ( !data || typeof data !== "string" ) {
		return null;
	}

	// Support: IE 9 - 11 only
	// IE throws on parseFromString with invalid input.
	try {
		xml = ( new window.DOMParser() ).parseFromString( data, "text/xml" );
	} catch ( e ) {}

	parserErrorElem = xml && xml.getElementsByTagName( "parsererror" )[ 0 ];
	if ( !xml || parserErrorElem ) {
		jQuery.error( "Invalid XML: " + (
			parserErrorElem ?
				jQuery.map( parserErrorElem.childNodes, function( el ) {
					return el.textContent;
				} ).join( "\n" ) :
				data
		) );
	}
	return xml;
};


var
	rbracket = /\[\]$/,
	rCRLF = /\r?\n/g,
	rsubmitterTypes = /^(?:submit|button|image|reset|file)$/i,
	rsubmittable = /^(?:input|select|textarea|keygen)/i;

function buildParams( prefix, obj, traditional, add ) {
	var name;

	if ( Array.isArray( obj ) ) {

		// Serialize array item.
		jQuery.each( obj, function( i, v ) {
			if ( traditional || rbracket.test( prefix ) ) {

				// Treat each array item as a scalar.
				add( prefix, v );

			} else {

				// Item is non-scalar (array or object), encode its numeric index.
				buildParams(
					prefix + "[" + ( typeof v === "object" && v != null ? i : "" ) + "]",
					v,
					traditional,
					add
				);
			}
		} );

	} else if ( !traditional && toType( obj ) === "object" ) {

		// Serialize object item.
		for ( name in obj ) {
			buildParams( prefix + "[" + name + "]", obj[ name ], traditional, add );
		}

	} else {

		// Serialize scalar item.
		add( prefix, obj );
	}
}

// Serialize an array of form elements or a set of
// key/values into a query string
jQuery.param = function( a, traditional ) {
	var prefix,
		s = [],
		add = function( key, valueOrFunction ) {

			// If value is a function, invoke it and use its return value
			var value = isFunction( valueOrFunction ) ?
				valueOrFunction() :
				valueOrFunction;

			s[ s.length ] = encodeURIComponent( key ) + "=" +
				encodeURIComponent( value == null ? "" : value );
		};

	if ( a == null ) {
		return "";
	}

	// If an array was passed in, assume that it is an array of form elements.
	if ( Array.isArray( a ) || ( a.jquery && !jQuery.isPlainObject( a ) ) ) {

		// Serialize the form elements
		jQuery.each( a, function() {
			add( this.name, this.value );
		} );

	} else {

		// If traditional, encode the "old" way (the way 1.3.2 or older
		// did it), otherwise encode params recursively.
		for ( prefix in a ) {
			buildParams( prefix, a[ prefix ], traditional, add );
		}
	}

	// Return the resulting serialization
	return s.join( "&" );
};

jQuery.fn.extend( {
	serialize: function() {
		return jQuery.param( this.serializeArray() );
	},
	serializeArray: function() {
		return this.map( function() {

			// Can add propHook for "elements" to filter or add form elements
			var elements = jQuery.prop( this, "elements" );
			return elements ? jQuery.makeArray( elements ) : this;
		} ).filter( function() {
			var type = this.type;

			// Use .is( ":disabled" ) so that fieldset[disabled] works
			return this.name && !jQuery( this ).is( ":disabled" ) &&
				rsubmittable.test( this.nodeName ) && !rsubmitterTypes.test( type ) &&
				( this.checked || !rcheckableType.test( type ) );
		} ).map( function( _i, elem ) {
			var val = jQuery( this ).val();

			if ( val == null ) {
				return null;
			}

			if ( Array.isArray( val ) ) {
				return jQuery.map( val, function( val ) {
					return { name: elem.name, value: val.replace( rCRLF, "\r\n" ) };
				} );
			}

			return { name: elem.name, value: val.replace( rCRLF, "\r\n" ) };
		} ).get();
	}
} );


var
	r20 = /%20/g,
	rhash = /#.*$/,
	rantiCache = /([?&])_=[^&]*/,
	rheaders = /^(.*?):[ \t]*([^\r\n]*)$/mg,

	// trac-7653, trac-8125, trac-8152: local protocol detection
	rlocalProtocol = /^(?:about|app|app-storage|.+-extension|file|res|widget):$/,
	rnoContent = /^(?:GET|HEAD)$/,
	rprotocol = /^\/\//,

	/* Prefilters
	 * 1) They are useful to introduce custom dataTypes (see ajax/jsonp.js for an example)
	 * 2) These are called:
	 *    - BEFORE asking for a transport
	 *    - AFTER param serialization (s.data is a string if s.processData is true)
	 * 3) key is the dataType
	 * 4) the catchall symbol "*" can be used
	 * 5) execution will start with transport dataType and THEN continue down to "*" if needed
	 */
	prefilters = {},

	/* Transports bindings
	 * 1) key is the dataType
	 * 2) the catchall symbol "*" can be used
	 * 3) selection will start with transport dataType and THEN go to "*" if needed
	 */
	transports = {},

	// Avoid comment-prolog char sequence (trac-10098); must appease lint and evade compression
	allTypes = "*/".concat( "*" ),

	// Anchor tag for parsing the document origin
	originAnchor = document.createElement( "a" );

originAnchor.href = location.href;

// Base "constructor" for jQuery.ajaxPrefilter and jQuery.ajaxTransport
function addToPrefiltersOrTransports( structure ) {

	// dataTypeExpression is optional and defaults to "*"
	return function( dataTypeExpression, func ) {

		if ( typeof dataTypeExpression !== "string" ) {
			func = dataTypeExpression;
			dataTypeExpression = "*";
		}

		var dataType,
			i = 0,
			dataTypes = dataTypeExpression.toLowerCase().match( rnothtmlwhite ) || [];

		if ( isFunction( func ) ) {

			// For each dataType in the dataTypeExpression
			while ( ( dataType = dataTypes[ i++ ] ) ) {

				// Prepend if requested
				if ( dataType[ 0 ] === "+" ) {
					dataType = dataType.slice( 1 ) || "*";
					( structure[ dataType ] = structure[ dataType ] || [] ).unshift( func );

				// Otherwise append
				} else {
					( structure[ dataType ] = structure[ dataType ] || [] ).push( func );
				}
			}
		}
	};
}

// Base inspection function for prefilters and transports
function inspectPrefiltersOrTransports( structure, options, originalOptions, jqXHR ) {

	var inspected = {},
		seekingTransport = ( structure === transports );

	function inspect( dataType ) {
		var selected;
		inspected[ dataType ] = true;
		jQuery.each( structure[ dataType ] || [], function( _, prefilterOrFactory ) {
			var dataTypeOrTransport = prefilterOrFactory( options, originalOptions, jqXHR );
			if ( typeof dataTypeOrTransport === "string" &&
				!seekingTransport && !inspected[ dataTypeOrTransport ] ) {

				options.dataTypes.unshift( dataTypeOrTransport );
				inspect( dataTypeOrTransport );
				return false;
			} else if ( seekingTransport ) {
				return !( selected = dataTypeOrTransport );
			}
		} );
		return selected;
	}

	return inspect( options.dataTypes[ 0 ] ) || !inspected[ "*" ] && inspect( "*" );
}

// A special extend for ajax options
// that takes "flat" options (not to be deep extended)
// Fixes trac-9887
function ajaxExtend( target, src ) {
	var key, deep,
		flatOptions = jQuery.ajaxSettings.flatOptions || {};

	for ( key in src ) {
		if ( src[ key ] !== undefined ) {
			( flatOptions[ key ] ? target : ( deep || ( deep = {} ) ) )[ key ] = src[ key ];
		}
	}
	if ( deep ) {
		jQuery.extend( true, target, deep );
	}

	return target;
}

/* Handles responses to an ajax request:
 * - finds the right dataType (mediates between content-type and expected dataType)
 * - returns the corresponding response
 */
function ajaxHandleResponses( s, jqXHR, responses ) {

	var ct, type, finalDataType, firstDataType,
		contents = s.contents,
		dataTypes = s.dataTypes;

	// Remove auto dataType and get content-type in the process
	while ( dataTypes[ 0 ] === "*" ) {
		dataTypes.shift();
		if ( ct === undefined ) {
			ct = s.mimeType || jqXHR.getResponseHeader( "Content-Type" );
		}
	}

	// Check if we're dealing with a known content-type
	if ( ct ) {
		for ( type in contents ) {
			if ( contents[ type ] && contents[ type ].test( ct ) ) {
				dataTypes.unshift( type );
				break;
			}
		}
	}

	// Check to see if we have a response for the expected dataType
	if ( dataTypes[ 0 ] in responses ) {
		finalDataType = dataTypes[ 0 ];
	} else {

		// Try convertible dataTypes
		for ( type in responses ) {
			if ( !dataTypes[ 0 ] || s.converters[ type + " " + dataTypes[ 0 ] ] ) {
				finalDataType = type;
				break;
			}
			if ( !firstDataType ) {
				firstDataType = type;
			}
		}

		// Or just use first one
		finalDataType = finalDataType || firstDataType;
	}

	// If we found a dataType
	// We add the dataType to the list if needed
	// and return the corresponding response
	if ( finalDataType ) {
		if ( finalDataType !== dataTypes[ 0 ] ) {
			dataTypes.unshift( finalDataType );
		}
		return responses[ finalDataType ];
	}
}

/* Chain conversions given the request and the original response
 * Also sets the responseXXX fields on the jqXHR instance
 */
function ajaxConvert( s, response, jqXHR, isSuccess ) {
	var conv2, current, conv, tmp, prev,
		converters = {},

		// Work with a copy of dataTypes in case we need to modify it for conversion
		dataTypes = s.dataTypes.slice();

	// Create converters map with lowercased keys
	if ( dataTypes[ 1 ] ) {
		for ( conv in s.converters ) {
			converters[ conv.toLowerCase() ] = s.converters[ conv ];
		}
	}

	current = dataTypes.shift();

	// Convert to each sequential dataType
	while ( current ) {

		if ( s.responseFields[ current ] ) {
			jqXHR[ s.responseFields[ current ] ] = response;
		}

		// Apply the dataFilter if provided
		if ( !prev && isSuccess && s.dataFilter ) {
			response = s.dataFilter( response, s.dataType );
		}

		prev = current;
		current = dataTypes.shift();

		if ( current ) {

			// There's only work to do if current dataType is non-auto
			if ( current === "*" ) {

				current = prev;

			// Convert response if prev dataType is non-auto and differs from current
			} else if ( prev !== "*" && prev !== current ) {

				// Seek a direct converter
				conv = converters[ prev + " " + current ] || converters[ "* " + current ];

				// If none found, seek a pair
				if ( !conv ) {
					for ( conv2 in converters ) {

						// If conv2 outputs current
						tmp = conv2.split( " " );
						if ( tmp[ 1 ] === current ) {

							// If prev can be converted to accepted input
							conv = converters[ prev + " " + tmp[ 0 ] ] ||
								converters[ "* " + tmp[ 0 ] ];
							if ( conv ) {

								// Condense equivalence converters
								if ( conv === true ) {
									conv = converters[ conv2 ];

								// Otherwise, insert the intermediate dataType
								} else if ( converters[ conv2 ] !== true ) {
									current = tmp[ 0 ];
									dataTypes.unshift( tmp[ 1 ] );
								}
								break;
							}
						}
					}
				}

				// Apply converter (if not an equivalence)
				if ( conv !== true ) {

					// Unless errors are allowed to bubble, catch and return them
					if ( conv && s.throws ) {
						response = conv( response );
					} else {
						try {
							response = conv( response );
						} catch ( e ) {
							return {
								state: "parsererror",
								error: conv ? e : "No conversion from " + prev + " to " + current
							};
						}
					}
				}
			}
		}
	}

	return { state: "success", data: response };
}

jQuery.extend( {

	// Counter for holding the number of active queries
	active: 0,

	// Last-Modified header cache for next request
	lastModified: {},
	etag: {},

	ajaxSettings: {
		url: location.href,
		type: "GET",
		isLocal: rlocalProtocol.test( location.protocol ),
		global: true,
		processData: true,
		async: true,
		contentType: "application/x-www-form-urlencoded; charset=UTF-8",

		/*
		timeout: 0,
		data: null,
		dataType: null,
		username: null,
		password: null,
		cache: null,
		throws: false,
		traditional: false,
		headers: {},
		*/

		accepts: {
			"*": allTypes,
			text: "text/plain",
			html: "text/html",
			xml: "application/xml, text/xml",
			json: "application/json, text/javascript"
		},

		contents: {
			xml: /\bxml\b/,
			html: /\bhtml/,
			json: /\bjson\b/
		},

		responseFields: {
			xml: "responseXML",
			text: "responseText",
			json: "responseJSON"
		},

		// Data converters
		// Keys separate source (or catchall "*") and destination types with a single space
		converters: {

			// Convert anything to text
			"* text": String,

			// Text to html (true = no transformation)
			"text html": true,

			// Evaluate text as a json expression
			"text json": JSON.parse,

			// Parse text as xml
			"text xml": jQuery.parseXML
		},

		// For options that shouldn't be deep extended:
		// you can add your own custom options here if
		// and when you create one that shouldn't be
		// deep extended (see ajaxExtend)
		flatOptions: {
			url: true,
			context: true
		}
	},

	// Creates a full fledged settings object into target
	// with both ajaxSettings and settings fields.
	// If target is omitted, writes into ajaxSettings.
	ajaxSetup: function( target, settings ) {
		return settings ?

			// Building a settings object
			ajaxExtend( ajaxExtend( target, jQuery.ajaxSettings ), settings ) :

			// Extending ajaxSettings
			ajaxExtend( jQuery.ajaxSettings, target );
	},

	ajaxPrefilter: addToPrefiltersOrTransports( prefilters ),
	ajaxTransport: addToPrefiltersOrTransports( transports ),

	// Main method
	ajax: function( url, options ) {

		// If url is an object, simulate pre-1.5 signature
		if ( typeof url === "object" ) {
			options = url;
			url = undefined;
		}

		// Force options to be an object
		options = options || {};

		var transport,

			// URL without anti-cache param
			cacheURL,

			// Response headers
			responseHeadersString,
			responseHeaders,

			// timeout handle
			timeoutTimer,

			// Url cleanup var
			urlAnchor,

			// Request state (becomes false upon send and true upon completion)
			completed,

			// To know if global events are to be dispatched
			fireGlobals,

			// Loop variable
			i,

			// uncached part of the url
			uncached,

			// Create the final options object
			s = jQuery.ajaxSetup( {}, options ),

			// Callbacks context
			callbackContext = s.context || s,

			// Context for global events is callbackContext if it is a DOM node or jQuery collection
			globalEventContext = s.context &&
				( callbackContext.nodeType || callbackContext.jquery ) ?
				jQuery( callbackContext ) :
				jQuery.event,

			// Deferreds
			deferred = jQuery.Deferred(),
			completeDeferred = jQuery.Callbacks( "once memory" ),

			// Status-dependent callbacks
			statusCode = s.statusCode || {},

			// Headers (they are sent all at once)
			requestHeaders = {},
			requestHeadersNames = {},

			// Default abort message
			strAbort = "canceled",

			// Fake xhr
			jqXHR = {
				readyState: 0,

				// Builds headers hashtable if needed
				getResponseHeader: function( key ) {
					var match;
					if ( completed ) {
						if ( !responseHeaders ) {
							responseHeaders = {};
							while ( ( match = rheaders.exec( responseHeadersString ) ) ) {
								responseHeaders[ match[ 1 ].toLowerCase() + " " ] =
									( responseHeaders[ match[ 1 ].toLowerCase() + " " ] || [] )
										.concat( match[ 2 ] );
							}
						}
						match = responseHeaders[ key.toLowerCase() + " " ];
					}
					return match == null ? null : match.join( ", " );
				},

				// Raw string
				getAllResponseHeaders: function() {
					return completed ? responseHeadersString : null;
				},

				// Caches the header
				setRequestHeader: function( name, value ) {
					if ( completed == null ) {
						name = requestHeadersNames[ name.toLowerCase() ] =
							requestHeadersNames[ name.toLowerCase() ] || name;
						requestHeaders[ name ] = value;
					}
					return this;
				},

				// Overrides response content-type header
				overrideMimeType: function( type ) {
					if ( completed == null ) {
						s.mimeType = type;
					}
					return this;
				},

				// Status-dependent callbacks
				statusCode: function( map ) {
					var code;
					if ( map ) {
						if ( completed ) {

							// Execute the appropriate callbacks
							jqXHR.always( map[ jqXHR.status ] );
						} else {

							// Lazy-add the new callbacks in a way that preserves old ones
							for ( code in map ) {
								statusCode[ code ] = [ statusCode[ code ], map[ code ] ];
							}
						}
					}
					return this;
				},

				// Cancel the request
				abort: function( statusText ) {
					var finalText = statusText || strAbort;
					if ( transport ) {
						transport.abort( finalText );
					}
					done( 0, finalText );
					return this;
				}
			};

		// Attach deferreds
		deferred.promise( jqXHR );

		// Add protocol if not provided (prefilters might expect it)
		// Handle falsy url in the settings object (trac-10093: consistency with old signature)
		// We also use the url parameter if available
		s.url = ( ( url || s.url || location.href ) + "" )
			.replace( rprotocol, location.protocol + "//" );

		// Alias method option to type as per ticket trac-12004
		s.type = options.method || options.type || s.method || s.type;

		// Extract dataTypes list
		s.dataTypes = ( s.dataType || "*" ).toLowerCase().match( rnothtmlwhite ) || [ "" ];

		// A cross-domain request is in order when the origin doesn't match the current origin.
		if ( s.crossDomain == null ) {
			urlAnchor = document.createElement( "a" );

			// Support: IE <=8 - 11, Edge 12 - 15
			// IE throws exception on accessing the href property if url is malformed,
			// e.g. http://example.com:80x/
			try {
				urlAnchor.href = s.url;

				// Support: IE <=8 - 11 only
				// Anchor's host property isn't correctly set when s.url is relative
				urlAnchor.href = urlAnchor.href;
				s.crossDomain = originAnchor.protocol + "//" + originAnchor.host !==
					urlAnchor.protocol + "//" + urlAnchor.host;
			} catch ( e ) {

				// If there is an error parsing the URL, assume it is crossDomain,
				// it can be rejected by the transport if it is invalid
				s.crossDomain = true;
			}
		}

		// Convert data if not already a string
		if ( s.data && s.processData && typeof s.data !== "string" ) {
			s.data = jQuery.param( s.data, s.traditional );
		}

		// Apply prefilters
		inspectPrefiltersOrTransports( prefilters, s, options, jqXHR );

		// If request was aborted inside a prefilter, stop there
		if ( completed ) {
			return jqXHR;
		}

		// We can fire global events as of now if asked to
		// Don't fire events if jQuery.event is undefined in an AMD-usage scenario (trac-15118)
		fireGlobals = jQuery.event && s.global;

		// Watch for a new set of requests
		if ( fireGlobals && jQuery.active++ === 0 ) {
			jQuery.event.trigger( "ajaxStart" );
		}

		// Uppercase the type
		s.type = s.type.toUpperCase();

		// Determine if request has content
		s.hasContent = !rnoContent.test( s.type );

		// Save the URL in case we're toying with the If-Modified-Since
		// and/or If-None-Match header later on
		// Remove hash to simplify url manipulation
		cacheURL = s.url.replace( rhash, "" );

		// More options handling for requests with no content
		if ( !s.hasContent ) {

			// Remember the hash so we can put it back
			uncached = s.url.slice( cacheURL.length );

			// If data is available and should be processed, append data to url
			if ( s.data && ( s.processData || typeof s.data === "string" ) ) {
				cacheURL += ( rquery.test( cacheURL ) ? "&" : "?" ) + s.data;

				// trac-9682: remove data so that it's not used in an eventual retry
				delete s.data;
			}

			// Add or update anti-cache param if needed
			if ( s.cache === false ) {
				cacheURL = cacheURL.replace( rantiCache, "$1" );
				uncached = ( rquery.test( cacheURL ) ? "&" : "?" ) + "_=" + ( nonce.guid++ ) +
					uncached;
			}

			// Put hash and anti-cache on the URL that will be requested (gh-1732)
			s.url = cacheURL + uncached;

		// Change '%20' to '+' if this is encoded form body content (gh-2658)
		} else if ( s.data && s.processData &&
			( s.contentType || "" ).indexOf( "application/x-www-form-urlencoded" ) === 0 ) {
			s.data = s.data.replace( r20, "+" );
		}

		// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
		if ( s.ifModified ) {
			if ( jQuery.lastModified[ cacheURL ] ) {
				jqXHR.setRequestHeader( "If-Modified-Since", jQuery.lastModified[ cacheURL ] );
			}
			if ( jQuery.etag[ cacheURL ] ) {
				jqXHR.setRequestHeader( "If-None-Match", jQuery.etag[ cacheURL ] );
			}
		}

		// Set the correct header, if data is being sent
		if ( s.data && s.hasContent && s.contentType !== false || options.contentType ) {
			jqXHR.setRequestHeader( "Content-Type", s.contentType );
		}

		// Set the Accepts header for the server, depending on the dataType
		jqXHR.setRequestHeader(
			"Accept",
			s.dataTypes[ 0 ] && s.accepts[ s.dataTypes[ 0 ] ] ?
				s.accepts[ s.dataTypes[ 0 ] ] +
					( s.dataTypes[ 0 ] !== "*" ? ", " + allTypes + "; q=0.01" : "" ) :
				s.accepts[ "*" ]
		);

		// Check for headers option
		for ( i in s.headers ) {
			jqXHR.setRequestHeader( i, s.headers[ i ] );
		}

		// Allow custom headers/mimetypes and early abort
		if ( s.beforeSend &&
			( s.beforeSend.call( callbackContext, jqXHR, s ) === false || completed ) ) {

			// Abort if not done already and return
			return jqXHR.abort();
		}

		// Aborting is no longer a cancellation
		strAbort = "abort";

		// Install callbacks on deferreds
		completeDeferred.add( s.complete );
		jqXHR.done( s.success );
		jqXHR.fail( s.error );

		// Get transport
		transport = inspectPrefiltersOrTransports( transports, s, options, jqXHR );

		// If no transport, we auto-abort
		if ( !transport ) {
			done( -1, "No Transport" );
		} else {
			jqXHR.readyState = 1;

			// Send global event
			if ( fireGlobals ) {
				globalEventContext.trigger( "ajaxSend", [ jqXHR, s ] );
			}

			// If request was aborted inside ajaxSend, stop there
			if ( completed ) {
				return jqXHR;
			}

			// Timeout
			if ( s.async && s.timeout > 0 ) {
				timeoutTimer = window.setTimeout( function() {
					jqXHR.abort( "timeout" );
				}, s.timeout );
			}

			try {
				completed = false;
				transport.send( requestHeaders, done );
			} catch ( e ) {

				// Rethrow post-completion exceptions
				if ( completed ) {
					throw e;
				}

				// Propagate others as results
				done( -1, e );
			}
		}

		// Callback for when everything is done
		function done( status, nativeStatusText, responses, headers ) {
			var isSuccess, success, error, response, modified,
				statusText = nativeStatusText;

			// Ignore repeat invocations
			if ( completed ) {
				return;
			}

			completed = true;

			// Clear timeout if it exists
			if ( timeoutTimer ) {
				window.clearTimeout( timeoutTimer );
			}

			// Dereference transport for early garbage collection
			// (no matter how long the jqXHR object will be used)
			transport = undefined;

			// Cache response headers
			responseHeadersString = headers || "";

			// Set readyState
			jqXHR.readyState = status > 0 ? 4 : 0;

			// Determine if successful
			isSuccess = status >= 200 && status < 300 || status === 304;

			// Get response data
			if ( responses ) {
				response = ajaxHandleResponses( s, jqXHR, responses );
			}

			// Use a noop converter for missing script but not if jsonp
			if ( !isSuccess &&
				jQuery.inArray( "script", s.dataTypes ) > -1 &&
				jQuery.inArray( "json", s.dataTypes ) < 0 ) {
				s.converters[ "text script" ] = function() {};
			}

			// Convert no matter what (that way responseXXX fields are always set)
			response = ajaxConvert( s, response, jqXHR, isSuccess );

			// If successful, handle type chaining
			if ( isSuccess ) {

				// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
				if ( s.ifModified ) {
					modified = jqXHR.getResponseHeader( "Last-Modified" );
					if ( modified ) {
						jQuery.lastModified[ cacheURL ] = modified;
					}
					modified = jqXHR.getResponseHeader( "etag" );
					if ( modified ) {
						jQuery.etag[ cacheURL ] = modified;
					}
				}

				// if no content
				if ( status === 204 || s.type === "HEAD" ) {
					statusText = "nocontent";

				// if not modified
				} else if ( status === 304 ) {
					statusText = "notmodified";

				// If we have data, let's convert it
				} else {
					statusText = response.state;
					success = response.data;
					error = response.error;
					isSuccess = !error;
				}
			} else {

				// Extract error from statusText and normalize for non-aborts
				error = statusText;
				if ( status || !statusText ) {
					statusText = "error";
					if ( status < 0 ) {
						status = 0;
					}
				}
			}

			// Set data for the fake xhr object
			jqXHR.status = status;
			jqXHR.statusText = ( nativeStatusText || statusText ) + "";

			// Success/Error
			if ( isSuccess ) {
				deferred.resolveWith( callbackContext, [ success, statusText, jqXHR ] );
			} else {
				deferred.rejectWith( callbackContext, [ jqXHR, statusText, error ] );
			}

			// Status-dependent callbacks
			jqXHR.statusCode( statusCode );
			statusCode = undefined;

			if ( fireGlobals ) {
				globalEventContext.trigger( isSuccess ? "ajaxSuccess" : "ajaxError",
					[ jqXHR, s, isSuccess ? success : error ] );
			}

			// Complete
			completeDeferred.fireWith( callbackContext, [ jqXHR, statusText ] );

			if ( fireGlobals ) {
				globalEventContext.trigger( "ajaxComplete", [ jqXHR, s ] );

				// Handle the global AJAX counter
				if ( !( --jQuery.active ) ) {
					jQuery.event.trigger( "ajaxStop" );
				}
			}
		}

		return jqXHR;
	},

	getJSON: function( url, data, callback ) {
		return jQuery.get( url, data, callback, "json" );
	},

	getScript: function( url, callback ) {
		return jQuery.get( url, undefined, callback, "script" );
	}
} );

jQuery.each( [ "get", "post" ], function( _i, method ) {
	jQuery[ method ] = function( url, data, callback, type ) {

		// Shift arguments if data argument was omitted
		if ( isFunction( data ) ) {
			type = type || callback;
			callback = data;
			data = undefined;
		}

		// The url can be an options object (which then must have .url)
		return jQuery.ajax( jQuery.extend( {
			url: url,
			type: method,
			dataType: type,
			data: data,
			success: callback
		}, jQuery.isPlainObject( url ) && url ) );
	};
} );

jQuery.ajaxPrefilter( function( s ) {
	var i;
	for ( i in s.headers ) {
		if ( i.toLowerCase() === "content-type" ) {
			s.contentType = s.headers[ i ] || "";
		}
	}
} );


jQuery._evalUrl = function( url, options, doc ) {
	return jQuery.ajax( {
		url: url,

		// Make this explicit, since user can override this through ajaxSetup (trac-11264)
		type: "GET",
		dataType: "script",
		cache: true,
		async: false,
		global: false,

		// Only evaluate the response if it is successful (gh-4126)
		// dataFilter is not invoked for failure responses, so using it instead
		// of the default converter is kludgy but it works.
		converters: {
			"text script": function() {}
		},
		dataFilter: function( response ) {
			jQuery.globalEval( response, options, doc );
		}
	} );
};


jQuery.fn.extend( {
	wrapAll: function( html ) {
		var wrap;

		if ( this[ 0 ] ) {
			if ( isFunction( html ) ) {
				html = html.call( this[ 0 ] );
			}

			// The elements to wrap the target around
			wrap = jQuery( html, this[ 0 ].ownerDocument ).eq( 0 ).clone( true );

			if ( this[ 0 ].parentNode ) {
				wrap.insertBefore( this[ 0 ] );
			}

			wrap.map( function() {
				var elem = this;

				while ( elem.firstElementChild ) {
					elem = elem.firstElementChild;
				}

				return elem;
			} ).append( this );
		}

		return this;
	},

	wrapInner: function( html ) {
		if ( isFunction( html ) ) {
			return this.each( function( i ) {
				jQuery( this ).wrapInner( html.call( this, i ) );
			} );
		}

		return this.each( function() {
			var self = jQuery( this ),
				contents = self.contents();

			if ( contents.length ) {
				contents.wrapAll( html );

			} else {
				self.append( html );
			}
		} );
	},

	wrap: function( html ) {
		var htmlIsFunction = isFunction( html );

		return this.each( function( i ) {
			jQuery( this ).wrapAll( htmlIsFunction ? html.call( this, i ) : html );
		} );
	},

	unwrap: function( selector ) {
		this.parent( selector ).not( "body" ).each( function() {
			jQuery( this ).replaceWith( this.childNodes );
		} );
		return this;
	}
} );


jQuery.expr.pseudos.hidden = function( elem ) {
	return !jQuery.expr.pseudos.visible( elem );
};
jQuery.expr.pseudos.visible = function( elem ) {
	return !!( elem.offsetWidth || elem.offsetHeight || elem.getClientRects().length );
};




jQuery.ajaxSettings.xhr = function() {
	try {
		return new window.XMLHttpRequest();
	} catch ( e ) {}
};

var xhrSuccessStatus = {

		// File protocol always yields status code 0, assume 200
		0: 200,

		// Support: IE <=9 only
		// trac-1450: sometimes IE returns 1223 when it should be 204
		1223: 204
	},
	xhrSupported = jQuery.ajaxSettings.xhr();

support.cors = !!xhrSupported && ( "withCredentials" in xhrSupported );
support.ajax = xhrSupported = !!xhrSupported;

jQuery.ajaxTransport( function( options ) {
	var callback, errorCallback;

	// Cross domain only allowed if supported through XMLHttpRequest
	if ( support.cors || xhrSupported && !options.crossDomain ) {
		return {
			send: function( headers, complete ) {
				var i,
					xhr = options.xhr();

				xhr.open(
					options.type,
					options.url,
					options.async,
					options.username,
					options.password
				);

				// Apply custom fields if provided
				if ( options.xhrFields ) {
					for ( i in options.xhrFields ) {
						xhr[ i ] = options.xhrFields[ i ];
					}
				}

				// Override mime type if needed
				if ( options.mimeType && xhr.overrideMimeType ) {
					xhr.overrideMimeType( options.mimeType );
				}

				// X-Requested-With header
				// For cross-domain requests, seeing as conditions for a preflight are
				// akin to a jigsaw puzzle, we simply never set it to be sure.
				// (it can always be set on a per-request basis or even using ajaxSetup)
				// For same-domain requests, won't change header if already provided.
				if ( !options.crossDomain && !headers[ "X-Requested-With" ] ) {
					headers[ "X-Requested-With" ] = "XMLHttpRequest";
				}

				// Set headers
				for ( i in headers ) {
					xhr.setRequestHeader( i, headers[ i ] );
				}

				// Callback
				callback = function( type ) {
					return function() {
						if ( callback ) {
							callback = errorCallback = xhr.onload =
								xhr.onerror = xhr.onabort = xhr.ontimeout =
									xhr.onreadystatechange = null;

							if ( type === "abort" ) {
								xhr.abort();
							} else if ( type === "error" ) {

								// Support: IE <=9 only
								// On a manual native abort, IE9 throws
								// errors on any property access that is not readyState
								if ( typeof xhr.status !== "number" ) {
									complete( 0, "error" );
								} else {
									complete(

										// File: protocol always yields status 0; see trac-8605, trac-14207
										xhr.status,
										xhr.statusText
									);
								}
							} else {
								complete(
									xhrSuccessStatus[ xhr.status ] || xhr.status,
									xhr.statusText,

									// Support: IE <=9 only
									// IE9 has no XHR2 but throws on binary (trac-11426)
									// For XHR2 non-text, let the caller handle it (gh-2498)
									( xhr.responseType || "text" ) !== "text"  ||
									typeof xhr.responseText !== "string" ?
										{ binary: xhr.response } :
										{ text: xhr.responseText },
									xhr.getAllResponseHeaders()
								);
							}
						}
					};
				};

				// Listen to events
				xhr.onload = callback();
				errorCallback = xhr.onerror = xhr.ontimeout = callback( "error" );

				// Support: IE 9 only
				// Use onreadystatechange to replace onabort
				// to handle uncaught aborts
				if ( xhr.onabort !== undefined ) {
					xhr.onabort = errorCallback;
				} else {
					xhr.onreadystatechange = function() {

						// Check readyState before timeout as it changes
						if ( xhr.readyState === 4 ) {

							// Allow onerror to be called first,
							// but that will not handle a native abort
							// Also, save errorCallback to a variable
							// as xhr.onerror cannot be accessed
							window.setTimeout( function() {
								if ( callback ) {
									errorCallback();
								}
							} );
						}
					};
				}

				// Create the abort callback
				callback = callback( "abort" );

				try {

					// Do send the request (this may raise an exception)
					xhr.send( options.hasContent && options.data || null );
				} catch ( e ) {

					// trac-14683: Only rethrow if this hasn't been notified as an error yet
					if ( callback ) {
						throw e;
					}
				}
			},

			abort: function() {
				if ( callback ) {
					callback();
				}
			}
		};
	}
} );




// Prevent auto-execution of scripts when no explicit dataType was provided (See gh-2432)
jQuery.ajaxPrefilter( function( s ) {
	if ( s.crossDomain ) {
		s.contents.script = false;
	}
} );

// Install script dataType
jQuery.ajaxSetup( {
	accepts: {
		script: "text/javascript, application/javascript, " +
			"application/ecmascript, application/x-ecmascript"
	},
	contents: {
		script: /\b(?:java|ecma)script\b/
	},
	converters: {
		"text script": function( text ) {
			jQuery.globalEval( text );
			return text;
		}
	}
} );

// Handle cache's special case and crossDomain
jQuery.ajaxPrefilter( "script", function( s ) {
	if ( s.cache === undefined ) {
		s.cache = false;
	}
	if ( s.crossDomain ) {
		s.type = "GET";
	}
} );

// Bind script tag hack transport
jQuery.ajaxTransport( "script", function( s ) {

	// This transport only deals with cross domain or forced-by-attrs requests
	if ( s.crossDomain || s.scriptAttrs ) {
		var script, callback;
		return {
			send: function( _, complete ) {
				script = jQuery( "<script>" )
					.attr( s.scriptAttrs || {} )
					.prop( { charset: s.scriptCharset, src: s.url } )
					.on( "load error", callback = function( evt ) {
						script.remove();
						callback = null;
						if ( evt ) {
							complete( evt.type === "error" ? 404 : 200, evt.type );
						}
					} );

				// Use native DOM manipulation to avoid our domManip AJAX trickery
				document.head.appendChild( script[ 0 ] );
			},
			abort: function() {
				if ( callback ) {
					callback();
				}
			}
		};
	}
} );




var oldCallbacks = [],
	rjsonp = /(=)\?(?=&|$)|\?\?/;

// Default jsonp settings
jQuery.ajaxSetup( {
	jsonp: "callback",
	jsonpCallback: function() {
		var callback = oldCallbacks.pop() || ( jQuery.expando + "_" + ( nonce.guid++ ) );
		this[ callback ] = true;
		return callback;
	}
} );

// Detect, normalize options and install callbacks for jsonp requests
jQuery.ajaxPrefilter( "json jsonp", function( s, originalSettings, jqXHR ) {

	var callbackName, overwritten, responseContainer,
		jsonProp = s.jsonp !== false && ( rjsonp.test( s.url ) ?
			"url" :
			typeof s.data === "string" &&
				( s.contentType || "" )
					.indexOf( "application/x-www-form-urlencoded" ) === 0 &&
				rjsonp.test( s.data ) && "data"
		);

	// Handle iff the expected data type is "jsonp" or we have a parameter to set
	if ( jsonProp || s.dataTypes[ 0 ] === "jsonp" ) {

		// Get callback name, remembering preexisting value associated with it
		callbackName = s.jsonpCallback = isFunction( s.jsonpCallback ) ?
			s.jsonpCallback() :
			s.jsonpCallback;

		// Insert callback into url or form data
		if ( jsonProp ) {
			s[ jsonProp ] = s[ jsonProp ].replace( rjsonp, "$1" + callbackName );
		} else if ( s.jsonp !== false ) {
			s.url += ( rquery.test( s.url ) ? "&" : "?" ) + s.jsonp + "=" + callbackName;
		}

		// Use data converter to retrieve json after script execution
		s.converters[ "script json" ] = function() {
			if ( !responseContainer ) {
				jQuery.error( callbackName + " was not called" );
			}
			return responseContainer[ 0 ];
		};

		// Force json dataType
		s.dataTypes[ 0 ] = "json";

		// Install callback
		overwritten = window[ callbackName ];
		window[ callbackName ] = function() {
			responseContainer = arguments;
		};

		// Clean-up function (fires after converters)
		jqXHR.always( function() {

			// If previous value didn't exist - remove it
			if ( overwritten === undefined ) {
				jQuery( window ).removeProp( callbackName );

			// Otherwise restore preexisting value
			} else {
				window[ callbackName ] = overwritten;
			}

			// Save back as free
			if ( s[ callbackName ] ) {

				// Make sure that re-using the options doesn't screw things around
				s.jsonpCallback = originalSettings.jsonpCallback;

				// Save the callback name for future use
				oldCallbacks.push( callbackName );
			}

			// Call if it was a function and we have a response
			if ( responseContainer && isFunction( overwritten ) ) {
				overwritten( responseContainer[ 0 ] );
			}

			responseContainer = overwritten = undefined;
		} );

		// Delegate to script
		return "script";
	}
} );




// Support: Safari 8 only
// In Safari 8 documents created via document.implementation.createHTMLDocument
// collapse sibling forms: the second one becomes a child of the first one.
// Because of that, this security measure has to be disabled in Safari 8.
// https://bugs.webkit.org/show_bug.cgi?id=137337
support.createHTMLDocument = ( function() {
	var body = document.implementation.createHTMLDocument( "" ).body;
	body.innerHTML = "<form></form><form></form>";
	return body.childNodes.length === 2;
} )();


// Argument "data" should be string of html
// context (optional): If specified, the fragment will be created in this context,
// defaults to document
// keepScripts (optional): If true, will include scripts passed in the html string
jQuery.parseHTML = function( data, context, keepScripts ) {
	if ( typeof data !== "string" ) {
		return [];
	}
	if ( typeof context === "boolean" ) {
		keepScripts = context;
		context = false;
	}

	var base, parsed, scripts;

	if ( !context ) {

		// Stop scripts or inline event handlers from being executed immediately
		// by using document.implementation
		if ( support.createHTMLDocument ) {
			context = document.implementation.createHTMLDocument( "" );

			// Set the base href for the created document
			// so any parsed elements with URLs
			// are based on the document's URL (gh-2965)
			base = context.createElement( "base" );
			base.href = document.location.href;
			context.head.appendChild( base );
		} else {
			context = document;
		}
	}

	parsed = rsingleTag.exec( data );
	scripts = !keepScripts && [];

	// Single tag
	if ( parsed ) {
		return [ context.createElement( parsed[ 1 ] ) ];
	}

	parsed = buildFragment( [ data ], context, scripts );

	if ( scripts && scripts.length ) {
		jQuery( scripts ).remove();
	}

	return jQuery.merge( [], parsed.childNodes );
};


/**
 * Load a url into a page
 */
jQuery.fn.load = function( url, params, callback ) {
	var selector, type, response,
		self = this,
		off = url.indexOf( " " );

	if ( off > -1 ) {
		selector = stripAndCollapse( url.slice( off ) );
		url = url.slice( 0, off );
	}

	// If it's a function
	if ( isFunction( params ) ) {

		// We assume that it's the callback
		callback = params;
		params = undefined;

	// Otherwise, build a param string
	} else if ( params && typeof params === "object" ) {
		type = "POST";
	}

	// If we have elements to modify, make the request
	if ( self.length > 0 ) {
		jQuery.ajax( {
			url: url,

			// If "type" variable is undefined, then "GET" method will be used.
			// Make value of this field explicit since
			// user can override it through ajaxSetup method
			type: type || "GET",
			dataType: "html",
			data: params
		} ).done( function( responseText ) {

			// Save response for use in complete callback
			response = arguments;

			self.html( selector ?

				// If a selector was specified, locate the right elements in a dummy div
				// Exclude scripts to avoid IE 'Permission Denied' errors
				jQuery( "<div>" ).append( jQuery.parseHTML( responseText ) ).find( selector ) :

				// Otherwise use the full result
				responseText );

		// If the request succeeds, this function gets "data", "status", "jqXHR"
		// but they are ignored because response was set above.
		// If it fails, this function gets "jqXHR", "status", "error"
		} ).always( callback && function( jqXHR, status ) {
			self.each( function() {
				callback.apply( this, response || [ jqXHR.responseText, status, jqXHR ] );
			} );
		} );
	}

	return this;
};




jQuery.expr.pseudos.animated = function( elem ) {
	return jQuery.grep( jQuery.timers, function( fn ) {
		return elem === fn.elem;
	} ).length;
};




jQuery.offset = {
	setOffset: function( elem, options, i ) {
		var curPosition, curLeft, curCSSTop, curTop, curOffset, curCSSLeft, calculatePosition,
			position = jQuery.css( elem, "position" ),
			curElem = jQuery( elem ),
			props = {};

		// Set position first, in-case top/left are set even on static elem
		if ( position === "static" ) {
			elem.style.position = "relative";
		}

		curOffset = curElem.offset();
		curCSSTop = jQuery.css( elem, "top" );
		curCSSLeft = jQuery.css( elem, "left" );
		calculatePosition = ( position === "absolute" || position === "fixed" ) &&
			( curCSSTop + curCSSLeft ).indexOf( "auto" ) > -1;

		// Need to be able to calculate position if either
		// top or left is auto and position is either absolute or fixed
		if ( calculatePosition ) {
			curPosition = curElem.position();
			curTop = curPosition.top;
			curLeft = curPosition.left;

		} else {
			curTop = parseFloat( curCSSTop ) || 0;
			curLeft = parseFloat( curCSSLeft ) || 0;
		}

		if ( isFunction( options ) ) {

			// Use jQuery.extend here to allow modification of coordinates argument (gh-1848)
			options = options.call( elem, i, jQuery.extend( {}, curOffset ) );
		}

		if ( options.top != null ) {
			props.top = ( options.top - curOffset.top ) + curTop;
		}
		if ( options.left != null ) {
			props.left = ( options.left - curOffset.left ) + curLeft;
		}

		if ( "using" in options ) {
			options.using.call( elem, props );

		} else {
			curElem.css( props );
		}
	}
};

jQuery.fn.extend( {

	// offset() relates an element's border box to the document origin
	offset: function( options ) {

		// Preserve chaining for setter
		if ( arguments.length ) {
			return options === undefined ?
				this :
				this.each( function( i ) {
					jQuery.offset.setOffset( this, options, i );
				} );
		}

		var rect, win,
			elem = this[ 0 ];

		if ( !elem ) {
			return;
		}

		// Return zeros for disconnected and hidden (display: none) elements (gh-2310)
		// Support: IE <=11 only
		// Running getBoundingClientRect on a
		// disconnected node in IE throws an error
		if ( !elem.getClientRects().length ) {
			return { top: 0, left: 0 };
		}

		// Get document-relative position by adding viewport scroll to viewport-relative gBCR
		rect = elem.getBoundingClientRect();
		win = elem.ownerDocument.defaultView;
		return {
			top: rect.top + win.pageYOffset,
			left: rect.left + win.pageXOffset
		};
	},

	// position() relates an element's margin box to its offset parent's padding box
	// This corresponds to the behavior of CSS absolute positioning
	position: function() {
		if ( !this[ 0 ] ) {
			return;
		}

		var offsetParent, offset, doc,
			elem = this[ 0 ],
			parentOffset = { top: 0, left: 0 };

		// position:fixed elements are offset from the viewport, which itself always has zero offset
		if ( jQuery.css( elem, "position" ) === "fixed" ) {

			// Assume position:fixed implies availability of getBoundingClientRect
			offset = elem.getBoundingClientRect();

		} else {
			offset = this.offset();

			// Account for the *real* offset parent, which can be the document or its root element
			// when a statically positioned element is identified
			doc = elem.ownerDocument;
			offsetParent = elem.offsetParent || doc.documentElement;
			while ( offsetParent &&
				( offsetParent === doc.body || offsetParent === doc.documentElement ) &&
				jQuery.css( offsetParent, "position" ) === "static" ) {

				offsetParent = offsetParent.parentNode;
			}
			if ( offsetParent && offsetParent !== elem && offsetParent.nodeType === 1 ) {

				// Incorporate borders into its offset, since they are outside its content origin
				parentOffset = jQuery( offsetParent ).offset();
				parentOffset.top += jQuery.css( offsetParent, "borderTopWidth", true );
				parentOffset.left += jQuery.css( offsetParent, "borderLeftWidth", true );
			}
		}

		// Subtract parent offsets and element margins
		return {
			top: offset.top - parentOffset.top - jQuery.css( elem, "marginTop", true ),
			left: offset.left - parentOffset.left - jQuery.css( elem, "marginLeft", true )
		};
	},

	// This method will return documentElement in the following cases:
	// 1) For the element inside the iframe without offsetParent, this method will return
	//    documentElement of the parent window
	// 2) For the hidden or detached element
	// 3) For body or html element, i.e. in case of the html node - it will return itself
	//
	// but those exceptions were never presented as a real life use-cases
	// and might be considered as more preferable results.
	//
	// This logic, however, is not guaranteed and can change at any point in the future
	offsetParent: function() {
		return this.map( function() {
			var offsetParent = this.offsetParent;

			while ( offsetParent && jQuery.css( offsetParent, "position" ) === "static" ) {
				offsetParent = offsetParent.offsetParent;
			}

			return offsetParent || documentElement;
		} );
	}
} );

// Create scrollLeft and scrollTop methods
jQuery.each( { scrollLeft: "pageXOffset", scrollTop: "pageYOffset" }, function( method, prop ) {
	var top = "pageYOffset" === prop;

	jQuery.fn[ method ] = function( val ) {
		return access( this, function( elem, method, val ) {

			// Coalesce documents and windows
			var win;
			if ( isWindow( elem ) ) {
				win = elem;
			} else if ( elem.nodeType === 9 ) {
				win = elem.defaultView;
			}

			if ( val === undefined ) {
				return win ? win[ prop ] : elem[ method ];
			}

			if ( win ) {
				win.scrollTo(
					!top ? val : win.pageXOffset,
					top ? val : win.pageYOffset
				);

			} else {
				elem[ method ] = val;
			}
		}, method, val, arguments.length );
	};
} );

// Support: Safari <=7 - 9.1, Chrome <=37 - 49
// Add the top/left cssHooks using jQuery.fn.position
// Webkit bug: https://bugs.webkit.org/show_bug.cgi?id=29084
// Blink bug: https://bugs.chromium.org/p/chromium/issues/detail?id=589347
// getComputedStyle returns percent when specified for top/left/bottom/right;
// rather than make the css module depend on the offset module, just check for it here
jQuery.each( [ "top", "left" ], function( _i, prop ) {
	jQuery.cssHooks[ prop ] = addGetHookIf( support.pixelPosition,
		function( elem, computed ) {
			if ( computed ) {
				computed = curCSS( elem, prop );

				// If curCSS returns percentage, fallback to offset
				return rnumnonpx.test( computed ) ?
					jQuery( elem ).position()[ prop ] + "px" :
					computed;
			}
		}
	);
} );


// Create innerHeight, innerWidth, height, width, outerHeight and outerWidth methods
jQuery.each( { Height: "height", Width: "width" }, function( name, type ) {
	jQuery.each( {
		padding: "inner" + name,
		content: type,
		"": "outer" + name
	}, function( defaultExtra, funcName ) {

		// Margin is only for outerHeight, outerWidth
		jQuery.fn[ funcName ] = function( margin, value ) {
			var chainable = arguments.length && ( defaultExtra || typeof margin !== "boolean" ),
				extra = defaultExtra || ( margin === true || value === true ? "margin" : "border" );

			return access( this, function( elem, type, value ) {
				var doc;

				if ( isWindow( elem ) ) {

					// $( window ).outerWidth/Height return w/h including scrollbars (gh-1729)
					return funcName.indexOf( "outer" ) === 0 ?
						elem[ "inner" + name ] :
						elem.document.documentElement[ "client" + name ];
				}

				// Get document width or height
				if ( elem.nodeType === 9 ) {
					doc = elem.documentElement;

					// Either scroll[Width/Height] or offset[Width/Height] or client[Width/Height],
					// whichever is greatest
					return Math.max(
						elem.body[ "scroll" + name ], doc[ "scroll" + name ],
						elem.body[ "offset" + name ], doc[ "offset" + name ],
						doc[ "client" + name ]
					);
				}

				return value === undefined ?

					// Get width or height on the element, requesting but not forcing parseFloat
					jQuery.css( elem, type, extra ) :

					// Set width or height on the element
					jQuery.style( elem, type, value, extra );
			}, type, chainable ? margin : undefined, chainable );
		};
	} );
} );


jQuery.each( [
	"ajaxStart",
	"ajaxStop",
	"ajaxComplete",
	"ajaxError",
	"ajaxSuccess",
	"ajaxSend"
], function( _i, type ) {
	jQuery.fn[ type ] = function( fn ) {
		return this.on( type, fn );
	};
} );




jQuery.fn.extend( {

	bind: function( types, data, fn ) {
		return this.on( types, null, data, fn );
	},
	unbind: function( types, fn ) {
		return this.off( types, null, fn );
	},

	delegate: function( selector, types, data, fn ) {
		return this.on( types, selector, data, fn );
	},
	undelegate: function( selector, types, fn ) {

		// ( namespace ) or ( selector, types [, fn] )
		return arguments.length === 1 ?
			this.off( selector, "**" ) :
			this.off( types, selector || "**", fn );
	},

	hover: function( fnOver, fnOut ) {
		return this.mouseenter( fnOver ).mouseleave( fnOut || fnOver );
	}
} );

jQuery.each(
	( "blur focus focusin focusout resize scroll click dblclick " +
	"mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave " +
	"change select submit keydown keypress keyup contextmenu" ).split( " " ),
	function( _i, name ) {

		// Handle event binding
		jQuery.fn[ name ] = function( data, fn ) {
			return arguments.length > 0 ?
				this.on( name, null, data, fn ) :
				this.trigger( name );
		};
	}
);




// Support: Android <=4.0 only
// Make sure we trim BOM and NBSP
// Require that the "whitespace run" starts from a non-whitespace
// to avoid O(N^2) behavior when the engine would try matching "\s+$" at each space position.
var rtrim = /^[\s\uFEFF\xA0]+|([^\s\uFEFF\xA0])[\s\uFEFF\xA0]+$/g;

// Bind a function to a context, optionally partially applying any
// arguments.
// jQuery.proxy is deprecated to promote standards (specifically Function#bind)
// However, it is not slated for removal any time soon
jQuery.proxy = function( fn, context ) {
	var tmp, args, proxy;

	if ( typeof context === "string" ) {
		tmp = fn[ context ];
		context = fn;
		fn = tmp;
	}

	// Quick check to determine if target is callable, in the spec
	// this throws a TypeError, but we will just return undefined.
	if ( !isFunction( fn ) ) {
		return undefined;
	}

	// Simulated bind
	args = slice.call( arguments, 2 );
	proxy = function() {
		return fn.apply( context || this, args.concat( slice.call( arguments ) ) );
	};

	// Set the guid of unique handler to the same of original handler, so it can be removed
	proxy.guid = fn.guid = fn.guid || jQuery.guid++;

	return proxy;
};

jQuery.holdReady = function( hold ) {
	if ( hold ) {
		jQuery.readyWait++;
	} else {
		jQuery.ready( true );
	}
};
jQuery.isArray = Array.isArray;
jQuery.parseJSON = JSON.parse;
jQuery.nodeName = nodeName;
jQuery.isFunction = isFunction;
jQuery.isWindow = isWindow;
jQuery.camelCase = camelCase;
jQuery.type = toType;

jQuery.now = Date.now;

jQuery.isNumeric = function( obj ) {

	// As of jQuery 3.0, isNumeric is limited to
	// strings and numbers (primitives or objects)
	// that can be coerced to finite numbers (gh-2662)
	var type = jQuery.type( obj );
	return ( type === "number" || type === "string" ) &&

		// parseFloat NaNs numeric-cast false positives ("")
		// ...but misinterprets leading-number strings, particularly hex literals ("0x...")
		// subtraction forces infinities to NaN
		!isNaN( obj - parseFloat( obj ) );
};

jQuery.trim = function( text ) {
	return text == null ?
		"" :
		( text + "" ).replace( rtrim, "$1" );
};



// Register as a named AMD module, since jQuery can be concatenated with other
// files that may use define, but not via a proper concatenation script that
// understands anonymous AMD modules. A named AMD is safest and most robust
// way to register. Lowercase jquery is used because AMD module names are
// derived from file names, and jQuery is normally delivered in a lowercase
// file name. Do this after creating the global so that if an AMD module wants
// to call noConflict to hide this version of jQuery, it will work.

// Note that for maximum portability, libraries that are not jQuery should
// declare themselves as anonymous modules, and avoid setting a global if an
// AMD loader is present. jQuery is a special case. For more information, see
// https://github.com/jrburke/requirejs/wiki/Updating-existing-libraries#wiki-anon

if ( typeof define === "function" && define.amd ) {
	define( "jquery", [], function() {
		return jQuery;
	} );
}




var

	// Map over jQuery in case of overwrite
	_jQuery = window.jQuery,

	// Map over the $ in case of overwrite
	_$ = window.$;

jQuery.noConflict = function( deep ) {
	if ( window.$ === jQuery ) {
		window.$ = _$;
	}

	if ( deep && window.jQuery === jQuery ) {
		window.jQuery = _jQuery;
	}

	return jQuery;
};

// Expose jQuery and $ identifiers, even in AMD
// (trac-7102#comment:10, https://github.com/jquery/jquery/pull/557)
// and CommonJS for browser emulators (trac-13566)
if ( typeof noGlobal === "undefined" ) {
	window.jQuery = window.$ = jQuery;
}




return jQuery;
} );

},{"process":"kpD3"}],"QVnC":[function(require,module,exports) {
var define;
/**
 * Copyright (c) 2014-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

var runtime = (function (exports) {
  "use strict";

  var Op = Object.prototype;
  var hasOwn = Op.hasOwnProperty;
  var undefined; // More compressible than void 0.
  var $Symbol = typeof Symbol === "function" ? Symbol : {};
  var iteratorSymbol = $Symbol.iterator || "@@iterator";
  var asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator";
  var toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";

  function define(obj, key, value) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
    return obj[key];
  }
  try {
    // IE 8 has a broken Object.defineProperty that only works on DOM objects.
    define({}, "");
  } catch (err) {
    define = function(obj, key, value) {
      return obj[key] = value;
    };
  }

  function wrap(innerFn, outerFn, self, tryLocsList) {
    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.
    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;
    var generator = Object.create(protoGenerator.prototype);
    var context = new Context(tryLocsList || []);

    // The ._invoke method unifies the implementations of the .next,
    // .throw, and .return methods.
    generator._invoke = makeInvokeMethod(innerFn, self, context);

    return generator;
  }
  exports.wrap = wrap;

  // Try/catch helper to minimize deoptimizations. Returns a completion
  // record like context.tryEntries[i].completion. This interface could
  // have been (and was previously) designed to take a closure to be
  // invoked without arguments, but in all the cases we care about we
  // already have an existing method we want to call, so there's no need
  // to create a new function object. We can even get away with assuming
  // the method takes exactly one argument, since that happens to be true
  // in every case, so we don't have to touch the arguments object. The
  // only additional allocation required is the completion record, which
  // has a stable shape and so hopefully should be cheap to allocate.
  function tryCatch(fn, obj, arg) {
    try {
      return { type: "normal", arg: fn.call(obj, arg) };
    } catch (err) {
      return { type: "throw", arg: err };
    }
  }

  var GenStateSuspendedStart = "suspendedStart";
  var GenStateSuspendedYield = "suspendedYield";
  var GenStateExecuting = "executing";
  var GenStateCompleted = "completed";

  // Returning this object from the innerFn has the same effect as
  // breaking out of the dispatch switch statement.
  var ContinueSentinel = {};

  // Dummy constructor functions that we use as the .constructor and
  // .constructor.prototype properties for functions that return Generator
  // objects. For full spec compliance, you may wish to configure your
  // minifier not to mangle the names of these two functions.
  function Generator() {}
  function GeneratorFunction() {}
  function GeneratorFunctionPrototype() {}

  // This is a polyfill for %IteratorPrototype% for environments that
  // don't natively support it.
  var IteratorPrototype = {};
  define(IteratorPrototype, iteratorSymbol, function () {
    return this;
  });

  var getProto = Object.getPrototypeOf;
  var NativeIteratorPrototype = getProto && getProto(getProto(values([])));
  if (NativeIteratorPrototype &&
      NativeIteratorPrototype !== Op &&
      hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {
    // This environment has a native %IteratorPrototype%; use it instead
    // of the polyfill.
    IteratorPrototype = NativeIteratorPrototype;
  }

  var Gp = GeneratorFunctionPrototype.prototype =
    Generator.prototype = Object.create(IteratorPrototype);
  GeneratorFunction.prototype = GeneratorFunctionPrototype;
  define(Gp, "constructor", GeneratorFunctionPrototype);
  define(GeneratorFunctionPrototype, "constructor", GeneratorFunction);
  GeneratorFunction.displayName = define(
    GeneratorFunctionPrototype,
    toStringTagSymbol,
    "GeneratorFunction"
  );

  // Helper for defining the .next, .throw, and .return methods of the
  // Iterator interface in terms of a single ._invoke method.
  function defineIteratorMethods(prototype) {
    ["next", "throw", "return"].forEach(function(method) {
      define(prototype, method, function(arg) {
        return this._invoke(method, arg);
      });
    });
  }

  exports.isGeneratorFunction = function(genFun) {
    var ctor = typeof genFun === "function" && genFun.constructor;
    return ctor
      ? ctor === GeneratorFunction ||
        // For the native GeneratorFunction constructor, the best we can
        // do is to check its .name property.
        (ctor.displayName || ctor.name) === "GeneratorFunction"
      : false;
  };

  exports.mark = function(genFun) {
    if (Object.setPrototypeOf) {
      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);
    } else {
      genFun.__proto__ = GeneratorFunctionPrototype;
      define(genFun, toStringTagSymbol, "GeneratorFunction");
    }
    genFun.prototype = Object.create(Gp);
    return genFun;
  };

  // Within the body of any async function, `await x` is transformed to
  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test
  // `hasOwn.call(value, "__await")` to determine if the yielded value is
  // meant to be awaited.
  exports.awrap = function(arg) {
    return { __await: arg };
  };

  function AsyncIterator(generator, PromiseImpl) {
    function invoke(method, arg, resolve, reject) {
      var record = tryCatch(generator[method], generator, arg);
      if (record.type === "throw") {
        reject(record.arg);
      } else {
        var result = record.arg;
        var value = result.value;
        if (value &&
            typeof value === "object" &&
            hasOwn.call(value, "__await")) {
          return PromiseImpl.resolve(value.__await).then(function(value) {
            invoke("next", value, resolve, reject);
          }, function(err) {
            invoke("throw", err, resolve, reject);
          });
        }

        return PromiseImpl.resolve(value).then(function(unwrapped) {
          // When a yielded Promise is resolved, its final value becomes
          // the .value of the Promise<{value,done}> result for the
          // current iteration.
          result.value = unwrapped;
          resolve(result);
        }, function(error) {
          // If a rejected Promise was yielded, throw the rejection back
          // into the async generator function so it can be handled there.
          return invoke("throw", error, resolve, reject);
        });
      }
    }

    var previousPromise;

    function enqueue(method, arg) {
      function callInvokeWithMethodAndArg() {
        return new PromiseImpl(function(resolve, reject) {
          invoke(method, arg, resolve, reject);
        });
      }

      return previousPromise =
        // If enqueue has been called before, then we want to wait until
        // all previous Promises have been resolved before calling invoke,
        // so that results are always delivered in the correct order. If
        // enqueue has not been called before, then it is important to
        // call invoke immediately, without waiting on a callback to fire,
        // so that the async generator function has the opportunity to do
        // any necessary setup in a predictable way. This predictability
        // is why the Promise constructor synchronously invokes its
        // executor callback, and why async functions synchronously
        // execute code before the first await. Since we implement simple
        // async functions in terms of async generators, it is especially
        // important to get this right, even though it requires care.
        previousPromise ? previousPromise.then(
          callInvokeWithMethodAndArg,
          // Avoid propagating failures to Promises returned by later
          // invocations of the iterator.
          callInvokeWithMethodAndArg
        ) : callInvokeWithMethodAndArg();
    }

    // Define the unified helper method that is used to implement .next,
    // .throw, and .return (see defineIteratorMethods).
    this._invoke = enqueue;
  }

  defineIteratorMethods(AsyncIterator.prototype);
  define(AsyncIterator.prototype, asyncIteratorSymbol, function () {
    return this;
  });
  exports.AsyncIterator = AsyncIterator;

  // Note that simple async functions are implemented on top of
  // AsyncIterator objects; they just return a Promise for the value of
  // the final result produced by the iterator.
  exports.async = function(innerFn, outerFn, self, tryLocsList, PromiseImpl) {
    if (PromiseImpl === void 0) PromiseImpl = Promise;

    var iter = new AsyncIterator(
      wrap(innerFn, outerFn, self, tryLocsList),
      PromiseImpl
    );

    return exports.isGeneratorFunction(outerFn)
      ? iter // If outerFn is a generator, return the full iterator.
      : iter.next().then(function(result) {
          return result.done ? result.value : iter.next();
        });
  };

  function makeInvokeMethod(innerFn, self, context) {
    var state = GenStateSuspendedStart;

    return function invoke(method, arg) {
      if (state === GenStateExecuting) {
        throw new Error("Generator is already running");
      }

      if (state === GenStateCompleted) {
        if (method === "throw") {
          throw arg;
        }

        // Be forgiving, per 25.3.3.3.3 of the spec:
        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume
        return doneResult();
      }

      context.method = method;
      context.arg = arg;

      while (true) {
        var delegate = context.delegate;
        if (delegate) {
          var delegateResult = maybeInvokeDelegate(delegate, context);
          if (delegateResult) {
            if (delegateResult === ContinueSentinel) continue;
            return delegateResult;
          }
        }

        if (context.method === "next") {
          // Setting context._sent for legacy support of Babel's
          // function.sent implementation.
          context.sent = context._sent = context.arg;

        } else if (context.method === "throw") {
          if (state === GenStateSuspendedStart) {
            state = GenStateCompleted;
            throw context.arg;
          }

          context.dispatchException(context.arg);

        } else if (context.method === "return") {
          context.abrupt("return", context.arg);
        }

        state = GenStateExecuting;

        var record = tryCatch(innerFn, self, context);
        if (record.type === "normal") {
          // If an exception is thrown from innerFn, we leave state ===
          // GenStateExecuting and loop back for another invocation.
          state = context.done
            ? GenStateCompleted
            : GenStateSuspendedYield;

          if (record.arg === ContinueSentinel) {
            continue;
          }

          return {
            value: record.arg,
            done: context.done
          };

        } else if (record.type === "throw") {
          state = GenStateCompleted;
          // Dispatch the exception by looping back around to the
          // context.dispatchException(context.arg) call above.
          context.method = "throw";
          context.arg = record.arg;
        }
      }
    };
  }

  // Call delegate.iterator[context.method](context.arg) and handle the
  // result, either by returning a { value, done } result from the
  // delegate iterator, or by modifying context.method and context.arg,
  // setting context.delegate to null, and returning the ContinueSentinel.
  function maybeInvokeDelegate(delegate, context) {
    var method = delegate.iterator[context.method];
    if (method === undefined) {
      // A .throw or .return when the delegate iterator has no .throw
      // method always terminates the yield* loop.
      context.delegate = null;

      if (context.method === "throw") {
        // Note: ["return"] must be used for ES3 parsing compatibility.
        if (delegate.iterator["return"]) {
          // If the delegate iterator has a return method, give it a
          // chance to clean up.
          context.method = "return";
          context.arg = undefined;
          maybeInvokeDelegate(delegate, context);

          if (context.method === "throw") {
            // If maybeInvokeDelegate(context) changed context.method from
            // "return" to "throw", let that override the TypeError below.
            return ContinueSentinel;
          }
        }

        context.method = "throw";
        context.arg = new TypeError(
          "The iterator does not provide a 'throw' method");
      }

      return ContinueSentinel;
    }

    var record = tryCatch(method, delegate.iterator, context.arg);

    if (record.type === "throw") {
      context.method = "throw";
      context.arg = record.arg;
      context.delegate = null;
      return ContinueSentinel;
    }

    var info = record.arg;

    if (! info) {
      context.method = "throw";
      context.arg = new TypeError("iterator result is not an object");
      context.delegate = null;
      return ContinueSentinel;
    }

    if (info.done) {
      // Assign the result of the finished delegate to the temporary
      // variable specified by delegate.resultName (see delegateYield).
      context[delegate.resultName] = info.value;

      // Resume execution at the desired location (see delegateYield).
      context.next = delegate.nextLoc;

      // If context.method was "throw" but the delegate handled the
      // exception, let the outer generator proceed normally. If
      // context.method was "next", forget context.arg since it has been
      // "consumed" by the delegate iterator. If context.method was
      // "return", allow the original .return call to continue in the
      // outer generator.
      if (context.method !== "return") {
        context.method = "next";
        context.arg = undefined;
      }

    } else {
      // Re-yield the result returned by the delegate method.
      return info;
    }

    // The delegate iterator is finished, so forget it and continue with
    // the outer generator.
    context.delegate = null;
    return ContinueSentinel;
  }

  // Define Generator.prototype.{next,throw,return} in terms of the
  // unified ._invoke helper method.
  defineIteratorMethods(Gp);

  define(Gp, toStringTagSymbol, "Generator");

  // A Generator should always return itself as the iterator object when the
  // @@iterator function is called on it. Some browsers' implementations of the
  // iterator prototype chain incorrectly implement this, causing the Generator
  // object to not be returned from this call. This ensures that doesn't happen.
  // See https://github.com/facebook/regenerator/issues/274 for more details.
  define(Gp, iteratorSymbol, function() {
    return this;
  });

  define(Gp, "toString", function() {
    return "[object Generator]";
  });

  function pushTryEntry(locs) {
    var entry = { tryLoc: locs[0] };

    if (1 in locs) {
      entry.catchLoc = locs[1];
    }

    if (2 in locs) {
      entry.finallyLoc = locs[2];
      entry.afterLoc = locs[3];
    }

    this.tryEntries.push(entry);
  }

  function resetTryEntry(entry) {
    var record = entry.completion || {};
    record.type = "normal";
    delete record.arg;
    entry.completion = record;
  }

  function Context(tryLocsList) {
    // The root entry object (effectively a try statement without a catch
    // or a finally block) gives us a place to store values thrown from
    // locations where there is no enclosing try statement.
    this.tryEntries = [{ tryLoc: "root" }];
    tryLocsList.forEach(pushTryEntry, this);
    this.reset(true);
  }

  exports.keys = function(object) {
    var keys = [];
    for (var key in object) {
      keys.push(key);
    }
    keys.reverse();

    // Rather than returning an object with a next method, we keep
    // things simple and return the next function itself.
    return function next() {
      while (keys.length) {
        var key = keys.pop();
        if (key in object) {
          next.value = key;
          next.done = false;
          return next;
        }
      }

      // To avoid creating an additional object, we just hang the .value
      // and .done properties off the next function object itself. This
      // also ensures that the minifier will not anonymize the function.
      next.done = true;
      return next;
    };
  };

  function values(iterable) {
    if (iterable) {
      var iteratorMethod = iterable[iteratorSymbol];
      if (iteratorMethod) {
        return iteratorMethod.call(iterable);
      }

      if (typeof iterable.next === "function") {
        return iterable;
      }

      if (!isNaN(iterable.length)) {
        var i = -1, next = function next() {
          while (++i < iterable.length) {
            if (hasOwn.call(iterable, i)) {
              next.value = iterable[i];
              next.done = false;
              return next;
            }
          }

          next.value = undefined;
          next.done = true;

          return next;
        };

        return next.next = next;
      }
    }

    // Return an iterator with no values.
    return { next: doneResult };
  }
  exports.values = values;

  function doneResult() {
    return { value: undefined, done: true };
  }

  Context.prototype = {
    constructor: Context,

    reset: function(skipTempReset) {
      this.prev = 0;
      this.next = 0;
      // Resetting context._sent for legacy support of Babel's
      // function.sent implementation.
      this.sent = this._sent = undefined;
      this.done = false;
      this.delegate = null;

      this.method = "next";
      this.arg = undefined;

      this.tryEntries.forEach(resetTryEntry);

      if (!skipTempReset) {
        for (var name in this) {
          // Not sure about the optimal order of these conditions:
          if (name.charAt(0) === "t" &&
              hasOwn.call(this, name) &&
              !isNaN(+name.slice(1))) {
            this[name] = undefined;
          }
        }
      }
    },

    stop: function() {
      this.done = true;

      var rootEntry = this.tryEntries[0];
      var rootRecord = rootEntry.completion;
      if (rootRecord.type === "throw") {
        throw rootRecord.arg;
      }

      return this.rval;
    },

    dispatchException: function(exception) {
      if (this.done) {
        throw exception;
      }

      var context = this;
      function handle(loc, caught) {
        record.type = "throw";
        record.arg = exception;
        context.next = loc;

        if (caught) {
          // If the dispatched exception was caught by a catch block,
          // then let that catch block handle the exception normally.
          context.method = "next";
          context.arg = undefined;
        }

        return !! caught;
      }

      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        var record = entry.completion;

        if (entry.tryLoc === "root") {
          // Exception thrown outside of any try block that could handle
          // it, so set the completion value of the entire function to
          // throw the exception.
          return handle("end");
        }

        if (entry.tryLoc <= this.prev) {
          var hasCatch = hasOwn.call(entry, "catchLoc");
          var hasFinally = hasOwn.call(entry, "finallyLoc");

          if (hasCatch && hasFinally) {
            if (this.prev < entry.catchLoc) {
              return handle(entry.catchLoc, true);
            } else if (this.prev < entry.finallyLoc) {
              return handle(entry.finallyLoc);
            }

          } else if (hasCatch) {
            if (this.prev < entry.catchLoc) {
              return handle(entry.catchLoc, true);
            }

          } else if (hasFinally) {
            if (this.prev < entry.finallyLoc) {
              return handle(entry.finallyLoc);
            }

          } else {
            throw new Error("try statement without catch or finally");
          }
        }
      }
    },

    abrupt: function(type, arg) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.tryLoc <= this.prev &&
            hasOwn.call(entry, "finallyLoc") &&
            this.prev < entry.finallyLoc) {
          var finallyEntry = entry;
          break;
        }
      }

      if (finallyEntry &&
          (type === "break" ||
           type === "continue") &&
          finallyEntry.tryLoc <= arg &&
          arg <= finallyEntry.finallyLoc) {
        // Ignore the finally entry if control is not jumping to a
        // location outside the try/catch block.
        finallyEntry = null;
      }

      var record = finallyEntry ? finallyEntry.completion : {};
      record.type = type;
      record.arg = arg;

      if (finallyEntry) {
        this.method = "next";
        this.next = finallyEntry.finallyLoc;
        return ContinueSentinel;
      }

      return this.complete(record);
    },

    complete: function(record, afterLoc) {
      if (record.type === "throw") {
        throw record.arg;
      }

      if (record.type === "break" ||
          record.type === "continue") {
        this.next = record.arg;
      } else if (record.type === "return") {
        this.rval = this.arg = record.arg;
        this.method = "return";
        this.next = "end";
      } else if (record.type === "normal" && afterLoc) {
        this.next = afterLoc;
      }

      return ContinueSentinel;
    },

    finish: function(finallyLoc) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.finallyLoc === finallyLoc) {
          this.complete(entry.completion, entry.afterLoc);
          resetTryEntry(entry);
          return ContinueSentinel;
        }
      }
    },

    "catch": function(tryLoc) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.tryLoc === tryLoc) {
          var record = entry.completion;
          if (record.type === "throw") {
            var thrown = record.arg;
            resetTryEntry(entry);
          }
          return thrown;
        }
      }

      // The context.catch method must only be called with a location
      // argument that corresponds to a known catch block.
      throw new Error("illegal catch attempt");
    },

    delegateYield: function(iterable, resultName, nextLoc) {
      this.delegate = {
        iterator: values(iterable),
        resultName: resultName,
        nextLoc: nextLoc
      };

      if (this.method === "next") {
        // Deliberately forget the last sent value so that we don't
        // accidentally pass it on to the delegate.
        this.arg = undefined;
      }

      return ContinueSentinel;
    }
  };

  // Regardless of whether this script is executing as a CommonJS module
  // or not, return the runtime object so that we can declare the variable
  // regeneratorRuntime in the outer scope, which allows this module to be
  // injected easily by `bin/regenerator --include-runtime script.js`.
  return exports;

}(
  // If this script is executing as a CommonJS module, use module.exports
  // as the regeneratorRuntime namespace. Otherwise create a new empty
  // object. Either way, the resulting object will be used to initialize
  // the regeneratorRuntime variable at the top of this file.
  typeof module === "object" ? module.exports : {}
));

try {
  regeneratorRuntime = runtime;
} catch (accidentalStrictMode) {
  // This module should not be running in strict mode, so the above
  // assignment should always work unless something is misconfigured. Just
  // in case runtime.js accidentally runs in strict mode, in modern engines
  // we can explicitly access globalThis. In older engines we can escape
  // strict mode using a global Function call. This could conceivably fail
  // if a Content Security Policy forbids using Function, but in that case
  // the proper solution is to fix the accidental strict mode problem. If
  // you've misconfigured your bundler to force strict mode and applied a
  // CSP to forbid Function, and you're not willing to fix either of those
  // problems, please detail your unique predicament in a GitHub issue.
  if (typeof globalThis === "object") {
    globalThis.regeneratorRuntime = runtime;
  } else {
    Function("r", "regeneratorRuntime = r")(runtime);
  }
}

},{}],"PhdE":[function(require,module,exports) {
var define;
/*!
 * JavaScript Cookie v2.2.1
 * https://github.com/js-cookie/js-cookie
 *
 * Copyright 2006, 2015 Klaus Hartl & Fagner Brack
 * Released under the MIT license
 */
;(function (factory) {
	var registeredInModuleLoader;
	if (typeof define === 'function' && define.amd) {
		define(factory);
		registeredInModuleLoader = true;
	}
	if (typeof exports === 'object') {
		module.exports = factory();
		registeredInModuleLoader = true;
	}
	if (!registeredInModuleLoader) {
		var OldCookies = window.Cookies;
		var api = window.Cookies = factory();
		api.noConflict = function () {
			window.Cookies = OldCookies;
			return api;
		};
	}
}(function () {
	function extend () {
		var i = 0;
		var result = {};
		for (; i < arguments.length; i++) {
			var attributes = arguments[ i ];
			for (var key in attributes) {
				result[key] = attributes[key];
			}
		}
		return result;
	}

	function decode (s) {
		return s.replace(/(%[0-9A-Z]{2})+/g, decodeURIComponent);
	}

	function init (converter) {
		function api() {}

		function set (key, value, attributes) {
			if (typeof document === 'undefined') {
				return;
			}

			attributes = extend({
				path: '/'
			}, api.defaults, attributes);

			if (typeof attributes.expires === 'number') {
				attributes.expires = new Date(new Date() * 1 + attributes.expires * 864e+5);
			}

			// We're using "expires" because "max-age" is not supported by IE
			attributes.expires = attributes.expires ? attributes.expires.toUTCString() : '';

			try {
				var result = JSON.stringify(value);
				if (/^[\{\[]/.test(result)) {
					value = result;
				}
			} catch (e) {}

			value = converter.write ?
				converter.write(value, key) :
				encodeURIComponent(String(value))
					.replace(/%(23|24|26|2B|3A|3C|3E|3D|2F|3F|40|5B|5D|5E|60|7B|7D|7C)/g, decodeURIComponent);

			key = encodeURIComponent(String(key))
				.replace(/%(23|24|26|2B|5E|60|7C)/g, decodeURIComponent)
				.replace(/[\(\)]/g, escape);

			var stringifiedAttributes = '';
			for (var attributeName in attributes) {
				if (!attributes[attributeName]) {
					continue;
				}
				stringifiedAttributes += '; ' + attributeName;
				if (attributes[attributeName] === true) {
					continue;
				}

				// Considers RFC 6265 section 5.2:
				// ...
				// 3.  If the remaining unparsed-attributes contains a %x3B (";")
				//     character:
				// Consume the characters of the unparsed-attributes up to,
				// not including, the first %x3B (";") character.
				// ...
				stringifiedAttributes += '=' + attributes[attributeName].split(';')[0];
			}

			return (document.cookie = key + '=' + value + stringifiedAttributes);
		}

		function get (key, json) {
			if (typeof document === 'undefined') {
				return;
			}

			var jar = {};
			// To prevent the for loop in the first place assign an empty array
			// in case there are no cookies at all.
			var cookies = document.cookie ? document.cookie.split('; ') : [];
			var i = 0;

			for (; i < cookies.length; i++) {
				var parts = cookies[i].split('=');
				var cookie = parts.slice(1).join('=');

				if (!json && cookie.charAt(0) === '"') {
					cookie = cookie.slice(1, -1);
				}

				try {
					var name = decode(parts[0]);
					cookie = (converter.read || converter)(cookie, name) ||
						decode(cookie);

					if (json) {
						try {
							cookie = JSON.parse(cookie);
						} catch (e) {}
					}

					jar[name] = cookie;

					if (key === name) {
						break;
					}
				} catch (e) {}
			}

			return key ? jar[key] : jar;
		}

		api.set = set;
		api.get = function (key) {
			return get(key, false /* read as raw */);
		};
		api.getJSON = function (key) {
			return get(key, true /* read as json */);
		};
		api.remove = function (key, attributes) {
			set(key, '', extend(attributes, {
				expires: -1
			}));
		};

		api.defaults = {};

		api.withConverter = init;

		return api;
	}

	return init(function () {});
}));

},{}],"JUot":[function(require,module,exports) {

module.exports = function () {
  var selection = document.getSelection();
  if (!selection.rangeCount) {
    return function () {};
  }
  var active = document.activeElement;

  var ranges = [];
  for (var i = 0; i < selection.rangeCount; i++) {
    ranges.push(selection.getRangeAt(i));
  }

  switch (active.tagName.toUpperCase()) { // .toUpperCase handles XHTML
    case 'INPUT':
    case 'TEXTAREA':
      active.blur();
      break;

    default:
      active = null;
      break;
  }

  selection.removeAllRanges();
  return function () {
    selection.type === 'Caret' &&
    selection.removeAllRanges();

    if (!selection.rangeCount) {
      ranges.forEach(function(range) {
        selection.addRange(range);
      });
    }

    active &&
    active.focus();
  };
};

},{}],"xbqV":[function(require,module,exports) {
"use strict";

var deselectCurrent = require("toggle-selection");

var clipboardToIE11Formatting = {
  "text/plain": "Text",
  "text/html": "Url",
  "default": "Text"
}

var defaultMessage = "Copy to clipboard: #{key}, Enter";

function format(message) {
  var copyKey = (/mac os x/i.test(navigator.userAgent) ? "⌘" : "Ctrl") + "+C";
  return message.replace(/#{\s*key\s*}/g, copyKey);
}

function copy(text, options) {
  var debug,
    message,
    reselectPrevious,
    range,
    selection,
    mark,
    success = false;
  if (!options) {
    options = {};
  }
  debug = options.debug || false;
  try {
    reselectPrevious = deselectCurrent();

    range = document.createRange();
    selection = document.getSelection();

    mark = document.createElement("span");
    mark.textContent = text;
    // avoid screen readers from reading out loud the text
    mark.ariaHidden = "true"
    // reset user styles for span element
    mark.style.all = "unset";
    // prevents scrolling to the end of the page
    mark.style.position = "fixed";
    mark.style.top = 0;
    mark.style.clip = "rect(0, 0, 0, 0)";
    // used to preserve spaces and line breaks
    mark.style.whiteSpace = "pre";
    // do not inherit user-select (it may be `none`)
    mark.style.webkitUserSelect = "text";
    mark.style.MozUserSelect = "text";
    mark.style.msUserSelect = "text";
    mark.style.userSelect = "text";
    mark.addEventListener("copy", function(e) {
      e.stopPropagation();
      if (options.format) {
        e.preventDefault();
        if (typeof e.clipboardData === "undefined") { // IE 11
          debug && console.warn("unable to use e.clipboardData");
          debug && console.warn("trying IE specific stuff");
          window.clipboardData.clearData();
          var format = clipboardToIE11Formatting[options.format] || clipboardToIE11Formatting["default"]
          window.clipboardData.setData(format, text);
        } else { // all other browsers
          e.clipboardData.clearData();
          e.clipboardData.setData(options.format, text);
        }
      }
      if (options.onCopy) {
        e.preventDefault();
        options.onCopy(e.clipboardData);
      }
    });

    document.body.appendChild(mark);

    range.selectNodeContents(mark);
    selection.addRange(range);

    var successful = document.execCommand("copy");
    if (!successful) {
      throw new Error("copy command was unsuccessful");
    }
    success = true;
  } catch (err) {
    debug && console.error("unable to copy using execCommand: ", err);
    debug && console.warn("trying IE specific stuff");
    try {
      window.clipboardData.setData(options.format || "text", text);
      options.onCopy && options.onCopy(window.clipboardData);
      success = true;
    } catch (err) {
      debug && console.error("unable to copy using clipboardData: ", err);
      debug && console.error("falling back to prompt");
      message = format("message" in options ? options.message : defaultMessage);
      window.prompt(message, text);
    }
  } finally {
    if (selection) {
      if (typeof selection.removeRange == "function") {
        selection.removeRange(range);
      } else {
        selection.removeAllRanges();
      }
    }

    if (mark) {
      document.body.removeChild(mark);
    }
    reselectPrevious();
  }

  return success;
}

module.exports = copy;

},{"toggle-selection":"JUot"}],"EVxB":[function(require,module,exports) {
"use strict";

var _signer = require("@waves/signer");

var _wavesTransactions = require("@waves/waves-transactions");

var _providerSeed = require("@waves/provider-seed");

var _jquery = _interopRequireDefault(require("jquery"));

require("regenerator-runtime/runtime.js");

var _jsCookie = _interopRequireDefault(require("js-cookie"));

var _copyToClipboard = _interopRequireDefault(require("copy-to-clipboard"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

var QRCode = require('qrcode');

var Wallet = /*#__PURE__*/function () {
  function Wallet() {
    _classCallCheck(this, Wallet);

    this.address = _jsCookie.default.get("address");
    this.referral = _jsCookie.default.get("referral");
    this.seed = _jsCookie.default.get("seed");
    this.sessionSeed = _jsCookie.default.get("sessionSeed");
    this.seedSaved = _jsCookie.default.get("seedSaved");
    this.balanceWaves = 0;
    this.balanceAhrk = 0;
    this.balanceAeur = 0;
    this.balanceAnote = 0;
    this.balanceAint = 0;
    this.selectedCurrency = ANOTE;
    this.captchaId = "";
  }

  _createClass(Wallet, [{
    key: "getPage",
    value: function getPage() {
      this.checkSeedWarning();

      if (this.isLoggedIn()) {
        this.populateData();
        return "main";
      } else {
        if (this.accountExists()) {
          return "login";
        } else {
          return "newaccount";
        }
      }
    }
  }, {
    key: "getAddress",
    value: function getAddress() {
      return this.address;
    }
  }, {
    key: "checkSeedWarning",
    value: function checkSeedWarning() {
      if (!this.seedSaved) {
        (0, _jquery.default)("#seedWarning").show();
      }
    }
  }, {
    key: "getCaptcha",
    value: function getCaptcha() {
      _jquery.default.getJSON(mobileNodeUrl + "/new-captcha/" + this.address, function (data) {
        (0, _jquery.default)("#captcha-img").attr("src", data.image);
        (0, _jquery.default)("#captcha-img").attr("onclick", "this.src=('" + data.image + "?reload='+(new Date()).getTime())");
        wallet.captchaId = data.id;
      });
    }
  }, {
    key: "initMiningSection",
    value: function initMiningSection() {
      this.getCaptcha();

      _jquery.default.getJSON("https://nodes.anote.digital/node/status", function (data) {
        var currentHeight = data.blockchainHeight;

        _jquery.default.getJSON("https://nodes.anote.digital/addresses/data/3ANmnLHt8mR9c36mdfQVpBtxUs8z1mMAHQW?key=" + wallet.address, function (data) {
          if (data.length == 0) {
            (0, _jquery.default)("#miningPanel1").hide();
            (0, _jquery.default)("#miningPanel2").hide();
            (0, _jquery.default)("#miningPanel3").show();
          } else {
            _jquery.default.getJSON("https://nodes.anote.digital/addresses/data/3ANzidsKXn9a1s9FEbWA19hnMgV9zZ2RB9a?key=" + wallet.address, function (data) {
              if (data.length > 0) {
                var miningHeight = data[0].value;

                if (currentHeight - miningHeight <= 1440) {
                  (0, _jquery.default)("#miningPanel1").hide();
                  (0, _jquery.default)("#miningPanel2").show();
                } else {
                  (0, _jquery.default)("#miningPanel2").hide();
                  (0, _jquery.default)("#miningPanel1").show();
                }
              } else {
                (0, _jquery.default)("#miningPanel2").hide();
                (0, _jquery.default)("#miningPanel1").show();
              }
            });
          }
        });
      });

      (0, _jquery.default)("#buttonTelegram").attr("href", "https://t.me/AnoteRobot?start=" + this.address);
    }
  }, {
    key: "login",
    value: function () {
      var _login = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
        var p, pv, seed, d;
        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                p = (0, _jquery.default)("#password1").val();

                if (!p) {
                  _context.next = 28;
                  break;
                }

                _context.next = 4;
                return this.passwordValid(p);

              case 4:
                pv = _context.sent;

                if (!pv) {
                  _context.next = 24;
                  break;
                }

                _context.prev = 6;
                seed = _wavesTransactions.libs.crypto.decryptSeed(this.seed, String(p));
                _context.next = 10;
                return this.initWaves(seed);

              case 10:
                d = new Date();
                d.setHours(d.getHours() + 1);
                this.sessionSeed = _wavesTransactions.libs.crypto.encryptSeed(String(seed), this.address);

                _jsCookie.default.set("sessionSeed", this.sessionSeed, {
                  expires: d
                });

                this.populateData();
                this.showHomeAfterLogin();
                _context.next = 22;
                break;

              case 18:
                _context.prev = 18;
                _context.t0 = _context["catch"](6);
                (0, _jquery.default)("#pMessage3").html(t.login.wrongPass);
                (0, _jquery.default)("#pMessage3").fadeIn();

              case 22:
                _context.next = 26;
                break;

              case 24:
                (0, _jquery.default)("#pMessage3").html(t.login.wrongPass);
                (0, _jquery.default)("#pMessage3").fadeIn();

              case 26:
                _context.next = 30;
                break;

              case 28:
                (0, _jquery.default)("#pMessage3").html(t.login.passRequired);
                (0, _jquery.default)("#pMessage3").fadeIn();

              case 30:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this, [[6, 18]]);
      }));

      function login() {
        return _login.apply(this, arguments);
      }

      return login;
    }()
  }, {
    key: "logout",
    value: function logout() {
      this.sessionSeed = null;

      _jsCookie.default.remove("sessionSeed");

      (0, _jquery.default)("#page-main").fadeOut(function () {
        (0, _jquery.default)("#page-login").fadeIn();
      });
    }
  }, {
    key: "qrscan",
    value: function qrscan() {
      (0, _jquery.default)("#sendError").html(t.qr.message);
      (0, _jquery.default)("#sendError").fadeIn(function () {
        setTimeout(function () {
          (0, _jquery.default)("#sendError").fadeOut();
        }, 2000);
      });
    }
  }, {
    key: "updateAmount",
    value: function updateAmount() {
      var currency = this.selectedCurrency;
      var amount = 0;
      var dp = this.getDecimalPlaces(String(currency));
      var decimalPlaces = 0;

      if (currency == AHRK) {
        amount = this.balanceAhrk;
        decimalPlaces = 6;
      } else if (currency == AEUR) {
        amount = this.balanceAeur;
        decimalPlaces = 2;
      } else if (currency == "") {
        amount = this.balanceWaves;
        decimalPlaces = 8;
      } else if (currency == AINT) {
        decimalPlaces = 8;
        amount = this.balanceAint;
      } else if (currency == ANOTE) {
        decimalPlaces = 8;
        amount = this.balanceAnote;
      }

      if (currency != AINT) {
        amount -= this.getFee(String(currency));
      }

      var balance = amount / dp;

      if (balance < 0) {
        balance = 0;
      }

      (0, _jquery.default)("#amount").val(String(balance.toFixed(decimalPlaces)));
    }
  }, {
    key: "updateAmountExchange",
    value: function updateAmountExchange() {
      var currency = (0, _jquery.default)("#fromCurrency").val();
      var amount = 0;
      var dp = this.getDecimalPlaces(String(currency));
      var decimalPlaces = 0;

      if (currency == AHRK) {
        amount = this.balanceAhrk;
        decimalPlaces = 6;
      } else if (currency == AEUR) {
        amount = this.balanceAeur;
        decimalPlaces = 2;
      } else if (currency == "") {
        amount = this.balanceWaves;
        decimalPlaces = 8;
      } else if (currency == AINT) {
        decimalPlaces = 8;
        amount = this.balanceAint;
      } else if (currency == ANOTE) {
        decimalPlaces = 8;
        amount = this.balanceAnote;
      }

      if (currency != AINT) {
        amount -= this.getFee(String(currency));
      }

      var balance = amount / dp;

      if (balance < 0) {
        balance = 0;
      }

      (0, _jquery.default)("#amountExchange").val(String(balance.toFixed(decimalPlaces)));
    }
  }, {
    key: "changePassword",
    value: function () {
      var _changePassword = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2() {
        var p, pv, seed, newPass;
        return regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                p = (0, _jquery.default)("#password9").val();

                if (!p) {
                  _context2.next = 8;
                  break;
                }

                _context2.next = 4;
                return this.passwordValid(p);

              case 4:
                pv = _context2.sent;

                if (pv) {
                  (0, _jquery.default)("#password9").val("");

                  if (passwordsEqual("password6", "password7", "pMessage6")) {
                    (0, _jquery.default)("#pMessage6").hide();
                    seed = _wavesTransactions.libs.crypto.decryptSeed(this.seed, String(p));
                    newPass = (0, _jquery.default)("#password6").val();
                    this.encryptSeed(seed, newPass);
                    this.setCookies();
                    (0, _jquery.default)("#password6").val("");
                    (0, _jquery.default)("#password7").val("");
                    (0, _jquery.default)("#pMessage7").html(t.changePass.success);
                    (0, _jquery.default)("#pMessage7").fadeIn(function () {
                      setTimeout(function () {
                        (0, _jquery.default)("#pMessage7").fadeOut();
                      }, 500);
                    });
                  }
                } else {
                  (0, _jquery.default)("#password9").val("");
                  (0, _jquery.default)("#pMessage6").html(t.login.wrongPass);
                  (0, _jquery.default)("#pMessage6").fadeIn();
                }

                _context2.next = 10;
                break;

              case 8:
                (0, _jquery.default)("#pMessage6").html(t.changePass.oldRequired);
                (0, _jquery.default)("#pMessage6").fadeIn();

              case 10:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      function changePassword() {
        return _changePassword.apply(this, arguments);
      }

      return changePassword;
    }()
  }, {
    key: "showSeed",
    value: function () {
      var _showSeed = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3() {
        var p, pv, seed;
        return regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                p = (0, _jquery.default)("#password8").val();
                _context3.next = 3;
                return this.passwordValid(p);

              case 3:
                pv = _context3.sent;

                if (pv) {
                  seed = _wavesTransactions.libs.crypto.decryptSeed(this.seed, String(p));
                  (0, _jquery.default)("#seedWords2").val(seed);
                  (0, _jquery.default)("#buttonSeedCopy").prop('disabled', false);
                  (0, _jquery.default)("#password8").val("");

                  _jsCookie.default.set("seedSaved", "true", {
                    expires: 365 * 24 * 10
                  });

                  (0, _jquery.default)("#seedWarning").hide();
                } else {
                  (0, _jquery.default)("#pMessage8").html(t.login.wrongPass);
                  (0, _jquery.default)("#pMessage8").fadeIn(function () {
                    setTimeout(function () {
                      (0, _jquery.default)("#pMessage8").fadeOut();
                    }, 500);
                  });
                }

              case 5:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3, this);
      }));

      function showSeed() {
        return _showSeed.apply(this, arguments);
      }

      return showSeed;
    }()
  }, {
    key: "deleteAccount",
    value: function () {
      var _deleteAccount = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4() {
        var p, pv;
        return regeneratorRuntime.wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                p = (0, _jquery.default)("#password10").val();
                _context4.next = 3;
                return this.passwordValid(p);

              case 3:
                pv = _context4.sent;

                if (pv) {
                  this.sessionSeed = null;
                  this.seed = null;
                  this.address = null;

                  _jsCookie.default.remove("sessionSeed");

                  _jsCookie.default.remove("seed");

                  _jsCookie.default.remove("address");

                  (0, _jquery.default)("#page-main").fadeOut(function () {
                    (0, _jquery.default)("#page-newaccount").fadeIn();
                  });
                } else {
                  (0, _jquery.default)("#pMessage14").html(t.login.wrongPass);
                  (0, _jquery.default)("#pMessage14").fadeIn(function () {
                    setTimeout(function () {
                      (0, _jquery.default)("#pMessage14").fadeOut();
                    }, 500);
                  });
                }

              case 5:
              case "end":
                return _context4.stop();
            }
          }
        }, _callee4, this);
      }));

      function deleteAccount() {
        return _deleteAccount.apply(this, arguments);
      }

      return deleteAccount;
    }()
  }, {
    key: "send",
    value: function () {
      var _send = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5() {
        var _a, currency, decimalPlaces, fee, feeCurrency, recipient, a, attachment, amount, transferOpts;

        return regeneratorRuntime.wrap(function _callee5$(_context5) {
          while (1) {
            switch (_context5.prev = _context5.next) {
              case 0:
                currency = this.selectedCurrency;
                decimalPlaces = this.getDecimalPlaces(String(currency));
                fee = this.getFee(String(currency));
                feeCurrency = '';
                recipient = (_a = (0, _jquery.default)("#addressRec").val()) === null || _a === void 0 ? void 0 : _a.toString();
                a = (0, _jquery.default)("#amount").val();

                if (!(a && recipient)) {
                  _context5.next = 24;
                  break;
                }

                _context5.prev = 7;
                attachment = "";

                if (recipient.startsWith('3P')) {
                  attachment = _wavesTransactions.libs.crypto.base58Encode(_wavesTransactions.libs.crypto.stringToBytes(recipient));
                  recipient = "3AQT89sRrWHqPSwrpfJAj3Yey7BCBTAy4jT";
                }

                amount = +a;
                transferOpts = {
                  amount: Math.floor(amount * decimalPlaces),
                  recipient: recipient,
                  fee: fee,
                  attachment: attachment
                };

                if (currency != "") {
                  transferOpts["assetId"] = currency;
                }

                _context5.next = 15;
                return this.signer.transfer(transferOpts).broadcast();

              case 15:
                (0, _jquery.default)("#sendSuccess").fadeIn(function () {
                  setTimeout(function () {
                    (0, _jquery.default)("#sendSuccess").fadeOut();
                    (0, _jquery.default)("#amount").val("");
                    (0, _jquery.default)("#addressRec").val("");
                  }, 2000);
                });
                _context5.next = 22;
                break;

              case 18:
                _context5.prev = 18;
                _context5.t0 = _context5["catch"](7);

                if (_context5.t0.error == 112) {
                  console.log(_context5.t0);
                  (0, _jquery.default)("#sendError").html(t.send.notEnough);
                  (0, _jquery.default)("#sendError").fadeIn(function () {
                    setTimeout(function () {
                      (0, _jquery.default)("#sendError").fadeOut();
                    }, 2000);
                  });
                } else {
                  (0, _jquery.default)("#sendError").html(t.error);
                  (0, _jquery.default)("#sendError").fadeIn(function () {
                    setTimeout(function () {
                      (0, _jquery.default)("#sendError").fadeOut();
                    }, 2000);
                  });
                  console.log(_context5.t0.message);
                }

                navigator.vibrate(500);

              case 22:
                _context5.next = 26;
                break;

              case 24:
                (0, _jquery.default)("#sendError").html(t.send.bothRequired);
                (0, _jquery.default)("#sendError").fadeIn(function () {
                  setTimeout(function () {
                    (0, _jquery.default)("#sendError").fadeOut();
                  }, 2000);
                });

              case 26:
              case "end":
                return _context5.stop();
            }
          }
        }, _callee5, this, [[7, 18]]);
      }));

      function send() {
        return _send.apply(this, arguments);
      }

      return send;
    }()
  }, {
    key: "saveAd",
    value: function () {
      var _saveAd = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee6() {
        var adText, adLink, records, _yield$this$signer$da, _yield$this$signer$da2, tx;

        return regeneratorRuntime.wrap(function _callee6$(_context6) {
          while (1) {
            switch (_context6.prev = _context6.next) {
              case 0:
                adText = (0, _jquery.default)("#todayText").val();
                adLink = (0, _jquery.default)("#todayLink").val();

                if (!((adText === null || adText === void 0 ? void 0 : adText.toString().length) == 0 || (adLink === null || adLink === void 0 ? void 0 : adLink.toString().length) == 0)) {
                  _context6.next = 8;
                  break;
                }

                (0, _jquery.default)("#pMessage9").html(t.send.bothRequired);
                (0, _jquery.default)("#pMessage9").fadeIn(function () {
                  setTimeout(function () {
                    (0, _jquery.default)("#pMessage9").fadeOut();
                  }, 2000);
                });
                navigator.vibrate(500);
                _context6.next = 24;
                break;

              case 8:
                _context6.prev = 8;
                records = [{
                  key: '%s__anoteTodayAd',
                  type: 'string',
                  value: "%s%s__" + adText + "__" + adLink
                }];
                _context6.next = 12;
                return this.signer.data({
                  data: records
                }).broadcast();

              case 12:
                _yield$this$signer$da = _context6.sent;
                _yield$this$signer$da2 = _slicedToArray(_yield$this$signer$da, 1);
                tx = _yield$this$signer$da2[0];
                (0, _jquery.default)("#pMessage4").fadeIn(function () {
                  setTimeout(function () {
                    (0, _jquery.default)("#pMessage4").fadeOut();
                  }, 500);
                });
                _context6.next = 24;
                break;

              case 18:
                _context6.prev = 18;
                _context6.t0 = _context6["catch"](8);
                (0, _jquery.default)("#pMessage9").html(t.error);
                (0, _jquery.default)("#pMessage9").fadeIn(function () {
                  setTimeout(function () {
                    (0, _jquery.default)("#pMessage9").fadeOut();
                  }, 2000);
                });
                console.log(_context6.t0.message);
                navigator.vibrate(500);

              case 24:
              case "end":
                return _context6.stop();
            }
          }
        }, _callee6, this, [[8, 18]]);
      }));

      function saveAd() {
        return _saveAd.apply(this, arguments);
      }

      return saveAd;
    }()
  }, {
    key: "populateAd",
    value: function populateAd() {
      _jquery.default.getJSON("https://nodes.anote.digital/addresses/data/" + this.address + "?key=%25s__anoteTodayAd", function (data) {
        var _a;

        if (data.length > 0) {
          var adData = (_a = data[0].value) === null || _a === void 0 ? void 0 : _a.toString().split("__");
          (0, _jquery.default)("#todayText").val(adData[1]);
          (0, _jquery.default)("#todayLink").val(adData[2]);
        }
      });
    }
  }, {
    key: "bid",
    value: function () {
      var _bid = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee7() {
        return regeneratorRuntime.wrap(function _callee7$(_context7) {
          while (1) {
            switch (_context7.prev = _context7.next) {
              case 0:
              case "end":
                return _context7.stop();
            }
          }
        }, _callee7);
      }));

      function bid() {
        return _bid.apply(this, arguments);
      }

      return bid;
    }()
  }, {
    key: "register",
    value: function () {
      var _register = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee8() {
        var seed, p;
        return regeneratorRuntime.wrap(function _callee8$(_context8) {
          while (1) {
            switch (_context8.prev = _context8.next) {
              case 0:
                if (!passwordsEqual("password2", "password3", "pMessage1")) {
                  _context8.next = 9;
                  break;
                }

                seed = _wavesTransactions.libs.crypto.randomSeed();
                _context8.next = 4;
                return this.initWaves(seed);

              case 4:
                p = (0, _jquery.default)("#password2").val();
                this.encryptSeed(seed, p);
                this.setCookies();
                this.populateData();
                this.showHomeAfterRegister();

              case 9:
              case "end":
                return _context8.stop();
            }
          }
        }, _callee8, this);
      }));

      function register() {
        return _register.apply(this, arguments);
      }

      return register;
    }()
  }, {
    key: "import",
    value: function () {
      var _import2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee9() {
        var seed, p;
        return regeneratorRuntime.wrap(function _callee9$(_context9) {
          while (1) {
            switch (_context9.prev = _context9.next) {
              case 0:
                if (!passwordsEqual("password4", "password5", "pMessage2")) {
                  _context9.next = 14;
                  break;
                }

                seed = (0, _jquery.default)("#seedWords1").val();

                if (!seed) {
                  _context9.next = 12;
                  break;
                }

                _context9.next = 5;
                return this.initWaves(seed);

              case 5:
                p = (0, _jquery.default)("#password4").val();
                this.encryptSeed(seed, p);
                this.setCookies();
                this.populateData();
                this.showHomeAfterRegister();
                _context9.next = 14;
                break;

              case 12:
                (0, _jquery.default)("#pMessage2").html(t.import.seedRequired);
                (0, _jquery.default)("#pMessage2").fadeIn();

              case 14:
              case "end":
                return _context9.stop();
            }
          }
        }, _callee9, this);
      }));

      function _import() {
        return _import2.apply(this, arguments);
      }

      return _import;
    }()
  }, {
    key: "mine",
    value: function mine() {
      var code = (0, _jquery.default)("#miningCode").val();
      var captcha = (0, _jquery.default)("#captchaCode").val();

      if ((code === null || code === void 0 ? void 0 : code.toString().length) == 0 || (captcha === null || captcha === void 0 ? void 0 : captcha.toString().length) == 0) {
        (0, _jquery.default)("#pMessage15").html(t.send.bothRequired);
        (0, _jquery.default)("#pMessage15").fadeIn(function () {
          setTimeout(function () {
            (0, _jquery.default)("#pMessage15").fadeOut();
          }, 500);
        });
        navigator.vibrate(500);
      } else {
        _jquery.default.getJSON(mobileNodeUrl + "/mine/" + this.address + "/" + this.captchaId + "/" + captcha + "/" + code, function (data) {
          if (data.error == 1) {
            (0, _jquery.default)("#pMessage15").html(t.bank.wrongCaptcha);
            (0, _jquery.default)("#pMessage15").fadeIn(function () {
              setTimeout(function () {
                (0, _jquery.default)("#pMessage15").fadeOut();
              }, 500);
            });
            (0, _jquery.default)("#captcha-img").click();
            navigator.vibrate(500);
          } else if (data.error == 2) {
            (0, _jquery.default)("#pMessage15").html(t.bank.wrongCode);
            (0, _jquery.default)("#pMessage15").fadeIn(function () {
              setTimeout(function () {
                (0, _jquery.default)("#pMessage15").fadeOut();
              }, 500);
            });
            (0, _jquery.default)("#captcha-img").click();
            navigator.vibrate(500);
          } else {
            (0, _jquery.default)("#miningPanel1").fadeOut(function () {
              (0, _jquery.default)("#miningPanel2").fadeIn();
              navigator.vibrate(1000);
            });
          }
        });
      }
    }
  }, {
    key: "populateBalance",
    value: function () {
      var _populateBalance = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee10() {
        var balances;
        return regeneratorRuntime.wrap(function _callee10$(_context10) {
          while (1) {
            switch (_context10.prev = _context10.next) {
              case 0:
                _context10.next = 2;
                return this.signer.getBalance();

              case 2:
                balances = _context10.sent;
                balances.forEach(function (asset) {
                  if (asset.assetId == AHRK) {
                    wallet.balanceAhrk = asset.amount;

                    if (t.lang == "hr") {
                      var balance = wallet.balanceAhrk / AHRKDEC;
                      balance = Math.round(balance * 100) / 100;
                      (0, _jquery.default)("#balance").html(String(balance.toFixed(2)));
                    }
                  } else if (asset.assetId == AEUR) {
                    wallet.balanceAeur = asset.amount;

                    if (t.lang == "en") {
                      var balance = Math.round(wallet.balanceAeur) / 100;
                      (0, _jquery.default)("#balance").html(String(balance.toFixed(2)));
                    }
                  } else if (asset.assetId == "WAVES") {
                    wallet.balanceWaves = asset.amount;
                    var balance = wallet.balanceWaves / SATINBTC;
                    (0, _jquery.default)("#balanceWaves").html(String(balance.toFixed(3)));
                  } else if (asset.assetId == AINT) {
                    wallet.balanceAint = asset.amount;
                    var balance = wallet.balanceAint / SATINBTC;
                    (0, _jquery.default)("#balanceAint").html(String(balance.toFixed(4)));
                  } else if (asset.assetId == ANOTE) {
                    wallet.balanceAnote = asset.amount;
                    var balance = wallet.balanceAnote / SATINBTC;
                    (0, _jquery.default)("#balanceAnotes").html(String(balance.toFixed(8)));
                  }
                });

              case 4:
              case "end":
                return _context10.stop();
            }
          }
        }, _callee10, this);
      }));

      function populateBalance() {
        return _populateBalance.apply(this, arguments);
      }

      return populateBalance;
    }()
  }, {
    key: "initWaves",
    value: function () {
      var _initWaves = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee11(seed) {
        return regeneratorRuntime.wrap(function _callee11$(_context11) {
          while (1) {
            switch (_context11.prev = _context11.next) {
              case 0:
                this.signer = new _signer.Signer({
                  NODE_URL: 'https://nodes.anote.digital'
                });
                this.provider = new _providerSeed.ProviderSeed(seed);
                this.provider.connect({
                  NODE_URL: 'https://nodes.anote.digital',
                  NETWORK_BYTE: 55
                });
                this.signer.setProvider(this.provider);
                _context11.next = 6;
                return this.signer.login();

              case 6:
                this.user = _context11.sent;
                this.address = this.user.address; // console.log(this.user);
                // console.log(this.signer);
                // console.log(this.provider);

              case 8:
              case "end":
                return _context11.stop();
            }
          }
        }, _callee11, this);
      }));

      function initWaves(_x) {
        return _initWaves.apply(this, arguments);
      }

      return initWaves;
    }()
  }, {
    key: "encryptSeed",
    value: function encryptSeed(seed, password) {
      this.seed = _wavesTransactions.libs.crypto.encryptSeed(String(seed), String(password));
      this.sessionSeed = _wavesTransactions.libs.crypto.encryptSeed(String(seed), this.address);
    }
  }, {
    key: "decryptSeedSession",
    value: function decryptSeedSession() {
      var seed = _wavesTransactions.libs.crypto.decryptSeed(this.sessionSeed, this.address);

      return seed;
    }
  }, {
    key: "setCookies",
    value: function setCookies() {
      _jsCookie.default.set("address", this.address, {
        expires: 365 * 24 * 10
      });

      _jsCookie.default.set("seed", this.seed, {
        expires: 365 * 24 * 10
      });

      var d = new Date();
      d.setHours(d.getHours() + 1);

      _jsCookie.default.set("sessionSeed", this.sessionSeed, {
        expires: d
      });
    }
  }, {
    key: "populateData",
    value: function () {
      var _populateData = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee14() {
        var historyHref, seed;
        return regeneratorRuntime.wrap(function _callee14$(_context14) {
          while (1) {
            switch (_context14.prev = _context14.next) {
              case 0:
                (0, _jquery.default)("#referralLink").val("https://anote.one/mine?r=" + this.address);
                (0, _jquery.default)("#address").val(this.address);
                historyHref = "https://anote.live/address/" + this.address + "/tx";
                (0, _jquery.default)("#history").attr("href", historyHref);
                this.generateQR();

                if (this.signer) {
                  _context14.next = 9;
                  break;
                }

                seed = this.decryptSeedSession();
                _context14.next = 9;
                return this.initWaves(seed);

              case 9:
                _context14.next = 11;
                return wallet.populateBalance();

              case 11:
                setInterval( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee12() {
                  return regeneratorRuntime.wrap(function _callee12$(_context12) {
                    while (1) {
                      switch (_context12.prev = _context12.next) {
                        case 0:
                          _context12.prev = 0;
                          _context12.next = 3;
                          return wallet.populateBalance();

                        case 3:
                          _context12.next = 7;
                          break;

                        case 5:
                          _context12.prev = 5;
                          _context12.t0 = _context12["catch"](0);

                        case 7:
                        case "end":
                          return _context12.stop();
                      }
                    }
                  }, _callee12, null, [[0, 5]]);
                })), 30000);
                _context14.next = 14;
                return wallet.initMiningSection();

              case 14:
                _context14.next = 16;
                return wallet.checkReferral();

              case 16:
                _context14.next = 18;
                return wallet.populateAd();

              case 18:
                setInterval( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee13() {
                  return regeneratorRuntime.wrap(function _callee13$(_context13) {
                    while (1) {
                      switch (_context13.prev = _context13.next) {
                        case 0:
                          _context13.prev = 0;
                          _context13.next = 3;
                          return wallet.initMiningSection();

                        case 3:
                          _context13.next = 7;
                          break;

                        case 5:
                          _context13.prev = 5;
                          _context13.t0 = _context13["catch"](0);

                        case 7:
                        case "end":
                          return _context13.stop();
                      }
                    }
                  }, _callee13, null, [[0, 5]]);
                })), 30000);

              case 19:
              case "end":
                return _context14.stop();
            }
          }
        }, _callee14, this);
      }));

      function populateData() {
        return _populateData.apply(this, arguments);
      }

      return populateData;
    }()
  }, {
    key: "checkReferral",
    value: function () {
      var _checkReferral = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee16() {
        return regeneratorRuntime.wrap(function _callee16$(_context16) {
          while (1) {
            switch (_context16.prev = _context16.next) {
              case 0:
                if (this.balanceWaves > 100000) {
                  if (this.referral && this.referral.length > 0) {
                    _jquery.default.getJSON("https://nodes.anote.digital/addresses/data/" + this.address + "?key=referral", function (data) {
                      if (data.length == 0) {
                        var records = [{
                          key: 'referral',
                          type: 'string',
                          value: wallet.referral
                        }];
                        wallet.signer.data({
                          data: records
                        }).broadcast();
                      } else {
                        _jsCookie.default.remove("referral");

                        wallet.referral = "";
                      }
                    });
                  }
                } else {
                  setInterval( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee15() {
                    return regeneratorRuntime.wrap(function _callee15$(_context15) {
                      while (1) {
                        switch (_context15.prev = _context15.next) {
                          case 0:
                            _context15.prev = 0;
                            _context15.next = 3;
                            return wallet.checkReferral();

                          case 3:
                            _context15.next = 7;
                            break;

                          case 5:
                            _context15.prev = 5;
                            _context15.t0 = _context15["catch"](0);

                          case 7:
                          case "end":
                            return _context15.stop();
                        }
                      }
                    }, _callee15, null, [[0, 5]]);
                  })), 30000);
                }

              case 1:
              case "end":
                return _context16.stop();
            }
          }
        }, _callee16, this);
      }));

      function checkReferral() {
        return _checkReferral.apply(this, arguments);
      }

      return checkReferral;
    }()
  }, {
    key: "accountExists",
    value: function accountExists() {
      if (this.seed) {
        return true;
      } else {
        return false;
      }
    }
  }, {
    key: "isLoggedIn",
    value: function isLoggedIn() {
      if (this.sessionSeed) {
        return true;
      } else {
        return false;
      }
    }
  }, {
    key: "generateQR",
    value: function generateQR() {
      QRCode.toString(this.address, function (error, qr) {
        if (error) console.error(error);
        (0, _jquery.default)('#qrcode').replaceWith((0, _jquery.default)('<div/>').append(qr).find('svg:first').attr('id', 'qrcode'));
        (0, _jquery.default)('#qrcode').attr('class', 'qrcode border border-dark');
      });
    }
  }, {
    key: "showHomeAfterRegister",
    value: function showHomeAfterRegister() {
      activeScreen = "home";
      (0, _jquery.default)("#page-newaccount").fadeOut(function () {
        (0, _jquery.default)("#page-main").fadeIn();
      });
    }
  }, {
    key: "showHomeAfterLogin",
    value: function showHomeAfterLogin() {
      if (activeScreen != "home") {
        (0, _jquery.default)("#screen-" + activeScreen).hide();
        (0, _jquery.default)("#screen-home").show();
      }

      activeScreen = "home";
      (0, _jquery.default)("#page-login").fadeOut(function () {
        (0, _jquery.default)("#page-main").fadeIn();
      });
    }
  }, {
    key: "passwordValid",
    value: function () {
      var _passwordValid = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee17(password) {
        var seed, signer, provider, user;
        return regeneratorRuntime.wrap(function _callee17$(_context17) {
          while (1) {
            switch (_context17.prev = _context17.next) {
              case 0:
                if (!password) {
                  _context17.next = 23;
                  break;
                }

                _context17.prev = 1;
                seed = _wavesTransactions.libs.crypto.decryptSeed(this.seed, String(password));
                signer = new _signer.Signer({
                  NODE_URL: 'https://nodes.anote.digital'
                });
                provider = new _providerSeed.ProviderSeed(seed);
                provider.connect({
                  NODE_URL: 'https://nodes.anote.digital',
                  NETWORK_BYTE: 55
                });
                signer.setProvider(provider);
                _context17.next = 9;
                return signer.login();

              case 9:
                user = _context17.sent;

                if (!(this.address == user.address)) {
                  _context17.next = 14;
                  break;
                }

                return _context17.abrupt("return", true);

              case 14:
                return _context17.abrupt("return", false);

              case 15:
                _context17.next = 21;
                break;

              case 17:
                _context17.prev = 17;
                _context17.t0 = _context17["catch"](1);
                console.log(_context17.t0);
                return _context17.abrupt("return", false);

              case 21:
                _context17.next = 24;
                break;

              case 23:
                return _context17.abrupt("return", false);

              case 24:
              case "end":
                return _context17.stop();
            }
          }
        }, _callee17, this, [[1, 17]]);
      }));

      function passwordValid(_x2) {
        return _passwordValid.apply(this, arguments);
      }

      return passwordValid;
    }()
  }, {
    key: "getDecimalPlaces",
    value: function getDecimalPlaces(currency) {
      if (currency == "" || currency == AINT || currency == ANOTE) {
        return SATINBTC;
      } else if (currency == AHRK) {
        return AHRKDEC;
      } else if (currency == AEUR) {
        return 100;
      }

      return SATINBTC;
    }
  }, {
    key: "getFee",
    value: function getFee(currency) {
      if (currency == AHRK) {
        return 50000;
      } else if (currency == AEUR) {
        return 1;
      } else if (currency == "") {
        return 100000;
      } else if (currency == ANOTE) {
        return 30000000;
      } else if (currency == AINT) {
        return 100000;
      }

      return 100000;
    }
  }]);

  return Wallet;
}();

var AHRK = "Gvs59WEEXVAQiRZwisUosG7fVNr8vnzS8mjkgqotrERT";
var AEUR = "Az4MsPQZn9RJm8adcya5RuztQ49rMGUW99Ebj56triWr";
var AINT = "4PVEMfdqhwzpLAQjqgQ1Sys9agqBxtP8QEnAthSrLPfF";
var ANOTE = "";
var AHRKDEC = 1000000;
var SATINBTC = 100000000;
var AHRKADDRESS = "3PPc3AP75DzoL8neS4e53tZ7ybUAVxk2jAb";
var AINTADDRESS = "3PBmmxKhFcDhb8PrDdCdvw2iGMPnp7VuwPy";
var activeScreen = "home"; // var mobileNodeUrl = "http://localhost:5001";

var mobileNodeUrl = "https://mobile.anote.digital";
var t;
var wallet = new Wallet(); // Button bindings

(0, _jquery.default)("#receive").on("click", function () {
  activeScreen = "receive";
  (0, _jquery.default)("#screen-home").fadeOut(function () {
    (0, _jquery.default)("#screen-receive").fadeIn();
  });
});
(0, _jquery.default)("#backFromReceive").on("click", function () {
  activeScreen = "home";
  (0, _jquery.default)("#screen-receive").fadeOut(function () {
    (0, _jquery.default)("#screen-home").fadeIn();
  });
});
(0, _jquery.default)("#send").on("click", function () {
  activeScreen = "send";
  wallet.updateAmount();
  (0, _jquery.default)("#screen-home").fadeOut(function () {
    (0, _jquery.default)("#screen-send").fadeIn();
  });
});
(0, _jquery.default)("#backFromSend").on("click", function () {
  activeScreen = "home";
  (0, _jquery.default)("#screen-send").fadeOut(function () {
    (0, _jquery.default)("#screen-home").fadeIn();
  });
});
(0, _jquery.default)("#addressBook").on("click", function () {
  activeScreen = "addressBook";
  (0, _jquery.default)("#screen-home").fadeOut(function () {
    (0, _jquery.default)("#screen-addressBook").fadeIn();
  });
});
(0, _jquery.default)("#backFromAddressBook").on("click", function () {
  activeScreen = "home";
  (0, _jquery.default)("#screen-addressBook").fadeOut(function () {
    (0, _jquery.default)("#screen-home").fadeIn();
  });
});
(0, _jquery.default)("#settings").on("click", function () {
  if (activeScreen != "home") {
    (0, _jquery.default)("#screen-" + activeScreen).fadeOut(function () {
      (0, _jquery.default)("#screen-settings").fadeIn();
      activeScreen = "settings";
    });
  } else {
    activeScreen = "settings";
    (0, _jquery.default)("#screen-home").fadeOut(function () {
      (0, _jquery.default)("#screen-settings").fadeIn();
    });
  }
});
(0, _jquery.default)("#tabButton1").on("click", function () {
  (0, _jquery.default)("#tabButton1").addClass("active");
  (0, _jquery.default)("#tabButton2").removeClass("active");
  (0, _jquery.default)("#tab2").hide();
  (0, _jquery.default)("#tab1").fadeIn();
});
(0, _jquery.default)("#tabButton2").on("click", function () {
  (0, _jquery.default)("#tabButton2").addClass("active");
  (0, _jquery.default)("#tabButton1").removeClass("active");
  (0, _jquery.default)("#tab1").hide();
  (0, _jquery.default)("#tab2").fadeIn();
});
(0, _jquery.default)("#tabButton3").on("click", function () {
  (0, _jquery.default)("#tabButton3").addClass("active");
  (0, _jquery.default)("#tabButton4").removeClass("active");
  (0, _jquery.default)("#tabButton5").removeClass("active");
  (0, _jquery.default)("#tab4").hide();
  (0, _jquery.default)("#tab5").hide();
  (0, _jquery.default)("#tab3").fadeIn();
});
(0, _jquery.default)("#tabButton4").on("click", function () {
  (0, _jquery.default)("#tabButton4").addClass("active");
  (0, _jquery.default)("#tabButton3").removeClass("active");
  (0, _jquery.default)("#tabButton5").removeClass("active");
  (0, _jquery.default)("#tab3").hide();
  (0, _jquery.default)("#tab5").hide();
  (0, _jquery.default)("#tab4").fadeIn();
});
(0, _jquery.default)("#tabButton5").on("click", function () {
  (0, _jquery.default)("#tabButton5").addClass("active");
  (0, _jquery.default)("#tabButton3").removeClass("active");
  (0, _jquery.default)("#tabButton4").removeClass("active");
  (0, _jquery.default)("#tab3").hide();
  (0, _jquery.default)("#tab4").hide();
  (0, _jquery.default)("#tab5").fadeIn();
});
(0, _jquery.default)("#backFromSettings").on("click", function () {
  activeScreen = "home";
  (0, _jquery.default)("#screen-settings").fadeOut(function () {
    (0, _jquery.default)("#screen-home").fadeIn();
  });
});
(0, _jquery.default)("#qrButton").on("click", function () {
  // activeScreen = "qr";
  // $("#screen-send").fadeOut(function(){
  //     $("#screen-qr").fadeIn(function() {
  //         wallet.qrscan();
  //     });
  // });
  wallet.qrscan();
});
(0, _jquery.default)("#backFromQR").on("click", function () {
  activeScreen = "home";
  (0, _jquery.default)("#screen-qr").fadeOut(function () {
    (0, _jquery.default)("#screen-home").fadeIn();
  });
});
(0, _jquery.default)("#buttonShowExisting").on("click", function () {
  (0, _jquery.default)("#newAccount").fadeOut(function () {
    (0, _jquery.default)("#existingAccount").fadeIn();
  });
});
(0, _jquery.default)("#buttonNewAccount").on("click", function () {
  (0, _jquery.default)("#existingAccount").fadeOut(function () {
    (0, _jquery.default)("#newAccount").fadeIn();
  });
});
(0, _jquery.default)("#buttonRegister").on("click", function () {
  wallet.register();
});
(0, _jquery.default)("#buttonImport").on("click", function () {
  wallet.import();
});
(0, _jquery.default)("#buttonLogin").on("click", function () {
  wallet.login();
});
(0, _jquery.default)("#loginForm").on("submit", function () {
  wallet.login();
});
(0, _jquery.default)("#buttonLogout").on("click", function () {
  wallet.logout();
});
(0, _jquery.default)("#buttonDeleteAccount").on("click", function () {
  wallet.deleteAccount();
});
(0, _jquery.default)("#buttonSend").on("click", function () {
  wallet.send();
});
(0, _jquery.default)("#buttonShowSeed").on("click", function () {
  wallet.showSeed();
});
(0, _jquery.default)("#buttonChangePass").on("click", function () {
  wallet.changePassword();
});
(0, _jquery.default)("#saveAdButton").on("click", function () {
  wallet.saveAd();
}); // $("#sendCurrency").on( "change", function() {
//     wallet.updateAmount();
//     wallet.updateFeeAmount();
// });

(0, _jquery.default)("#fromCurrency").on("change", function () {
  wallet.updateAmountExchange();
});
(0, _jquery.default)("#buttonCopy").on("click", function () {
  var address = (0, _jquery.default)("#address").val();
  (0, _copyToClipboard.default)(String(address));
  (0, _jquery.default)("#pMessage4").fadeIn(function () {
    setTimeout(function () {
      (0, _jquery.default)("#pMessage4").fadeOut();
    }, 500);
  });
});
(0, _jquery.default)("#buttonCopyReferral").on("click", function () {
  var link = (0, _jquery.default)("#referralLink").val();
  (0, _copyToClipboard.default)(String(link));
  (0, _jquery.default)("#pMessage13").fadeIn(function () {
    setTimeout(function () {
      (0, _jquery.default)("#pMessage13").fadeOut();
    }, 500);
  });
});
(0, _jquery.default)("#buttonSeedCopy").on("click", function () {
  var seed = (0, _jquery.default)("#seedWords2").val();
  (0, _copyToClipboard.default)(String(seed));
  (0, _jquery.default)("#pMessage5").fadeIn(function () {
    setTimeout(function () {
      (0, _jquery.default)("#pMessage5").fadeOut();
      (0, _jquery.default)("#seedWords2").val("");
      (0, _jquery.default)("#buttonSeedCopy").prop('disabled', true);
    }, 500);
  });
});
(0, _jquery.default)("#anoteButton").on("click", function () {
  wallet.selectedCurrency = ANOTE;
  (0, _jquery.default)("#dropdownMenuButton1").html("ANOTE");
  wallet.updateAmount();
});
(0, _jquery.default)("#aintButton").on("click", function () {
  wallet.selectedCurrency = AINT;
  (0, _jquery.default)("#dropdownMenuButton1").html("AINT");
  wallet.updateAmount();
});
(0, _jquery.default)("#buttonMine").on("click", function () {
  wallet.mine();
});

function createTranslation() {
  var lang = (0, _jquery.default)("#lang").val();

  _jquery.default.getJSON("locales/" + lang + ".json", function (data) {
    t = data.app;
    var page = wallet.getPage();
    (0, _jquery.default)("#page-loading").fadeOut(function () {
      (0, _jquery.default)("#page-" + page).fadeIn();
    });
  });
}

document.addEventListener('DOMContentLoaded', function (event) {
  createTranslation();
}); // Helper functions

function passwordsEqual(p1id, p2id, mid) {
  var p1 = (0, _jquery.default)("#" + p1id).val();
  var p2 = (0, _jquery.default)("#" + p2id).val();

  if (!p1 || !p2) {
    (0, _jquery.default)("#" + mid).html(t.bothPassRequired);
    (0, _jquery.default)("#" + mid).fadeIn();
    return false;
  }

  if (p1 == p2) {
    return true;
  } else {
    (0, _jquery.default)("#" + mid).html(t.passwordsDontMatch);
    (0, _jquery.default)("#" + mid).fadeIn();
    return false;
  }
}
},{"@waves/signer":"f9ON","@waves/waves-transactions":"ET8R","@waves/provider-seed":"AvNi","qrcode":"xCWZ","jquery":"juYr","regenerator-runtime/runtime.js":"QVnC","js-cookie":"PhdE","copy-to-clipboard":"xbqV"}]},{},["EVxB"], null)
//# sourceMappingURL=app.3acd6410.js.map